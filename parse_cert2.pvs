
parse_cert2 % parse a text file containing a certificate
		: THEORY
  BEGIN
  
%  IMPORTING PVSio@stdtokenizer
  IMPORTING PVSio@stdio
  IMPORTING PVSio@stdglobal

  get_file_name : string = 
  let file_name: string = query_line("PicoSAT proof file name: ") in
  if not fexists(file_name) then
   let dbg = print("no file") in
    throw ("e")
  else file_name
  endif
  
  pico_data: TYPE = [# max_lit: nat, 
   	       	       nr_clauses: nat, 
		       r_clause_list: list[list[int]], 
		       r_antec_list: list[list[nat]] #] 

  % stores the value returned by read_rec
  aux_fdata: Global[ pico_data, 
  	     	     (#max_lit:= 0, 
		      nr_clauses:= 0, 
		      r_clause_list:= null[list[int]], 
		      r_antec_list:= null[list[nat]]#)]

  % true if read_rec has been called once
  aux_bool: Global[bool, false]

  parse_file(s:string): pico_data

  % reads a file once and stores the result in aux_fdata
  read_rec : pico_data =
    %if bool set
  if val(aux_bool) 
    %return existing data
  then val(aux_fdata)
  else 
    let result = parse_file(get_file_name) in
    let s = set(aux_fdata, result) & set(aux_bool, true) in
    result
  endif

  %read the file
  fdata: pico_data = read_rec

  print_pico_data(p:pico_data) : void= 
    print(p`max_lit + " " + p`nr_clauses) 

  m: nat = fdata`max_lit + 1
  n: nat = fdata`nr_clauses
  rcl: list[list[int]] = fdata`r_clause_list
  ral: list[list[nat]] = fdata`r_antec_list
  qv: nat = 0

  IMPORTING trace_resolution2[m, n, n]

  %verify if l is a list of tr_literal
  lit_list?(l: list[int]): recursive bool = 
    if null?(l) 
    then 
      true
    else 
      car(l) /=0 and tr_literal?(car(l)) and lit_list?(cdr(l))
    endif
  measure length(l)


  %verify if l has type chain(nc)
  chain?(l:list[nat], nc: nat): recursive bool = 
    if null?(l) 
    then 
      true
    else 
      car(l) < nc and chain?(cdr(l), nc)
    endif
  measure length(l)

  empty_cert: certificate = 
  	      lambda (i:below(n)): (#cl := null, chn:= null #)

  % build a certificate
  build_cert( 
    pnc:{i:nat|i <= n}, 
    prcl: list[list[int]], 
    pral: list[list[nat]], 
    aux: certificate): recursive certificate = 

  if pnc = 0 or null?(prcl) or null?(pral) then 
    if pnc /= 0 or not null?(prcl) or not null?(pral) 
    then
      let dbg = print("aici") in 
      throw("e")  
    else let dbg = print("build_cert done") in aux 
    endif
  elsif lit_list?(car(prcl)) 
  	and sorted?(car(prcl)) 
	and chain?(car(pral), pnc-1) 
  then 
    let ch_pnc: chain(pnc-1) = car(pral) in
    build_cert( 
      pnc-1, 
      cdr(prcl), 
      cdr(pral), 
      aux with [(pnc-1) := (# cl:= car(prcl), 
      	       		      chn := ch_pnc #) ])	
  else 
    let dbg = print(lit_list?(car(prcl))+""+	
    	      	sorted?(car(prcl))+""+
		chain?(car(pral), pnc-1)+""+
		pnc) in 
    throw("e")
  endif
  measure pnc

  % true if the last resolution chain produces an empty clause
  verify: bool = 
  catch("e", 
        let cert = resolve(build_cert(n, rcl, ral, empty_cert)) in
          set(aux_bool, false) & 
          null?(cert(n-1)`cl), 
        lambda ( e:Exception[string]): 
	       print(
			tag(e)
			+ " exception: " 
			+ val(e) 
			+ " INVALID CERTIFICATE"))

  END parse_cert2
