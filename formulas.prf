(formulas
 (meaning_TCC1 0
  (meaning_TCC1-1 nil 3526049046 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(well_founded?[propform])" formulas nil)) nil))
 (meaning_TCC2 0
  (meaning_TCC2-1 nil 3526049046 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(well_founded?[propform])" formulas nil)) nil))
 (meaning_TCC3 0
  (meaning_TCC3-1 nil 3526230720 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(well_founded?[propform])" formulas nil)) nil))
 (meaning_TCC4 0
  (meaning_TCC4-1 nil 3526250082 ("" (termination-tcc) nil nil) nil
   nil))
 (FV_TCC1 0
  (FV_TCC1-1 nil 3526049046 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(well_founded?[propform])" formulas nil)) nil))
 (eqval_char 0
  (eqval_char-1 nil 3526049046
   ("" (induct "phi")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("phi!1" "phi!2"))
      (("2" (skosimp*)
        (("2" (inst -1 "eta1!1" "eta2!1")
          (("2" (inst -2 "eta1!1" "eta2!1") (("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp)
      (("3" (skosimp*)
        (("3" (inst -1 "eta1!1" "eta2!1")
          (("3" (expand "FV" :if-simplifies T)
            (("3" (expand "meaning" :if-simplifies T)
              (("3" (expand "eqval")
                (("3" (split -1)
                  (("1" (inst -2 "eta1!1" "eta2!1")
                    (("1" (split -2)
                      (("1" (replace -1 1)
                        (("1" (replace -2 1) (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (inst -3 "v!1") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind) nil nil))
    nil)
   ((propform type-decl nil formulas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (eqval const-decl "bool" formulas nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (propform_induction formula-decl nil formulas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil))
   shostak))
 (maxvar_char 0
  (maxvar_char-1 nil 3526237373
   ("" (induct-and-simplify "form") nil nil)
   ((propform type-decl nil formulas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (< const-decl "bool" reals nil)
    (maxvar def-decl "posnat" formulas nil)
    (propform_induction formula-decl nil formulas nil)
    (singleton const-decl "(singleton?)" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (union const-decl "set" sets nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil))
   shostak))
 (meaning_TCC5 0
  (meaning_TCC5-1 nil 3526250082 ("" (termination-tcc) nil nil) nil
   nil))
 (meaning_TCC6 0
  (meaning_TCC6-1 nil 3526250082 ("" (termination-tcc) nil nil) nil
   nil))
 (meaning_TCC7 0
  (meaning_TCC7-1 nil 3526250082 ("" (termination-tcc) nil nil) nil
   nil))
 (meaning_TCC8 0
  (meaning_TCC8-1 nil 3526250082 ("" (termination-tcc) nil nil) nil
   nil))
 (meaning_TCC9 0
  (meaning_TCC9-1 nil 3526250082 ("" (termination-tcc) nil nil) nil
   nil))
 (meaning_TCC10 0
  (meaning_TCC10-1 nil 3526250082 ("" (termination-tcc) nil nil) nil
   nil))
 (meaning_TCC11 0
  (meaning_TCC11-1 nil 3526250082 ("" (termination-tcc) nil nil) nil
   nil))
 (meaning_TCC12 0
  (meaning_TCC12-1 nil 3526250082 ("" (termination-tcc) nil nil) nil
   nil))
 (meaning_TCC13 0
  (meaning_TCC13-1 nil 3526305242 ("" (termination-tcc) nil nil) nil
   nil))
 (FV_TCC2 0
  (FV_TCC2-1 nil 3526250082 ("" (termination-tcc) nil nil) nil nil))
 (FV_TCC3 0
  (FV_TCC3-1 nil 3526250082 ("" (termination-tcc) nil nil) nil nil))
 (FV_TCC4 0
  (FV_TCC4-1 nil 3526250082 ("" (termination-tcc) nil nil) nil nil))
 (extform2propform_char 0
  (extform2propform_char-1 nil 3526323896
   ("" (induct-and-simplify "form")
    (("" (skolem 1 "e") (("" (induct-and-simplify "form") nil nil))
      nil))
    nil)
   ((extform type-decl nil formulas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (meaning def-decl "bool" formulas nil)
    (propform type-decl nil formulas nil)
    (meaning def-decl "bool" formulas nil)
    (extform2propform def-decl "propform" formulas nil)
    (extform_induction formula-decl nil formulas nil)
    (propneg const-decl "propform" formulas nil)
    (propand const-decl "propform" formulas nil)
    (propor const-decl "propform" formulas nil)
    (propimp const-decl "propform" formulas nil))
   shostak)))

