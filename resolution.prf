(resolution (index_TCC1 0
             (index_TCC1-1 nil 3482010882 3482191803
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              16 20 nil nil))
            (index_TCC2 0
             (index_TCC2-1 nil 3482010882 3482191803
              ("" (subtype-tcc) nil nil) unfinished
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              74 50 nil nil))
            (index_TCC3 0
             (index_TCC3-1 nil 3482010882 3482191803
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              19 20 nil nil))
            (index_TCC4 0
             (index_TCC4-1 nil 3482191174 3482191804
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              39 20 nil nil))
            (index_TCC5 0
             (index_TCC5-1 nil 3482191799 3482191804
              ("" (subtype-tcc) nil nil) unfinished nil 127 110 nil
              nil))
            (clause_rec?_TCC1 0
             (clause_rec?_TCC1-1 nil 3482191174 3482191804
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (>= const-decl "bool" reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (length def-decl "nat" list_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (prop_atom? const-decl "bool" resolution nil)
               (index const-decl "posnat" resolution nil))
              67 40 nil nil))
            (clause_rec_red 0
             (clause_rec_red-1 nil 3482191207 3482191444
              ("" (grind)
               (("" (case "null?(lAA!1)")
                 (("1" (grind) nil nil)
                  ("2" (expand clause_rec?)
                   (("2" (lift-if)
                     (("2" (replace 1)
                       (("2" (flatten)
                         (("2" (split)
                           (("1" (grind) nil nil)
                            ("2" (propax) nil nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (clause_rec? def-decl "bool" resolution nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (index const-decl "posnat" resolution nil)
               (prop_atom? const-decl "bool" resolution nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil) nil
               (literal? const-decl "bool" resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (>= const-decl "bool" reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil))
              237382 390 t shostak))
            (clause_prop_TCC1 0
             (clause_prop_TCC1-1 nil 3482191799 3482191804
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil))
              11 20 nil nil))
            (clause_prop_TCC2 0
             (clause_prop_TCC2-1 nil 3482191799 3482191804
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil))
              29 10 nil nil))
            (clause_prop 0
             (clause_prop-1 nil 3482192365 3482192814
              ("" (induct-and-simplify lAA)
               (("1" (lemma clause_rec_red)
                 (("1" (inst -1 "cons2_var!1" "index(cons1_var!1)" 0)
                   (("1" (delete -1)
                     (("1" (expand clause_rec?)
                       (("1" (lift-if) (("1" (assert) nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("2" (expand clause_rec? 1)
                 (("2" (lift-if)
                   (("2" (assert)
                     (("2" (split)
                       (("1" (propax) nil nil)
                        ("2" (flatten) (("2" (grind) nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((clause_rec_red formula-decl nil resolution nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (clause_rec? def-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (< const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (prop_atom? const-decl "bool" resolution nil)
               (IFF const-decl "[bool, bool -> bool]" booleans nil)
               (clause? const-decl "bool" resolution nil)
               (OR const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (fmla type-decl nil fmla nil)
               (list_induction formula-decl nil list_adt nil))
              449378 900 t shostak))
            (remove_TCC1 0
             (remove_TCC1-1 nil 3482010882 3482191804
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (replace -7 -3)
                   (("" (expand "clause_lit_list?" -3)
                     (("" (case "cons?(r!1)")
                       (("1" (grind) nil nil) ("2" (grind) nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished
              ((real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (index const-decl "posnat" resolution nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (literal? const-decl "bool" resolution nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              5 10 t nil))
            (remove_TCC2 0
             (remove_TCC2-1 nil 3482010882 3482191808
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (replace -6 -3)
                   (("" (expand "clause_lit_list?" -3)
                     (("" (case "cons?(r!1)")
                       (("1" (grind) nil nil) ("2" (grind) nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished
              ((real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (index const-decl "posnat" resolution nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (literal? const-decl "bool" resolution nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              3904 2480 t nil))
            (remove_TCC3 0
             (remove_TCC3-1 nil 3482010882 3482191809
              ("" (termination-tcc) nil nil) unfinished
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (length def-decl "nat" list_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (index const-decl "posnat" resolution nil))
              904 750 nil nil))
            (remove_TCC4 0
             (remove_TCC4-1 nil 3482010882 3482191809
              ("" (skolem-typepred)
               (("" (case "clause_lit_list?(v!1(lA!1, r!1))")
                 (("1" (flatten)
                   (("1" (case "cons?(v!1(lA!1, r!1))")
                     (("1" (postpone) nil nil) ("2" (grind) nil nil))
                     nil))
                   nil)
                  ("2" (grind) nil nil) ("3" (grind) nil nil))
                 nil))
               nil)
              unfinished nil 23 0 t nil))
            (remove_TCC5 0
             (remove_TCC5-1 nil 3482089105 3482191809
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (clause? const-decl "bool" resolution nil)
               (clause_rec? def-decl "bool" resolution nil)
               (length def-decl "nat" list_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (prop_atom? const-decl "bool" resolution nil)
               (index const-decl "posnat" resolution nil))
              129 110 nil nil))
            (remove_TCC6 0
             (remove_TCC6-1 nil 3482089105 3482191810
              ("" (subtype-tcc) nil nil) unfinished nil 1597 1350 nil
              nil))
            (strict_merge_TCC1 0
             (strict_merge_TCC1-1 nil 3482010882 3482191811
              ("" (subtype-tcc) nil nil) unfinished nil 363 290 nil
              nil))
            (strict_merge_TCC2 0
             (strict_merge_TCC2-1 nil 3482010882 3482191811
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (clause_rec? def-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil)
               (index const-decl "posnat" resolution nil))
              193 160 nil nil))
            (strict_merge_TCC3 0
             (strict_merge_TCC3-1 nil 3482010882 3482191811
              ("" (subtype-tcc) nil nil) unfinished nil 383 310 nil
              nil))
            (strict_merge_TCC4 0
             (strict_merge_TCC4-1 nil 3482010882 3482191812
              ("" (subtype-tcc) nil nil) unfinished nil 405 330 nil
              nil))
            (strict_merge_TCC5 0
             (strict_merge_TCC5-1 nil 3482010882 3482191812
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (clause_rec? def-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil)
               (index const-decl "posnat" resolution nil))
              203 180 nil nil))
            (strict_merge_TCC6 0
             (strict_merge_TCC6-1 nil 3482010882 3482191812
              ("" (subtype-tcc) nil nil) unfinished nil 414 330 nil
              nil))
            (strict_merge_TCC7 0
             (strict_merge_TCC7-1 nil 3482010882 3482191813
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (index const-decl "posnat" resolution nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (f_neg const-decl "fmla" fmla nil)
               (prop_atom? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil))
              252 190 nil nil))
            (strict_merge_TCC8 0
             (strict_merge_TCC8-1 nil 3482010882 3482191813
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (index const-decl "posnat" resolution nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (f_neg const-decl "fmla" fmla nil)
               (prop_atom? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil))
              251 230 nil nil))
            (strict_merge_TCC9 0
             (strict_merge_TCC9-1 nil 3482010882 3482191813
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (clause_rec? def-decl "bool" resolution nil)
               (f_neg const-decl "fmla" fmla nil)
               (prop_atom? const-decl "bool" resolution nil)
               (index const-decl "posnat" resolution nil))
              218 170 nil nil))
            (strict_merge_TCC10 0
             (strict_merge_TCC10-1 nil 3482010882 3482191813
              ("" (subtype-tcc) nil nil) unfinished nil 354 320 nil
              nil))
            (strict_merge_TCC11 0
             (strict_merge_TCC11-1 nil 3482010882 3482191814
              ("" (subtype-tcc) nil nil) unfinished nil 353 290 nil
              nil))
            (strict_merge_TCC12 0
             (strict_merge_TCC12-1 nil 3482010882 3482191814
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (clause_rec? def-decl "bool" resolution nil)
               (f_neg const-decl "fmla" fmla nil)
               (prop_atom? const-decl "bool" resolution nil)
               (index const-decl "posnat" resolution nil))
              218 190 nil nil))
            (strict_merge_TCC13 0
             (strict_merge_TCC13-1 nil 3482010882 3482191814
              ("" (subtype-tcc) nil nil) unfinished nil 363 290 nil
              nil))
            (good_indices?_TCC1 0
             (good_indices?_TCC1-1 nil 3482089105 3482191814
              ("" (subtype-tcc) nil nil) proved nil 9 0 nil nil))
            (good_indices?_TCC2 0
             (good_indices?_TCC2-1 nil 3482089105 3482191814
              ("" (termination-tcc) nil nil) proved
              ((real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (every adt-def-decl "boolean" list_adt nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              48 40 nil nil))
            (good_indices?_TCC3 0
             (good_indices?_TCC3-1 nil 3482089105 3482191814
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (>= const-decl "bool" reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (> const-decl "bool" reals nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (every adt-def-decl "boolean" list_adt nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil))
              62 50 nil nil))
            (fold_resolutions_TCC1 0
             (fold_resolutions_TCC1-1 nil 3482010882 3482191815
              ("" (subtype-tcc) nil nil) unfinished nil 130 120 nil
              nil))
            (fold_resolutions_TCC2 0
             (fold_resolutions_TCC2-1 nil 3482010882 3482191815
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (every adt-def-decl "boolean" list_adt nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil))
              77 40 nil nil))
            (create_clauses_TCC1 0
             (create_clauses_TCC1-1 nil 3481399109 3482191815
              ("" (subtype-tcc)
               (("" (expand length +)
                 (("" (assert)
                   (("" (lift-if)
                     (("" (split)
                       (("1" (flatten)
                         (("1" (assert)
                           (("1" (expand append)
                             (("1" (lift-if)
                               (("1"
                                 (split)
                                 (("1" (assert) nil nil)
                                  ("2"
                                   (flatten)
                                   (("2" (assert) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2" (flatten)
                         (("2" (expand good_indices -)
                           (("2" (assert)
                             (("2" (delete 1)
                               (("2"
                                 (expand append)
                                 (("2"
                                   (lift-if)
                                   (("2"
                                     (split)
                                     (("1"
                                       (flatten)
                                       (("1" (assert) nil nil))
                                       nil)
                                      ("2"
                                       (flatten)
                                       (("2"
                                         (assert)
                                         (("2"
                                           (lemma
                                            length_append
                                            (l1
                                             "cdr(context!1)"
                                             l2
                                             "cons(lst!1, null)"))
                                           (("2"
                                             (replace -1 2)
                                             (("2"
                                               (assert)
                                               (("2"
                                                 (expand length + 2)
                                                 (("2"
                                                   (assert)
                                                   (("2"
                                                     (expand
                                                      length
                                                      +
                                                      2)
                                                     (("2"
                                                       (assert)
                                                       (("2"
                                                         (hide -1)
                                                         (("2"
                                                           (expand
                                                            length
                                                            -)
                                                           (("2"
                                                             (propax)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished
              ((posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (length_append formula-decl nil list_props nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (null adt-constructor-decl "(null?)" list_adt nil)
               (append def-decl "list[T]" list_props nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (length def-decl "nat" list_props nil)
               (append_clause const-decl "clauses_list" resolution
                nil))
              230 190 t nil))
            (create_clauses_TCC2 0
             (create_clauses_TCC2-1 nil 3481399109 3482191815
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (every adt-def-decl "boolean" list_adt nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (good_indices? def-decl "bool" resolution nil)
               (length def-decl "nat" list_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil))
              81 40 nil nil))
            (create_clauses_TCC3 0
             (create_clauses_TCC3-1 nil 3481399109 3482191815
              ("" (subtype-tcc)
               (("1" (expand good_indices) (("1" (grind) nil nil)) nil)
                ("2" (grind) nil nil))
               nil)
              unfinished
              ((posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (> const-decl "bool" reals nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (length def-decl "nat" list_props nil))
              172 140 t nil))
            (create_clauses_TCC4 0
             (create_clauses_TCC4-1 nil 3481399109 3482191816
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (skolem-typepred)
                       (("" (flatten)
                         (("" (skolem-typepred)
                           (("" (flatten)
                             ((""
                               (lemma
                                map_length
                                (f
                                 "LAMBDA i: nth(context!1, i)"
                                 l
                                 "l!1"))
                               (("1"
                                 (expand length -1)
                                 (("1" (grind) nil nil))
                                 nil)
                                ("2" (grind) nil nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished
              ((real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (map_length formula-decl nil more_map_props nil)
               (< const-decl "bool" reals nil)
               (below type-eq-decl nil nat_types nil)
               (nth def-decl "T" list_props nil)
               (> const-decl "bool" reals nil)
               (length def-decl "nat" list_props nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (literal? const-decl "bool" resolution nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              529 430 t nil))
            (create_clauses_TCC5 0
             (create_clauses_TCC5-1 nil 3481399109 3482191817
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (skolem-typepred)
                       (("" (flatten)
                         (("" (skolem-typepred)
                           (("" (flatten)
                             (("" (skolem-typepred)
                               ((""
                                 (flatten)
                                 ((""
                                   (lemma
                                    map_length
                                    (f
                                     "LAMBDA i: nth(context!1, i)"
                                     l
                                     "l!1"))
                                   (("1"
                                     (expand map -1)
                                     (("1" (grind) nil nil))
                                     nil)
                                    ("2" (grind) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished
              ((real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (member def-decl "bool" list_props nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (null adt-constructor-decl "(null?)" list_adt nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (map_length formula-decl nil more_map_props nil)
               (< const-decl "bool" reals nil)
               (below type-eq-decl nil nat_types nil)
               (nth def-decl "T" list_props nil)
               (> const-decl "bool" reals nil)
               (length def-decl "nat" list_props nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (literal? const-decl "bool" resolution nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              1133 950 t nil))
            (create_clauses_TCC6 0
             (create_clauses_TCC6-1 nil 3481399109 3482191817
              ("" (termination-tcc) nil nil) unfinished
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (set type-eq-decl nil sets nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (clauses_list type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (length def-decl "nat" list_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil))
              591 490 nil nil))
            (create_clauses_TCC7 0
             (create_clauses_TCC7-1 nil 3481914562 3482191818
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (every adt-def-decl "boolean" list_adt nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (good_indices? def-decl "bool" resolution nil)
               (length def-decl "nat" list_props nil)
               (> const-decl "bool" reals nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil))
              163 120 nil nil))
            (execute_certificate_TCC1 0
             (execute_certificate_TCC1-1 nil 3482010882 3482191818
              ("" (subtype-tcc) nil nil) unfinished nil 14 10 nil nil))
            (unsat?_TCC1 0
             (unsat?_TCC1-1 nil 3482010882 3482191818
              ("" (subtype-tcc) nil nil) unfinished nil 42 20 nil nil))
            (unsat?_TCC2 0
             (unsat?_TCC2-1 nil 3482010882 3482191818
              ("" (subtype-tcc) nil nil) unfinished nil 119 110 nil
              nil))
            (list_to_or_TCC1 0
             (list_to_or_TCC1-1 nil 3482010882 3482191818
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (non_empty_clause_list? const-decl "bool" resolution
                nil))
              12 20 nil nil))
            (list_to_or_TCC2 0
             (list_to_or_TCC2-1 nil 3482010882 3482191818
              ("" (subtype-tcc) nil nil) unfinished nil 92 70 nil nil))
            (list_to_or_TCC3 0
             (list_to_or_TCC3-1 nil 3482010882 3482191818
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (non_empty_clause_list? const-decl "bool" resolution
                nil)
               (index const-decl "posnat" resolution nil)
               (clause_rec? def-decl "bool" resolution nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (length def-decl "nat" list_props nil)
               (prop_atom? const-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil))
              254 230 nil nil)))

