(resolution (literal_sentence 0
             (literal_sentence-1 nil 3482530864 3483295124
              ("" (skolem!)
               (("" (expand sentence?)
                 (("" (typepred lA!1)
                   (("" (expand literal?)
                     (("" (split -1)
                       (("1" (expand prop_atom?)
                         (("1" (expand freevars)
                           (("1" (lift-if)
                             (("1" (flatten)
                               (("1"
                                 (replace -1)
                                 (("1"
                                   (expand termvars)
                                   (("1"
                                     (lift-if)
                                     (("1"
                                       (typepred "args(lA!1)")
                                       (("1" (grind) nil nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2" (flatten)
                         (("2" (expand freevars)
                           (("2" (lift-if)
                             (("2" (assert)
                               (("2"
                                 (expand freevars)
                                 (("2"
                                   (lift-if)
                                   (("2"
                                     (expand prop_atom?)
                                     (("2"
                                       (flatten)
                                       (("2"
                                         (grind)
                                         (("2"
                                           (typepred "args(arg(lA!1))")
                                           (("2"
                                             (grind)
                                             (("2"
                                               (expand termvars)
                                               (("2"
                                                 (lift-if)
                                                 (("2"
                                                   (grind)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((sentence? const-decl "bool" fmla nil)
               (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla
                nil)
               (arg adt-accessor-decl "[(f_not?) -> fmla]" fmla nil)
               (prop_atom? const-decl "bool" resolution nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (number nonempty-type-decl nil numbers nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (term type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (length def-decl "nat" list_props nil)
               (atom? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
               (funpred type-decl nil funpred_adt nil)
               (arity shared-adt-accessor-decl "[funpred -> nat]"
                      funpred_adt nil)
               (pred? adt-def-decl "boolean" funpred_adt nil)
               (pred adt-accessor-decl "[(atom?) -> (pred?)]" fmla nil)
               (args adt-accessor-decl
                     "[d: (atom?) -> {ss: list[term] | length(ss) = arity(pred(d))}]"
                     fmla nil)
               (termvars def-decl "list[(var?)]" fmla nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil))
              188 160 t shostak))
            (literal_list_sentence_list 0
             (literal_list_sentence_list-1 nil 3482531212 3483295124
              ("" (induct lAA)
               (("1" (grind) nil nil)
                ("2" (skolem-typepred)
                 (("2" (flatten)
                   (("2" (expand sentence_list? 1)
                     (("2" (expand freevars 1)
                       (("2" (lemma literal_sentence)
                         (("2" (inst -1 cons1_var!1)
                           (("2" (expand sentence? -1)
                             (("2" (assert) (("2" (grind) nil nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((NOT const-decl "[bool -> bool]" booleans nil)
               (literal_sentence formula-decl nil resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (prop_atom? const-decl "bool" resolution nil)
               (append def-decl "list[T]" list_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (list_induction formula-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (literal? const-decl "bool" resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil))
              65 50 t shostak))
            (member_lit_member_fmla 0
             (member_lit_member_fmla-1 nil 3482787456 3483295124
              ("" (induct lAA)
               (("1" (grind) nil nil)
                ("2" (skolem-typepred)
                 (("2" (flatten)
                   (("2" (skolem-typepred)
                     (("2" (expand member 1 1)
                       (("2" (expand member 1 2)
                         (("2" (inst -4 lA!1) (("2" (grind) nil nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((NOT const-decl "[bool -> bool]" booleans nil)
               (list_induction formula-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (literal? const-decl "bool" resolution nil)
               (member def-decl "bool" list_props nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil))
              46 30 t shostak))
            (subset_lit_subset_fmla 0
             (subset_lit_subset_fmla-1 nil 3482806424 3483295124
              ("" (induct lAA)
               (("1" (grind) nil nil)
                ("2" (skolem-typepred)
                 (("2" (flatten)
                   (("2" (skolem-typepred)
                     (("2" (expand subset 1)
                       (("2" (inst -4 lBB!1)
                         (("2" (use member_lit_member_fmla)
                           (("2" (replace -1 1)
                             (("2" (replace -5 1)
                               (("2" (propax) nil nil)) nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((NOT const-decl "[bool -> bool]" booleans nil)
               (member_lit_member_fmla formula-decl nil resolution nil)
               (list_induction formula-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (literal? const-decl "bool" resolution nil)
               (subset def-decl "bool" minlist nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil))
              47 30 t shostak))
            (index_TCC1 0
             (index_TCC1-1 nil 3482010882 3483292710
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              37 10 nil nil))
            (index_TCC2 0
             (index_TCC2-1 nil 3482010882 3483292710
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (prop_atom? const-decl "bool" resolution nil))
              87 60 nil nil))
            (index_TCC3 0
             (index_TCC3-1 nil 3482010882 3483292710
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (prop_atom? const-decl "bool" resolution nil))
              25 20 nil nil))
            (index_TCC4 0
             (index_TCC4-1 nil 3482191174 3483292710
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (prop_atom? const-decl "bool" resolution nil))
              54 40 nil nil))
            (index_TCC5 0
             (index_TCC5-1 nil 3482191799 3483292710
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (prop_atom? const-decl "bool" resolution nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil))
              114 80 nil nil))
            (index_inj 0
             (index_inj-1 nil 3482502770 3483295125
              ("" (grind)
               (("1"
                 (case "(FORALL(a:(atom?)): a = atom(pred(a),args(a)))")
                 (("1"
                   (case "(FORALL(a:(atom?)): a = atom(pred(a),args(a)))")
                   (("1" (inst -1 lA!1)
                     (("1" (inst -2 lB!1)
                       (("1"
                         (case "(FORALL(p:(upred?)): p = upred(index(p),arity(p)))")
                         (("1" (inst-cp -1 "pred(lA!1)")
                           (("1" (inst -1 "pred(lB!1)")
                             (("1" (replace -1 -4)
                               (("1"
                                 (replace -2 -3)
                                 (("1"
                                   (replace -3 -13)
                                   (("1"
                                     (replace -4 -13)
                                     (("1"
                                       (assert)
                                       (("1"
                                         (replace -3 1)
                                         (("1"
                                           (replace -4 1)
                                           (("1"
                                             (replace -7 1)
                                             (("1"
                                               (replace -11 1)
                                               (("1"
                                                 (typepred
                                                  "args(lA!1)")
                                                 (("1"
                                                   (typepred
                                                    "args(lB!1)")
                                                   (("1"
                                                     (replace -9 -2)
                                                     (("1"
                                                       (replace -13 -1)
                                                       (("1"
                                                         (delete
                                                          -3
                                                          -4
                                                          -5
                                                          -6
                                                          -7
                                                          -8
                                                          -9
                                                          -10
                                                          -11
                                                          -12
                                                          -13
                                                          -14)
                                                         (("1"
                                                           (grind)
                                                           (("1"
                                                             (case
                                                              "index(pred(lA!1)) = index(pred(lB!1))")
                                                             (("1"
                                                               (replace
                                                                -1)
                                                               (("1"
                                                                 (grind)
                                                                 (("1"
                                                                   (case
                                                                    "args(lA!1)=null")
                                                                   (("1"
                                                                     (case
                                                                      "args(lB!1)=null")
                                                                     (("1"
                                                                       (replace
                                                                        -1
                                                                        1)
                                                                       (("1"
                                                                         (replace
                                                                          -2
                                                                          1)
                                                                         (("1"
                                                                           (propax)
                                                                           nil
                                                                           nil))
                                                                         nil))
                                                                       nil)
                                                                      ("2"
                                                                       (grind)
                                                                       nil
                                                                       nil))
                                                                     nil)
                                                                    ("2"
                                                                     (grind)
                                                                     nil
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil)
                                                              ("2"
                                                               (grind)
                                                               nil
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("2" (delete - 2)
                           (("2" (induct p)
                             (("1" (grind) nil nil)
                              ("2" (grind) nil nil)
                              ("3" (grind) nil nil)
                              ("4" (grind) nil nil)
                              ("5" (grind) nil nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil)
                    ("2" (propax) nil nil))
                   nil)
                  ("2" (delete - 2)
                   (("2" (induct a)
                     (("1" (grind) nil nil) ("2" (grind) nil nil)
                      ("3" (grind) nil nil) ("4" (grind) nil nil)
                      ("5" (grind) nil nil))
                     nil))
                   nil))
                 nil)
                ("2"
                 (case "(FORALL(a:(atom?)): a = atom(pred(a),args(a)))")
                 (("1" (inst-cp -1 "arg(lA!1)")
                   (("1" (inst -1 "arg(lB!1)")
                     (("1"
                       (case "(FORALL(p:(upred?)): p = upred(index(p),arity(p)))")
                       (("1" (inst-cp -1 "pred(arg(lA!1))")
                         (("1" (inst -1 "pred(arg(lB!1))")
                           (("1"
                             (case "(FORALL(f:(f_not?)): f = f_not(arg(f)))")
                             (("1" (inst-cp -1 lA!1)
                               (("1"
                                 (inst -1 lB!1)
                                 (("1"
                                   (replace -1 1)
                                   (("1"
                                     (replace -2 1)
                                     (("1"
                                       (replace -5 1)
                                       (("1"
                                         (replace -6 1)
                                         (("1"
                                           (replace -3 1)
                                           (("1"
                                             (replace -4 1)
                                             (("1"
                                               (replace -10)
                                               (("1"
                                                 (replace -15)
                                                 (("1"
                                                   (case
                                                    "index(pred(arg(lA!1))) = index(pred(arg(lB!1)))")
                                                   (("1"
                                                     (replace -1 1)
                                                     (("1"
                                                       (case
                                                        "args(arg(lA!1))=null")
                                                       (("1"
                                                         (case
                                                          "args(arg(lB!1))=null")
                                                         (("1"
                                                           (replace
                                                            -1
                                                            1)
                                                           (("1"
                                                             (replace
                                                              -2
                                                              1)
                                                             (("1"
                                                               (propax)
                                                               nil
                                                               nil))
                                                             nil))
                                                           nil)
                                                          ("2"
                                                           (delete
                                                            -1
                                                            -2
                                                            -3
                                                            -4
                                                            -5
                                                            -6
                                                            -7
                                                            -8
                                                            -9
                                                            -10
                                                            2)
                                                           (("2"
                                                             (delete
                                                              -1
                                                              -2
                                                              -3
                                                              -4
                                                              -5
                                                              -6
                                                              -8
                                                              -9)
                                                             (("2"
                                                               (typepred
                                                                "args(arg(lB!1))")
                                                               (("2"
                                                                 (grind)
                                                                 nil
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil)
                                                        ("2"
                                                         (delete
                                                          -1
                                                          -2
                                                          -3
                                                          -4
                                                          -5
                                                          -6
                                                          -8
                                                          -9)
                                                         (("2"
                                                           (delete
                                                            -1
                                                            -2
                                                            -4
                                                            -5
                                                            -6
                                                            -8
                                                            -9
                                                            2)
                                                           (("2"
                                                             (delete
                                                              -2
                                                              -3)
                                                             (("2"
                                                               (typepred
                                                                "args(arg(lA!1))")
                                                               (("2"
                                                                 (grind)
                                                                 nil
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil)
                                                    ("2"
                                                     (grind)
                                                     nil
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil)
                              ("2" (delete - 2)
                               (("2"
                                 (induct f)
                                 (("1" (grind) nil nil)
                                  ("2" (grind) nil nil)
                                  ("3" (grind) nil nil)
                                  ("4" (grind) nil nil)
                                  ("5" (grind) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2" (delete - 2)
                         (("2" (induct p)
                           (("1" (grind) nil nil) ("2" (grind) nil nil)
                            ("3" (grind) nil nil) ("4" (grind) nil nil)
                            ("5" (grind) nil nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil)
                  ("2" (delete - 2)
                   (("2" (induct a)
                     (("1" (grind) nil nil) ("2" (grind) nil nil)
                      ("3" (grind) nil nil) ("4" (grind) nil nil)
                      ("5" (grind) nil nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla
                nil)
               (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla
                nil)
               (arg adt-accessor-decl "[(f_not?) -> fmla]" fmla nil)
               (args adt-accessor-decl
                     "[d: (atom?) -> {ss: list[term] | length(ss) = arity(pred(d))}]"
                     fmla nil)
               (pred adt-accessor-decl "[(atom?) -> (pred?)]" fmla nil)
               (atom adt-constructor-decl
                     "[[pred: (pred?), {ss: list[term] | length(ss) = arity(pred)}] -> (atom?)]"
                     fmla nil)
               (arity shared-adt-accessor-decl "[funpred -> nat]"
                      funpred_adt nil)
               (length def-decl "nat" list_props nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (list type-decl nil list_adt nil)
               (term type-decl nil fmla nil)
               (pred? adt-def-decl "boolean" funpred_adt nil)
               (funpred type-decl nil funpred_adt nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (atom? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
               (upred? adt-recognizer-decl "[funpred -> boolean]"
                funpred_adt nil)
               (upred adt-constructor-decl "[[nat, nat] -> (upred?)]"
                funpred_adt nil)
               (index shared-adt-accessor-decl "[funpred -> nat]"
                      funpred_adt nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (null adt-constructor-decl "(null?)" list_adt nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (funpred_induction formula-decl nil funpred_adt nil)
               (fmla_induction formula-decl nil fmla nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (index const-decl "posnat" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              857 680 t shostak))
            (IMP_sortedlist_TCC1 0
             (IMP_sortedlist_TCC1-1 nil 3482519649 3483292712
              ("" (grind)
               (("1" (case "x1!1 = atom(pred(x1!1), null)")
                 (("1" (case "x2!1 = atom(pred(x2!1), null)")
                   (("1" (replace -1 -11)
                     (("1" (assert)
                       (("1"
                         (case "pred(x1!1) = upred(index(pred(x1!1)),0)")
                         (("1"
                           (case "pred(x2!1) = upred(index(pred(x2!1)),0)")
                           (("1" (replace -1 -13)
                             (("1" (assert) nil nil)) nil)
                            ("2" (replace -10 1 RL)
                             (("2"
                               (delete
                                2
                                -1
                                -2
                                -3
                                -4
                                -5
                                -6
                                -7
                                -8
                                -10
                                -11
                                -12)
                               (("2"
                                 (case
                                  "FORALL(p: (upred?)): p = upred(index(p),arity(p))")
                                 (("1" (inst -1 "pred(x2!1)") nil nil)
                                  ("2"
                                   (delete -1 2)
                                   (("2"
                                     (induct p)
                                     (("1" (grind) nil nil)
                                      ("2" (grind) nil nil)
                                      ("3" (grind) nil nil)
                                      ("4" (grind) nil nil)
                                      ("5" (grind) nil nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("2"
                           (case "FORALL(p: (upred?)): p = upred(index(p),arity(p))")
                           (("1" (inst -1 "pred(x1!1)")
                             (("1" (replace -6)
                               (("1" (propax) nil nil)) nil))
                             nil)
                            ("2" (delete - 2 3)
                             (("2" (induct p)
                               (("1" (grind) nil nil)
                                ("2" (grind) nil nil)
                                ("3" (grind) nil nil)
                                ("4" (grind) nil nil)
                                ("5" (grind) nil nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil)
                    ("2" (delete -1 -2 -3 -4 -5 -10 2)
                     (("2" (generalize x2!1 "x2")
                       (("1" (induct x2)
                         (("1" (grind) nil nil) ("2" (grind) nil nil)
                          ("3" (grind) nil nil) ("4" (grind) nil nil)
                          ("5" (grind) nil nil) ("6" (grind) nil nil))
                         nil)
                        ("2" (grind) nil nil))
                       nil))
                     nil)
                    ("3" (grind) nil nil))
                   nil)
                  ("2" (delete -5 -6 -7 -8 -9 2)
                   (("2" (generalize x1!1 "x1")
                     (("1" (induct x1)
                       (("1" (grind) nil nil) ("2" (grind) nil nil)
                        ("3" (grind) nil nil) ("4" (grind) nil nil)
                        ("5" (grind) nil nil) ("6" (grind) nil nil))
                       nil)
                      ("2" (grind) nil nil))
                     nil))
                   nil)
                  ("3" (grind) nil nil))
                 nil)
                ("2" (grind)
                 (("2"
                   (case "FORALL(p: (upred?)): p = upred(index(p),arity(p))")
                   (("1"
                     (case "FORALL(p: (upred?)): p = upred(index(p),arity(p))")
                     (("1" (inst -1 "pred(arg(x1!1))")
                       (("1" (inst -2 "pred(arg(x2!1))")
                         (("1" (replace -1 -13)
                           (("1" (assert)
                             (("1"
                               (case
                                "FORALL(f: (f_not?)): f = f_not(arg(f))")
                               (("1"
                                 (case
                                  "FORALL(f: (f_not?)): f = f_not(arg(f))")
                                 (("1"
                                   (inst -1 x1!1)
                                   (("1"
                                     (inst -2 x2!1)
                                     (("1"
                                       (replace -1 1)
                                       (("1"
                                         (replace -2 1)
                                         (("1"
                                           (assert)
                                           (("1"
                                             (case
                                              "FORALL(a: (atom?)): a = atom(pred(a), args(a))")
                                             (("1"
                                               (case
                                                "FORALL(a: (atom?)): a = atom(pred(a), args(a))")
                                               (("1"
                                                 (inst -1 "arg(x1!1)")
                                                 (("1"
                                                   (inst
                                                    -2
                                                    "arg(x2!1)")
                                                   (("1"
                                                     (case
                                                      "args(arg(x1!1)) = null")
                                                     (("1"
                                                       (case
                                                        "args(arg(x2!1)) = null")
                                                       (("1"
                                                         (replace
                                                          -1
                                                          -4)
                                                         (("1"
                                                           (replace
                                                            -2
                                                            -3)
                                                           (("1"
                                                             (replace
                                                              -3
                                                              1)
                                                             (("1"
                                                               (replace
                                                                -4
                                                                1)
                                                               (("1"
                                                                 (replace
                                                                  -7
                                                                  1)
                                                                 (("1"
                                                                   (replace
                                                                    -8
                                                                    1)
                                                                   (("1"
                                                                     (replace
                                                                      -12
                                                                      1)
                                                                     (("1"
                                                                       (replace
                                                                        -17
                                                                        1)
                                                                       (("1"
                                                                         (delete
                                                                          -1
                                                                          -2
                                                                          -3
                                                                          -4
                                                                          -5
                                                                          -6
                                                                          -7
                                                                          -8
                                                                          -9)
                                                                         (("1"
                                                                           (delete
                                                                            -1
                                                                            -2
                                                                            -3
                                                                            -4
                                                                            -5
                                                                            -6
                                                                            -7
                                                                            -8
                                                                            -9)
                                                                           (("1"
                                                                             (grind)
                                                                             nil
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil)
                                                        ("2"
                                                         (delete
                                                          -1
                                                          -2
                                                          -3
                                                          -4
                                                          -5
                                                          -6
                                                          -7
                                                          -8
                                                          -9
                                                          -10
                                                          -11
                                                          -12
                                                          -13
                                                          -14
                                                          -15
                                                          -17
                                                          2)
                                                         (("2"
                                                           (delete -2)
                                                           (("2"
                                                             (typepred
                                                              "args(arg(x2!1))")
                                                             (("2"
                                                               (grind)
                                                               nil
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil)
                                                      ("2"
                                                       (delete
                                                        -1
                                                        -2
                                                        -3
                                                        -4
                                                        -5
                                                        -6
                                                        -7
                                                        -8
                                                        -9
                                                        -11
                                                        -12
                                                        -13
                                                        -14
                                                        -15
                                                        -16
                                                        -17
                                                        2)
                                                       (("2"
                                                         (grind)
                                                         (("2"
                                                           (typepred
                                                            "args(arg(x1!1))")
                                                           (("2"
                                                             (grind)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil)
                                                ("2" (propax) nil nil))
                                               nil)
                                              ("2"
                                               (delete - 2)
                                               (("2"
                                                 (induct a)
                                                 (("1" (grind) nil nil)
                                                  ("2" (grind) nil nil)
                                                  ("3" (grind) nil nil)
                                                  ("4" (grind) nil nil)
                                                  ("5"
                                                   (grind)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil)
                                  ("2" (propax) nil nil))
                                 nil)
                                ("2"
                                 (delete - 2)
                                 (("2"
                                   (induct f)
                                   (("1" (grind) nil nil)
                                    ("2" (grind) nil nil)
                                    ("3" (grind) nil nil)
                                    ("4" (grind) nil nil)
                                    ("5" (grind) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil)
                      ("2" (propax) nil nil))
                     nil)
                    ("2" (delete - 2)
                     (("2" (induct p)
                       (("1" (grind) nil nil) ("2" (grind) nil nil)
                        ("3" (grind) nil nil) ("4" (grind) nil nil)
                        ("5" (grind) nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((args adt-accessor-decl
                     "[d: (atom?) -> {ss: list[term] | length(ss) = arity(pred(d))}]"
                     fmla nil)
               (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla
                nil)
               (null adt-constructor-decl "(null?)" list_adt nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (pred adt-accessor-decl "[(atom?) -> (pred?)]" fmla nil)
               (atom adt-constructor-decl
                     "[[pred: (pred?), {ss: list[term] | length(ss) = arity(pred)}] -> (atom?)]"
                     fmla nil)
               (atom? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
               (arity shared-adt-accessor-decl "[funpred -> nat]"
                      funpred_adt nil)
               (length def-decl "nat" list_props nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (list type-decl nil list_adt nil)
               (term type-decl nil fmla nil)
               (pred? adt-def-decl "boolean" funpred_adt nil)
               (funpred type-decl nil funpred_adt nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (OR const-decl "[bool, bool -> bool]" booleans nil)
               (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla
                nil)
               (arg adt-accessor-decl "[(f_not?) -> fmla]" fmla nil)
               (fmla_induction formula-decl nil fmla nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (> const-decl "bool" reals nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (upred? adt-recognizer-decl "[funpred -> boolean]"
                funpred_adt nil)
               (upred adt-constructor-decl "[[nat, nat] -> (upred?)]"
                funpred_adt nil)
               (index shared-adt-accessor-decl "[funpred -> nat]"
                      funpred_adt nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (funpred_induction formula-decl nil funpred_adt nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (injective? const-decl "bool" functions nil)
               (index const-decl "posnat" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              1530 1190 t nil))
            (clause_prop_TCC1 0
             (clause_prop_TCC1-1 nil 3482191799 3483292712
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil))
              11 20 nil nil))
            (clause_prop_TCC2 0
             (clause_prop_TCC2-1 nil 3482191799 3483292712
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil))
              29 10 nil nil))
            (clause_prop 0
             (clause_prop-1 nil 3482192365 3483295125
              ("" (induct-and-simplify lAA) nil nil) proved
              ((cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (< const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (prop_atom? const-decl "bool" resolution nil)
               (IFF const-decl "[bool, bool -> bool]" booleans nil)
               (clause? const-decl "bool" resolution nil)
               (OR const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (fmla type-decl nil fmla nil)
               (list_induction formula-decl nil list_adt nil)
               (sorted? def-decl "bool" sortedlist nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil))
              563 460 t shostak))
            (sorted_clause 0
             (sorted_clause-1 nil 3482850413 3483295125
              ("" (use sorted_clause)
               (("" (skolem!)
                 (("" (flatten)
                   (("" (skolem!)
                     (("" (flatten)
                       (("" (inst -1 e!1 lAA!1)
                         (("1" (replace -3)
                           (("1" (replace -4) (("1" (propax) nil nil))
                             nil))
                           nil)
                          ("2" (expand clause?)
                           (("2" (propax) nil nil)) nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((lAA!1 skolem-const-decl "list[(literal?)]" resolution
                nil)
               (sorted? def-decl "bool" sortedlist nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (clause? const-decl "bool" resolution nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (literal? const-decl "bool" resolution nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (fmla type-decl nil fmla nil)
               (sorted_clause formula-decl nil sortedlist nil))
              173 160 t shostak))
            (clause_implies_no_duplicates 0
             (clause_implies_no_duplicates-1 nil 3482852746 3483295126
              ("" (induct lAA)
               (("1" (grind) nil nil)
                ("2" (skolem-typepred)
                 (("2" (flatten)
                   (("2" (expand no_duplicates? 1)
                     (("2" (expand setlist? 1)
                       (("2" (split 1)
                         (("1" (lemma clause_prop)
                           (("1"
                             (inst -1 "cons(cons1_var!1, cons2_var!1)")
                             (("1" (replace -6)
                               (("1"
                                 (flatten)
                                 (("1"
                                   (assert)
                                   (("1"
                                     (split -1)
                                     (("1" (grind) nil nil)
                                      ("2"
                                       (flatten)
                                       (("2"
                                         (replace -2)
                                         (("2"
                                           (lemma sorted_clause)
                                           (("2"
                                             (inst
                                              -1
                                              "cons(cons1_var!1, cons2_var!1)")
                                             (("2"
                                               (assert)
                                               (("2"
                                                 (inst -1 cons1_var!1)
                                                 (("2"
                                                   (replace -4)
                                                   (("2"
                                                     (grind)
                                                     nil
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("2" (lemma clause_prop)
                           (("2"
                             (inst -1 "cons(cons1_var!1, cons2_var!1)")
                             (("2" (replace -5)
                               (("2"
                                 (flatten)
                                 (("2"
                                   (assert)
                                   (("2"
                                     (split -1)
                                     (("1" (grind) nil nil)
                                      ("2"
                                       (flatten)
                                       (("2"
                                         (replace -2)
                                         (("2"
                                           (expand no_duplicates?)
                                           (("2" (propax) nil nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((NOT const-decl "[bool -> bool]" booleans nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (member def-decl "bool" list_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (prop_atom? const-decl "bool" resolution nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (nnint_times_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (even_times_int_is_even application-judgement "even_int"
                integers nil)
               (mult_divides1 application-judgement "(divides(n))"
                divides nil)
               (mult_divides2 application-judgement "(divides(m))"
                divides nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (sorted_clause formula-decl nil resolution nil)
               (clause_prop formula-decl nil resolution nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (sorted? def-decl "bool" sortedlist nil)
               (setlist? def-decl "bool" minlist nil)
               (list_induction formula-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (literal? const-decl "bool" resolution nil)
               (no_duplicates? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil))
              282 230 t shostak))
            (include_clause_TCC1 0
             (include_clause_TCC1-1 nil 3482270929 3483292712
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil))
              26 10 nil nil))
            (include_clause_TCC2 0
             (include_clause_TCC2-1 nil 3482270929 3483292712
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil))
              12 10 nil nil))
            (nclause2fmla_TCC1 0
             (nclause2fmla_TCC1-1 nil 3482270929 3483292712
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (nclause? const-decl "bool" resolution nil))
              26 10 nil nil))
            (nclause2fmla_TCC2 0
             (nclause2fmla_TCC2-1 nil 3482270929 3483292712
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (use clause_prop)
                   (("" (replace -3)
                     (("" (flatten)
                       (("" (split -1)
                         (("1" (grind) nil nil) ("2" (propax) nil nil)
                          ("3" (flatten)
                           (("3" (replace -2)
                             (("3" (expand nclause? 2)
                               (("3" (assert) nil nil)) nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((sorted? def-decl "bool" sortedlist nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (index const-decl "posnat" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (clause_prop formula-decl nil resolution nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (every adt-def-decl "boolean" list_adt nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              87 70 t nil))
            (nclause2fmla_TCC3 0
             (nclause2fmla_TCC3-1 nil 3482270929 3483292712
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (nclause? const-decl "bool" resolution nil)
               (length def-decl "nat" list_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil))
              39 40 nil nil))
            (nclause2fmla_sentence 0
             (nclause2fmla_sentence-1 nil 3482531702 3483295126
              ("" (induct nclAA)
               (("1" (grind) nil nil) ("2" (grind) nil nil)
                ("3" (grind) nil nil)
                ("4" (skolem-typepred)
                 (("4" (flatten)
                   (("4" (expand nclause2fmla 1)
                     (("4" (split 1)
                       (("1" (flatten)
                         (("1" (lemma literal_sentence)
                           (("1" (inst -1 cons1_var!1) nil nil)) nil))
                         nil)
                        ("2" (flatten)
                         (("2" (expand sentence? 2)
                           (("2" (expand freevars 2)
                             (("2" (use literal_sentence)
                               (("2"
                                 (expand sentence? -1)
                                 (("2"
                                   (lemma clause_prop)
                                   (("2"
                                     (inst
                                      -1
                                      "cons(cons1_var!1, cons2_var!1)")
                                     (("2"
                                       (flatten)
                                       (("2"
                                         (hide -2)
                                         (("2"
                                           (replace -6)
                                           (("2"
                                             (split -1)
                                             (("1" (grind) nil nil)
                                              ("2" (grind) nil nil)
                                              ("3"
                                               (flatten)
                                               (("3"
                                                 (assert)
                                                 (("3"
                                                   (expand nclause? -6)
                                                   (("3"
                                                     (expand
                                                      sentence?
                                                      -6)
                                                     (("3"
                                                       (grind)
                                                       nil
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((NOT const-decl "[bool -> bool]" booleans nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (prop_atom? const-decl "bool" resolution nil)
               (append def-decl "list[T]" list_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (clause_prop formula-decl nil resolution nil)
               (literal_sentence formula-decl nil resolution nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (sorted? def-decl "bool" sortedlist nil)
               (list_induction formula-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (literal? const-decl "bool" resolution nil)
               (nclause2fmla def-decl "fmla" resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil))
              263 240 t shostak))
            (clause_sentence_list 0
             (clause_sentence_list-1 nil 3482270948 3483295126
              ("" (use literal_list_sentence_list)
               (("" (skolem!) (("" (inst -1 clAA!1) nil nil)) nil))
               nil)
              proved
              ((clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (literal_list_sentence_list formula-decl nil resolution
                nil))
              91 70 t shostak))
            (or_reduction_TCC1 0
             (or_reduction_TCC1-1 nil 3482275916 3483292712
              ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved
              ((sentence_list? const-decl "bool" fmla nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (every adt-def-decl "boolean" list_adt nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              31 10 t nil))
            (or_reduction_TCC2 0
             (or_reduction_TCC2-1 nil 3482275916 3483292712
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (nclause? const-decl "bool" resolution nil))
              12 10 nil nil))
            (or_reduction_TCC3 0
             (or_reduction_TCC3-1 nil 3482275916 3483292712
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (use literal_list_sentence_list)
                   (("" (use nclause2fmla_sentence)
                     (("" (grind) nil nil)) nil))
                   nil))
                 nil))
               nil)
              proved
              ((nclause2fmla_sentence formula-decl nil resolution nil)
               (nclause? const-decl "bool" resolution nil)
               (append def-decl "list[T]" list_props nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (sentence_list? const-decl "bool" fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (literal_list_sentence_list formula-decl nil resolution
                nil)
               (clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (every adt-def-decl "boolean" list_adt nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              119 100 t nil))
            (not_or_reduction_TCC1 0
             (not_or_reduction_TCC1-1 nil 3482275916 3483292712
              ("" (subtype-tcc)
               (("" (use nclause2fmla_sentence) (("" (grind) nil nil))
                 nil))
               nil)
              proved
              ((nclause2fmla_sentence formula-decl nil resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (prop_atom? const-decl "bool" resolution nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (sorted? def-decl "bool" sortedlist nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (append def-decl "list[T]" list_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (nclause? const-decl "bool" resolution nil)
               (sentence_list? const-decl "bool" fmla nil))
              113 90 t nil))
            (offset_proof_step_TCC1 0
             (offset_proof_step_TCC1-1 nil 3482700134 3483292712
              ("" (subtype-tcc)
               (("" (grind)
                 ((""
                   (use every_forall
                        ("P"
                         "LAMBDA (x: numfield):real_pred(x) AND rational_pred(x) AND integer_pred(x) AND x >= 0"
                         "l"
                         "map[nat, numfield](LAMBDA (j: nat): j + n!1)(ps!1`subs)"))
                   (("" (replace -1)
                     (("" (hide -1)
                       (("" (skolem-typepred)
                         (("" (flatten)
                           (("" (generalize "ps!1`subs" l)
                             (("" (induct l)
                               (("1" (grind) nil nil)
                                ("2"
                                 (skolem-typepred)
                                 (("2"
                                   (flatten)
                                   (("2"
                                     (expand map -5)
                                     (("2"
                                       (expand member -5)
                                       (("2"
                                         (split -5)
                                         (("1" (assert) nil nil)
                                          ("2" (assert) nil nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (member def-decl "bool" list_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (list_induction formula-decl nil list_adt nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (proof_step type-eq-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (map adt-def-decl "list[T1]" list_adt_map nil)
               (every adt-def-decl "boolean" list_adt nil)
               (list type-decl nil list_adt nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (PRED type-eq-decl nil defined_types nil)
               (every_forall formula-decl nil minlist nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (>= const-decl "bool" reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil))
              219 130 t nil))
            (ax_proof_step_TCC1 0
             (ax_proof_step_TCC1-1 nil 3482715509 3483292712
              ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved
              ((sentence_list? const-decl "bool" fmla nil)
               (append def-decl "list[T]" list_props nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              15 20 t nil))
            (concl_ax_TCC1 0
             (concl_ax_TCC1-1 nil 3482714865 3483292712
              ("" (grind) nil nil) proved
              ((every adt-def-decl "boolean" list_adt nil)) 25 0 t
              nil))
            (RR_ax_TCC1 0
             (RR_ax_TCC1-1 nil 3482715509 3483292712
              ("" (cond-coverage-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (< const-decl "bool" reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil naturalnumbers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil))
              30 20 nil nil))
            (lemma_ax 0
             (lemma_ax-1 nil 3482714966 3483295127
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (split)
                   (("1" (grind) nil nil)
                    ("2" (expand checkProof)
                     (("2" (skolem-typepred)
                       (("2" (split)
                         (("1" (grind) nil nil) ("2" (grind) nil nil)
                          ("3" (flatten)
                           (("3" (expand RR_ax -2)
                             (("3" (case "i!1=0")
                               (("1" (grind) nil nil)
                                ("2"
                                 (case "i!1=1")
                                 (("1" (grind) nil nil)
                                  ("2" (grind) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("4" (flatten)
                           (("4" (case "i!1=1")
                             (("1" (grind) nil nil)
                              ("2" (case "i!1=0")
                               (("1" (grind) nil nil)
                                ("2" (grind) nil nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((checkProof const-decl "bool" proof nil)
               (two_premise? adt-def-decl "boolean" proof nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (one_premise? adt-def-decl "boolean" proof nil)
               (member def-decl "bool" list_props nil)
               (ax_rule? const-decl "bool" sequents nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (subset def-decl "bool" minlist nil)
               (subset_rule? const-decl "bool" sequents nil)
               (below type-eq-decl nil naturalnumbers nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (> const-decl "bool" reals nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (< const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (ax_proof_step const-decl "proof_step" resolution nil)
               (concl_ax const-decl "proof_step" resolution nil)
               (RR_ax const-decl "ne_proof_seq" resolution nil)
               (conclusion const-decl "sequent" proof nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (sentence_list? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence? const-decl "bool" fmla nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              729 630 t shostak))
            (concl_norr_TCC1 0
             (concl_norr_TCC1-1 nil 3482700134 3483292712
              ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved
              ((append def-decl "list[T]" list_props nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (sentence_list? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence? const-decl "bool" fmla nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              19 20 t nil))
            (concl_norr_TCC2 0
             (concl_norr_TCC2-1 nil 3482700134 3483292712
              ("" (subtype-tcc) nil nil) proved nil 19 10 nil nil))
            (concl_norr_TCC3 0
             (concl_norr_TCC3-1 nil 3482700134 3483292713
              ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved
              ((every adt-def-decl "boolean" list_adt nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (int_plus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (> const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (sentence_list? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence? const-decl "bool" fmla nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              67 40 t nil))
            (RR_norr_TCC1 0
             (RR_norr_TCC1-1 nil 3482700134 3483292713
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              91 70 nil nil))
            (RR_norr_TCC2 0
             (RR_norr_TCC2-1 nil 3482700134 3483292713
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (minus_odd_is_odd application-judgement "odd_int"
                integers nil))
              163 140 nil nil))
            (RR_norr_TCC3 0
             (RR_norr_TCC3-1 nil 3482700134 3483292713
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              111 70 nil nil))
            (RR_norr_TCC4 0
             (RR_norr_TCC4-1 nil 3482700134 3483292713
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              99 80 nil nil))
            (RR_norr_TCC5 0
             (RR_norr_TCC5-1 nil 3482700134 3483292713
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              111 70 nil nil))
            (RR_norr_TCC6 0
             (RR_norr_TCC6-1 nil 3482700134 3483292713
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              99 80 nil nil))
            (RR_norr_TCC7 0
             (RR_norr_TCC7-1 nil 3482700134 3483292713
              ("" (cond-disjoint-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              233 170 nil nil))
            (RR_norr_TCC8 0
             (RR_norr_TCC8-1 nil 3482700134 3483292714
              ("" (cond-coverage-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              153 120 nil nil))
            (RR_norr_TCC9 0
             (RR_norr_TCC9-1 nil 3482700134 3483292714
              ("" (subtype-tcc) nil nil) proved
              ((posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              28 30 nil nil))
            (lemma_norr 0
             (lemma_norr-1 nil 3482705990 3483295143
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (split)
                   (("1" (grind) nil nil)
                    ("2" (expand checkProof 1)
                     (("2" (expand RR_norr 1)
                       (("2" (skolem-typepred)
                         (("2" (expand RR_norr -1)
                           (("2" (case "i!1 < RR1!1`length")
                             (("1" (expand checkProof -10)
                               (("1"
                                 (inst -10 i!1)
                                 (("1" (grind) nil nil))
                                 nil))
                               nil)
                              ("2"
                               (case
                                "i!1 < RR1!1`length + RR2!1`length")
                               (("1"
                                 (expand checkProof)
                                 (("1"
                                   (inst -11 "i!1 - RR1!1`length")
                                   (("1" (grind) nil nil)
                                    ("2"
                                     (hide 3)
                                     (("2" (grind) nil nil))
                                     nil))
                                   nil))
                                 nil)
                                ("2"
                                 (case
                                  "i!1 = RR1!1`length + RR2!1`length")
                                 (("1" (grind) nil nil)
                                  ("2" (grind) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((checkProof const-decl "bool" proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (< const-decl "bool" reals nil)
               (i!1 skolem-const-decl
                "below(RR_norr(sA!1, sB!1, sAA!1, RR1!1, RR2!1)`length)"
                resolution nil)
               (RR2!1 skolem-const-decl "ne_proof_seq" resolution nil)
               (RR1!1 skolem-const-decl "ne_proof_seq" resolution nil)
               (sAA!1 skolem-const-decl "(sentence_list?)" resolution
                nil)
               (sB!1 skolem-const-decl "(sentence?)" resolution nil)
               (sA!1 skolem-const-decl "(sentence?)" resolution nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (empty_seq const-decl "finseq" finite_sequences nil)
               (one_premise? adt-def-decl "boolean" proof nil)
               (two_premise? adt-def-decl "boolean" proof nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (- const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (freesymbols def-decl "list[(usymb?)]" fmla nil)
               (freesymbols def-decl "list[(usymb?)]" fmla nil)
               (finseq_appl const-decl "[below[length(fs)] -> T]"
                finite_sequences nil)
               (reflex_rule? const-decl "bool" sequents nil)
               (refl_equality? const-decl "bool" sequents nil)
               (nth def-decl "T" list_props nil)
               (equality? const-decl "bool" sequents nil)
               (pschema_rule? const-decl "bool" sequents nil)
               (fschema_rule? const-decl "bool" sequents nil)
               (forall_rule? const-decl "bool" sequents nil)
               (f_neg const-decl "fmla" fmla nil)
               (exists_rule? const-decl "bool" sequents nil)
               (cut_rule? const-decl "bool" sequents nil)
               (neg_rule? const-decl "bool" sequents nil)
               (nor_rule? const-decl "bool" sequents nil)
               (or_rule? const-decl "bool" sequents nil)
               (subset? const-decl "bool" sets nil)
               (add const-decl "(nonempty?)" sets nil)
               (member const-decl "bool" sets nil)
               (list2set def-decl "set[T]" list2set nil)
               (subset_rule? const-decl "bool" sequents nil)
               (ax_rule? const-decl "bool" sequents nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (subset_is_partial_order name-judgement
                "(partial_order?[set[T]])" sets_lemmas nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (map adt-def-decl "list[T1]" list_adt_map nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (offset_proof_step const-decl "proof_step" resolution
                nil)
               (concl_norr const-decl "proof_step" resolution nil)
               (RR_norr const-decl "ne_proof_seq" resolution nil)
               (conclusion const-decl "sequent" proof nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (sentence_list? const-decl "bool" fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (fmla type-decl nil fmla nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (list type-decl nil list_adt nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (> const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              16429 14390 t shostak))
            (concl_orr_TCC1 0
             (concl_orr_TCC1-1 nil 3482700134 3483292714
              ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved
              ((append def-decl "list[T]" list_props nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (sentence_list? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence? const-decl "bool" fmla nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              33 10 t nil))
            (concl_orr_TCC2 0
             (concl_orr_TCC2-1 nil 3482700134 3483292714
              ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved
              ((every adt-def-decl "boolean" list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence? const-decl "bool" fmla nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              31 30 t nil))
            (RR_orr_TCC1 0
             (RR_orr_TCC1-1 nil 3482700134 3483292714
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              55 30 nil nil))
            (RR_orr_TCC2 0
             (RR_orr_TCC2-1 nil 3482700134 3483292714
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              43 30 nil nil))
            (RR_orr_TCC3 0
             (RR_orr_TCC3-1 nil 3482700134 3483292714
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              55 30 nil nil))
            (RR_orr_TCC4 0
             (RR_orr_TCC4-1 nil 3482700134 3483292714
              ("" (cond-disjoint-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              82 50 nil nil))
            (RR_orr_TCC5 0
             (RR_orr_TCC5-1 nil 3482700134 3483292714
              ("" (cond-coverage-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              82 70 nil nil))
            (RR_orr_TCC6 0
             (RR_orr_TCC6-1 nil 3482700134 3483292714
              ("" (subtype-tcc) nil nil) proved nil 5 0 nil nil))
            (lemma_orr 0
             (lemma_orr-1 nil 3482704894 3483295146
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (split)
                   (("1" (grind) nil nil)
                    ("2" (expand checkProof 1)
                     (("2" (skolem-typepred)
                       (("2" (expand RR_orr -1)
                         (("2" (case "i!1 < RR1!1`length")
                           (("1" (expand RR_orr +)
                             (("1" (assert)
                               (("1"
                                 (expand concl_orr +)
                                 (("1"
                                   (expand checkProof -8)
                                   (("1"
                                     (inst -8 i!1)
                                     (("1" (grind) nil nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil)
                            ("2" (case "i!1 = RR1!1`length")
                             (("1" (grind) nil nil)
                              ("2" (grind) nil nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((checkProof const-decl "bool" proof nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (subset_is_partial_order name-judgement
                "(partial_order?[set[T]])" sets_lemmas nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (- const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (one_premise? adt-def-decl "boolean" proof nil)
               (two_premise? adt-def-decl "boolean" proof nil)
               (finseq_appl const-decl "[below[length(fs)] -> T]"
                finite_sequences nil)
               (empty_seq const-decl "finseq" finite_sequences nil)
               (reflex_rule? const-decl "bool" sequents nil)
               (refl_equality? const-decl "bool" sequents nil)
               (nth def-decl "T" list_props nil)
               (equality? const-decl "bool" sequents nil)
               (pschema_rule? const-decl "bool" sequents nil)
               (fschema_rule? const-decl "bool" sequents nil)
               (forall_rule? const-decl "bool" sequents nil)
               (f_neg const-decl "fmla" fmla nil)
               (exists_rule? const-decl "bool" sequents nil)
               (cut_rule? const-decl "bool" sequents nil)
               (neg_rule? const-decl "bool" sequents nil)
               (nor_rule? const-decl "bool" sequents nil)
               (or_rule? const-decl "bool" sequents nil)
               (subset? const-decl "bool" sets nil)
               (add const-decl "(nonempty?)" sets nil)
               (member const-decl "bool" sets nil)
               (list2set def-decl "set[T]" list2set nil)
               (subset_rule? const-decl "bool" sequents nil)
               (ax_rule? const-decl "bool" sequents nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (below type-eq-decl nil naturalnumbers nil)
               (< const-decl "bool" reals nil)
               (concl_orr const-decl "proof_step" resolution nil)
               (RR_orr const-decl "ne_proof_seq" resolution nil)
               (conclusion const-decl "sequent" proof nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (sentence_list? const-decl "bool" fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (fmla type-decl nil fmla nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (list type-decl nil list_adt nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (> const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              2756 2470 t shostak))
            (concl_subsetr_TCC1 0
             (concl_subsetr_TCC1-1 nil 3482804991 3483292714
              ("" (subtype-tcc) nil nil) proved nil 4 10 nil nil))
            (concl_subsetr_TCC2 0
             (concl_subsetr_TCC2-1 nil 3482804991 3483292714
              ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved
              ((every adt-def-decl "boolean" list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              14 10 t nil))
            (RR_subsetr_TCC1 0
             (RR_subsetr_TCC1-1 nil 3482804991 3483292714
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              55 30 nil nil))
            (RR_subsetr_TCC2 0
             (RR_subsetr_TCC2-1 nil 3482804991 3483292714
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              40 20 nil nil))
            (RR_subsetr_TCC3 0
             (RR_subsetr_TCC3-1 nil 3482804991 3483292714
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              39 20 nil nil))
            (RR_subsetr_TCC4 0
             (RR_subsetr_TCC4-1 nil 3482804991 3483292714
              ("" (cond-disjoint-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              79 60 nil nil))
            (RR_subsetr_TCC5 0
             (RR_subsetr_TCC5-1 nil 3482804991 3483292714
              ("" (cond-coverage-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              66 60 nil nil))
            (RR_subsetr_TCC6 0
             (RR_subsetr_TCC6-1 nil 3482804991 3483292714
              ("" (subtype-tcc) nil nil) proved nil 19 0 nil nil))
            (lemma_subsetr 0
             (lemma_subsetr-1 nil 3482703868 3483295148
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (split)
                   (("1" (grind) nil nil)
                    ("2" (expand checkProof 1)
                     (("2" (skolem-typepred)
                       (("2" (expand RR_subsetr -1)
                         (("2" (case "i!1 < RR1!1`length")
                           (("1" (expand checkProof)
                             (("1" (inst -8 i!1)
                               (("1"
                                 (expand RR_subsetr 1)
                                 (("1" (grind) nil nil))
                                 nil))
                               nil))
                             nil)
                            ("2" (case "i!1 = RR1!1`length")
                             (("1" (replace -1)
                               (("1"
                                 (expand RR_subsetr 2)
                                 (("1"
                                   (assert)
                                   (("1"
                                     (expand concl_subsetr)
                                     (("1"
                                       (expand conclusion -7)
                                       (("1"
                                         (replace -7)
                                         (("1"
                                           (split 2)
                                           (("1" (grind) nil nil)
                                            ("2"
                                             (expand subset_rule? 1)
                                             (("2" (propax) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil)
                              ("2" (assert) nil nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((checkProof const-decl "bool" proof nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (one_premise? adt-def-decl "boolean" proof nil)
               (two_premise? adt-def-decl "boolean" proof nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (finseq_appl const-decl "[below[length(fs)] -> T]"
                finite_sequences nil)
               (empty_seq const-decl "finseq" finite_sequences nil)
               (reflex_rule? const-decl "bool" sequents nil)
               (refl_equality? const-decl "bool" sequents nil)
               (nth def-decl "T" list_props nil)
               (equality? const-decl "bool" sequents nil)
               (pschema_rule? const-decl "bool" sequents nil)
               (fschema_rule? const-decl "bool" sequents nil)
               (forall_rule? const-decl "bool" sequents nil)
               (f_neg const-decl "fmla" fmla nil)
               (exists_rule? const-decl "bool" sequents nil)
               (cut_rule? const-decl "bool" sequents nil)
               (sentence? const-decl "bool" fmla nil)
               (neg_rule? const-decl "bool" sequents nil)
               (nor_rule? const-decl "bool" sequents nil)
               (or_rule? const-decl "bool" sequents nil)
               (subset? const-decl "bool" sets nil)
               (add const-decl "(nonempty?)" sets nil)
               (member const-decl "bool" sets nil)
               (list2set def-decl "set[T]" list2set nil)
               (subset_rule? const-decl "bool" sequents nil)
               (ax_rule? const-decl "bool" sequents nil)
               (sAA!1 skolem-const-decl "(sentence_list?)" resolution
                nil)
               (sBB!1 skolem-const-decl "(sentence_list?)" resolution
                nil)
               (RR1!1 skolem-const-decl "ne_proof_seq" resolution nil)
               (i!1 skolem-const-decl
                "below(RR_subsetr(sAA!1, sBB!1, RR1!1)`length)"
                resolution nil)
               (below type-eq-decl nil naturalnumbers nil)
               (< const-decl "bool" reals nil)
               (concl_subsetr const-decl "proof_step" resolution nil)
               (RR_subsetr const-decl "ne_proof_seq" resolution nil)
               (conclusion const-decl "sequent" proof nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (sentence_list? const-decl "bool" fmla nil)
               (fmla type-decl nil fmla nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (list type-decl nil list_adt nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (> const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              2515 2250 t shostak))
            (concl_negr_TCC1 0
             (concl_negr_TCC1-1 nil 3482764722 3483292714
              ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved
              ((freevars def-decl "list[(var?)]" fmla nil)
               (append def-decl "list[T]" list_props nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (sentence_list? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence? const-decl "bool" fmla nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              16 20 t nil))
            (RR_negr_TCC1 0
             (RR_negr_TCC1-1 nil 3482804991 3483292714
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              54 30 nil nil))
            (RR_negr_TCC2 0
             (RR_negr_TCC2-1 nil 3482804991 3483292714
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              40 30 nil nil))
            (RR_negr_TCC3 0
             (RR_negr_TCC3-1 nil 3482804991 3483292714
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              54 30 nil nil))
            (RR_negr_TCC4 0
             (RR_negr_TCC4-1 nil 3482804991 3483292715
              ("" (cond-disjoint-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              66 40 nil nil))
            (RR_negr_TCC5 0
             (RR_negr_TCC5-1 nil 3482804991 3483292715
              ("" (cond-coverage-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              80 50 nil nil))
            (RR_negr_TCC6 0
             (RR_negr_TCC6-1 nil 3482804991 3483292715
              ("" (subtype-tcc) nil nil) proved nil 6 10 nil nil))
            (lemma_negr 0
             (lemma_negr-1 nil 3482764774 3483295152
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (split)
                   (("1" (grind) nil nil)
                    ("2" (expand checkProof 1)
                     (("2" (skolem-typepred)
                       (("2" (expand RR_negr -1)
                         (("2" (case "i!1 < RR1!1`length")
                           (("1" (expand checkProof)
                             (("1" (inst -7 i!1)
                               (("1" (grind) nil nil)) nil))
                             nil)
                            ("2" (case "i!1 = RR1!1`length")
                             (("1" (grind) nil nil)
                              ("2" (grind) nil nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((checkProof const-decl "bool" proof nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (subset_is_partial_order name-judgement
                "(partial_order?[set[T]])" sets_lemmas nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (- const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (ax_rule? const-decl "bool" sequents nil)
               (subset_rule? const-decl "bool" sequents nil)
               (list2set def-decl "set[T]" list2set nil)
               (member const-decl "bool" sets nil)
               (add const-decl "(nonempty?)" sets nil)
               (subset? const-decl "bool" sets nil)
               (or_rule? const-decl "bool" sequents nil)
               (nor_rule? const-decl "bool" sequents nil)
               (neg_rule? const-decl "bool" sequents nil)
               (cut_rule? const-decl "bool" sequents nil)
               (exists_rule? const-decl "bool" sequents nil)
               (f_neg const-decl "fmla" fmla nil)
               (forall_rule? const-decl "bool" sequents nil)
               (fschema_rule? const-decl "bool" sequents nil)
               (pschema_rule? const-decl "bool" sequents nil)
               (equality? const-decl "bool" sequents nil)
               (nth def-decl "T" list_props nil)
               (refl_equality? const-decl "bool" sequents nil)
               (reflex_rule? const-decl "bool" sequents nil)
               (empty_seq const-decl "finseq" finite_sequences nil)
               (finseq_appl const-decl "[below[length(fs)] -> T]"
                finite_sequences nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (two_premise? adt-def-decl "boolean" proof nil)
               (one_premise? adt-def-decl "boolean" proof nil)
               (sA!1 skolem-const-decl "(sentence?)" resolution nil)
               (sAA!1 skolem-const-decl "(sentence_list?)" resolution
                nil)
               (RR1!1 skolem-const-decl "ne_proof_seq" resolution nil)
               (i!1 skolem-const-decl
                "below(RR_negr(sA!1, sAA!1, RR1!1)`length)" resolution
                nil)
               (below type-eq-decl nil naturalnumbers nil)
               (< const-decl "bool" reals nil)
               (concl_negr const-decl "proof_step" resolution nil)
               (RR_negr const-decl "ne_proof_seq" resolution nil)
               (conclusion const-decl "sequent" proof nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (sentence_list? const-decl "bool" fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (fmla type-decl nil fmla nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (list type-decl nil list_adt nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (> const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              3637 2480 t shostak))
            (concl_cutr_TCC1 0
             (concl_cutr_TCC1-1 nil 3483233453 3483292715
              ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved
              ((every adt-def-decl "boolean" list_adt nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (int_plus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (> const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (sentence_list? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence? const-decl "bool" fmla nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              64 40 t nil))
            (RR_cutr_TCC1 0
             (RR_cutr_TCC1-1 nil 3483233453 3483292715
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              88 70 nil nil))
            (RR_cutr_TCC2 0
             (RR_cutr_TCC2-1 nil 3483233453 3483292715
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (minus_odd_is_odd application-judgement "odd_int"
                integers nil))
              160 120 nil nil))
            (RR_cutr_TCC3 0
             (RR_cutr_TCC3-1 nil 3483233453 3483292715
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              95 80 nil nil))
            (RR_cutr_TCC4 0
             (RR_cutr_TCC4-1 nil 3483233453 3483292715
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              98 80 nil nil))
            (RR_cutr_TCC5 0
             (RR_cutr_TCC5-1 nil 3483233453 3483292715
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              108 60 nil nil))
            (RR_cutr_TCC6 0
             (RR_cutr_TCC6-1 nil 3483233453 3483292715
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              99 60 nil nil))
            (RR_cutr_TCC7 0
             (RR_cutr_TCC7-1 nil 3483233453 3483292716
              ("" (cond-disjoint-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              229 160 nil nil))
            (RR_cutr_TCC8 0
             (RR_cutr_TCC8-1 nil 3483233453 3483292716
              ("" (cond-coverage-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              136 120 nil nil))
            (RR_cutr_TCC9 0
             (RR_cutr_TCC9-1 nil 3483233453 3483292716
              ("" (subtype-tcc) nil nil) proved
              ((posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              41 30 nil nil))
            (lemma_cutr 0
             (lemma_cutr-1 nil 3483233915 3483295167
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (split)
                   (("1" (expand RR_cutr)
                     (("1" (expand conclusion)
                       (("1" (expand concl_cutr)
                         (("1" (propax) nil nil)) nil))
                       nil))
                     nil)
                    ("2" (expand checkProof 1)
                     (("2" (skolem-typepred)
                       (("2" (expand RR_cutr -1)
                         (("2" (expand RR_cutr 1)
                           (("2" (lift-if 1)
                             (("2" (split 1)
                               (("1"
                                 (flatten)
                                 (("1"
                                   (expand checkProof -9)
                                   (("1"
                                     (inst -9 i!1)
                                     (("1" (grind) nil nil))
                                     nil))
                                   nil))
                                 nil)
                                ("2"
                                 (flatten)
                                 (("2"
                                   (split 2)
                                   (("1"
                                     (flatten)
                                     (("1"
                                       (expand checkProof -10)
                                       (("1"
                                         (inst
                                          -10
                                          "i!1 - RR1!1`length ")
                                         (("1" (grind) nil nil)
                                          ("2" (grind) nil nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2"
                                     (flatten)
                                     (("2"
                                       (case
                                        "i!1 = RR1!1`length + RR2!1`length")
                                       (("1"
                                         (replace -1)
                                         (("1"
                                           (assert)
                                           (("1"
                                             (expand concl_cutr)
                                             (("1"
                                               (expand cut_rule?)
                                               (("1"
                                                 (expand conclusion -7)
                                                 (("1"
                                                   (replace -7)
                                                   (("1"
                                                     (expand
                                                      conclusion
                                                      -8)
                                                     (("1"
                                                       (expand
                                                        offset_proof_step)
                                                       (("1"
                                                         (replace -8)
                                                         (("1"
                                                           (expand
                                                            subset?)
                                                           (("1"
                                                             (split 2)
                                                             (("1"
                                                               (skolem-typepred)
                                                               (("1"
                                                                 (grind)
                                                                 nil
                                                                 nil))
                                                               nil)
                                                              ("2"
                                                               (skolem-typepred)
                                                               (("2"
                                                                 (grind)
                                                                 nil
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil)
                                        ("2" (grind) nil nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((checkProof const-decl "bool" proof nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (map adt-def-decl "list[T1]" list_adt_map nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (i!1 skolem-const-decl
                "below(RR_cutr(sA!1, sAA!1, RR1!1, RR2!1)`length)"
                resolution nil)
               (RR2!1 skolem-const-decl "ne_proof_seq" resolution nil)
               (RR1!1 skolem-const-decl "ne_proof_seq" resolution nil)
               (sAA!1 skolem-const-decl "(sentence_list?)" resolution
                nil)
               (sA!1 skolem-const-decl "(sentence?)" resolution nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (empty_seq const-decl "finseq" finite_sequences nil)
               (one_premise? adt-def-decl "boolean" proof nil)
               (two_premise? adt-def-decl "boolean" proof nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (- const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (freesymbols def-decl "list[(usymb?)]" fmla nil)
               (freesymbols def-decl "list[(usymb?)]" fmla nil)
               (finseq_appl const-decl "[below[length(fs)] -> T]"
                finite_sequences nil)
               (reflex_rule? const-decl "bool" sequents nil)
               (refl_equality? const-decl "bool" sequents nil)
               (nth def-decl "T" list_props nil)
               (equality? const-decl "bool" sequents nil)
               (pschema_rule? const-decl "bool" sequents nil)
               (fschema_rule? const-decl "bool" sequents nil)
               (forall_rule? const-decl "bool" sequents nil)
               (f_neg const-decl "fmla" fmla nil)
               (exists_rule? const-decl "bool" sequents nil)
               (cut_rule? const-decl "bool" sequents nil)
               (neg_rule? const-decl "bool" sequents nil)
               (nor_rule? const-decl "bool" sequents nil)
               (or_rule? const-decl "bool" sequents nil)
               (subset? const-decl "bool" sets nil)
               (add const-decl "(nonempty?)" sets nil)
               (member const-decl "bool" sets nil)
               (list2set def-decl "set[T]" list2set nil)
               (subset_rule? const-decl "bool" sequents nil)
               (ax_rule? const-decl "bool" sequents nil)
               (offset_proof_step const-decl "proof_step" resolution
                nil)
               (below type-eq-decl nil naturalnumbers nil)
               (< const-decl "bool" reals nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (RR_cutr const-decl "ne_proof_seq" resolution nil)
               (concl_cutr const-decl "proof_step" resolution nil)
               (conclusion const-decl "sequent" proof nil)
               (sentence_list? const-decl "bool" fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (fmla type-decl nil fmla nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (list type-decl nil list_adt nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (> const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              15050 13850 t shostak))
            (RR_lemma1_TCC1 0
             (RR_lemma1_TCC1-1 nil 3482803452 3483292716
              ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved
              ((freevars def-decl "list[(var?)]" fmla nil)
               (append def-decl "list[T]" list_props nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (sentence_list? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence? const-decl "bool" fmla nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              17 20 t nil))
            (lemma1 0
             (lemma1-1 nil 3482523174 3483295167
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (split)
                   (("1" (grind) nil nil)
                    ("2" (use lemma_ax)
                     (("2" (delete -1)
                       (("2" (expand RR_lemma1)
                         (("2" (use lemma_ax)
                           (("2" (expand member -1 2)
                             (("2" (expand member -1 1)
                               (("2" (assert) nil nil)) nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((lemma_ax formula-decl nil resolution nil)
               (member def-decl "bool" list_props nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla
                nil)
               (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla
                nil)
               (ax_proof_step const-decl "proof_step" resolution nil)
               (concl_ax const-decl "proof_step" resolution nil)
               (RR_ax const-decl "ne_proof_seq" resolution nil)
               (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
               (conclusion const-decl "sequent" proof nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (sentence_list? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (sentence? const-decl "bool" fmla nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              71 60 t shostak))
            (RR_lemma2_TCC1 0
             (RR_lemma2_TCC1-1 nil 3483221655 3483292716
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil))
              30 20 nil nil))
            (RR_lemma2_TCC2 0
             (RR_lemma2_TCC2-1 nil 3483221655 3483292716
              ("" (induct sAA)
               (("1" (grind) nil nil)
                ("2" (flatten)
                 (("2" (skolem-typepred)
                   (("2" (flatten)
                     (("2" (expand append 3)
                       (("2" (expand sentence_list?)
                         (("2" (expand freevars 3)
                           (("2" (expand freevars 3 2)
                             (("2" (use literal_sentence)
                               (("2" (grind) nil nil)) nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("3" (skolem-typepred)
                 (("3" (flatten)
                   (("3" (skolem-typepred)
                     (("3" (flatten)
                       (("3" (expand append 3)
                         (("3" (expand sentence_list?)
                           (("3" (expand freevars -4)
                             (("3" (expand freevars 3)
                               (("3"
                                 (assert)
                                 (("3"
                                   (case
                                    "null?(freevars(cons2_var!1))")
                                   (("1"
                                     (assert)
                                     (("1"
                                       (inst -4 clBB!1)
                                       (("1" (assert) nil nil))
                                       nil))
                                     nil)
                                    ("2"
                                     (delete -1 -2 -3 2 3 4)
                                     (("2"
                                       (grind)
                                       (("2"
                                         (case
                                          "FORALL(l1, l2: list[(var?)]): null?(append(l1, l2)) => null?(l2)")
                                         (("1"
                                           (inst
                                            -1
                                            "freevars(cons1_var!1)"
                                            "freevars(cons2_var!1)")
                                           (("1" (assert) nil nil))
                                           nil)
                                          ("2"
                                           (delete -1 2)
                                           (("2"
                                             (induct l1)
                                             (("1" (grind) nil nil)
                                              ("2"
                                               (skolem-typepred)
                                               (("2"
                                                 (flatten)
                                                 (("2"
                                                   (skolem-typepred)
                                                   (("2"
                                                     (expand append 1)
                                                     (("2"
                                                       (propax)
                                                       nil
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("4" (grind) nil nil) ("5" (grind) nil nil))
               nil)
              proved
              ((freevars def-decl "list[(var?)]" fmla nil)
               (var? adt-recognizer-decl "[term -> boolean]" fmla nil)
               (term type-decl nil fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (literal_sentence formula-decl nil resolution nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (list_induction formula-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (null adt-constructor-decl "(null?)" list_adt nil)
               (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (append def-decl "list[T]" list_props nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
               (list type-decl nil list_adt nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (sentence_list? const-decl "bool" fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil))
              404 270 t nil))
            (RR_lemma2_TCC3 0
             (RR_lemma2_TCC3-1 nil 3483221655 3483292716
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (use clause_prop) (("" (assert) nil nil)) nil))
                 nil))
               nil)
              proved
              ((real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (clause_prop formula-decl nil resolution nil)
               (clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (sentence_list? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              77 60 t nil))
            (RR_lemma2_TCC4 0
             (RR_lemma2_TCC4-1 nil 3483221655 3483292716
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (length def-decl "nat" list_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil))
              61 50 nil nil))
            (RR_lemma2_TCC5 0
             (RR_lemma2_TCC5-1 nil 3483221655 3483295020
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (use literal_sentence)
                       (("" (expand or_reduction 3)
                         (("" (assert)
                           (("" (use nclause2fmla_sentence)
                             ((""
                               (use
                                append_assoc
                                (l1
                                 sAA!1
                                 l2
                                 "cons(car(clBB!1), null)"
                                 l3
                                 "cons(nclause2fmla(cdr[((literal?))](clBB!1)),
                               null)"))
                               ((""
                                 (replace -1)
                                 ((""
                                   (expand append 3 2)
                                   ((""
                                     (expand append 3 2)
                                     ((""
                                       (expand sentence_list?)
                                       ((""
                                         (case
                                          "FORALL(l1, l2: list[fmla]): freevars(append(l1,l2)) = append(freevars(l1),freevars(l2))")
                                         (("1"
                                           (inst
                                            -1
                                            sAA!1
                                            "cons(car(clBB!1),
                                 cons(nclause2fmla
                                      (cdr[((literal?))](clBB!1)),
                                      null))")
                                           (("1"
                                             (replace -1)
                                             (("1" (grind) nil nil))
                                             nil))
                                           nil)
                                          ("2"
                                           (delete - 2 3 4)
                                           (("2"
                                             (induct l1)
                                             (("1" (grind) nil nil)
                                              ("2"
                                               (skolem-typepred)
                                               (("2"
                                                 (flatten)
                                                 (("2"
                                                   (skolem-typepred)
                                                   (("2"
                                                     (expand
                                                      append
                                                      1
                                                      1)
                                                     (("2"
                                                       (expand
                                                        freevars
                                                        1
                                                        1)
                                                       (("2"
                                                         (expand
                                                          freevars
                                                          1
                                                          3)
                                                         (("2"
                                                           (inst
                                                            -1
                                                            l2!1)
                                                           (("2"
                                                             (replace
                                                              -1)
                                                             (("2"
                                                               (use
                                                                append_assoc
                                                                (l1
                                                                 "freevars(cons1_var!1)"
                                                                 l2
                                                                 "freevars(cons2_var!1)"
                                                                 l3
                                                                 "freevars(l2!1)"))
                                                               (("2"
                                                                 (assert)
                                                                 nil
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (sentence_list? const-decl "bool" fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (literal_sentence formula-decl nil resolution nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nclause2fmla def-decl "fmla" resolution nil)
               (null adt-constructor-decl "(null?)" list_adt nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (append_assoc formula-decl nil list_props nil)
               (append def-decl "list[T]" list_props nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (list_induction formula-decl nil list_adt nil)
               (sentence? const-decl "bool" fmla nil)
               (prop_atom? const-decl "bool" resolution nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (sorted? def-decl "bool" sortedlist nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (var? adt-recognizer-decl "[term -> boolean]" fmla nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (term type-decl nil fmla nil)
               (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
               (nclause? const-decl "bool" resolution nil)
               (nclause2fmla_sentence formula-decl nil resolution nil)
               (or_reduction const-decl "sequent" resolution nil))
              309697 420 t nil))
            (RR_lemma2_TCC6 0
             (RR_lemma2_TCC6-1 nil 3483221655 3483295085
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (use clause_prop)
                       (("" (assert)
                         (("" (flatten)
                           (("" (assert)
                             (("" (expand nclause?)
                               (("" (propax) nil nil)) nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nclause? const-decl "bool" resolution nil)
               (clause_prop formula-decl nil resolution nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (> const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (sentence_list? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              53109 120 t nil))
            (RR_lemma2_TCC7 0
             (RR_lemma2_TCC7-1 nil 3483221655 3483292717
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (expand or_reduction)
                       (("" (assert)
                         (("" (use nclause2fmla_sentence)
                           (("" (use literal_sentence)
                             (("" (expand sentence_list?)
                               ((""
                                 (use
                                  append_assoc
                                  (l1
                                   "sAA!1"
                                   l2
                                   "cons[((literal?))]
                                   (car[((literal?))](clBB!1),
                                    null[((literal?))])"
                                   l3
                                   "cons(nclause2fmla(cdr[((literal?))](clBB!1)),
                               null)"))
                                 ((""
                                   (replace -1)
                                   ((""
                                     (expand append 3 2)
                                     ((""
                                       (expand append 3 2)
                                       ((""
                                         (case
                                          "FORALL(l1, l2: list[fmla]): freevars(append(l1, l2)) = append(freevars(l1), freevars(l2))")
                                         (("1"
                                           (inst
                                            -1
                                            "sAA!1"
                                            "cons(car[((literal?))](clBB!1),
                                 cons(nclause2fmla
                                      (cdr[((literal?))](clBB!1)),
                                      null))")
                                           (("1"
                                             (replace -1 3)
                                             (("1" (grind) nil nil))
                                             nil))
                                           nil)
                                          ("2"
                                           (delete - 2 3 4)
                                           (("2"
                                             (induct l1)
                                             (("1" (grind) nil nil)
                                              ("2"
                                               (skolem-typepred)
                                               (("2"
                                                 (flatten)
                                                 (("2"
                                                   (skolem-typepred)
                                                   (("2"
                                                     (expand
                                                      append
                                                      1
                                                      1)
                                                     (("2"
                                                       (expand
                                                        freevars
                                                        1
                                                        1)
                                                       (("2"
                                                         (expand
                                                          freevars
                                                          1
                                                          3)
                                                         (("2"
                                                           (use
                                                            append_assoc
                                                            (l1
                                                             "freevars(cons1_var!1)"
                                                             l2
                                                             "freevars(cons2_var!1)"
                                                             l3
                                                             "freevars(l2!1)"))
                                                           (("2"
                                                             (replace
                                                              -1)
                                                             (("2"
                                                               (inst
                                                                -2
                                                                l2!1)
                                                               (("2"
                                                                 (assert)
                                                                 nil
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((nclause2fmla_sentence formula-decl nil resolution nil)
               (nclause? const-decl "bool" resolution nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
               (term type-decl nil fmla nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (var? adt-recognizer-decl "[term -> boolean]" fmla nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (append def-decl "list[T]" list_props nil)
               (sentence? const-decl "bool" fmla nil)
               (prop_atom? const-decl "bool" resolution nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (sorted? def-decl "bool" sortedlist nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (list_induction formula-decl nil list_adt nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (append_assoc formula-decl nil list_props nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (null adt-constructor-decl "(null?)" list_adt nil)
               (nclause2fmla def-decl "fmla" resolution nil)
               (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
               (literal_sentence formula-decl nil resolution nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (> const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (sentence_list? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              436 320 t nil))
            (RR_lemma2_TCC8 0
             (RR_lemma2_TCC8-1 nil 3483230586 3483292717
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (skolem-typepred)
                       (("" (flatten)
                         (("" (use literal_sentence) nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((literal_sentence formula-decl nil resolution nil)
               (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (> const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (sentence_list? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              87 60 t nil))
            (RR_lemma2_TCC9 0
             (RR_lemma2_TCC9-1 nil 3483230586 3483292717
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (skolem-typepred)
                       (("" (flatten)
                         (("" (use nclause2fmla_sentence) nil nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((nclause2fmla_sentence formula-decl nil resolution nil)
               (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (nclause? const-decl "bool" resolution nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (> const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (sentence_list? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              85 80 t nil))
            (RR_lemma2_TCC10 0
             (RR_lemma2_TCC10-1 nil 3483230586 3483292718
              ("" (skolem-typepred)
               (("" (use nclause2fmla_sentence)
                 (("1" (flatten)
                   (("1" (skolem-typepred)
                     (("1" (flatten)
                       (("1" (skolem-typepred)
                         (("1" (flatten)
                           (("1" (skolem-typepred)
                             (("1" (flatten)
                               (("1"
                                 (expand sentence_list?)
                                 (("1"
                                   (case
                                    "FORALL(l1, l2: list[fmla]): freevars(append(l1, l2)) = append(freevars(l1), freevars(l2))")
                                   (("1"
                                     (inst
                                      -1
                                      sAA!1
                                      "or_reduction(clBB!1)")
                                     (("1"
                                       (replace -1)
                                       (("1"
                                         (expand or_reduction)
                                         (("1"
                                           (assert)
                                           (("1"
                                             (use
                                              nclause2fmla_sentence)
                                             (("1"
                                               (lemma
                                                nclause2fmla_sentence)
                                               (("1"
                                                 (inst -1 clBB!1)
                                                 (("1"
                                                   (grind)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2"
                                     (delete - 2 3 4)
                                     (("2"
                                       (induct l1)
                                       (("1" (grind) nil nil)
                                        ("2"
                                         (skolem-typepred)
                                         (("2"
                                           (flatten)
                                           (("2"
                                             (skolem-typepred)
                                             (("2"
                                               (expand append 1 1)
                                               (("2"
                                                 (expand freevars 1 1)
                                                 (("2"
                                                   (expand
                                                    freevars
                                                    1
                                                    3)
                                                   (("2"
                                                     (use
                                                      append_assoc
                                                      (l1
                                                       "freevars(cons1_var!1)"
                                                       l2
                                                       "freevars(cons2_var!1)"
                                                       l3
                                                       "freevars(l2!1)"))
                                                     (("2"
                                                       (replace -1)
                                                       (("2"
                                                         (inst -2 l2!1)
                                                         (("2"
                                                           (replace -2)
                                                           (("2"
                                                             (propax)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil)
                  ("2" (flatten)
                   (("2" (skolem-typepred)
                     (("2" (flatten)
                       (("2" (skolem-typepred)
                         (("2" (flatten)
                           (("2" (skolem-typepred)
                             (("2" (flatten)
                               (("2"
                                 (expand or_reduction)
                                 (("2"
                                   (assert)
                                   (("2"
                                     (expand sentence_list?)
                                     (("2"
                                       (lemma nclause2fmla_sentence)
                                       (("2"
                                         (inst -1 clBB!1)
                                         (("2"
                                           (case
                                            "FORALL(l1, l2: list[fmla]): freevars(append(l1, l2)) = append(freevars(l1), freevars(l2))")
                                           (("1"
                                             (inst
                                              -1
                                              sAA!1
                                              "cons(nclause2fmla(clBB!1), null)")
                                             (("1"
                                               (replace -1)
                                               (("1" (grind) nil nil))
                                               nil))
                                             nil)
                                            ("2"
                                             (delete - 2 3 4 5)
                                             (("2"
                                               (induct l1)
                                               (("1" (grind) nil nil)
                                                ("2"
                                                 (skolem-typepred)
                                                 (("2"
                                                   (flatten)
                                                   (("2"
                                                     (skolem-typepred)
                                                     (("2"
                                                       (expand
                                                        append
                                                        1
                                                        1)
                                                       (("2"
                                                         (expand
                                                          freevars
                                                          1
                                                          1)
                                                         (("2"
                                                           (expand
                                                            freevars
                                                            1
                                                            3)
                                                           (("2"
                                                             (use
                                                              append_assoc
                                                              (l1
                                                               "freevars(cons1_var!1)"
                                                               l2
                                                               "freevars(cons2_var!1)"
                                                               l3
                                                               "freevars(l2!1)"))
                                                             (("2"
                                                               (replace
                                                                -1)
                                                               (("2"
                                                                 (inst
                                                                  -2
                                                                  l2!1)
                                                                 (("2"
                                                                   (assert)
                                                                   nil
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((nclause2fmla_sentence formula-decl nil resolution nil)
               (nclause? const-decl "bool" resolution nil)
               (clBB!1 skolem-const-decl "(clause?)" resolution nil)
               (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (append_assoc formula-decl nil list_props nil)
               (list_induction formula-decl nil list_adt nil)
               (or_reduction const-decl "sequent" resolution nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (RR_orr const-decl "ne_proof_seq" resolution nil)
               (concl_orr const-decl "proof_step" resolution nil)
               (RR_subsetr const-decl "ne_proof_seq" resolution nil)
               (concl_subsetr const-decl "proof_step" resolution nil)
               (sorted? def-decl "bool" sortedlist nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (index const-decl "posnat" resolution nil)
               (prop_atom? const-decl "bool" resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (nclause2fmla def-decl "fmla" resolution nil)
               (append def-decl "list[T]" list_props nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (var? adt-recognizer-decl "[term -> boolean]" fmla nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (term type-decl nil fmla nil)
               (null adt-constructor-decl "(null?)" list_adt nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (> const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (sentence_list? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              802 600 t nil))
            (RR_lemma2_TCC11 0
             (RR_lemma2_TCC11-1 nil 3483230586 3483295451
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (skolem-typepred)
                       (("" (flatten)
                         (("" (skolem-typepred)
                           (("" (flatten)
                             (("" (expand or_reduction 3)
                               ((""
                                 (assert)
                                 ((""
                                   (expand sentence_list?)
                                   ((""
                                     (case
                                      "FORALL(l1, l2: list[fmla]): freevars(append(l1,l2)) = append(freevars(l1),freevars(l2))")
                                     (("1"
                                       (inst
                                        -1
                                        sAA!1
                                        "cons(nclause2fmla(clBB!1), null)")
                                       (("1"
                                         (rewrite -1)
                                         (("1"
                                           (use nclause2fmla_sentence)
                                           (("1"
                                             (lemma
                                              nclause2fmla_sentence)
                                             (("1"
                                               (inst -1 clBB!1)
                                               (("1" (grind) nil nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil)
                                      ("2"
                                       (delete - 2 3 4)
                                       (("2"
                                         (induct l1)
                                         (("1" (grind) nil nil)
                                          ("2"
                                           (skolem-typepred)
                                           (("2"
                                             (flatten)
                                             (("2"
                                               (skolem-typepred)
                                               (("2"
                                                 (expand append 1 1)
                                                 (("2"
                                                   (expand
                                                    freevars
                                                    1
                                                    1)
                                                   (("2"
                                                     (expand
                                                      freevars
                                                      1
                                                      3)
                                                     (("2"
                                                       (inst -1 l2!1)
                                                       (("2"
                                                         (rewrite -1)
                                                         (("2"
                                                           (use
                                                            append_assoc
                                                            (l1
                                                             "freevars(cons1_var!1)"
                                                             l2
                                                             "freevars(cons2_var!1)"
                                                             l3
                                                             "freevars(l2!1)"))
                                                           (("2"
                                                             (assert)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (term type-decl nil fmla nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (var? adt-recognizer-decl "[term -> boolean]" fmla nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (append def-decl "list[T]" list_props nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (prop_atom? const-decl "bool" resolution nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (sorted? def-decl "bool" sortedlist nil)
               (concl_subsetr const-decl "proof_step" resolution nil)
               (RR_subsetr const-decl "ne_proof_seq" resolution nil)
               (concl_orr const-decl "proof_step" resolution nil)
               (RR_orr const-decl "ne_proof_seq" resolution nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
               (nclause2fmla_sentence formula-decl nil resolution nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (nclause? const-decl "bool" resolution nil)
               (nclause2fmla def-decl "fmla" resolution nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (null adt-constructor-decl "(null?)" list_adt nil)
               (list_induction formula-decl nil list_adt nil)
               (append_assoc formula-decl nil list_props nil)
               (or_reduction const-decl "sequent" resolution nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (> const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (sentence_list? const-decl "bool" fmla nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              232486 480 t nil))
            (lemma2 0
             (lemma2-1 nil 3483221741 3483294394
              ("" (induct clBB)
               (("1" (grind) nil nil)
                ("2" (flatten)
                 (("2" (skolem-typepred)
                   (("2" (flatten)
                     (("2" (expand RR_lemma2 1)
                       (("2" (expand or_reduction 1)
                         (("2" (split)
                           (("1" (propax) nil nil)
                            ("2" (propax) nil nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("3" (skolem-typepred)
                 (("3" (flatten)
                   (("3" (skolem-typepred)
                     (("3" (flatten)
                       (("3" (lemma clause_prop)
                         (("3"
                           (inst -1 "cons(cons1_var!1, cons2_var!1)")
                           (("3" (assert)
                             (("3" (case "clause?(cons2_var!1)")
                               (("1"
                                 (replace -1)
                                 (("1"
                                   (split 1)
                                   (("1"
                                     (expand RR_lemma2 1)
                                     (("1"
                                       (lift-if)
                                       (("1"
                                         (split 1)
                                         (("1"
                                           (flatten)
                                           (("1"
                                             (replace -10)
                                             (("1"
                                               (expand or_reduction 1)
                                               (("1"
                                                 (expand
                                                  nclause2fmla
                                                  1)
                                                 (("1"
                                                   (assert)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil)
                                          ("2"
                                           (flatten)
                                           (("2"
                                             (expand RR_subsetr)
                                             (("2"
                                               (expand conclusion)
                                               (("2"
                                                 (assert)
                                                 (("2"
                                                   (expand
                                                    concl_subsetr)
                                                   (("2"
                                                     (propax)
                                                     nil
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2"
                                     (expand RR_lemma2 1)
                                     (("2"
                                       (split 1)
                                       (("1" (flatten) nil nil)
                                        ("2"
                                         (flatten)
                                         (("2"
                                           (use lemma_subsetr)
                                           (("2"
                                             (assert)
                                             (("2"
                                               (hide 3)
                                               (("2"
                                                 (split 1)
                                                 (("1"
                                                   (expand
                                                    nclause2fmla
                                                    1)
                                                   (("1"
                                                     (expand
                                                      or_reduction
                                                      1)
                                                     (("1"
                                                       (expand
                                                        nclause2fmla
                                                        1
                                                        2)
                                                       (("1"
                                                         (expand
                                                          subset
                                                          1)
                                                         (("1"
                                                           (split 1)
                                                           (("1"
                                                             (use
                                                              member_append
                                                              (a
                                                               "f_or(cons1_var!1, nclause2fmla(cons2_var!1))"
                                                               k
                                                               sAA!1
                                                               l
                                                               "cons(f_or(cons1_var!1, nclause2fmla(cons2_var!1)),null)"))
                                                             (("1"
                                                               (replace
                                                                -1)
                                                               (("1"
                                                                 (flatten)
                                                                 (("1"
                                                                   (expand
                                                                    member
                                                                    2)
                                                                   (("1"
                                                                     (propax)
                                                                     nil
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil)
                                                            ("2"
                                                             (use
                                                              every_member_subset
                                                              (k
                                                               "sAA!1"
                                                               l
                                                               "append(sAA!1,
                    cons(f_or(cons1_var!1, nclause2fmla(cons2_var!1)),
                         null))"))
                                                             (("2"
                                                               (replace
                                                                -1)
                                                               (("2"
                                                                 (skolem-typepred)
                                                                 (("2"
                                                                   (flatten)
                                                                   (("2"
                                                                     (use
                                                                      member_append
                                                                      (a
                                                                       a!1
                                                                       k
                                                                       sAA!1
                                                                       l
                                                                       "cons(f_or(cons1_var!1, nclause2fmla(cons2_var!1)),null)"))
                                                                     (("2"
                                                                       (assert)
                                                                       nil
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil)
                                                  ("2"
                                                   (expand RR_orr 1)
                                                   (("2"
                                                     (expand
                                                      conclusion)
                                                     (("2"
                                                       (expand
                                                        concl_orr)
                                                       (("2"
                                                         (expand
                                                          nclause2fmla
                                                          1
                                                          2)
                                                         (("2"
                                                           (propax)
                                                           nil
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil)
                                                  ("3"
                                                   (assert)
                                                   (("3"
                                                     (use lemma_orr)
                                                     (("3"
                                                       (assert)
                                                       (("3"
                                                         (hide 2)
                                                         (("3"
                                                           (split 1)
                                                           (("1"
                                                             (expand
                                                              RR_subsetr
                                                              1)
                                                             (("1"
                                                               (expand
                                                                conclusion)
                                                               (("1"
                                                                 (expand
                                                                  concl_subsetr)
                                                                 (("1"
                                                                   (propax)
                                                                   nil
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil)
                                                            ("2"
                                                             (use
                                                              lemma_subsetr)
                                                             (("2"
                                                               (assert)
                                                               (("2"
                                                                 (hide
                                                                  2)
                                                                 (("2"
                                                                   (split
                                                                    1)
                                                                   (("1"
                                                                     (use
                                                                      every_member_subset
                                                                      (k
                                                                       "append(append(sAA!1, cons(cons1_var!1, null)),
                    or_reduction(cons2_var!1))"
                                                                       l
                                                                       "cons(cons1_var!1, cons(nclause2fmla(cons2_var!1), sAA!1))"))
                                                                     (("1"
                                                                       (replace
                                                                        -1)
                                                                       (("1"
                                                                         (hide
                                                                          -1)
                                                                         (("1"
                                                                           (skolem-typepred)
                                                                           (("1"
                                                                             (flatten)
                                                                             (("1"
                                                                               (use
                                                                                member_append
                                                                                (a
                                                                                 a!1
                                                                                 k
                                                                                 "append(sAA!1, cons(cons1_var!1, null))"
                                                                                 l
                                                                                 "or_reduction(cons2_var!1)"))
                                                                               (("1"
                                                                                 (assert)
                                                                                 (("1"
                                                                                   (split
                                                                                    -1)
                                                                                   (("1"
                                                                                     (expand
                                                                                      member
                                                                                      1)
                                                                                     (("1"
                                                                                       (flatten)
                                                                                       (("1"
                                                                                         (expand
                                                                                          member
                                                                                          2)
                                                                                         (("1"
                                                                                           (flatten)
                                                                                           (("1"
                                                                                             (use
                                                                                              member_append
                                                                                              (a
                                                                                               a!1
                                                                                               k
                                                                                               sAA!1
                                                                                               l
                                                                                               "cons(cons1_var!1, null)"))
                                                                                             (("1"
                                                                                               (assert)
                                                                                               (("1"
                                                                                                 (expand
                                                                                                  member
                                                                                                  -1)
                                                                                                 (("1"
                                                                                                   (grind)
                                                                                                   nil
                                                                                                   nil))
                                                                                                 nil))
                                                                                               nil))
                                                                                             nil))
                                                                                           nil))
                                                                                         nil))
                                                                                       nil))
                                                                                     nil)
                                                                                    ("2"
                                                                                     (expand
                                                                                      member
                                                                                      1)
                                                                                     (("2"
                                                                                       (flatten)
                                                                                       (("2"
                                                                                         (expand
                                                                                          member
                                                                                          2)
                                                                                         (("2"
                                                                                           (flatten)
                                                                                           (("2"
                                                                                             (expand
                                                                                              or_reduction
                                                                                              -1)
                                                                                             (("2"
                                                                                               (expand
                                                                                                member
                                                                                                -1)
                                                                                               (("2"
                                                                                                 (split
                                                                                                  -1)
                                                                                                 (("1"
                                                                                                   (propax)
                                                                                                   nil
                                                                                                   nil)
                                                                                                  ("2"
                                                                                                   (grind)
                                                                                                   nil
                                                                                                   nil))
                                                                                                 nil))
                                                                                               nil))
                                                                                             nil))
                                                                                           nil))
                                                                                         nil))
                                                                                       nil))
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil)
                                                                    ("2"
                                                                     (inst
                                                                      -7
                                                                      RR1!1
                                                                      "append(sAA!1, cons(cons1_var!1, null))")
                                                                     (("2"
                                                                       (assert)
                                                                       (("2"
                                                                         (hide
                                                                          1)
                                                                         (("2"
                                                                           (replace
                                                                            -8)
                                                                           (("2"
                                                                             (use
                                                                              append_assoc
                                                                              (l1
                                                                               sAA!1
                                                                               l2
                                                                               "cons(cons1_var!1, null)"
                                                                               l3
                                                                               cons2_var!1))
                                                                             (("2"
                                                                               (replace
                                                                                -1)
                                                                               (("2"
                                                                                 (expand
                                                                                  append
                                                                                  2
                                                                                  3)
                                                                                 (("2"
                                                                                   (expand
                                                                                    append
                                                                                    2
                                                                                    3)
                                                                                   (("2"
                                                                                     (propax)
                                                                                     nil
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil)
                                                                    ("3"
                                                                     (inst
                                                                      -7
                                                                      RR1!1
                                                                      "append(sAA!1, cons(cons1_var!1, null))")
                                                                     (("3"
                                                                       (assert)
                                                                       (("3"
                                                                         (hide
                                                                          1)
                                                                         (("3"
                                                                           (replace
                                                                            -8)
                                                                           (("3"
                                                                             (use
                                                                              append_assoc
                                                                              (l1
                                                                               sAA!1
                                                                               l2
                                                                               "cons(cons1_var!1, null)"
                                                                               l3
                                                                               cons2_var!1))
                                                                             (("3"
                                                                               (replace
                                                                                -1)
                                                                               (("3"
                                                                                 (expand
                                                                                  append
                                                                                  2
                                                                                  3)
                                                                                 (("3"
                                                                                   (expand
                                                                                    append
                                                                                    2
                                                                                    3)
                                                                                   (("3"
                                                                                     (propax)
                                                                                     nil
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil)
                                ("2" (grind) nil nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (every adt-def-decl "boolean" list_adt nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (clause? const-decl "bool" resolution nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (> const-decl "bool" reals nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (sentence_list? const-decl "bool" fmla nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (conclusion const-decl "sequent" proof nil)
               (append def-decl "list[T]" list_props nil)
               (finseq type-eq-decl nil finite_sequences nil)
               (checkProof const-decl "bool" proof nil)
               (empty_seq const-decl "finseq" finite_sequences nil)
               (RR_lemma2 def-decl "ne_proof_seq" resolution nil)
               (or_reduction const-decl "sequent" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (fmla type-decl nil fmla nil)
               (list_induction formula-decl nil list_adt nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (concl_subsetr const-decl "proof_step" resolution nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (RR_subsetr const-decl "ne_proof_seq" resolution nil)
               (nclause2fmla def-decl "fmla" resolution nil)
               (lemma_subsetr formula-decl nil resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (RR_orr const-decl "ne_proof_seq" resolution nil)
               (nclause? const-decl "bool" resolution nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (null adt-constructor-decl "(null?)" list_adt nil)
               (append_assoc formula-decl nil list_props nil)
               (lemma_orr formula-decl nil resolution nil)
               (concl_orr const-decl "proof_step" resolution nil)
               (member def-decl "bool" list_props nil)
               (member_append formula-decl nil minlist nil)
               (f_or? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
               (f_or adt-constructor-decl "[[fmla, fmla] -> (f_or?)]"
                fmla nil)
               (every_member_subset formula-decl nil minlist nil)
               (subset def-decl "bool" minlist nil)
               (prop_atom? const-decl "bool" resolution nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (sorted? def-decl "bool" sortedlist nil)
               (one_premise? adt-def-decl "boolean" proof nil)
               (two_premise? adt-def-decl "boolean" proof nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (clause_prop formula-decl nil resolution nil))
              1158785 1210 t shostak))
            (RR_th1_TCC1 0
             (RR_th1_TCC1-1 nil 3482700134 3483284595
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten) (("" (use literal_sentence) nil nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((literal_sentence formula-decl nil resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil) nil
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              71 60 t nil))
            (RR_th1_TCC2 0
             (RR_th1_TCC2-1 nil 3482700134 3483284595
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten) (("" (use literal_sentence) nil nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((literal_sentence formula-decl nil resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil) nil
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              71 50 t nil))
            (RR_th1_TCC3 0
             (RR_th1_TCC3-1 nil 3482803452 3483284595
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (use clause_prop)
                       (("" (replace -4)
                         (("" (assert)
                           (("" (split -1)
                             (("1" (grind) nil nil)
                              ("2" (flatten)
                               (("2"
                                 (assert)
                                 (("2"
                                   (expand nclause? 2)
                                   (("2" (propax) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((sorted? def-decl "bool" sortedlist nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (index const-decl "posnat" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (clause_prop formula-decl nil resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil) nil
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              130 100 t nil))
            (RR_th1_TCC4 0
             (RR_th1_TCC4-1 nil 3482803452 3483284595
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (use nclause2fmla_sentence) nil nil)) nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((nclause2fmla_sentence formula-decl nil resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil) nil
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              72 50 t nil))
            (RR_th1_TCC5 0
             (RR_th1_TCC5-1 nil 3482803452 3483284595
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten) (("" (grind) nil nil)) nil)) nil))
                 nil))
               nil)
              unchecked
              ((real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (prop_atom? const-decl "bool" resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil) nil
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              67 60 t nil))
            (th1 0
             (th1-1 nil 3482276728 3482850306
              ("" (induct nclAA)
               (("1" (grind) nil nil) ("2" (grind) nil nil)
                ("3" (grind) nil nil)
                ("4" (skolem-typepred)
                 (("4" (flatten)
                   (("4" (skolem-typepred)
                     (("4" (flatten)
                       (("4" (use literal_sentence)
                         (("4" (lemma clause_prop)
                           (("4"
                             (inst -1 "cons(cons1_var!1, cons2_var!1)")
                             (("4" (replace -7)
                               (("4"
                                 (flatten)
                                 (("4"
                                   (assert)
                                   (("4"
                                     (expand not_or_reduction 1)
                                     (("4"
                                       (expand append 1)
                                       (("4"
                                         (lemma nclause2fmla_sentence)
                                         (("4"
                                           (split 1)
                                           (("1"
                                             (expand RR_th1 1)
                                             (("1"
                                               (lift-if)
                                               (("1"
                                                 (split 1)
                                                 (("1"
                                                   (flatten)
                                                   (("1"
                                                     (expand
                                                      nclause2fmla
                                                      1)
                                                     (("1"
                                                       (assert)
                                                       (("1"
                                                         (expand
                                                          append
                                                          1)
                                                         (("1"
                                                           (expand
                                                            RR_lemma1)
                                                           (("1"
                                                             (expand
                                                              RR_ax)
                                                             (("1"
                                                               (expand
                                                                conclusion)
                                                               (("1"
                                                                 (expand
                                                                  concl_ax)
                                                                 (("1"
                                                                   (propax)
                                                                   nil
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil)
                                                  ("2"
                                                   (flatten)
                                                   (("2"
                                                     (assert)
                                                     (("2"
                                                       (inst
                                                        -1
                                                        cons2_var!1)
                                                       (("2"
                                                         (flatten)
                                                         (("2"
                                                           (assert)
                                                           (("2"
                                                             (expand
                                                              nclause?
                                                              -8
                                                              1)
                                                             (("2"
                                                               (inst
                                                                -8
                                                                sBB!1)
                                                               (("2"
                                                                 (expand
                                                                  subset
                                                                  -11)
                                                                 (("2"
                                                                   (flatten)
                                                                   (("2"
                                                                     (assert)
                                                                     (("2"
                                                                       (expand
                                                                        RR_norr)
                                                                       (("2"
                                                                         (expand
                                                                          conclusion)
                                                                         (("2"
                                                                           (expand
                                                                            concl_norr)
                                                                           (("2"
                                                                             (expand
                                                                              nclause2fmla
                                                                              2
                                                                              2)
                                                                             (("2"
                                                                               (expand
                                                                                append
                                                                                2)
                                                                               (("2"
                                                                                 (propax)
                                                                                 nil
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil)
                                            ("2"
                                             (expand RR_th1 1)
                                             (("2"
                                               (split 1)
                                               (("1"
                                                 (flatten)
                                                 (("1"
                                                   (use lemma1)
                                                   (("1"
                                                     (assert)
                                                     (("1"
                                                       (hide 2)
                                                       (("1"
                                                         (expand
                                                          subset
                                                          -11)
                                                         (("1"
                                                           (propax)
                                                           nil
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil)
                                                ("2"
                                                 (flatten)
                                                 (("2"
                                                   (assert)
                                                   (("2"
                                                     (flatten)
                                                     (("2"
                                                       (assert)
                                                       (("2"
                                                         (expand
                                                          nclause?
                                                          -8)
                                                         (("2"
                                                           (inst
                                                            -8
                                                            sBB!1)
                                                           (("2"
                                                             (expand
                                                              subset
                                                              -11)
                                                             (("2"
                                                               (flatten)
                                                               (("2"
                                                                 (assert)
                                                                 (("2"
                                                                   (inst
                                                                    -1
                                                                    cons2_var!1)
                                                                   (("2"
                                                                     (use
                                                                      lemma_norr)
                                                                     (("2"
                                                                       (assert)
                                                                       (("2"
                                                                         (hide
                                                                          3)
                                                                         (("2"
                                                                           (split
                                                                            1)
                                                                           (("1"
                                                                             (expand
                                                                              RR_lemma1)
                                                                             (("1"
                                                                               (expand
                                                                                RR_ax)
                                                                               (("1"
                                                                                 (expand
                                                                                  conclusion)
                                                                                 (("1"
                                                                                   (expand
                                                                                    concl_ax)
                                                                                   (("1"
                                                                                     (propax)
                                                                                     nil
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil)
                                                                            ("2"
                                                                             (flatten)
                                                                             (("2"
                                                                               (replace
                                                                                -8)
                                                                               (("2"
                                                                                 (expand
                                                                                  not_or_reduction
                                                                                  1)
                                                                                 (("2"
                                                                                   (expand
                                                                                    append)
                                                                                   (("2"
                                                                                     (expand
                                                                                      append)
                                                                                     (("2"
                                                                                       (propax)
                                                                                       nil
                                                                                       nil))
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil)
                                                                            ("3"
                                                                             (use
                                                                              lemma1)
                                                                             (("3"
                                                                               (assert)
                                                                               nil
                                                                               nil))
                                                                             nil)
                                                                            ("4"
                                                                             (flatten)
                                                                             nil
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished
              ((NOT const-decl "[bool -> bool]" booleans nil)
               (literal_sentence formula-decl nil resolution nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (nclause2fmla_sentence formula-decl nil resolution nil)
               (lemma_norr formula-decl nil resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (lemma1 formula-decl nil resolution nil)
               (nclause2fmla def-decl "fmla" resolution nil)
               (RR_ax const-decl "ne_proof_seq" resolution nil)
               (concl_ax const-decl "proof_step" resolution nil)
               (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
               (concl_norr const-decl "proof_step" resolution nil)
               (RR_norr const-decl "ne_proof_seq" resolution nil)
               (minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (clause_prop formula-decl nil resolution nil)
               (sorted? def-decl "bool" sortedlist nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (index const-decl "posnat" resolution nil)
               (list_induction formula-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (literal? const-decl "bool" resolution nil)
               (empty_seq const-decl "finseq" finite_sequences nil)
               (checkProof const-decl "bool" proof nil)
               (finseq type-eq-decl nil finite_sequences nil)
               (not_or_reduction const-decl "sequent" resolution nil)
               (append def-decl "list[T]" list_props nil)
               (RR_th1 def-decl "ne_proof_seq" resolution nil)
               (conclusion const-decl "sequent" proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (> const-decl "bool" reals nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (subset def-decl "bool" minlist nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil))
              853103 880 t shostak))
            (RR_th2_1_TCC1 0
             (RR_th2_1_TCC1-1 nil 3482803452 3483284595
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (use nclause2fmla_sentence)
                   (("" (use literal_sentence) (("" (grind) nil nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((literal_sentence formula-decl nil resolution nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (sorted? def-decl "bool" sortedlist nil) nil nil
               (append def-decl "list[T]" list_props nil)
               (not_or_reduction const-decl "sequent" resolution nil)
               (prop_atom? const-decl "bool" resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nclause2fmla_sentence formula-decl nil resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil) nil
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (literal? const-decl "bool" resolution nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              208 180 t nil))
            (RR_th2_1_TCC2 0
             (RR_th2_1_TCC2-1 nil 3482803452 3483284595
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (use nclause2fmla_sentence)
                   (("" (use literal_sentence) (("" (grind) nil nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((literal_sentence formula-decl nil resolution nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (sorted? def-decl "bool" sortedlist nil) nil nil
               (append def-decl "list[T]" list_props nil)
               (not_or_reduction const-decl "sequent" resolution nil)
               (prop_atom? const-decl "bool" resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nclause2fmla_sentence formula-decl nil resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil) nil
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (literal? const-decl "bool" resolution nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              208 190 t nil))
            (RR_th2_1_TCC3 0
             (RR_th2_1_TCC3-1 nil 3482803452 3483284595
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (use literal_sentence) (("" (grind) nil nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (sentence? const-decl "bool" fmla nil)
               (prop_atom? const-decl "bool" resolution nil) nil
               (append def-decl "list[T]" list_props nil)
               (sorted? def-decl "bool" sortedlist nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (index const-decl "posnat" resolution nil) nil
               (literal_sentence formula-decl nil resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil) nil
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (literal? const-decl "bool" resolution nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              126 110 t nil))
            (RR_th2_1_TCC4 0
             (RR_th2_1_TCC4-1 nil 3482803452 3483284596
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (use literal_sentence) (("" (grind) nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (sentence? const-decl "bool" fmla nil)
               (prop_atom? const-decl "bool" resolution nil)
               (not_or_reduction const-decl "sequent" resolution nil)
               (append def-decl "list[T]" list_props nil)
               (concl_subsetr const-decl "proof_step" resolution nil)
               (RR_subsetr const-decl "ne_proof_seq" resolution nil)
               nil (literal_sentence formula-decl nil resolution nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (> const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil) nil
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (literal? const-decl "bool" resolution nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              174 140 t nil))
            (RR_th2_1_TCC5 0
             (RR_th2_1_TCC5-1 nil 3482803452 3483284596
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (use nclause2fmla_sentence)
                       (("" (grind) nil nil)) nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((sentence? const-decl "bool" fmla nil)
               (prop_atom? const-decl "bool" resolution nil)
               (not_or_reduction const-decl "sequent" resolution nil)
               (append def-decl "list[T]" list_props nil)
               (concl_subsetr const-decl "proof_step" resolution nil)
               (RR_subsetr const-decl "ne_proof_seq" resolution nil)
               nil nil
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nclause2fmla_sentence formula-decl nil resolution nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (> const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil) nil
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (literal? const-decl "bool" resolution nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              172 140 t nil))
            (RR_th2_1_TCC6 0
             (RR_th2_1_TCC6-1 nil 3482803452 3483284596
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (use nclause2fmla_sentence)
                   (("" (use literal_sentence) (("" (grind) nil nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((literal_sentence formula-decl nil resolution nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               nil nil (append def-decl "list[T]" list_props nil)
               (not_or_reduction const-decl "sequent" resolution nil)
               (prop_atom? const-decl "bool" resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (nclause2fmla_sentence formula-decl nil resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil) nil
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (literal? const-decl "bool" resolution nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              161 140 t nil))
            (RR_th2_1_TCC7 0
             (RR_th2_1_TCC7-1 nil 3482804347 3483284596
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (use nclause2fmla_sentence)
                   (("" (use literal_sentence) (("" (grind) nil nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((literal_sentence formula-decl nil resolution nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               nil nil (append def-decl "list[T]" list_props nil)
               (not_or_reduction const-decl "sequent" resolution nil)
               (prop_atom? const-decl "bool" resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (nclause2fmla_sentence formula-decl nil resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil) nil
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (literal? const-decl "bool" resolution nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              178 150 t nil))
            (RR_th2_1_TCC8 0
             (RR_th2_1_TCC8-1 nil 3482804347 3483284596
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (use literal_sentence) (("" (grind) nil nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((sentence? const-decl "bool" fmla nil)
               (prop_atom? const-decl "bool" resolution nil) nil
               (append def-decl "list[T]" list_props nil) nil
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (literal_sentence formula-decl nil resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil) nil
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (literal? const-decl "bool" resolution nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              98 90 t nil))
            (RR_th2_TCC1 0
             (RR_th2_TCC1-1 nil 3482773560 3483284596
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil) nil
               (clause? const-decl "bool" resolution nil)
               (nclause? const-decl "bool" resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (prop_atom? const-decl "bool" resolution nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil))
              82 70 nil nil))
            (RR_th2_TCC2 0
             (RR_th2_TCC2-1 nil 3482803452 3483284596
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (skolem-typepred)
                       (("" (flatten)
                         (("" (skolem-typepred)
                           (("" (flatten)
                             (("" (use literal_sentence) nil nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((literal_sentence formula-decl nil resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil) nil
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (literal? const-decl "bool" resolution nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              90 60 t nil))
            (RR_th2_TCC3 0
             (RR_th2_TCC3-1 nil 3482803452 3483284596
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (skolem-typepred)
                       (("" (flatten)
                         (("" (skolem-typepred)
                           (("" (flatten)
                             (("" (lemma nclause2fmla_sentence)
                               ((""
                                 (inst -1 nclBB!1)
                                 (("" (grind) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               nil nil (append def-decl "list[T]" list_props nil)
               (not_or_reduction const-decl "sequent" resolution nil)
               (prop_atom? const-decl "bool" resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (nclause2fmla_sentence formula-decl nil resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil) nil
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (literal? const-decl "bool" resolution nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              108 60 t nil))
            (RR_th2_TCC4 0
             (RR_th2_TCC4-1 nil 3482803452 3483284597
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (skolem-typepred)
                       (("" (flatten)
                         (("" (skolem-typepred)
                           (("" (flatten)
                             (("" (skolem-typepred)
                               ((""
                                 (flatten)
                                 ((""
                                   (lemma nclause2fmla_sentence)
                                   ((""
                                     (inst -1 nclBB!1)
                                     (("" (grind) nil nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               nil nil (append def-decl "list[T]" list_props nil)
               (not_or_reduction const-decl "sequent" resolution nil)
               (prop_atom? const-decl "bool" resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (nclause2fmla_sentence formula-decl nil resolution nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (> const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil) nil
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (literal? const-decl "bool" resolution nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              124 90 t nil))
            (th2_1_1 0
             (th2_1_1-1 nil 3482781522 3482850537
              ("" (induct f)
               (("1" (grind) nil nil) ("2" (grind) nil nil)
                ("3" (grind) nil nil) ("4" (grind) nil nil)
                ("5" (grind) nil nil))
               nil)
              unfinished
              ((fmla type-decl nil fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla
                nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla
                nil)
               (arg adt-accessor-decl "[(f_not?) -> fmla]" fmla nil)
               (fmla_induction formula-decl nil fmla nil))
              148 30 t shostak))
            (th2_1 0
             (th2_1-1 nil 3482773568 3482851288
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (split)
                   (("1" (expand RR_th2_1)
                     (("1" (lift-if)
                       (("1" (split 1)
                         (("1" (flatten)
                           (("1" (expand RR_negr)
                             (("1" (expand conclusion)
                               (("1"
                                 (expand concl_negr)
                                 (("1"
                                   (use th2_1_1)
                                   (("1"
                                     (replace -1 1 RL)
                                     (("1" (propax) nil nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("2" (flatten)
                           (("2" (expand RR_subsetr)
                             (("2" (expand conclusion)
                               (("2"
                                 (expand concl_subsetr)
                                 (("2" (propax) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil)
                    ("2" (expand RR_th2_1)
                     (("2" (split 1)
                       (("1" (flatten)
                         (("1" (use lemma_negr)
                           (("1" (assert)
                             (("1" (hide 2)
                               (("1"
                                 (split)
                                 (("1"
                                   (expand RR_subsetr)
                                   (("1"
                                     (expand conclusion)
                                     (("1"
                                       (expand concl_subsetr)
                                       (("1" (propax) nil nil))
                                       nil))
                                     nil))
                                   nil)
                                  ("2"
                                   (use lemma_subsetr)
                                   (("2"
                                     (assert)
                                     (("2"
                                       (hide 2)
                                       (("2"
                                         (split)
                                         (("1"
                                           (expand
                                            not_or_reduction
                                            1
                                            1)
                                           (("1"
                                             (expand append 1 1)
                                             (("1"
                                               (expand append 1 1)
                                               (("1"
                                                 (expand
                                                  not_or_reduction)
                                                 (("1"
                                                   (expand append)
                                                   (("1"
                                                     (expand append)
                                                     (("1"
                                                       (expand
                                                        subset
                                                        1)
                                                       (("1"
                                                         (split)
                                                         (("1"
                                                           (grind)
                                                           nil
                                                           nil)
                                                          ("2"
                                                           (expand
                                                            subset
                                                            1)
                                                           (("2"
                                                             (split)
                                                             (("1"
                                                               (grind)
                                                               nil
                                                               nil)
                                                              ("2"
                                                               (use
                                                                every_member_subset
                                                                ("k"
                                                                 "sCC!1"
                                                                 "l"
                                                                 "cons(arg(lpivot!1), cons(f_not(nclause2fmla(nclBB!1)), sCC!1))"))
                                                               (("2"
                                                                 (replace
                                                                  -1)
                                                                 (("2"
                                                                   (skolem!)
                                                                   (("2"
                                                                     (flatten)
                                                                     (("2"
                                                                       (delete
                                                                        -1
                                                                        -2)
                                                                       (("2"
                                                                         (grind)
                                                                         nil
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil)
                                          ("2"
                                           (use th1)
                                           (("2"
                                             (assert)
                                             (("2"
                                               (hide 2)
                                               (("2"
                                                 (expand f_neg)
                                                 (("2"
                                                   (propax)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil)
                                          ("3"
                                           (use th1)
                                           (("3"
                                             (assert)
                                             (("3"
                                               (hide 2)
                                               (("3"
                                                 (expand f_neg)
                                                 (("3"
                                                   (propax)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2" (flatten)
                         (("2" (use lemma_subsetr)
                           (("2" (assert)
                             (("2" (hide 3)
                               (("2"
                                 (split 1)
                                 (("1"
                                   (expand not_or_reduction)
                                   (("1"
                                     (expand append)
                                     (("1"
                                       (expand append)
                                       (("1"
                                         (expand subset 1)
                                         (("1"
                                           (split)
                                           (("1" (grind) nil nil)
                                            ("2"
                                             (expand subset 1)
                                             (("2"
                                               (split)
                                               (("1" (grind) nil nil)
                                                ("2"
                                                 (use
                                                  every_member_subset
                                                  ("k"
                                                   "sCC!1"
                                                   "l"
                                                   "cons(f_not(lpivot!1),
                  cons(f_not(nclause2fmla(nclBB!1)), sCC!1))"))
                                                 (("2"
                                                   (rewrite -1)
                                                   (("2"
                                                     (skolem!)
                                                     (("2"
                                                       (flatten)
                                                       (("2"
                                                         (grind)
                                                         nil
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil)
                                  ("2"
                                   (use th1)
                                   (("2"
                                     (assert)
                                     (("2"
                                       (hide 2)
                                       (("2"
                                         (expand f_neg)
                                         (("2" (propax) nil nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil)
                                  ("3"
                                   (use th1)
                                   (("3"
                                     (assert)
                                     (("3"
                                       (hide 2)
                                       (("3"
                                         (expand f_neg)
                                         (("3" (propax) nil nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (clause? const-decl "bool" resolution nil)
               (nclause? const-decl "bool" resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (concl_subsetr const-decl "proof_step" resolution nil)
               (RR_subsetr const-decl "ne_proof_seq" resolution nil)
               (conclusion const-decl "sequent" proof nil)
               (th2_1_1 formula-decl nil resolution nil)
               (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla
                nil)
               (concl_negr const-decl "proof_step" resolution nil)
               (RR_negr const-decl "ne_proof_seq" resolution nil)
               (RR_th2_1 const-decl "ne_proof_seq" resolution nil)
               (lemma_negr formula-decl nil resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (RR_th1 def-decl "ne_proof_seq" resolution nil)
               (arg adt-accessor-decl "[(f_not?) -> fmla]" fmla nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (not_or_reduction const-decl "sequent" resolution nil)
               (append def-decl "list[T]" list_props nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (> const-decl "bool" reals nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (lemma_subsetr formula-decl nil resolution nil)
               (th1 formula-decl nil resolution nil)
               (f_neg const-decl "fmla" fmla nil)
               (subset def-decl "bool" minlist nil)
               (nclause2fmla def-decl "fmla" resolution nil)
               (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla
                nil)
               (every_member_subset formula-decl nil minlist nil)
               (member def-decl "bool" list_props nil))
              347602 730 t shostak))
            (th2 0
             (th2-1 nil 3482790356 3482852711
              ("" (induct nclAA)
               (("1" (grind) nil nil) ("2" (grind) nil nil)
                ("3" (grind) nil nil)
                ("4" (skolem-typepred)
                 (("4" (flatten)
                   (("4" (skolem-typepred)
                     (("4" (flatten)
                       (("4" (use literal_sentence)
                         (("4" (lemma literal_sentence)
                           (("4" (inst -1 cons1_var!1)
                             (("4" (lemma clause_prop)
                               (("4"
                                 (inst
                                  -1
                                  "cons(cons1_var!1, cons2_var!1)")
                                 (("4"
                                   (assert)
                                   (("4"
                                     (expand subset -14)
                                     (("4"
                                       (flatten)
                                       (("4"
                                         (expand member -14)
                                         (("4"
                                           (split 1)
                                           (("1"
                                             (expand RR_th2 1)
                                             (("1"
                                               (lift-if)
                                               (("1"
                                                 (split 1)
                                                 (("1"
                                                   (flatten)
                                                   (("1"
                                                     (split 1)
                                                     (("1"
                                                       (flatten)
                                                       (("1"
                                                         (expand
                                                          RR_lemma1)
                                                         (("1"
                                                           (expand
                                                            RR_ax)
                                                           (("1"
                                                             (expand
                                                              conclusion)
                                                             (("1"
                                                               (expand
                                                                concl_ax)
                                                               (("1"
                                                                 (expand
                                                                  not_or_reduction
                                                                  1
                                                                  2)
                                                                 (("1"
                                                                   (expand
                                                                    append
                                                                    1
                                                                    2)
                                                                   (("1"
                                                                     (expand
                                                                      append
                                                                      1
                                                                      2)
                                                                     (("1"
                                                                       (expand
                                                                        nclause2fmla
                                                                        1)
                                                                       (("1"
                                                                         (assert)
                                                                         nil
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil)
                                                      ("2"
                                                       (flatten)
                                                       (("2"
                                                         (use th2_1)
                                                         (("2"
                                                           (expand
                                                            not_or_reduction
                                                            2
                                                            1)
                                                           (("2"
                                                             (expand
                                                              nclause2fmla
                                                              2
                                                              1)
                                                             (("2"
                                                               (assert)
                                                               (("2"
                                                                 (expand
                                                                  append
                                                                  2
                                                                  1)
                                                                 (("2"
                                                                   (expand
                                                                    append
                                                                    2
                                                                    1)
                                                                   (("2"
                                                                     (assert)
                                                                     nil
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil)
                                                  ("2"
                                                   (flatten)
                                                   (("2"
                                                     (split 2)
                                                     (("1"
                                                       (flatten)
                                                       (("1"
                                                         (expand
                                                          RR_norr)
                                                         (("1"
                                                           (expand
                                                            conclusion)
                                                           (("1"
                                                             (assert)
                                                             (("1"
                                                               (expand
                                                                RR_lemma1)
                                                               (("1"
                                                                 (expand
                                                                  concl_norr)
                                                                 (("1"
                                                                   (expand
                                                                    not_or_reduction
                                                                    1
                                                                    2)
                                                                   (("1"
                                                                     (expand
                                                                      append
                                                                      1
                                                                      2)
                                                                     (("1"
                                                                       (expand
                                                                        append
                                                                        1
                                                                        2)
                                                                       (("1"
                                                                         (expand
                                                                          nclause2fmla
                                                                          1
                                                                          2)
                                                                         (("1"
                                                                           (propax)
                                                                           nil
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil)
                                                      ("2"
                                                       (flatten)
                                                       (("2"
                                                         (expand
                                                          RR_norr)
                                                         (("2"
                                                           (expand
                                                            conclusion)
                                                           (("2"
                                                             (expand
                                                              RR_th2_1)
                                                             (("2"
                                                               (assert)
                                                               (("2"
                                                                 (expand
                                                                  concl_norr)
                                                                 (("2"
                                                                   (lift-if
                                                                    2)
                                                                   (("2"
                                                                     (split
                                                                      2)
                                                                     (("1"
                                                                       (flatten)
                                                                       (("1"
                                                                         (expand
                                                                          RR_negr)
                                                                         (("1"
                                                                           (expand
                                                                            not_or_reduction
                                                                            1
                                                                            2)
                                                                           (("1"
                                                                             (expand
                                                                              append
                                                                              1
                                                                              2)
                                                                             (("1"
                                                                               (expand
                                                                                append
                                                                                1
                                                                                2)
                                                                               (("1"
                                                                                 (expand
                                                                                  nclause2fmla
                                                                                  1
                                                                                  2)
                                                                                 (("1"
                                                                                   (propax)
                                                                                   nil
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil)
                                                                      ("2"
                                                                       (flatten)
                                                                       (("2"
                                                                         (expand
                                                                          RR_subsetr)
                                                                         (("2"
                                                                           (expand
                                                                            not_or_reduction
                                                                            2
                                                                            2)
                                                                           (("2"
                                                                             (expand
                                                                              append
                                                                              2
                                                                              2)
                                                                             (("2"
                                                                               (expand
                                                                                append
                                                                                2
                                                                                2)
                                                                               (("2"
                                                                                 (expand
                                                                                  nclause2fmla
                                                                                  2
                                                                                  2)
                                                                                 (("2"
                                                                                   (propax)
                                                                                   nil
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil)
                                            ("2"
                                             (expand RR_th2 1)
                                             (("2"
                                               (lift-if)
                                               (("2"
                                                 (split 1)
                                                 (("1"
                                                   (flatten)
                                                   (("1"
                                                     (split 1)
                                                     (("1"
                                                       (flatten)
                                                       (("1"
                                                         (use lemma1)
                                                         (("1"
                                                           (assert)
                                                           (("1"
                                                             (hide 2)
                                                             (("1"
                                                               (grind)
                                                               nil
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil)
                                                      ("2"
                                                       (flatten)
                                                       (("2"
                                                         (use
                                                          lemma_norr)
                                                         (("2"
                                                           (assert)
                                                           (("2"
                                                             (hide 3)
                                                             (("2"
                                                               (split
                                                                1)
                                                               (("1"
                                                                 (expand
                                                                  RR_lemma1)
                                                                 (("1"
                                                                   (expand
                                                                    RR_ax)
                                                                   (("1"
                                                                     (expand
                                                                      conclusion)
                                                                     (("1"
                                                                       (expand
                                                                        concl_ax)
                                                                       (("1"
                                                                         (propax)
                                                                         nil
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("2"
                                                                 (flatten)
                                                                 (("2"
                                                                   (assert)
                                                                   (("2"
                                                                     (expand
                                                                      nclause?
                                                                      -13)
                                                                     (("2"
                                                                       (inst
                                                                        -13
                                                                        lpivot!1
                                                                        nclBB!1
                                                                        sCC!1)
                                                                       (("2"
                                                                         (expand
                                                                          not_or_reduction
                                                                          -13
                                                                          1)
                                                                         (("2"
                                                                           (expand
                                                                            append
                                                                            -13
                                                                            1)
                                                                           (("2"
                                                                             (expand
                                                                              append
                                                                              -13
                                                                              1)
                                                                             (("2"
                                                                               (propax)
                                                                               nil
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("3"
                                                                 (use
                                                                  lemma1)
                                                                 (("3"
                                                                   (assert)
                                                                   (("3"
                                                                     (hide
                                                                      2)
                                                                     (("3"
                                                                       (grind)
                                                                       nil
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("4"
                                                                 (flatten)
                                                                 (("4"
                                                                   (expand
                                                                    nclause?
                                                                    -13)
                                                                   (("4"
                                                                     (assert)
                                                                     (("4"
                                                                       (inst
                                                                        -13
                                                                        lpivot!1
                                                                        nclBB!1
                                                                        sCC!1)
                                                                       (("4"
                                                                         (assert)
                                                                         nil
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil)
                                                  ("2"
                                                   (flatten)
                                                   (("2"
                                                     (split 2)
                                                     (("1"
                                                       (flatten)
                                                       (("1"
                                                         (use th2_1)
                                                         (("1"
                                                           (assert)
                                                           nil
                                                           nil))
                                                         nil))
                                                       nil)
                                                      ("2"
                                                       (flatten)
                                                       (("2"
                                                         (use
                                                          lemma_norr)
                                                         (("2"
                                                           (assert)
                                                           (("2"
                                                             (hide 3)
                                                             (("2"
                                                               (split
                                                                1)
                                                               (("1"
                                                                 (use
                                                                  th2_1)
                                                                 (("1"
                                                                   (assert)
                                                                   nil
                                                                   nil))
                                                                 nil)
                                                                ("2"
                                                                 (assert)
                                                                 (("2"
                                                                   (flatten)
                                                                   (("2"
                                                                     (assert)
                                                                     (("2"
                                                                       (expand
                                                                        nclause?
                                                                        -12)
                                                                       (("2"
                                                                         (inst
                                                                          -12
                                                                          lpivot!1
                                                                          nclBB!1
                                                                          sCC!1)
                                                                         (("2"
                                                                           (expand
                                                                            not_or_reduction
                                                                            -12
                                                                            1)
                                                                           (("2"
                                                                             (expand
                                                                              append
                                                                              -12
                                                                              1)
                                                                             (("2"
                                                                               (expand
                                                                                append
                                                                                -12
                                                                                1)
                                                                               (("2"
                                                                                 (propax)
                                                                                 nil
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("3"
                                                                 (flatten)
                                                                 (("3"
                                                                   (assert)
                                                                   (("3"
                                                                     (expand
                                                                      nclause?
                                                                      -12)
                                                                     (("3"
                                                                       (inst
                                                                        -12
                                                                        lpivot!1
                                                                        nclBB!1
                                                                        sCC!1)
                                                                       (("3"
                                                                         (assert)
                                                                         (("3"
                                                                           (use
                                                                            th2_1)
                                                                           (("3"
                                                                             (assert)
                                                                             nil
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("4"
                                                                 (flatten)
                                                                 (("4"
                                                                   (assert)
                                                                   (("4"
                                                                     (expand
                                                                      nclause?
                                                                      -12)
                                                                     (("4"
                                                                       (inst
                                                                        -12
                                                                        lpivot!1
                                                                        nclBB!1
                                                                        sCC!1)
                                                                       (("4"
                                                                         (assert)
                                                                         nil
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished
              ((NOT const-decl "[bool -> bool]" booleans nil)
               (literal_sentence formula-decl nil resolution nil)
               (member def-decl "bool" list_props nil)
               (lemma1 formula-decl nil resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (lemma_norr formula-decl nil resolution nil)
               (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
               (nclause2fmla def-decl "fmla" resolution nil)
               (concl_ax const-decl "proof_step" resolution nil)
               (RR_ax const-decl "ne_proof_seq" resolution nil)
               (th2_1 formula-decl nil resolution nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (RR_norr const-decl "ne_proof_seq" resolution nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (concl_norr const-decl "proof_step" resolution nil)
               (RR_th2_1 const-decl "ne_proof_seq" resolution nil)
               (RR_negr const-decl "ne_proof_seq" resolution nil)
               (RR_subsetr const-decl "ne_proof_seq" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (clause_prop formula-decl nil resolution nil)
               (sorted? def-decl "bool" sortedlist nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (index const-decl "posnat" resolution nil)
               (list_induction formula-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (literal? const-decl "bool" resolution nil)
               (empty_seq const-decl "finseq" finite_sequences nil)
               (checkProof const-decl "bool" proof nil)
               (finseq type-eq-decl nil finite_sequences nil)
               (not_or_reduction const-decl "sequent" resolution nil)
               (append def-decl "list[T]" list_props nil)
               (RR_th2 def-decl "ne_proof_seq" resolution nil)
               (conclusion const-decl "sequent" proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (> const-decl "bool" reals nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (f_neg const-decl "fmla" fmla nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (subset def-decl "bool" minlist nil)
               (sentence_list? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil))
              1414485 1730 t shostak)))

