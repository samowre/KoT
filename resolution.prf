(resolution (index_TCC1 0
             (index_TCC1-1 nil 3482010882 3482015089
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (atom? const-decl "bool" resolution nil))
              55 30 nil nil))
            (index_TCC2 0
             (index_TCC2-1 nil 3482010882 3482015089
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (atom? const-decl "bool" resolution nil))
              51 20 nil nil))
            (index_TCC3 0
             (index_TCC3-1 nil 3482010882 3482015089
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (atom? const-decl "bool" resolution nil))
              47 20 nil nil))
            (clause_lit_list?_TCC1 0
             (clause_lit_list?_TCC1-1 nil 3481399109 3482015089
              ("" (skolem!)
               (("" (flatten)
                 (("" (skolem!)
                   (("" (flatten)
                     (("" (rewrite -1)
                       (("" (expand "length" 1 2)
                         (("" (grind) nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((length def-decl "nat" list_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (index const-decl "nat" resolution nil)
               (atom? const-decl "bool" resolution nil))
              105 60 t nil))
            (sorted_clause_lit_list 0
             (sorted_clause_lit_list-1 nil 3482015112 3482015971
              ("" (induct "lAA")
               (("1" (grind) nil nil)
                ("2" (skolem-typepred)
                 (("2" (flatten)
                   (("2" (skolem!)
                     (("2" (flatten)
                       (("2" (expand "clause_lit_list?" -4)
                         (("2" (case "cons?(cons2_var!1)")
                           (("1" (lift-if)
                             (("1" (split -5)
                               (("1" (grind) nil nil)
                                ("2"
                                 (flatten)
                                 (("2"
                                   (replace -2)
                                   (("2"
                                     (replace -3)
                                     (("2"
                                       (inst -6 "e!1")
                                       (("2"
                                         (expand member -7)
                                         (("2"
                                           (lift-if)
                                           (("2"
                                             (split -7)
                                             (("1" (propax) nil nil)
                                              ("2"
                                               (flatten)
                                               (("2"
                                                 (split -1)
                                                 (("1"
                                                   (replace -1)
                                                   (("1"
                                                     (propax)
                                                     nil
                                                     nil))
                                                   nil)
                                                  ("2"
                                                   (replace -1)
                                                   (("2"
                                                     (grind)
                                                     nil
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil)
                            ("2" (grind) nil nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((NOT const-decl "[bool -> bool]" booleans nil)
               (atom? const-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (list_induction formula-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (literal? const-decl "bool" resolution nil)
               (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
               (index const-decl "nat" resolution nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (< const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
               (member def-decl "bool" list_props nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil))
              799223 3080 t shostak))
            (no_duplicates?_TCC1 0
             (no_duplicates?_TCC1-1 nil 3482010882 3482015089
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (atom? const-decl "bool" resolution nil))
              91 50 nil nil))
            (remove_TCC1 0
             (remove_TCC1-1 nil 3482010882 3482015089
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (replace -7 -3)
                   (("" (expand "clause_lit_list?" -3)
                     (("" (case "cons?(r!1)")
                       (("1" (grind) nil nil) ("2" (grind) nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (atom? const-decl "bool" resolution nil)
               (index const-decl "nat" resolution nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (every adt-def-decl "boolean" list_adt nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (literal? const-decl "bool" resolution nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              139 100 t nil))
            (remove_TCC2 0
             (remove_TCC2-1 nil 3482010882 3482015089
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (replace -6 -3)
                   (("" (expand "clause_lit_list?" -3)
                     (("" (case "cons?(r!1)")
                       (("1" (grind) nil nil) ("2" (grind) nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (atom? const-decl "bool" resolution nil)
               (index const-decl "nat" resolution nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (every adt-def-decl "boolean" list_adt nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (literal? const-decl "bool" resolution nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              140 90 t nil))
            (remove_TCC3 0
             (remove_TCC3-1 nil 3482010882 3482015090
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (length def-decl "nat" list_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (atom? const-decl "bool" resolution nil)
               (index const-decl "nat" resolution nil))
              91 70 nil nil))
            (remove_TCC4 0
             (remove_TCC4-1 nil 3482010882 3482017308
              ("" (skolem-typepred)
               (("" (case "clause_lit_list?(v!1(lA!1, r!1))")
                 (("1" (flatten)
                   (("1" (expand "clause_lit_list?" 2)
                     (("1" (case "cons?(v!1(lA!1, r!1))")
                       (("1" (lift-if)
                         (("1" (split)
                           (("1" (propax) nil nil)
                            ("2" (flatten)
                             (("2" (replace -8 -5)
                               (("2"
                                 (expand "clause_lit_list?" -5)
                                 (("2"
                                   (case "null?(r!1)")
                                   (("1"
                                     (lift-if)
                                     (("1"
                                       (delete -6)
                                       (("1"
                                         (replace -3)
                                         (("1"
                                           (lemma
                                            "sorted_clause_lit_list")
                                           (("1"
                                             (inst -1 "clAA!1")
                                             (("1"
                                               (assert)
                                               (("1"
                                                 (replace -9 -1)
                                                 (("1"
                                                   (assert)
                                                   (("1"
                                                     (inst
                                                      -1
                                                      "car(v!1(lA!1, r!1))")
                                                     (("1"
                                                       (postpone)
                                                       nil
                                                       nil)
                                                      ("2"
                                                       (postpone)
                                                       nil
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2" (postpone) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2" (grind) nil nil))
                       nil))
                     nil))
                   nil)
                  ("2" (grind) nil nil) ("3" (grind) nil nil))
                 nil))
               nil)
              unfinished nil 421155 570 t nil))
            (strict_merge_TCC1 0
             (strict_merge_TCC1-1 nil 3482010882 3482015091
              ("" (subtype-tcc) nil nil) unfinished nil 307 220 nil
              nil))
            (strict_merge_TCC2 0
             (strict_merge_TCC2-1 nil 3482010882 3482015091
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (atom? const-decl "bool" resolution nil)
               (index const-decl "nat" resolution nil))
              180 130 nil nil))
            (strict_merge_TCC3 0
             (strict_merge_TCC3-1 nil 3482010882 3482015091
              ("" (subtype-tcc) nil nil) unfinished nil 321 220 nil
              nil))
            (strict_merge_TCC4 0
             (strict_merge_TCC4-1 nil 3482010882 3482015091
              ("" (subtype-tcc) nil nil) unfinished nil 340 260 nil
              nil))
            (strict_merge_TCC5 0
             (strict_merge_TCC5-1 nil 3482010882 3482015092
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (atom? const-decl "bool" resolution nil)
               (index const-decl "nat" resolution nil))
              175 120 nil nil))
            (strict_merge_TCC6 0
             (strict_merge_TCC6-1 nil 3482010882 3482015092
              ("" (subtype-tcc) nil nil) unfinished nil 361 260 nil
              nil))
            (strict_merge_TCC7 0
             (strict_merge_TCC7-1 nil 3482010882 3482015092
              ("" (subtype-tcc) nil nil) unfinished nil 313 230 nil
              nil))
            (strict_merge_TCC8 0
             (strict_merge_TCC8-1 nil 3482010882 3482015093
              ("" (subtype-tcc) nil nil) unfinished nil 324 210 nil
              nil))
            (strict_merge_TCC9 0
             (strict_merge_TCC9-1 nil 3482010882 3482015093
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (f_neg const-decl "fmla" fmla nil)
               (atom? const-decl "bool" resolution nil)
               (index const-decl "nat" resolution nil))
              177 140 nil nil))
            (strict_merge_TCC10 0
             (strict_merge_TCC10-1 nil 3482010882 3482015093
              ("" (subtype-tcc) nil nil) unfinished nil 356 250 nil
              nil))
            (strict_merge_TCC11 0
             (strict_merge_TCC11-1 nil 3482010882 3482015093
              ("" (subtype-tcc) nil nil) unfinished nil 351 260 nil
              nil))
            (strict_merge_TCC12 0
             (strict_merge_TCC12-1 nil 3482010882 3482015094
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (f_neg const-decl "fmla" fmla nil)
               (atom? const-decl "bool" resolution nil)
               (index const-decl "nat" resolution nil))
              186 120 nil nil))
            (strict_merge_TCC13 0
             (strict_merge_TCC13-1 nil 3482010882 3482015094
              ("" (subtype-tcc) nil nil) unfinished nil 362 240 nil
              nil))
            (good_indices_TCC1 0
             (good_indices_TCC1-1 nil 3481399109 3482015094
              ("" (subtype-tcc) nil nil) proved nil 24 10 nil nil))
            (good_indices_TCC2 0
             (good_indices_TCC2-1 nil 3481399109 3482015094
              ("" (termination-tcc) nil nil) proved
              ((real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (every adt-def-decl "boolean" list_adt nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              50 40 nil nil))
            (good_indices_TCC3 0
             (good_indices_TCC3-1 nil 3481399109 3482015095
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (>= const-decl "bool" reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (> const-decl "bool" reals nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (every adt-def-decl "boolean" list_adt nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil))
              1027 40 nil nil))
            (fold_resolutions_TCC1 0
             (fold_resolutions_TCC1-1 nil 3482010882 3482015095
              ("" (subtype-tcc) nil nil) unfinished nil 146 110 nil
              nil))
            (fold_resolutions_TCC2 0
             (fold_resolutions_TCC2-1 nil 3482010882 3482015095
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (every adt-def-decl "boolean" list_adt nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil))
              73 40 nil nil))
            (create_clauses_TCC1 0
             (create_clauses_TCC1-1 nil 3481399109 3482015096
              ("" (subtype-tcc)
               (("" (expand length +)
                 (("" (assert)
                   (("" (lift-if)
                     (("" (split)
                       (("1" (flatten)
                         (("1" (assert)
                           (("1" (expand append)
                             (("1" (lift-if)
                               (("1"
                                 (split)
                                 (("1" (assert) nil nil)
                                  ("2"
                                   (flatten)
                                   (("2" (assert) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2" (flatten)
                         (("2" (expand good_indices -)
                           (("2" (assert)
                             (("2" (delete 1)
                               (("2"
                                 (expand append)
                                 (("2"
                                   (lift-if)
                                   (("2"
                                     (split)
                                     (("1"
                                       (flatten)
                                       (("1" (assert) nil nil))
                                       nil)
                                      ("2"
                                       (flatten)
                                       (("2"
                                         (assert)
                                         (("2"
                                           (lemma
                                            length_append
                                            (l1
                                             "cdr(context!1)"
                                             l2
                                             "cons(lst!1, null)"))
                                           (("2"
                                             (replace -1 2)
                                             (("2"
                                               (assert)
                                               (("2"
                                                 (expand length + 2)
                                                 (("2"
                                                   (assert)
                                                   (("2"
                                                     (expand
                                                      length
                                                      +
                                                      2)
                                                     (("2"
                                                       (assert)
                                                       (("2"
                                                         (hide -1)
                                                         (("2"
                                                           (expand
                                                            length
                                                            -)
                                                           (("2"
                                                             (propax)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (length_append formula-decl nil list_props nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (null adt-constructor-decl "(null?)" list_adt nil)
               (append def-decl "list[T]" list_props nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (every adt-def-decl "boolean" list_adt nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (good_indices def-decl "bool" resolution nil)
               (length def-decl "nat" list_props nil)
               (append_clause const-decl "clauses_list" resolution
                nil))
              270 200 t nil))
            (create_clauses_TCC2 0
             (create_clauses_TCC2-1 nil 3481399109 3482015096
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (every adt-def-decl "boolean" list_adt nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (good_indices def-decl "bool" resolution nil)
               (length def-decl "nat" list_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil))
              79 60 nil nil))
            (create_clauses_TCC3 0
             (create_clauses_TCC3-1 nil 3481399109 3482015096
              ("" (subtype-tcc)
               (("1" (expand good_indices) (("1" (grind) nil nil)) nil)
                ("2" (grind) nil nil))
               nil)
              proved
              ((posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (> const-decl "bool" reals nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (every adt-def-decl "boolean" list_adt nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (good_indices def-decl "bool" resolution nil)
               (length def-decl "nat" list_props nil))
              157 130 t nil))
            (create_clauses_TCC4 0
             (create_clauses_TCC4-1 nil 3481399109 3482015096
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (skolem-typepred)
                       (("" (flatten)
                         (("" (skolem-typepred)
                           (("" (flatten)
                             ((""
                               (lemma
                                map_length
                                (f
                                 "LAMBDA i: nth(context!1, i)"
                                 l
                                 "l!1"))
                               (("1"
                                 (expand length -1)
                                 (("1" (grind) nil nil))
                                 nil)
                                ("2" (grind) nil nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (map adt-def-decl "list[T1]" list_adt_map nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (map_length formula-decl nil more_map_props nil)
               (< const-decl "bool" reals nil)
               (below type-eq-decl nil nat_types nil)
               (nth def-decl "T" list_props nil)
               (> const-decl "bool" reals nil)
               (length def-decl "nat" list_props nil)
               (good_indices def-decl "bool" resolution nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              476 380 t nil))
            (create_clauses_TCC5 0
             (create_clauses_TCC5-1 nil 3481399109 3482015098
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (skolem-typepred)
                       (("" (flatten)
                         (("" (skolem-typepred)
                           (("" (flatten)
                             (("" (skolem-typepred)
                               ((""
                                 (flatten)
                                 ((""
                                   (lemma
                                    map_length
                                    (f
                                     "LAMBDA i: nth(context!1, i)"
                                     l
                                     "l!1"))
                                   (("1"
                                     (expand map -1)
                                     (("1" (grind) nil nil))
                                     nil)
                                    ("2" (grind) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((map adt-def-decl "list[T1]" list_adt_map nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (member def-decl "bool" list_props nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (null adt-constructor-decl "(null?)" list_adt nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (l!1 skolem-const-decl "{l: list[nat] | length(l) > 1}"
                resolution nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (cert!1 skolem-const-decl "resolution_certificate"
                resolution nil)
               (context!1 skolem-const-decl
                "{c: clauses_list | good_indices(cert!1, length(c))}"
                resolution nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (map_length formula-decl nil more_map_props nil)
               (< const-decl "bool" reals nil)
               (below type-eq-decl nil nat_types nil)
               (nth def-decl "T" list_props nil)
               (> const-decl "bool" reals nil)
               (length def-decl "nat" list_props nil)
               (good_indices def-decl "bool" resolution nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              1168 920 t nil))
            (create_clauses_TCC6 0
             (create_clauses_TCC6-1 nil 3481399109 3482015098
              ("" (termination-tcc) nil nil) unfinished
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (set type-eq-decl nil sets nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (clauses_list type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (good_indices def-decl "bool" resolution nil)
               (length def-decl "nat" list_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (atom? const-decl "bool" resolution nil))
              614 540 nil nil))
            (create_clauses_TCC7 0
             (create_clauses_TCC7-1 nil 3481914562 3482015099
              ("" (termination-tcc) nil nil) unfinished
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (set type-eq-decl nil sets nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (is_finite const-decl "bool" finite_sets nil)
               (finite_set type-eq-decl nil finite_sets nil)
               (clauses_list type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (good_indices def-decl "bool" resolution nil)
               (length def-decl "nat" list_props nil)
               (> const-decl "bool" reals nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (f_neg const-decl "fmla" fmla nil)
               (member const-decl "bool" sets nil)
               (injective? const-decl "bool" functions nil))
              685 560 nil nil))
            (create_clauses_TCC8 0
             (create_clauses_TCC8-1 nil 3482010882 3482015099
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (every adt-def-decl "boolean" list_adt nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (good_indices def-decl "bool" resolution nil)
               (length def-decl "nat" list_props nil)
               (> const-decl "bool" reals nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (resolve const-decl "(clause_lit_list?)" resolution
                        nil))
              250 150 nil nil))
            (execute_certificate_TCC1 0
             (execute_certificate_TCC1-1 nil 3482010882 3482015099
              ("" (subtype-tcc) nil nil) unfinished nil 29 20 nil nil))
            (unsat?_TCC1 0
             (unsat?_TCC1-1 nil 3482010882 3482015099
              ("" (subtype-tcc) nil nil) unfinished nil 41 30 nil nil))
            (unsat?_TCC2 0
             (unsat?_TCC2-1 nil 3482010882 3482015099
              ("" (subtype-tcc) nil nil) unfinished nil 125 120 nil
              nil))
            (list_to_or_TCC1 0
             (list_to_or_TCC1-1 nil 3482010882 3482015099
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (non_empty_clause_list? const-decl "bool" resolution
                nil))
              28 20 nil nil))
            (list_to_or_TCC2 0
             (list_to_or_TCC2-1 nil 3482010882 3482015099
              ("" (subtype-tcc) nil nil) unfinished nil 93 70 nil nil))
            (list_to_or_TCC3 0
             (list_to_or_TCC3-1 nil 3482010882 3482015100
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause_lit_list? def-decl "bool" resolution nil)
               (non_empty_clause_list? const-decl "bool" resolution
                nil)
               (index const-decl "nat" resolution nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (atom? const-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil))
              221 180 nil nil)))

