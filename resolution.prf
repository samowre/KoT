(resolution (index_TCC1 0
             (index_TCC1-1 nil 3482010882 3482523133
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              34 30 nil nil))
            (index_TCC2 0
             (index_TCC2-1 nil 3482010882 3482523133
              ("" (subtype-tcc) nil nil) unfinished
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              66 60 nil nil))
            (index_TCC3 0
             (index_TCC3-1 nil 3482010882 3482523133
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              43 30 nil nil))
            (index_TCC4 0
             (index_TCC4-1 nil 3482191174 3482523133
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              25 20 nil nil))
            (index_TCC5 0
             (index_TCC5-1 nil 3482191799 3482523133
              ("" (subtype-tcc) nil nil) unfinished nil 132 100 nil
              nil))
            (index_inj 0
             (index_inj-1 nil 3482502770 3482503311
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (expand index)
                   (("" (lift-if)
                     (("" (split)
                       (("1" (lift-if)
                         (("1" (split)
                           (("1" (flatten)
                             (("1" (assert)
                               (("1"
                                 (grind)
                                 (("1"
                                   (grind)
                                   (("1"
                                     (replace -3 -6 RL)
                                     (("1"
                                       (grind)
                                       (("1" (postpone) nil nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil)
                            ("2" (postpone) nil nil))
                           nil))
                         nil)
                        ("2" (postpone) nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished nil 540960 1730 t shostak))
            (IMP_sortedlist_TCC1 0
             (IMP_sortedlist_TCC1-1 nil 3482519649 3482523133
              ("" (subtype-tcc) nil nil) unfinished nil 228 170 nil
              nil))
            (clause_prop_TCC1 0
             (clause_prop_TCC1-1 nil 3482191799 3482523133
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil))
              15 10 nil nil))
            (clause_prop_TCC2 0
             (clause_prop_TCC2-1 nil 3482191799 3482523133
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil))
              29 20 nil nil))
            (clause_prop 0
             (clause_prop-1 nil 3482192365 3482192814
              ("" (induct-and-simplify lAA)
               (("1" (lemma clause_rec_red)
                 (("1" (inst -1 "cons2_var!1" "index(cons1_var!1)" 0)
                   (("1" (delete -1)
                     (("1" (expand clause_rec?)
                       (("1" (lift-if) (("1" (assert) nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("2" (expand clause_rec? 1)
                 (("2" (lift-if)
                   (("2" (assert)
                     (("2" (split)
                       (("1" (propax) nil nil)
                        ("2" (flatten) (("2" (grind) nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished
              ((nat nonempty-type-eq-decl nil naturalnumbers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (< const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (prop_atom? const-decl "bool" resolution nil)
               (IFF const-decl "[bool, bool -> bool]" booleans nil)
               (clause? const-decl "bool" resolution nil)
               (OR const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (fmla type-decl nil fmla nil)
               (list_induction formula-decl nil list_adt nil))
              449378 900 t shostak))
            (include_clause_TCC1 0
             (include_clause_TCC1-1 nil 3482270929 3482523133
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil))
              11 10 nil nil))
            (include_clause_TCC2 0
             (include_clause_TCC2-1 nil 3482270929 3482523133
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil))
              30 10 nil nil))
            (nclause2fmla_TCC1 0
             (nclause2fmla_TCC1-1 nil 3482270929 3482523133
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (nclause? const-decl "bool" resolution nil))
              11 10 nil nil))
            (nclause2fmla_TCC2 0
             (nclause2fmla_TCC2-1 nil 3482270929 3482523133
              ("" (subtype-tcc) nil nil) unfinished nil 46 30 nil nil))
            (nclause2fmla_TCC3 0
             (nclause2fmla_TCC3-1 nil 3482270929 3482523133
              ("" (termination-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (nclause? const-decl "bool" resolution nil)
               (length def-decl "nat" list_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil))
              48 50 nil nil))
            (clause_sentence_list 0
             (clause_sentence_list-1 nil 3482270948 3482271605
              ("" (induct clAA)
               (("1" (grind) nil nil) ("2" (grind) nil nil)
                ("3" (skolem-typepred)
                 (("3" (flatten)
                   (("3" (expand sentence_list? 1)
                     (("3" (expand freevars 1)
                       (("3" (lemma clause_prop)
                         (("3"
                           (inst -1 "cons(cons1_var!1, cons2_var!1)")
                           (("3" (flatten)
                             (("3" (hide -2)
                               (("3"
                                 (replace -5)
                                 (("3"
                                   (assert)
                                   (("3"
                                     (case "null?(cons2_var!1)")
                                     (("1"
                                       (grind)
                                       (("1"
                                         (expand termvars 1)
                                         (("1"
                                           (expand append 1 1)
                                           (("1"
                                             (assert)
                                             (("1"
                                               (grind)
                                               (("1"
                                                 (case
                                                  "length(args(cons1_var!1))=0")
                                                 (("1" (grind) nil nil)
                                                  ("2"
                                                   (postpone)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil)
                                        ("2" (postpone) nil nil))
                                       nil)
                                      ("2" (postpone) nil nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished nil 657323 580 t shostak))
            (or_reduction_TCC1 0
             (or_reduction_TCC1-1 nil 3482275916 3482523133
              ("" (subtype-tcc) nil nil) unfinished nil 36 20 nil nil))
            (or_reduction_TCC2 0
             (or_reduction_TCC2-1 nil 3482275916 3482523133
              ("" (subtype-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (nclause? const-decl "bool" resolution nil))
              22 20 nil nil))
            (or_reduction_TCC3 0
             (or_reduction_TCC3-1 nil 3482275916 3482523134
              ("" (subtype-tcc) nil nil) unfinished nil 46 10 nil nil))
            (not_or_reduction_TCC1 0
             (not_or_reduction_TCC1-1 nil 3482275916 3482523134
              ("" (subtype-tcc) nil nil) unfinished nil 28 30 nil nil))
            (cut1_lemma1_TCC1 0
             (cut1_lemma1_TCC1-1 nil 3482523115 3482523134
              ("" (subtype-tcc) nil nil) unfinished nil 65 60 nil nil))
            (cut2_lemma1_TCC1 0
             (cut2_lemma1_TCC1-1 nil 3482523115 3482523134
              ("" (subtype-tcc) nil nil) unfinished nil 74 50 nil nil))
            (concl_lemma1_TCC1 0
             (concl_lemma1_TCC1-1 nil 3482523115 3482523134
              ("" (subtype-tcc) nil nil) unfinished nil 49 50 nil nil))
            (concl_lemma1_TCC2 0
             (concl_lemma1_TCC2-1 nil 3482523115 3482523134
              ("" (subtype-tcc) nil nil) unfinished nil 72 50 nil nil))
            (RR_lemma1_TCC1 0
             (RR_lemma1_TCC1-1 nil 3482519649 3482523134
              ("" (cond-coverage-tcc) nil nil) proved
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (every adt-def-decl "boolean" list_adt nil)
               (clause? const-decl "bool" resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (< const-decl "bool" reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil naturalnumbers nil)
               (prop_atom? const-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil))
              44 40 nil nil))
            (lemma1 0
             (lemma1-1 nil 3482523174 3482523791
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (split)
                   (("1" (grind) nil nil)
                    ("2" (grind)
                     (("1" (case "i!1 = 2")
                       (("1" (grind)
                         (("1"
                           (lemma "list2set_member"
                            ("k" "clAA!1" "a" "x!1"))
                           (("1" (assert)
                             (("1" (grind) (("1" (postpone) nil nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2" (grind) nil nil))
                       nil)
                      ("2" (case "i!1 = 2")
                       (("1" (grind) (("1" (postpone) nil nil)) nil)
                        ("2" (grind) nil nil))
                       nil)
                      ("3" (case "i!1 = 2")
                       (("1" (grind) (("1" (postpone) nil nil)) nil)
                        ("2" (grind) nil nil))
                       nil)
                      ("4" (case "i!1 = 2")
                       (("1" (postpone) nil nil) ("2" (grind) nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished nil 616884 1850 t shostak))
            (th1 0
             (th1-1 nil 3482276728 3482519798
              ("" (induct nclAA)
               (("1" (grind) nil nil) ("2" (grind) nil nil)
                ("3" (grind) nil nil)
                ("4" (skolem-typepred)
                 (("4" (flatten)
                   (("4" (lemma clause_prop)
                     (("4" (inst -1 "cons(cons1_var!1, cons2_var!1)")
                       (("4" (flatten)
                         (("4" (hide -2)
                           (("4" (replace -5)
                             (("4" (assert -1)
                               (("4"
                                 (split -1)
                                 (("1"
                                   (case "cons2_var!1=null")
                                   (("1"
                                     (replace -1)
                                     (("1"
                                       (assert -5)
                                       (("1"
                                         (hide -5)
                                         (("1"
                                           (skolem-typepred)
                                           (("1"
                                             (flatten)
                                             (("1"
                                               (lemma
                                                subset_include_clause)
                                               (("1"
                                                 (inst
                                                  -1
                                                  "cons(cons1_var!1, null)"
                                                  "clCC!1")
                                                 (("1"
                                                   (expand subset)
                                                   (("1"
                                                     (flatten)
                                                     (("1"
                                                       (expand
                                                        "not_or_reduction"
                                                        1
                                                        1)
                                                       (("1"
                                                         (expand
                                                          "nclause2fmla"
                                                          1
                                                          1)
                                                         (("1"
                                                           (expand
                                                            "append"
                                                            1
                                                            1)
                                                           (("1"
                                                             (expand
                                                              "append"
                                                              1
                                                              1)
                                                             (("1"
                                                               (expand
                                                                include_clause
                                                                -14)
                                                               (("1"
                                                                 (replace
                                                                  -14)
                                                                 (("1"
                                                                   (flatten)
                                                                   (("1"
                                                                     (postpone)
                                                                     nil
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil)
                                                  ("2"
                                                   (postpone)
                                                   nil
                                                   nil)
                                                  ("3"
                                                   (postpone)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2" (grind) nil nil))
                                   nil)
                                  ("2" (postpone) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished nil 122161 300 t shostak)))

