(resolution (index_TCC1 0
             (index_TCC1-1 nil 3482010882 3482017657
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil))
              15 20 nil nil))
            (index_TCC2 0
             (index_TCC2-1 nil 3482010882 3482017657
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil))
              37 30 nil nil))
            (index_TCC3 0
             (index_TCC3-1 nil 3482010882 3482017657
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil))
              21 20 nil nil))
            (car_clause_lit_list?_TCC1 0
             (car_clause_lit_list?_TCC1-1 nil 3482089105 nil
              ("" (subtype-tcc) nil nil) unfinished nil nil nil nil
              nil))
            (sorted_clause_lit_list 0
             (sorted_clause_lit_list-1 nil 3482015112 3482092807
              ("" (induct "lAA")
               (("1" (grind) nil nil)
                ("2" (skolem-typepred)
                 (("2" (flatten)
                   (("2" (expand clause_lit_list? -4)
                     (("2" (expand every_suffix? -4)
                       (("2" (flatten)
                         (("2" (expand clause_lit_list? -3)
                           (("2" (replace -5)
                             (("2" (case "null?(cons2_var!1)")
                               (("1" (grind) nil nil)
                                ("2"
                                 (assert)
                                 (("2"
                                   (skolem!)
                                   (("2"
                                     (flatten)
                                     (("2"
                                       (inst -3 e!1)
                                       (("2"
                                         (expand member -6)
                                         (("2"
                                           (split -6)
                                           (("1" (grind) nil nil)
                                            ("2"
                                             (replace -1)
                                             (("2" (grind) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (every adt-def-decl "boolean" list_adt nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (clause_lit_list? const-decl "bool" resolution nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (member def-decl "bool" list_props nil)
               (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (< const-decl "bool" reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (index const-decl "nat" resolution nil)
               (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (fmla type-decl nil fmla nil)
               (list_induction formula-decl nil list_adt nil)
               (every_suffix? def-decl "bool" minlist nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (prop_atom? const-decl "bool" resolution nil)
               (car_clause_lit_list? const-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (NOT const-decl "[bool -> bool]" booleans nil))
              3996 2580 t shostak))
            (clause_lit_list_implie_no_duplicate 0
             (clause_lit_list_implie_no_duplicate-1 nil 3482089516
              3482092788
              ("" (induct lAA)
               (("1" (grind) nil nil)
                ("2" (skolem-typepred)
                 (("2" (flatten)
                   (("2" (expand "clause_lit_list?" -4)
                     (("2" (expand "every_suffix?" -4)
                       (("2" (flatten)
                         (("2" (expand "clause_lit_list?" -3)
                           (("2" (replace -5)
                             (("2" (expand no_duplicates? 1)
                               (("2"
                                 (expand setlist? 1)
                                 (("2"
                                   (split)
                                   (("1"
                                     (expand car_clause_lit_list? -5)
                                     (("1"
                                       (split -5)
                                       (("1" (grind) nil nil)
                                        ("2"
                                         (lemma
                                          "sorted_clause_lit_list")
                                         (("2"
                                           (inst -1 cons2_var!1)
                                           (("2"
                                             (assert)
                                             (("2"
                                               (expand
                                                clause_lit_list?
                                                -1)
                                               (("2"
                                                 (case
                                                  "cons?(cons2_var!1)")
                                                 (("1"
                                                   (replace -1)
                                                   (("1"
                                                     (inst
                                                      -2
                                                      cons1_var!1)
                                                     (("1"
                                                       (expand
                                                        member
                                                        -4)
                                                       (("1"
                                                         (lift-if)
                                                         (("1"
                                                           (assert)
                                                           nil
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil)
                                                  ("2"
                                                   (grind)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2" (grind) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (every adt-def-decl "boolean" list_adt nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (clause_lit_list? const-decl "bool" resolution nil)
               (no_duplicates? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (fmla type-decl nil fmla nil)
               (list_induction formula-decl nil list_adt nil)
               (every_suffix? def-decl "bool" minlist nil)
               (setlist? def-decl "bool" minlist nil)
               (member def-decl "bool" list_props nil)
               (index const-decl "nat" resolution nil)
               (prop_atom? const-decl "bool" resolution nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (sorted_clause_lit_list formula-decl nil resolution nil)
               (car_clause_lit_list? const-decl "bool" resolution nil)
               (NOT const-decl "[bool -> bool]" booleans nil))
              319 90 t shostak))
            (index_inj_clause_lit_list 0
             (index_inj_clause_lit_list-1 nil 3482092844 3482093630
              ("" (induct lAA)
               (("1" (grind) nil nil)
                ("2" (skolem-typepred)
                 (("2" (flatten)
                   (("2" (skolem-typepred)
                     (("2" (flatten)
                       (("2" (expand member -7)
                         (("2" (split -7)
                           (("1" (expand member -8)
                             (("1" (split -8)
                               (("1" (assert) nil nil)
                                ("2"
                                 (lemma sorted_clause_lit_list)
                                 (("2"
                                   (inst
                                    -1
                                    "cons(cons1_var!1, cons2_var!1)")
                                   (("2"
                                     (replace -9)
                                     (("2"
                                       (assert)
                                       (("2"
                                         (inst -1 lB!1)
                                         (("2"
                                           (replace -2)
                                           (("2" (grind) nil nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil)
                            ("2" (expand member -8)
                             (("2" (split -8)
                               (("1"
                                 (lemma sorted_clause_lit_list)
                                 (("1"
                                   (inst
                                    -1
                                    "cons(cons1_var!1, cons2_var!1)")
                                   (("1"
                                     (assert)
                                     (("1"
                                       (inst -1 lA!1)
                                       (("1"
                                         (replace -10)
                                         (("1"
                                           (replace -3)
                                           (("1"
                                             (replace -2)
                                             (("1" (grind) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil)
                                ("2"
                                 (expand clause_lit_list? -8)
                                 (("2"
                                   (expand every_suffix? -8)
                                   (("2"
                                     (flatten)
                                     (("2"
                                       (expand clause_lit_list? -7)
                                       (("2"
                                         (replace -9)
                                         (("2"
                                           (inst -7 lA!1 lB!1)
                                           (("2"
                                             (replace -1)
                                             (("2"
                                               (replace -2)
                                               (("2"
                                                 (delete
                                                  -1
                                                  -2
                                                  -3
                                                  -4
                                                  -5
                                                  -6
                                                  -8
                                                  -9)
                                                 (("2"
                                                   (grind)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((NOT const-decl "[bool -> bool]" booleans nil)
               (sorted_clause_lit_list formula-decl nil resolution nil)
               (car_clause_lit_list? const-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (prop_atom? const-decl "bool" resolution nil)
               (every_suffix? def-decl "bool" minlist nil)
               (list_induction formula-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (literal? const-decl "bool" resolution nil)
               (index const-decl "nat" resolution nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (/= const-decl "boolean" notequal nil)
               (member def-decl "bool" list_props nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (clause_lit_list? const-decl "bool" resolution nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (every adt-def-decl "boolean" list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil))
              785604 1000 t shostak))
            (no_pairs 0
             (no_pairs-1 nil 3482089228 3482094025
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (expand "f_neg")
                       (("" (lift-if)
                         (("" (split)
                           (("1" (flatten)
                             (("1" (lemma index_inj_clause_lit_list)
                               (("1"
                                 (inst -1 lAA!1)
                                 (("1"
                                   (replace -6)
                                   (("1"
                                     (inst -1 "q!1" "arg(q!1)")
                                     (("1"
                                       (replace -7)
                                       (("1"
                                         (assert)
                                         (("1" (postpone) nil nil))
                                         nil))
                                       nil)
                                      ("2" (postpone) nil nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil)
                            ("2" (postpone) nil nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished nil 382241 140 t shostak))
            (remove_TCC1 0
             (remove_TCC1-1 nil 3482010882 3482017657
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (replace -7 -3)
                   (("" (expand "clause_lit_list?" -3)
                     (("" (case "cons?(r!1)")
                       (("1" (grind) nil nil) ("2" (grind) nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (index const-decl "nat" resolution nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (literal? const-decl "bool" resolution nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              118 90 t nil))
            (remove_TCC2 0
             (remove_TCC2-1 nil 3482010882 3482017657
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (replace -6 -3)
                   (("" (expand "clause_lit_list?" -3)
                     (("" (case "cons?(r!1)")
                       (("1" (grind) nil nil) ("2" (grind) nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (index const-decl "nat" resolution nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (literal? const-decl "bool" resolution nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              123 90 t nil))
            (remove_TCC3 0
             (remove_TCC3-1 nil 3482010882 3482017657
              ("" (termination-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (length def-decl "nat" list_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (index const-decl "nat" resolution nil))
              81 60 nil nil))
            (remove_TCC4 0
             (remove_TCC4-1 nil 3482010882 3482017902
              ("" (skolem-typepred)
               (("" (case "clause_lit_list?(v!1(lA!1, r!1))")
                 (("1" (flatten)
                   (("1" (case "cons?(v!1(lA!1, r!1))")
                     (("1" (postpone) nil nil) ("2" (grind) nil nil))
                     nil))
                   nil)
                  ("2" (grind) nil nil) ("3" (grind) nil nil))
                 nil))
               nil)
              unchecked nil 194519 600 t nil))
            (remove_TCC5 0
             (remove_TCC5-1 nil 3482089105 nil
              ("" (termination-tcc) nil nil) unfinished nil nil nil nil
              nil))
            (remove_TCC6 0
             (remove_TCC6-1 nil 3482089105 nil
              ("" (subtype-tcc) nil nil) unfinished nil nil nil nil
              nil))
            (strict_merge_TCC1 0
             (strict_merge_TCC1-1 nil 3482010882 3482017658
              ("" (subtype-tcc) nil nil) unchecked nil 283 220 nil
              nil))
            (strict_merge_TCC2 0
             (strict_merge_TCC2-1 nil 3482010882 3482017658
              ("" (termination-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (index const-decl "nat" resolution nil))
              149 130 nil nil))
            (strict_merge_TCC3 0
             (strict_merge_TCC3-1 nil 3482010882 3482017659
              ("" (subtype-tcc) nil nil) unchecked nil 288 220 nil
              nil))
            (strict_merge_TCC4 0
             (strict_merge_TCC4-1 nil 3482010882 3482017659
              ("" (subtype-tcc) nil nil) unchecked nil 302 240 nil
              nil))
            (strict_merge_TCC5 0
             (strict_merge_TCC5-1 nil 3482010882 3482017659
              ("" (termination-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (index const-decl "nat" resolution nil))
              155 120 nil nil))
            (strict_merge_TCC6 0
             (strict_merge_TCC6-1 nil 3482010882 3482017659
              ("" (subtype-tcc) nil nil) unchecked nil 313 230 nil
              nil))
            (strict_merge_TCC7 0
             (strict_merge_TCC7-1 nil 3482010882 3482017660
              ("" (subtype-tcc) nil nil) unchecked nil 287 210 nil
              nil))
            (strict_merge_TCC8 0
             (strict_merge_TCC8-1 nil 3482010882 3482017660
              ("" (subtype-tcc) nil nil) unchecked nil 273 210 nil
              nil))
            (strict_merge_TCC9 0
             (strict_merge_TCC9-1 nil 3482010882 3482017660
              ("" (termination-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (f_neg const-decl "fmla" fmla nil)
               (index const-decl "nat" resolution nil))
              171 140 nil nil))
            (strict_merge_TCC10 0
             (strict_merge_TCC10-1 nil 3482010882 3482017660
              ("" (subtype-tcc) nil nil) unchecked nil 321 260 nil
              nil))
            (strict_merge_TCC11 0
             (strict_merge_TCC11-1 nil 3482010882 3482017661
              ("" (subtype-tcc) nil nil) unchecked nil 322 250 nil
              nil))
            (strict_merge_TCC12 0
             (strict_merge_TCC12-1 nil 3482010882 3482017661
              ("" (termination-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (f_neg const-decl "fmla" fmla nil)
               (index const-decl "nat" resolution nil))
              173 120 nil nil))
            (strict_merge_TCC13 0
             (strict_merge_TCC13-1 nil 3482010882 3482017661
              ("" (subtype-tcc) nil nil) unchecked nil 332 260 nil
              nil))
            (good_indices?_TCC1 0
             (good_indices?_TCC1-1 nil 3482089105 nil
              ("" (subtype-tcc) nil nil) unfinished nil nil nil nil
              nil))
            (good_indices?_TCC2 0
             (good_indices?_TCC2-1 nil 3482089105 nil
              ("" (termination-tcc) nil nil) unfinished nil nil nil nil
              nil))
            (good_indices?_TCC3 0
             (good_indices?_TCC3-1 nil 3482089105 nil
              ("" (termination-tcc) nil nil) unfinished nil nil nil nil
              nil))
            (fold_resolutions_TCC1 0
             (fold_resolutions_TCC1-1 nil 3482010882 3482017661
              ("" (subtype-tcc) nil nil) unchecked nil 149 110 nil
              nil))
            (fold_resolutions_TCC2 0
             (fold_resolutions_TCC2-1 nil 3482010882 3482017662
              ("" (termination-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil))
              61 50 nil nil))
            (create_clauses_TCC1 0
             (create_clauses_TCC1-1 nil 3481399109 3482017662
              ("" (subtype-tcc)
               (("" (expand length +)
                 (("" (assert)
                   (("" (lift-if)
                     (("" (split)
                       (("1" (flatten)
                         (("1" (assert)
                           (("1" (expand append)
                             (("1" (lift-if)
                               (("1"
                                 (split)
                                 (("1" (assert) nil nil)
                                  ("2"
                                   (flatten)
                                   (("2" (assert) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2" (flatten)
                         (("2" (expand good_indices -)
                           (("2" (assert)
                             (("2" (delete 1)
                               (("2"
                                 (expand append)
                                 (("2"
                                   (lift-if)
                                   (("2"
                                     (split)
                                     (("1"
                                       (flatten)
                                       (("1" (assert) nil nil))
                                       nil)
                                      ("2"
                                       (flatten)
                                       (("2"
                                         (assert)
                                         (("2"
                                           (lemma
                                            length_append
                                            (l1
                                             "cdr(context!1)"
                                             l2
                                             "cons(lst!1, null)"))
                                           (("2"
                                             (replace -1 2)
                                             (("2"
                                               (assert)
                                               (("2"
                                                 (expand length + 2)
                                                 (("2"
                                                   (assert)
                                                   (("2"
                                                     (expand
                                                      length
                                                      +
                                                      2)
                                                     (("2"
                                                       (assert)
                                                       (("2"
                                                         (hide -1)
                                                         (("2"
                                                           (expand
                                                            length
                                                            -)
                                                           (("2"
                                                             (propax)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (length_append formula-decl nil list_props nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (null adt-constructor-decl "(null?)" list_adt nil)
               (append def-decl "list[T]" list_props nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (length def-decl "nat" list_props nil)
               (append_clause const-decl "clauses_list" resolution
                nil))
              243 190 t nil))
            (create_clauses_TCC2 0
             (create_clauses_TCC2-1 nil 3481399109 3482017662
              ("" (termination-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (length def-decl "nat" list_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil))
              79 50 nil nil))
            (create_clauses_TCC3 0
             (create_clauses_TCC3-1 nil 3481399109 3482017662
              ("" (subtype-tcc)
               (("1" (expand good_indices) (("1" (grind) nil nil)) nil)
                ("2" (grind) nil nil))
               nil)
              unchecked
              ((posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (> const-decl "bool" reals nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (length def-decl "nat" list_props nil))
              142 120 t nil))
            (create_clauses_TCC4 0
             (create_clauses_TCC4-1 nil 3481399109 3482017662
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (skolem-typepred)
                       (("" (flatten)
                         (("" (skolem-typepred)
                           (("" (flatten)
                             ((""
                               (lemma
                                map_length
                                (f
                                 "LAMBDA i: nth(context!1, i)"
                                 l
                                 "l!1"))
                               (("1"
                                 (expand length -1)
                                 (("1" (grind) nil nil))
                                 nil)
                                ("2" (grind) nil nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (map_length formula-decl nil more_map_props nil)
               (< const-decl "bool" reals nil)
               (below type-eq-decl nil nat_types nil)
               (nth def-decl "T" list_props nil)
               (> const-decl "bool" reals nil)
               (length def-decl "nat" list_props nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (literal? const-decl "bool" resolution nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              445 360 t nil))
            (create_clauses_TCC5 0
             (create_clauses_TCC5-1 nil 3481399109 3482017664
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (skolem-typepred)
                   (("" (flatten)
                     (("" (skolem-typepred)
                       (("" (flatten)
                         (("" (skolem-typepred)
                           (("" (flatten)
                             (("" (skolem-typepred)
                               ((""
                                 (flatten)
                                 ((""
                                   (lemma
                                    map_length
                                    (f
                                     "LAMBDA i: nth(context!1, i)"
                                     l
                                     "l!1"))
                                   (("1"
                                     (expand map -1)
                                     (("1" (grind) nil nil))
                                     nil)
                                    ("2" (grind) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (member def-decl "bool" list_props nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (null adt-constructor-decl "(null?)" list_adt nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (map_length formula-decl nil more_map_props nil)
               (< const-decl "bool" reals nil)
               (below type-eq-decl nil nat_types nil)
               (nth def-decl "T" list_props nil)
               (> const-decl "bool" reals nil)
               (length def-decl "nat" list_props nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (clauses_list type-eq-decl nil resolution nil)
               (literal? const-decl "bool" resolution nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil))
              1119 930 t nil))
            (create_clauses_TCC6 0
             (create_clauses_TCC6-1 nil 3481399109 3482017664
              ("" (termination-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (set type-eq-decl nil sets nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (clauses_list type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (length def-decl "nat" list_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil))
              596 510 nil nil))
            (create_clauses_TCC7 0
             (create_clauses_TCC7-1 nil 3481914562 3482017665
              ("" (termination-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (set type-eq-decl nil sets nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (is_finite const-decl "bool" finite_sets nil)
               (finite_set type-eq-decl nil finite_sets nil)
               (clauses_list type-eq-decl nil resolution nil)
               (resolution_step type-decl nil resolution nil)
               (resolution_certificate type-eq-decl nil resolution nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (length def-decl "nat" list_props nil)
               (> const-decl "bool" reals nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (f_neg const-decl "fmla" fmla nil)
               (member const-decl "bool" sets nil)
               (injective? const-decl "bool" functions nil))
              652 530 nil nil))
            (execute_certificate_TCC1 0
             (execute_certificate_TCC1-1 nil 3482010882 3482017665
              ("" (subtype-tcc) nil nil) unchecked nil 30 20 nil nil))
            (unsat?_TCC1 0
             (unsat?_TCC1-1 nil 3482010882 3482017665
              ("" (subtype-tcc) nil nil) unchecked nil 25 20 nil nil))
            (unsat?_TCC2 0
             (unsat?_TCC2-1 nil 3482010882 3482017665
              ("" (subtype-tcc) nil nil) unchecked nil 125 110 nil
              nil))
            (list_to_or_TCC1 0
             (list_to_or_TCC1-1 nil 3482010882 3482017665
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (non_empty_clause_list? const-decl "bool" resolution
                nil))
              27 20 nil nil))
            (list_to_or_TCC2 0
             (list_to_or_TCC2-1 nil 3482010882 3482017665
              ("" (subtype-tcc) nil nil) unchecked nil 76 60 nil nil))
            (list_to_or_TCC3 0
             (list_to_or_TCC3-1 nil 3482010882 3482017666
              ("" (termination-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (non_empty_clause_list? const-decl "bool" resolution
                nil)
               (index const-decl "nat" resolution nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (length def-decl "nat" list_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil))
              224 180 nil nil)))

