(resolution (literal_sentence 0
             (literal_sentence-1 nil 3482530864 3482531137
              ("" (skolem!)
               (("" (expand sentence?)
                 (("" (typepred lA!1)
                   (("" (expand literal?)
                     (("" (split -1)
                       (("1" (expand prop_atom?)
                         (("1" (expand freevars)
                           (("1" (lift-if)
                             (("1" (flatten)
                               (("1"
                                 (replace -1)
                                 (("1"
                                   (expand termvars)
                                   (("1"
                                     (lift-if)
                                     (("1"
                                       (typepred "args(lA!1)")
                                       (("1" (grind) nil nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2" (flatten)
                         (("2" (expand freevars)
                           (("2" (lift-if)
                             (("2" (assert)
                               (("2"
                                 (expand freevars)
                                 (("2"
                                   (lift-if)
                                   (("2"
                                     (expand prop_atom?)
                                     (("2"
                                       (flatten)
                                       (("2"
                                         (grind)
                                         (("2"
                                           (typepred "args(arg(lA!1))")
                                           (("2"
                                             (grind)
                                             (("2"
                                               (expand termvars)
                                               (("2"
                                                 (lift-if)
                                                 (("2"
                                                   (grind)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((sentence? const-decl "bool" fmla nil)
               (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla
                nil)
               (arg adt-accessor-decl "[(f_not?) -> fmla]" fmla nil)
               (prop_atom? const-decl "bool" resolution nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (number nonempty-type-decl nil numbers nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (term type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (length def-decl "nat" list_props nil)
               (atom? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
               (funpred type-decl nil funpred_adt nil)
               (arity shared-adt-accessor-decl "[funpred -> nat]"
                      funpred_adt nil)
               (pred? adt-def-decl "boolean" funpred_adt nil)
               (pred adt-accessor-decl "[(atom?) -> (pred?)]" fmla nil)
               (args adt-accessor-decl
                     "[d: (atom?) -> {ss: list[term] | length(ss) = arity(pred(d))}]"
                     fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil))
              273311 280 t shostak))
            (literal_list_sentence_list 0
             (literal_list_sentence_list-1 nil 3482531212 3482531407
              ("" (induct lAA)
               (("1" (grind) nil nil)
                ("2" (skolem-typepred)
                 (("2" (flatten)
                   (("2" (expand sentence_list? 1)
                     (("2" (expand freevars 1)
                       (("2" (lemma literal_sentence)
                         (("2" (inst -1 cons1_var!1)
                           (("2" (expand sentence? -1)
                             (("2" (assert) (("2" (grind) nil nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((NOT const-decl "[bool -> bool]" booleans nil)
               (literal_sentence formula-decl nil resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (prop_atom? const-decl "bool" resolution nil)
               (append def-decl "list[T]" list_props nil)
               (list_induction formula-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (literal? const-decl "bool" resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil))
              194303 80 t shostak))
            (index_TCC1 0
             (index_TCC1-1 nil 3482010882 3482531203
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              12 20 nil nil))
            (index_TCC2 0
             (index_TCC2-1 nil 3482010882 3482531203
              ("" (subtype-tcc) nil nil) unfinished
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              78 70 nil nil))
            (index_TCC3 0
             (index_TCC3-1 nil 3482010882 3482531203
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              22 20 nil nil))
            (index_TCC4 0
             (index_TCC4-1 nil 3482191174 3482531203
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              39 20 nil nil))
            (index_TCC5 0
             (index_TCC5-1 nil 3482191799 3482531203
              ("" (subtype-tcc) nil nil) unfinished nil 133 90 nil
              nil))
            (index_inj 0
             (index_inj-1 nil 3482502770 3482503311
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (expand index)
                   (("" (lift-if)
                     (("" (split)
                       (("1" (lift-if)
                         (("1" (split)
                           (("1" (flatten)
                             (("1" (assert)
                               (("1"
                                 (grind)
                                 (("1"
                                   (grind)
                                   (("1"
                                     (replace -3 -6 RL)
                                     (("1"
                                       (grind)
                                       (("1" (postpone) nil nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil)
                            ("2" (postpone) nil nil))
                           nil))
                         nil)
                        ("2" (postpone) nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished nil 540960 1730 t shostak))
            (IMP_sortedlist_TCC1 0
             (IMP_sortedlist_TCC1-1 nil 3482519649 3482531203
              ("" (subtype-tcc) nil nil) unfinished nil 207 200 nil
              nil))
            (IMP_sortedlist_TCC2 0
             (IMP_sortedlist_TCC2-1 nil 3482533503 nil
              ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))
            (clause_prop_TCC1 0
             (clause_prop_TCC1-1 nil 3482191799 3482531203
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil))
              29 10 nil nil))
            (clause_prop_TCC2 0
             (clause_prop_TCC2-1 nil 3482191799 3482531203
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil))
              14 10 nil nil))
            (clause_prop 0
             (clause_prop-1 nil 3482192365 3482192814
              ("" (induct-and-simplify lAA)
               (("1" (lemma clause_rec_red)
                 (("1" (inst -1 "cons2_var!1" "index(cons1_var!1)" 0)
                   (("1" (delete -1)
                     (("1" (expand clause_rec?)
                       (("1" (lift-if) (("1" (assert) nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("2" (expand clause_rec? 1)
                 (("2" (lift-if)
                   (("2" (assert)
                     (("2" (split)
                       (("1" (propax) nil nil)
                        ("2" (flatten) (("2" (grind) nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished
              ((nat nonempty-type-eq-decl nil naturalnumbers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (< const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (prop_atom? const-decl "bool" resolution nil)
               (IFF const-decl "[bool, bool -> bool]" booleans nil)
               (clause? const-decl "bool" resolution nil)
               (OR const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (fmla type-decl nil fmla nil)
               (list_induction formula-decl nil list_adt nil))
              449378 900 t shostak))
            (include_clause_TCC1 0
             (include_clause_TCC1-1 nil 3482270929 3482531203
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil))
              29 10 nil nil))
            (include_clause_TCC2 0
             (include_clause_TCC2-1 nil 3482270929 3482531203
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil))
              11 10 nil nil))
            (nclause2fmla_TCC1 0
             (nclause2fmla_TCC1-1 nil 3482270929 3482531203
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (nclause? const-decl "bool" resolution nil))
              11 10 nil nil))
            (nclause2fmla_TCC2 0
             (nclause2fmla_TCC2-1 nil 3482270929 3482531203
              ("" (subtype-tcc) nil nil) unfinished nil 40 30 nil nil))
            (nclause2fmla_TCC3 0
             (nclause2fmla_TCC3-1 nil 3482270929 3482531203
              ("" (termination-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (nclause? const-decl "bool" resolution nil)
               (length def-decl "nat" list_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil))
              59 30 nil nil))
            (nclause2fmla_sentence 0
             (nclause2fmla_sentence-1 nil 3482531702 3482532128
              ("" (induct nclAA)
               (("1" (grind) nil nil) ("2" (grind) nil nil)
                ("3" (grind) nil nil)
                ("4" (skolem-typepred)
                 (("4" (flatten)
                   (("4" (expand nclause2fmla 1)
                     (("4" (split 1)
                       (("1" (flatten)
                         (("1" (lemma literal_sentence)
                           (("1" (inst -1 cons1_var!1) nil nil)) nil))
                         nil)
                        ("2" (flatten)
                         (("2" (expand sentence? 2)
                           (("2" (expand freevars 2)
                             (("2" (use literal_sentence)
                               (("2"
                                 (expand sentence? -1)
                                 (("2"
                                   (lemma clause_prop)
                                   (("2"
                                     (inst
                                      -1
                                      "cons(cons1_var!1, cons2_var!1)")
                                     (("2"
                                       (flatten)
                                       (("2"
                                         (hide -2)
                                         (("2"
                                           (replace -6)
                                           (("2"
                                             (split -1)
                                             (("1" (grind) nil nil)
                                              ("2" (grind) nil nil)
                                              ("3"
                                               (flatten)
                                               (("3"
                                                 (assert)
                                                 (("3"
                                                   (expand nclause? -6)
                                                   (("3"
                                                     (expand
                                                      sentence?
                                                      -6)
                                                     (("3"
                                                       (grind)
                                                       nil
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((NOT const-decl "[bool -> bool]" booleans nil) nil
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (prop_atom? const-decl "bool" resolution nil)
               (append def-decl "list[T]" list_props nil)
               (clause_prop formula-decl nil resolution nil)
               (literal_sentence formula-decl nil resolution nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (sorted? def-decl "bool" sortedlist nil)
               (list_induction formula-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (literal? const-decl "bool" resolution nil)
               (nclause2fmla def-decl "fmla" resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               nil (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil))
              425255 360 t shostak))
            (clause_sentence_list 0
             (clause_sentence_list-1 nil 3482270948 3482531657
              ("" (use literal_list_sentence_list)
               (("" (skolem!) (("" (inst -1 clAA!1) nil nil)) nil))
               nil)
              unchecked
              ((clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (PRED type-eq-decl nil defined_types nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (literal_list_sentence_list formula-decl nil resolution
                nil))
              44769 90 t shostak))
            (or_reduction_TCC1 0
             (or_reduction_TCC1-1 nil 3482275916 3482531203
              ("" (subtype-tcc) nil nil) unfinished nil 22 30 nil nil))
            (or_reduction_TCC2 0
             (or_reduction_TCC2-1 nil 3482275916 3482531203
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (nclause? const-decl "bool" resolution nil))
              30 20 nil nil))
            (or_reduction_TCC3 0
             (or_reduction_TCC3-1 nil 3482275916 3482531203
              ("" (subtype-tcc) nil nil) unfinished nil 24 20 nil nil))
            (not_or_reduction_TCC1 0
             (not_or_reduction_TCC1-1 nil 3482275916 3482531203
              ("" (subtype-tcc) nil nil) unfinished nil 26 30 nil nil))
            (cut1_lemma1_TCC1 0
             (cut1_lemma1_TCC1-1 nil 3482523115 3482531203
              ("" (subtype-tcc) nil nil) unfinished nil 34 20 nil nil))
            (cut2_lemma1_TCC1 0
             (cut2_lemma1_TCC1-1 nil 3482523115 3482531204
              ("" (subtype-tcc) nil nil) unfinished nil 20 20 nil nil))
            (concl_lemma1_TCC1 0
             (concl_lemma1_TCC1-1 nil 3482523115 3482531204
              ("" (subtype-tcc) nil nil) unfinished nil 32 10 nil nil))
            (concl_lemma1_TCC2 0
             (concl_lemma1_TCC2-1 nil 3482523115 3482531204
              ("" (subtype-tcc) nil nil) unfinished nil 9 10 nil nil))
            (RR_lemma1_TCC1 0
             (RR_lemma1_TCC1-1 nil 3482519649 3482531204
              ("" (cond-coverage-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (< const-decl "bool" reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil naturalnumbers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil))
              13 20 nil nil))
            (lemma1 0
             (lemma1-1 nil 3482523174 3482530201
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (split)
                   (("1" (grind) nil nil)
                    ("2" (grind)
                     (("2" (case "i!1 = 2")
                       (("1" (grind)
                         (("1"
                           (use list2set_member ("k" "AA!1" "a" "x!1"))
                           (("1" (grind) nil nil)) nil))
                         nil)
                        ("2" (grind) nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((cut1_lemma1 const-decl "proof_step" resolution nil)
               (cut2_lemma1 const-decl "proof_step" resolution nil)
               (concl_lemma1 const-decl "proof_step" resolution nil)
               (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
               (conclusion const-decl "sequent" proof nil)
               (odd_minus_odd_is_even application-judgement "even_int"
                integers nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (fmla type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (list2set_member formula-decl nil minlist nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (member def-decl "bool" list_props nil)
               (ax_rule? const-decl "bool" sequents nil)
               (list2set def-decl "set[T]" list2set nil)
               (emptyset const-decl "set" sets nil)
               (member const-decl "bool" sets nil)
               (add const-decl "(nonempty?)" sets nil)
               (subset? const-decl "bool" sets nil)
               (cut_rule? const-decl "bool" sequents nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (< const-decl "bool" reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil naturalnumbers nil)
               (sentence_list? const-decl "bool" fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (checkProof const-decl "bool" proof nil)
               (two_premise? adt-def-decl "boolean" proof nil)
               (one_premise? adt-def-decl "boolean" proof nil)
               (empty_seq const-decl "finseq" finite_sequences nil))
              11420 400 t shostak))
            (th1 0
             (th1-1 nil 3482276728 3482535500
              ("" (induct nclAA)
               (("1" (grind) nil nil) ("2" (grind) nil nil)
                ("3" (grind) nil nil)
                ("4" (skolem-typepred)
                 (("4" (flatten)
                   (("4" (skolem-typepred)
                     (("4" (flatten)
                       (("4" (expand not_or_reduction 1 1)
                         (("4" (expand append 1 1)
                           (("4" (expand append 1 1)
                             (("4" (expand nclause2fmla 1)
                               (("4"
                                 (lift-if)
                                 (("4"
                                   (split 1)
                                   (("1"
                                     (flatten)
                                     (("1"
                                       (expand include_clause -12)
                                       (("1"
                                         (use subset_include)
                                         (("1"
                                           (replace -13)
                                           (("1"
                                             (flatten)
                                             (("1"
                                               (expand subset -1)
                                               (("1"
                                                 (flatten)
                                                 (("1"
                                                   (lemma lemma1)
                                                   (("1"
                                                     (inst
                                                      -1
                                                      "cons1_var!1"
                                                      "append(not_or_reduction(nclBB!1), clCC!1)")
                                                     (("1"
                                                       (inst
                                                        1
                                                        "RR_lemma1(cons1_var!1, append(not_or_reduction(nclBB!1), clCC!1))")
                                                       (("1"
                                                         (assert)
                                                         (("1"
                                                           (rewrite -1)
                                                           (("1"
                                                             (hide 2)
                                                             (("1"
                                                               (lemma
                                                                member_append
                                                                ("a"
                                                                 "cons1_var!1"
                                                                 "k"
                                                                 "not_or_reduction(nclBB!1)"
                                                                 "l"
                                                                 "clCC!1"))
                                                               (("1"
                                                                 (hide
                                                                  -2
                                                                  -4
                                                                  -5
                                                                  -7
                                                                  -8
                                                                  -9
                                                                  -10
                                                                  -12
                                                                  -13
                                                                  -14
                                                                  -15
                                                                  -16
                                                                  -17)
                                                                 (("1"
                                                                   (lemma
                                                                    member_lit_member_fmla)
                                                                   (("1"
                                                                     (inst
                                                                      -1
                                                                      "cons1_var!1"
                                                                      "clCC!1")
                                                                     (("1"
                                                                       (replace
                                                                        -3)
                                                                       (("1"
                                                                         (replace
                                                                          -1)
                                                                         (("1"
                                                                           (propax)
                                                                           nil
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil)
                                                            ("2"
                                                             (lemma
                                                              literal_sentence)
                                                             (("2"
                                                               (inst
                                                                -1
                                                                cons1_var!1)
                                                               nil
                                                               nil))
                                                             nil)
                                                            ("3"
                                                             (hide 2)
                                                             (("3"
                                                               (expand
                                                                not_or_reduction
                                                                1)
                                                               (("3"
                                                                 (expand
                                                                  append
                                                                  1)
                                                                 (("3"
                                                                   (expand
                                                                    append
                                                                    1)
                                                                   (("3"
                                                                     (expand
                                                                      sentence_list?
                                                                      1)
                                                                     (("3"
                                                                       (expand
                                                                        freevars
                                                                        1)
                                                                       (("3"
                                                                         (hide
                                                                          -12)
                                                                         (("3"
                                                                           (lemma
                                                                            literal_sentence)
                                                                           (("3"
                                                                             (expand
                                                                              freevars
                                                                              1
                                                                              1)
                                                                             (("3"
                                                                               (hide
                                                                                -1)
                                                                               (("3"
                                                                                 (lemma
                                                                                  nclause2fmla_sentence)
                                                                                 (("3"
                                                                                   (inst
                                                                                    -1
                                                                                    nclBB!1)
                                                                                   (("3"
                                                                                     (expand
                                                                                      sentence?
                                                                                      -1)
                                                                                     (("3"
                                                                                       (lemma
                                                                                        literal_list_sentence_list)
                                                                                       (("3"
                                                                                         (inst
                                                                                          -1
                                                                                          clCC!1)
                                                                                         (("3"
                                                                                           (expand
                                                                                            sentence_list?
                                                                                            -1)
                                                                                           (("3"
                                                                                             (grind)
                                                                                             nil
                                                                                             nil))
                                                                                           nil))
                                                                                         nil))
                                                                                       nil))
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2"
                                     (flatten)
                                     (("2" (postpone) nil nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished nil 848876 390 t shostak)))

