(resolution (literal_sentence 0
             (literal_sentence-1 nil 3482530864 3482531137
              ("" (skolem!)
               (("" (expand sentence?)
                 (("" (typepred lA!1)
                   (("" (expand literal?)
                     (("" (split -1)
                       (("1" (expand prop_atom?)
                         (("1" (expand freevars)
                           (("1" (lift-if)
                             (("1" (flatten)
                               (("1"
                                 (replace -1)
                                 (("1"
                                   (expand termvars)
                                   (("1"
                                     (lift-if)
                                     (("1"
                                       (typepred "args(lA!1)")
                                       (("1" (grind) nil nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2" (flatten)
                         (("2" (expand freevars)
                           (("2" (lift-if)
                             (("2" (assert)
                               (("2"
                                 (expand freevars)
                                 (("2"
                                   (lift-if)
                                   (("2"
                                     (expand prop_atom?)
                                     (("2"
                                       (flatten)
                                       (("2"
                                         (grind)
                                         (("2"
                                           (typepred "args(arg(lA!1))")
                                           (("2"
                                             (grind)
                                             (("2"
                                               (expand termvars)
                                               (("2"
                                                 (lift-if)
                                                 (("2"
                                                   (grind)
                                                   nil
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished
              ((sentence? const-decl "bool" fmla nil)
               (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla
                nil)
               (arg adt-accessor-decl "[(f_not?) -> fmla]" fmla nil)
               (prop_atom? const-decl "bool" resolution nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (number nonempty-type-decl nil numbers nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (term type-decl nil fmla nil)
               (list type-decl nil list_adt nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (length def-decl "nat" list_props nil)
               (atom? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
               (funpred type-decl nil funpred_adt nil)
               (arity shared-adt-accessor-decl "[funpred -> nat]"
                      funpred_adt nil)
               (pred? adt-def-decl "boolean" funpred_adt nil)
               (pred adt-accessor-decl "[(atom?) -> (pred?)]" fmla nil)
               (args adt-accessor-decl
                     "[d: (atom?) -> {ss: list[term] | length(ss) = arity(pred(d))}]"
                     fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil))
              273311 280 t shostak))
            (literal_list_sentence_list 0
             (literal_list_sentence_list-1 nil 3482531212 3482531407
              ("" (induct lAA)
               (("1" (grind) nil nil)
                ("2" (skolem-typepred)
                 (("2" (flatten)
                   (("2" (expand sentence_list? 1)
                     (("2" (expand freevars 1)
                       (("2" (lemma literal_sentence)
                         (("2" (inst -1 cons1_var!1)
                           (("2" (expand sentence? -1)
                             (("2" (assert) (("2" (grind) nil nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished
              ((NOT const-decl "[bool -> bool]" booleans nil)
               (literal_sentence formula-decl nil resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (prop_atom? const-decl "bool" resolution nil)
               (append def-decl "list[T]" list_props nil)
               (list_induction formula-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (literal? const-decl "bool" resolution nil)
               (sentence_list? const-decl "bool" fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil))
              194303 80 t shostak))
            (index_TCC1 0
             (index_TCC1-1 nil 3482010882 3482703325
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              899 10 nil nil))
            (index_TCC2 0
             (index_TCC2-1 nil 3482010882 3482703326
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              58 60 nil nil))
            (index_TCC3 0
             (index_TCC3-1 nil 3482010882 3482703326
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              37 10 nil nil))
            (index_TCC4 0
             (index_TCC4-1 nil 3482191174 3482703326
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (literal? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil))
              21 20 nil nil))
            (index_TCC5 0
             (index_TCC5-1 nil 3482191799 3482703326
              ("" (subtype-tcc) nil nil) unchecked nil 107 90 nil nil))
            (index_inj 0
             (index_inj-1 nil 3482502770 3482503311
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (expand index)
                   (("" (lift-if)
                     (("" (split)
                       (("1" (lift-if)
                         (("1" (split)
                           (("1" (flatten)
                             (("1" (assert)
                               (("1"
                                 (grind)
                                 (("1"
                                   (grind)
                                   (("1"
                                     (replace -3 -6 RL)
                                     (("1"
                                       (grind)
                                       (("1" (postpone) nil nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil)
                            ("2" (postpone) nil nil))
                           nil))
                         nil)
                        ("2" (postpone) nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished nil 540960 1730 t shostak))
            (IMP_sortedlist_TCC1 0
             (IMP_sortedlist_TCC1-1 nil 3482519649 3482703326
              ("" (subtype-tcc) nil nil) unchecked nil 218 200 nil
              nil))
            (clause_prop_TCC1 0
             (clause_prop_TCC1-1 nil 3482191799 3482703326
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil))
              11 10 nil nil))
            (clause_prop_TCC2 0
             (clause_prop_TCC2-1 nil 3482191799 3482703326
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil))
              28 20 nil nil))
            (clause_prop 0
             (clause_prop-1 nil 3482192365 3482192814
              ("" (induct-and-simplify lAA)
               (("1" (lemma clause_rec_red)
                 (("1" (inst -1 "cons2_var!1" "index(cons1_var!1)" 0)
                   (("1" (delete -1)
                     (("1" (expand clause_rec?)
                       (("1" (lift-if) (("1" (assert) nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("2" (expand clause_rec? 1)
                 (("2" (lift-if)
                   (("2" (assert)
                     (("2" (split)
                       (("1" (propax) nil nil)
                        ("2" (flatten) (("2" (grind) nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished
              ((nat nonempty-type-eq-decl nil naturalnumbers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (null? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (< const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (prop_atom? const-decl "bool" resolution nil)
               (IFF const-decl "[bool, bool -> bool]" booleans nil)
               (clause? const-decl "bool" resolution nil)
               (OR const-decl "[bool, bool -> bool]" booleans nil)
               (literal? const-decl "bool" resolution nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (fmla type-decl nil fmla nil)
               (list_induction formula-decl nil list_adt nil))
              449378 900 t shostak))
            (include_clause_TCC1 0
             (include_clause_TCC1-1 nil 3482270929 3482703326
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil))
              11 10 nil nil))
            (include_clause_TCC2 0
             (include_clause_TCC2-1 nil 3482270929 3482703326
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil))
              25 20 nil nil))
            (nclause2fmla_TCC1 0
             (nclause2fmla_TCC1-1 nil 3482270929 3482703326
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (nclause? const-decl "bool" resolution nil))
              12 10 nil nil))
            (nclause2fmla_TCC2 0
             (nclause2fmla_TCC2-1 nil 3482270929 3482703326
              ("" (subtype-tcc) nil nil) unchecked nil 37 20 nil nil))
            (nclause2fmla_TCC3 0
             (nclause2fmla_TCC3-1 nil 3482270929 3482703326
              ("" (termination-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (nclause? const-decl "bool" resolution nil)
               (length def-decl "nat" list_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil))
              39 40 nil nil))
            (nclause2fmla_sentence 0
             (nclause2fmla_sentence-1 nil 3482531702 3482532128
              ("" (induct nclAA)
               (("1" (grind) nil nil) ("2" (grind) nil nil)
                ("3" (grind) nil nil)
                ("4" (skolem-typepred)
                 (("4" (flatten)
                   (("4" (expand nclause2fmla 1)
                     (("4" (split 1)
                       (("1" (flatten)
                         (("1" (lemma literal_sentence)
                           (("1" (inst -1 cons1_var!1) nil nil)) nil))
                         nil)
                        ("2" (flatten)
                         (("2" (expand sentence? 2)
                           (("2" (expand freevars 2)
                             (("2" (use literal_sentence)
                               (("2"
                                 (expand sentence? -1)
                                 (("2"
                                   (lemma clause_prop)
                                   (("2"
                                     (inst
                                      -1
                                      "cons(cons1_var!1, cons2_var!1)")
                                     (("2"
                                       (flatten)
                                       (("2"
                                         (hide -2)
                                         (("2"
                                           (replace -6)
                                           (("2"
                                             (split -1)
                                             (("1" (grind) nil nil)
                                              ("2" (grind) nil nil)
                                              ("3"
                                               (flatten)
                                               (("3"
                                                 (assert)
                                                 (("3"
                                                   (expand nclause? -6)
                                                   (("3"
                                                     (expand
                                                      sentence?
                                                      -6)
                                                     (("3"
                                                       (grind)
                                                       nil
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unfinished
              ((NOT const-decl "[bool -> bool]" booleans nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (prop_atom? const-decl "bool" resolution nil)
               (append def-decl "list[T]" list_props nil)
               (clause_prop formula-decl nil resolution nil)
               (literal_sentence formula-decl nil resolution nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (> const-decl "bool" reals nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (sorted? def-decl "bool" sortedlist nil)
               (list_induction formula-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (literal? const-decl "bool" resolution nil)
               (nclause2fmla def-decl "fmla" resolution nil)
               (sentence? const-decl "bool" fmla nil)
               (nclause? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil))
              425255 360 t shostak))
            (clause_sentence_list 0
             (clause_sentence_list-1 nil 3482270948 3482531657
              ("" (use literal_list_sentence_list)
               (("" (skolem!) (("" (inst -1 clAA!1) nil nil)) nil))
               nil)
              unfinished
              ((clause? const-decl "bool" resolution nil)
               (literal? const-decl "bool" resolution nil)
               (PRED type-eq-decl nil defined_types nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (literal_list_sentence_list formula-decl nil resolution
                nil))
              44769 90 t shostak))
            (or_reduction_TCC1 0
             (or_reduction_TCC1-1 nil 3482275916 3482703326
              ("" (subtype-tcc) nil nil) unchecked nil 21 20 nil nil))
            (or_reduction_TCC2 0
             (or_reduction_TCC2-1 nil 3482275916 3482703326
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (nclause? const-decl "bool" resolution nil))
              26 10 nil nil))
            (or_reduction_TCC3 0
             (or_reduction_TCC3-1 nil 3482275916 3482703326
              ("" (subtype-tcc) nil nil) unchecked nil 22 30 nil nil))
            (not_or_reduction_TCC1 0
             (not_or_reduction_TCC1-1 nil 3482275916 3482703326
              ("" (subtype-tcc) nil nil) unchecked nil 37 20 nil nil))
            (offset_proof_step_TCC1 0
             (offset_proof_step_TCC1-1 nil 3482700134 3482703326
              ("" (subtype-tcc) nil nil) unchecked nil 40 40 nil nil))
            (ax_proof_step_TCC1 0
             (ax_proof_step_TCC1-1 nil 3482715509 nil
              ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))
            (concl_ax_TCC1 0
             (concl_ax_TCC1-1 nil 3482714865 nil
              ("" (subtype-tcc) nil nil) unfinished nil nil nil nil
              nil))
            (concl_ax_TCC2 0
             (concl_ax_TCC2-1 nil 3482715509 nil
              ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))
            (RR_ax_TCC1 0
             (RR_ax_TCC1-1 nil 3482715509 nil
              ("" (cond-coverage-tcc) nil nil) nil nil nil nil nil
              nil))
            (lemma_ax 0
             (lemma_ax-1 nil 3482714966 3482715249
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (split)
                   (("1" (grind) nil nil)
                    ("2" (expand checkProof)
                     (("2" (skolem-typepred)
                       (("2" (split)
                         (("1" (grind) nil nil) ("2" (grind) nil nil)
                          ("3" (flatten)
                           (("3" (expand RR_ax -2)
                             (("3" (case "i!1=0")
                               (("1" (grind) nil nil)
                                ("2"
                                 (case "i!1=1")
                                 (("1" (grind) nil nil)
                                  ("2" (grind) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("4" (flatten)
                           (("4" (case "i!1=1")
                             (("1" (grind) nil nil)
                              ("2" (case "i!1=0")
                               (("1" (grind) nil nil)
                                ("2" (grind) nil nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((checkProof const-decl "bool" proof nil)
               (two_premise? adt-def-decl "boolean" proof nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (one_premise? adt-def-decl "boolean" proof nil)
               (sentence_list? const-decl "bool" fmla nil)
               (member def-decl "bool" list_props nil)
               (ax_rule? const-decl "bool" sequents nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (subset def-decl "bool" minlist nil)
               (subset_rule? const-decl "bool" sequents nil)
               (below type-eq-decl nil naturalnumbers nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (> const-decl "bool" reals nil)
               (proof_seq type-eq-decl nil proof nil)
               (proof_step type-eq-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rule type-decl nil proof nil)
               (below type-eq-decl nil nat_types nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (>= const-decl "bool" reals nil)
               (int nonempty-type-eq-decl nil integers nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (< const-decl "bool" reals nil)
               (real nonempty-type-from-decl nil reals nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number nonempty-type-decl nil numbers nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (conclusion const-decl "sequent" proof nil)
               (RR_ax const-decl "ne_proof_seq" resolution nil)
               (concl_ax const-decl "proof_step" resolution nil)
               (ax_proof_step const-decl "proof_step" resolution nil))
              283077 770 t shostak))
            (concl_norr_TCC1 0
             (concl_norr_TCC1-1 nil 3482700134 3482703326
              ("" (subtype-tcc) nil nil) unchecked nil 31 20 nil nil))
            (concl_norr_TCC2 0
             (concl_norr_TCC2-1 nil 3482700134 3482703326
              ("" (subtype-tcc) nil nil) unchecked nil 3 10 nil nil))
            (concl_norr_TCC3 0
             (concl_norr_TCC3-1 nil 3482700134 3482703326
              ("" (subtype-tcc) nil nil) unchecked nil 82 60 nil nil))
            (RR_norr_TCC1 0
             (RR_norr_TCC1-1 nil 3482700134 3482703326
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (list type-decl nil list_adt nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              71 50 nil nil))
            (RR_norr_TCC2 0
             (RR_norr_TCC2-1 nil 3482700134 3482703327
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (list type-decl nil list_adt nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (minus_odd_is_odd application-judgement "odd_int"
                integers nil))
              136 110 nil nil))
            (RR_norr_TCC3 0
             (RR_norr_TCC3-1 nil 3482700134 3482703327
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (list type-decl nil list_adt nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              77 60 nil nil))
            (RR_norr_TCC4 0
             (RR_norr_TCC4-1 nil 3482700134 3482703327
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (list type-decl nil list_adt nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              79 60 nil nil))
            (RR_norr_TCC5 0
             (RR_norr_TCC5-1 nil 3482700134 3482703327
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (list type-decl nil list_adt nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              91 60 nil nil))
            (RR_norr_TCC6 0
             (RR_norr_TCC6-1 nil 3482700134 3482703327
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (list type-decl nil list_adt nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              80 70 nil nil))
            (RR_norr_TCC7 0
             (RR_norr_TCC7-1 nil 3482700134 3482703327
              ("" (cond-disjoint-tcc) nil nil) unchecked nil 204 150
              nil nil))
            (RR_norr_TCC8 0
             (RR_norr_TCC8-1 nil 3482700134 3482703327
              ("" (cond-coverage-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (list type-decl nil list_adt nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (below type-eq-decl nil naturalnumbers nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (< const-decl "bool" reals nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              116 100 nil nil))
            (RR_norr_TCC9 0
             (RR_norr_TCC9-1 nil 3482700134 3482703327
              ("" (subtype-tcc) nil nil) unchecked
              ((posint_plus_nnint_is_posint application-judgement
                "posint" integers nil))
              42 40 nil nil))
            (lemma_norr 0
             (lemma_norr-1 nil 3482705990 3482706457
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (split)
                   (("1" (grind) nil nil)
                    ("2" (expand checkProof 1)
                     (("2" (expand RR_norr 1)
                       (("2" (skolem-typepred)
                         (("2" (expand RR_norr -1)
                           (("2" (case "i!1 < RR1!1`length")
                             (("1" (expand checkProof -10)
                               (("1"
                                 (inst -10 i!1)
                                 (("1" (grind) nil nil))
                                 nil))
                               nil)
                              ("2"
                               (case
                                "i!1 < RR1!1`length + RR2!1`length")
                               (("1"
                                 (expand checkProof)
                                 (("1"
                                   (inst -11 "i!1 - RR1!1`length")
                                   (("1" (grind) nil nil)
                                    ("2"
                                     (hide 3)
                                     (("2" (grind) nil nil))
                                     nil))
                                   nil))
                                 nil)
                                ("2"
                                 (case
                                  "i!1 = RR1!1`length + RR2!1`length")
                                 (("1" (grind) nil nil)
                                  ("2" (grind) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (list type-decl nil list_adt nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (nnint_plus_nnint_is_nnint application-judgement
                "nonneg_int" integers nil)
               (minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (conclusion const-decl "sequent" proof nil)
               (RR_norr const-decl "ne_proof_seq" resolution nil)
               (concl_norr const-decl "proof_step" resolution nil)
               (offset_proof_step const-decl "proof_step" resolution
                nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (subset_is_partial_order name-judgement
                "(partial_order?[set[T]])" sets_lemmas nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (ax_rule? const-decl "bool" sequents nil)
               (subset_rule? const-decl "bool" sequents nil)
               (list2set def-decl "set[T]" list2set nil)
               (member const-decl "bool" sets nil)
               (add const-decl "(nonempty?)" sets nil)
               (subset? const-decl "bool" sets nil)
               (or_rule? const-decl "bool" sequents nil)
               (nor_rule? const-decl "bool" sequents nil)
               (neg_rule? const-decl "bool" sequents nil)
               (cut_rule? const-decl "bool" sequents nil)
               (exists_rule? const-decl "bool" sequents nil)
               (f_neg const-decl "fmla" fmla nil)
               (forall_rule? const-decl "bool" sequents nil)
               (fschema_rule? const-decl "bool" sequents nil)
               (pschema_rule? const-decl "bool" sequents nil)
               (equality? const-decl "bool" sequents nil)
               (nth def-decl "T" list_props nil)
               (refl_equality? const-decl "bool" sequents nil)
               (reflex_rule? const-decl "bool" sequents nil)
               (finseq_appl const-decl "[below[length(fs)] -> T]"
                finite_sequences nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (- const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (two_premise? adt-def-decl "boolean" proof nil)
               (one_premise? adt-def-decl "boolean" proof nil)
               (empty_seq const-decl "finseq" finite_sequences nil)
               (sentence_list? const-decl "bool" fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (below type-eq-decl nil naturalnumbers nil)
               (fmla type-decl nil fmla nil)
               (< const-decl "bool" reals nil)
               (checkProof const-decl "bool" proof nil))
              322377 15980 t shostak))
            (concl_orr_TCC1 0
             (concl_orr_TCC1-1 nil 3482700134 3482703327
              ("" (subtype-tcc) nil nil) unchecked nil 18 10 nil nil))
            (concl_orr_TCC2 0
             (concl_orr_TCC2-1 nil 3482700134 3482703327
              ("" (subtype-tcc) nil nil) unchecked nil 7 10 nil nil))
            (RR_orr_TCC1 0
             (RR_orr_TCC1-1 nil 3482700134 3482703327
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (list type-decl nil list_adt nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              36 30 nil nil))
            (RR_orr_TCC2 0
             (RR_orr_TCC2-1 nil 3482700134 3482703327
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (list type-decl nil list_adt nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              36 10 nil nil))
            (RR_orr_TCC3 0
             (RR_orr_TCC3-1 nil 3482700134 3482703327
              ("" (subtype-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (list type-decl nil list_adt nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              36 30 nil nil))
            (RR_orr_TCC4 0
             (RR_orr_TCC4-1 nil 3482700134 3482703327
              ("" (cond-disjoint-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (list type-decl nil list_adt nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              46 50 nil nil))
            (RR_orr_TCC5 0
             (RR_orr_TCC5-1 nil 3482700134 3482703328
              ("" (cond-coverage-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (list type-decl nil list_adt nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (< const-decl "bool" reals nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (+ const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (below type-eq-decl nil naturalnumbers nil))
              47 50 nil nil))
            (RR_orr_TCC6 0
             (RR_orr_TCC6-1 nil 3482700134 3482703328
              ("" (subtype-tcc) nil nil) unchecked nil 4 0 nil nil))
            (lemma_orr 0
             (lemma_orr-1 nil 3482704894 3482705960
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (split)
                   (("1" (grind) nil nil)
                    ("2" (expand checkProof 1)
                     (("2" (skolem-typepred)
                       (("2" (expand RR_orr -1)
                         (("2" (case "i!1 < RR1!1`length")
                           (("1" (expand RR_orr +)
                             (("1" (assert)
                               (("1"
                                 (expand concl_orr +)
                                 (("1"
                                   (expand checkProof -8)
                                   (("1"
                                     (inst -8 i!1)
                                     (("1" (grind) nil nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil)
                            ("2" (case "i!1 = RR1!1`length")
                             (("1" (grind) nil nil)
                              ("2" (grind) nil nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (list type-decl nil list_adt nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (conclusion const-decl "sequent" proof nil)
               (RR_orr const-decl "ne_proof_seq" resolution nil)
               (concl_orr const-decl "proof_step" resolution nil)
               (< const-decl "bool" reals nil)
               (fmla type-decl nil fmla nil)
               (below type-eq-decl nil naturalnumbers nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (ax_rule? const-decl "bool" sequents nil)
               (subset_rule? const-decl "bool" sequents nil)
               (list2set def-decl "set[T]" list2set nil)
               (member const-decl "bool" sets nil)
               (add const-decl "(nonempty?)" sets nil)
               (subset? const-decl "bool" sets nil)
               (or_rule? const-decl "bool" sequents nil)
               (nor_rule? const-decl "bool" sequents nil)
               (neg_rule? const-decl "bool" sequents nil)
               (cut_rule? const-decl "bool" sequents nil)
               (exists_rule? const-decl "bool" sequents nil)
               (f_neg const-decl "fmla" fmla nil)
               (forall_rule? const-decl "bool" sequents nil)
               (fschema_rule? const-decl "bool" sequents nil)
               (pschema_rule? const-decl "bool" sequents nil)
               (equality? const-decl "bool" sequents nil)
               (nth def-decl "T" list_props nil)
               (refl_equality? const-decl "bool" sequents nil)
               (reflex_rule? const-decl "bool" sequents nil)
               (empty_seq const-decl "finseq" finite_sequences nil)
               (finseq_appl const-decl "[below[length(fs)] -> T]"
                finite_sequences nil)
               (sentence_list? const-decl "bool" fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (two_premise? adt-def-decl "boolean" proof nil)
               (one_premise? adt-def-decl "boolean" proof nil)
               (real_ge_is_total_order name-judgement
                "(total_order?[real])" real_props nil)
               (- const-decl "[numfield, numfield -> numfield]"
                  number_fields nil)
               (numfield nonempty-type-eq-decl nil number_fields nil)
               (subset_is_partial_order name-judgement
                "(partial_order?[set[T]])" sets_lemmas nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (checkProof const-decl "bool" proof nil))
              5185 2930 t shostak))
            (lemma_subsetr 0
             (lemma_subsetr-1 nil 3482703868 3482705969
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (split)
                   (("1" (grind) nil nil)
                    ("2" (expand checkProof 1)
                     (("2" (skolem-typepred)
                       (("2" (expand RR_subsetr -1)
                         (("2" (case "i!1 < RR1!1`length")
                           (("1" (expand checkProof)
                             (("1" (inst -8 i!1)
                               (("1"
                                 (expand RR_subsetr 1)
                                 (("1" (grind) nil nil))
                                 nil))
                               nil))
                             nil)
                            ("2" (case "i!1 = RR1!1`length")
                             (("1" (replace -1)
                               (("1"
                                 (expand RR_subsetr 2)
                                 (("1"
                                   (assert)
                                   (("1"
                                     (expand concl_subsetr)
                                     (("1"
                                       (expand conclusion -7)
                                       (("1"
                                         (replace -7)
                                         (("1"
                                           (split 2)
                                           (("1" (grind) nil nil)
                                            ("2"
                                             (expand subset_rule? 1)
                                             (("2" (propax) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil)
                              ("2" (assert) nil nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (> const-decl "bool" reals nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (list type-decl nil list_adt nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (conclusion const-decl "sequent" proof nil)
               (RR_subsetr const-decl "ne_proof_seq" resolution nil)
               (concl_subsetr const-decl "proof_step" resolution nil)
               (< const-decl "bool" reals nil)
               (fmla type-decl nil fmla nil)
               (below type-eq-decl nil naturalnumbers nil)
               (ax_rule? const-decl "bool" sequents nil)
               (subset_rule? const-decl "bool" sequents nil)
               (list2set def-decl "set[T]" list2set nil)
               (member const-decl "bool" sets nil)
               (add const-decl "(nonempty?)" sets nil)
               (subset? const-decl "bool" sets nil)
               (or_rule? const-decl "bool" sequents nil)
               (nor_rule? const-decl "bool" sequents nil)
               (neg_rule? const-decl "bool" sequents nil)
               (sentence? const-decl "bool" fmla nil)
               (cut_rule? const-decl "bool" sequents nil)
               (exists_rule? const-decl "bool" sequents nil)
               (f_neg const-decl "fmla" fmla nil)
               (forall_rule? const-decl "bool" sequents nil)
               (fschema_rule? const-decl "bool" sequents nil)
               (pschema_rule? const-decl "bool" sequents nil)
               (equality? const-decl "bool" sequents nil)
               (nth def-decl "T" list_props nil)
               (refl_equality? const-decl "bool" sequents nil)
               (reflex_rule? const-decl "bool" sequents nil)
               (empty_seq const-decl "finseq" finite_sequences nil)
               (finseq_appl const-decl "[below[length(fs)] -> T]"
                finite_sequences nil)
               (sentence_list? const-decl "bool" fmla nil)
               (real_gt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (two_premise? adt-def-decl "boolean" proof nil)
               (one_premise? adt-def-decl "boolean" proof nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (checkProof const-decl "bool" proof nil))
              3432 2550 t shostak))
            (lemma1 0
             (lemma1-1 nil 3482523174 3482715711
              ("" (skolem-typepred)
               (("" (flatten)
                 (("" (split)
                   (("1" (grind) nil nil)
                    ("2" (use lemma_ax)
                     (("2" (delete -1)
                       (("2" (expand RR_lemma1)
                         (("2" (use lemma_ax)
                           (("2" (expand member -1 2)
                             (("2" (expand member -1 1)
                               (("2"
                                 (replace -2)
                                 (("2"
                                   (expand sentence_list? -1)
                                   (("2"
                                     (expand sentence_list? -4)
                                     (("2"
                                       (expand sentence? -3)
                                       (("2"
                                         (expand freevars -1)
                                         (("2"
                                           (expand freevars -1 1)
                                           (("2"
                                             (assert)
                                             (("2" (grind) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              proved
              ((lemma_ax formula-decl nil resolution nil)
               (list type-decl nil list_adt nil)
               (fmla type-decl nil fmla nil)
               (member def-decl "bool" list_props nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (append def-decl "list[T]" list_props nil)
               (freevars def-decl "list[(var?)]" fmla nil)
               (sentence? const-decl "bool" fmla nil)
               (sentence_list? const-decl "bool" fmla nil)
               (boolean nonempty-type-decl nil booleans nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla
                nil)
               (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla
                nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (conclusion const-decl "sequent" proof nil)
               (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
               (RR_ax const-decl "ne_proof_seq" resolution nil)
               (concl_ax const-decl "proof_step" resolution nil)
               (ax_proof_step const-decl "proof_step" resolution nil))
              198265 130 t shostak))
            (RR_th1_TCC1 0
             (RR_th1_TCC1-1 nil 3482700134 3482703328
              ("" (subtype-tcc) nil nil) unchecked nil 102 90 nil nil))
            (RR_th1_TCC2 0
             (RR_th1_TCC2-1 nil 3482700134 3482703328
              ("" (termination-tcc) nil nil) unchecked
              ((boolean nonempty-type-decl nil booleans nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (NOT const-decl "[bool -> bool]" booleans nil)
               (fmla type-decl nil fmla nil)
               (PRED type-eq-decl nil defined_types nil)
               (list type-decl nil list_adt nil)
               (literal? const-decl "bool" resolution nil)
               (clause? const-decl "bool" resolution nil)
               (nclause? const-decl "bool" resolution nil)
               (prop_atom? const-decl "bool" resolution nil)
               (length def-decl "nat" list_props nil)
               (nnint_plus_posint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil))
              88 50 nil nil))
            (th1 0
             (th1-1 nil 3482276728 3482705981
              ("" (induct nclAA)
               (("1" (grind) nil nil) ("2" (grind) nil nil)
                ("3" (grind) nil nil)
                ("4" (skolem-typepred)
                 (("4" (flatten)
                   (("4" (skolem-typepred)
                     (("4" (flatten)
                       (("4" (split 1)
                         (("1" (expand RR_th1 1)
                           (("1" (lift-if 1)
                             (("1" (split 1)
                               (("1"
                                 (flatten)
                                 (("1" (grind) nil nil))
                                 nil)
                                ("2"
                                 (flatten)
                                 (("2" (grind) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("2" (expand RR_th1 1)
                           (("2" (split 1)
                             (("1" (flatten)
                               (("1"
                                 (use lemma1)
                                 (("1"
                                   (expand include_clause -10)
                                   (("1"
                                     (use subset_include)
                                     (("1"
                                       (rewrite -1)
                                       (("1"
                                         (delete -1)
                                         (("1"
                                           (expand subset -10)
                                           (("1"
                                             (flatten)
                                             (("1"
                                               (use
                                                member_lit_member_fmla)
                                               (("1"
                                                 (replace -11)
                                                 (("1"
                                                   (replace -1)
                                                   (("1"
                                                     (use
                                                      literal_sentence)
                                                     (("1"
                                                       (rewrite -1)
                                                       (("1"
                                                         (use
                                                          literal_list_sentence_list)
                                                         (("1"
                                                           (rewrite -1)
                                                           (("1"
                                                             (flatten)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil)
                              ("2" (flatten)
                               (("2"
                                 (use lemma_norr)
                                 (("2"
                                   (use literal_sentence)
                                   (("2"
                                     (rewrite -1)
                                     (("2"
                                       (use nclause2fmla_sentence)
                                       (("2"
                                         (rewrite -1)
                                         (("2"
                                           (use
                                            literal_list_sentence_list)
                                           (("2"
                                             (rewrite -1)
                                             (("2"
                                               (use lemma1)
                                               (("2"
                                                 (expand
                                                  include_clause
                                                  -10)
                                                 (("2"
                                                   (use subset_include)
                                                   (("2"
                                                     (rewrite -1 -11)
                                                     (("2"
                                                       (expand subset)
                                                       (("2"
                                                         (flatten)
                                                         (("2"
                                                           (delete
                                                            -1
                                                            -2)
                                                           (("2"
                                                             (use
                                                              member_lit_member_fmla)
                                                             (("2"
                                                               (replace
                                                                -11)
                                                               (("2"
                                                                 (replace
                                                                  -1)
                                                                 (("2"
                                                                   (use
                                                                    literal_sentence)
                                                                   (("2"
                                                                     (replace
                                                                      -1)
                                                                     (("2"
                                                                       (use
                                                                        literal_list_sentence_list)
                                                                       (("2"
                                                                         (replace
                                                                          -1)
                                                                         (("2"
                                                                           (flatten)
                                                                           (("2"
                                                                             (replace
                                                                              -4)
                                                                             (("2"
                                                                               (replace
                                                                                -5)
                                                                               (("2"
                                                                                 (lemma
                                                                                  clause_prop)
                                                                                 (("2"
                                                                                   (inst
                                                                                    -1
                                                                                    "cons(cons1_var!1, cons2_var!1)")
                                                                                   (("2"
                                                                                     (flatten)
                                                                                     (("2"
                                                                                       (delete
                                                                                        -2)
                                                                                       (("2"
                                                                                         (replace
                                                                                          -13)
                                                                                         (("2"
                                                                                           (assert)
                                                                                           (("2"
                                                                                             (flatten)
                                                                                             (("2"
                                                                                               (replace
                                                                                                -2
                                                                                                -12)
                                                                                               (("2"
                                                                                                 (split
                                                                                                  -12)
                                                                                                 (("1"
                                                                                                   (inst
                                                                                                    -1
                                                                                                    clBB!1)
                                                                                                   (("1"
                                                                                                     (expand
                                                                                                      include_clause
                                                                                                      -1)
                                                                                                     (("1"
                                                                                                       (use
                                                                                                        subset_include)
                                                                                                       (("1"
                                                                                                         (replace
                                                                                                          -1)
                                                                                                         (("1"
                                                                                                           (replace
                                                                                                            -17)
                                                                                                           (("1"
                                                                                                             (expand
                                                                                                              not_or_reduction
                                                                                                              -2)
                                                                                                             (("1"
                                                                                                               (expand
                                                                                                                append
                                                                                                                -2)
                                                                                                               (("1"
                                                                                                                 (expand
                                                                                                                  append
                                                                                                                  -2)
                                                                                                                 (("1"
                                                                                                                   (propax)
                                                                                                                   nil
                                                                                                                   nil))
                                                                                                                 nil))
                                                                                                               nil))
                                                                                                             nil))
                                                                                                           nil))
                                                                                                         nil)
                                                                                                        ("2"
                                                                                                         (expand
                                                                                                          clause?
                                                                                                          -10)
                                                                                                         (("2"
                                                                                                           (propax)
                                                                                                           nil
                                                                                                           nil))
                                                                                                         nil)
                                                                                                        ("3"
                                                                                                         (lemma
                                                                                                          clause_prop)
                                                                                                         (("3"
                                                                                                           (inst
                                                                                                            -1
                                                                                                            "cons(cons1_var!1, cons2_var!1)")
                                                                                                           (("3"
                                                                                                             (replace
                                                                                                              -14)
                                                                                                             (("3"
                                                                                                               (flatten)
                                                                                                               (("3"
                                                                                                                 (hide
                                                                                                                  -1)
                                                                                                                 (("3"
                                                                                                                   (expand
                                                                                                                    clause?
                                                                                                                    -3)
                                                                                                                   (("3"
                                                                                                                     (propax)
                                                                                                                     nil
                                                                                                                     nil))
                                                                                                                   nil))
                                                                                                                 nil))
                                                                                                               nil))
                                                                                                             nil))
                                                                                                           nil))
                                                                                                         nil))
                                                                                                       nil))
                                                                                                     nil))
                                                                                                   nil)
                                                                                                  ("2"
                                                                                                   (grind)
                                                                                                   nil
                                                                                                   nil))
                                                                                                 nil))
                                                                                               nil))
                                                                                             nil))
                                                                                           nil))
                                                                                         nil))
                                                                                       nil))
                                                                                     nil))
                                                                                   nil))
                                                                                 nil))
                                                                               nil))
                                                                             nil))
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              unchecked
              ((list type-decl nil list_adt nil)
               (PRED type-eq-decl nil defined_types nil)
               (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
               (AND const-decl "[bool, bool -> bool]" booleans nil)
               (clause? const-decl "bool" resolution nil)
               (nclause? const-decl "bool" resolution nil)
               (include_clause const-decl "bool" resolution nil)
               (= const-decl "[T, T -> boolean]" equalities nil)
               (nat nonempty-type-eq-decl nil naturalnumbers nil)
               (below type-eq-decl nil nat_types nil)
               (rule type-decl nil proof nil)
               (sequent type-eq-decl nil sequents nil)
               (number nonempty-type-decl nil numbers nil)
               (number_field_pred const-decl "[number -> boolean]"
                number_fields nil)
               (number_field nonempty-type-from-decl nil number_fields
                nil)
               (real_pred const-decl "[number_field -> boolean]" reals
                          nil)
               (real nonempty-type-from-decl nil reals nil)
               (rational_pred const-decl "[real -> boolean]" rationals
                              nil)
               (rational nonempty-type-from-decl nil rationals nil)
               (integer_pred const-decl "[rational -> boolean]"
                             integers nil)
               (int nonempty-type-eq-decl nil integers nil)
               (>= const-decl "bool" reals nil)
               (proof_step type-eq-decl nil proof nil)
               (proof_seq type-eq-decl nil proof nil)
               (> const-decl "bool" reals nil)
               (ne_proof_seq type-eq-decl nil proof nil)
               (sentence_list? const-decl "bool" fmla nil)
               (conclusion const-decl "sequent" proof nil)
               (RR_th1 def-decl "ne_proof_seq" resolution nil)
               (append def-decl "list[T]" list_props nil)
               (not_or_reduction const-decl "sequent" resolution nil)
               (finseq type-eq-decl nil finite_sequences nil)
               (checkProof const-decl "bool" proof nil)
               (empty_seq const-decl "finseq" finite_sequences nil)
               (literal? const-decl "bool" resolution nil)
               (bool nonempty-type-eq-decl nil booleans nil)
               (boolean nonempty-type-decl nil booleans nil)
               (fmla type-decl nil fmla nil)
               (list_induction formula-decl nil list_adt nil)
               (index const-decl "posnat" resolution nil)
               (posnat nonempty-type-eq-decl nil integers nil)
               (nonneg_int nonempty-type-eq-decl nil integers nil)
               (sorted? def-decl "bool" sortedlist nil)
               (nclause2fmla_sentence formula-decl nil resolution nil)
               (clause_prop formula-decl nil resolution nil)
               (lemma_norr formula-decl nil resolution nil)
               (subset def-decl "bool" minlist nil)
               (member_lit_member_fmla formula-decl nil resolution nil)
               (literal_list_sentence_list formula-decl nil resolution
                nil)
               (literal_sentence formula-decl nil resolution nil)
               (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                     list_adt nil)
               (cons? adt-recognizer-decl "[list -> boolean]" list_adt
                nil)
               (subset_include formula-decl nil sortedlist nil)
               (lemma1 formula-decl nil resolution nil)
               (even_minus_odd_is_odd application-judgement "odd_int"
                integers nil)
               (nclause2fmla def-decl "fmla" resolution nil)
               (RR_lemma1 const-decl "ne_proof_seq" resolution nil) nil
               nil (two_premise? adt-def-decl "boolean" proof nil)
               (one_premise? adt-def-decl "boolean" proof nil)
               (sorted_include def-decl "bool" sortedlist nil)
               (prop_atom? const-decl "bool" resolution nil)
               (RR_norr const-decl "ne_proof_seq" resolution nil)
               (concl_norr const-decl "proof_step" resolution nil)
               (offset_proof_step const-decl "proof_step" resolution
                nil)
               (posint_plus_nnint_is_posint application-judgement
                "posint" integers nil)
               (real_lt_is_strict_total_order name-judgement
                "(strict_total_order?[real])" real_props nil)
               (int_minus_int_is_int application-judgement "int"
                integers nil)
               (NOT const-decl "[bool -> bool]" booleans nil))
              2248 1470 t shostak)))

