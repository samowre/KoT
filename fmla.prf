(funpred)
(term)
(fmla
 (aux_TCC1 0
  (aux_TCC1-1 nil 3578252111 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil)
    (subterm adt-def-decl "boolean" term_adt nil))
   nil))
 (aux_TCC2 0
  (aux_TCC2-1 nil 3578252111 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil))
 (aux_TCC3 0
  (aux_TCC3-1 nil 3578252111 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil))
 (aux_TCC4 0
  (aux_TCC4-1 nil 3578252111 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (aux_TCC5 0
  (aux_TCC5-1 nil 3578252319
   (""
    (grind :theories more_list_props :defs nil :exclude member_nth
     :if-match nil)
    (("1" (typepred "tnats!1(h!1)")
      (("1" (grind :exclude subterm) nil nil)) nil)
     ("2" (typepred "v1!1(s!1, t!1, tnats!1)")
      (("1" (rewrite every_forall)
        (("1" (inst -2 n!1)
          (("1" (prop)
            (("1" (skeep)
              (("1" (inst + r) (("1" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil)
       ("2" (skeep)
        (("2" (inst?)
          (("2" (expand "member" -3) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (typepred "tnats!1(h!1)")
      (("3" (typepred "v1!1(s!1, t!1, tnats!1)")
        (("1" (rewrite every_forall)
          (("1" (rewrite every_forall)
            (("1" (hide -1 -3)
              (("1" (inst -1 n!1)
                (("1" (inst -2 n!1)
                  (("1" (prop)
                    (("1" (expand member -1)
                      (("1" (split)
                        (("1" (grind) nil nil)
                         ("2" (inst 3 "r!1") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep) (("2" (inst -8 x) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((some_exists formula-decl nil more_list_props nil)
    (r!1 skolem-const-decl "{r | member(r, ts!1)}" fmla nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (r skolem-const-decl "{r | member(r, t!1)}" fmla nil)
    (t!1 skolem-const-decl "list[term]" fmla nil)
    (nats type-eq-decl nil fmla nil)
    (v adt-constructor-decl "[nat -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subterm adt-def-decl "boolean" term_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (ts!1 skolem-const-decl
     "{ts: list[term] | every(LAMBDA r: r << s!1)(ts)}" fmla nil)
    (s!1 skolem-const-decl "term" fmla nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (h!1 skolem-const-decl "term" fmla nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (every_forall formula-decl nil more_list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil)
    (member_append formula-decl nil more_list_props nil))
   nil))
 (vars_TCC1 0
  (vars_TCC1-1 nil 3578252111
   ("" (grind) (("" (decompose-equality -4) nil nil)) nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (index adt-accessor-decl "[(var?) -> nat]" term_adt nil)
    (v adt-constructor-decl "[nat -> (var?)]" term_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (subterm adt-def-decl "boolean" term_adt nil)
    (member def-decl "bool" list_props nil))
   nil))
 (vars_TCC2 0
  (vars_TCC2-1 nil 3578252319
   ("" (skeep)
    (("" (grind)
      (("" (rewrite every_forall)
        (("" (grind)
          (("" (rewrite some_exists) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[term])" term_adt nil)
    (some_exists formula-decl nil more_list_props nil)
    (term type-decl nil term_adt nil)
    (some adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (pred type-eq-decl nil defined_types nil)
    (fun? type-eq-decl nil funpred_adt nil)
    (ufun? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil)
    (ifun? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil)
    (funpred type-decl nil funpred_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (every_forall formula-decl nil more_list_props nil))
   nil))
 (vars_TCC3 0
  (vars_TCC3-1 nil 3578257827 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (vars_subterm 0
  (vars_subterm-1 nil 3578253339
   ("" (skeep) (("" (typepred "vars(s)") (("" (grind) nil nil)) nil))
    nil)
   ((vars def-decl "nats(t)" fmla nil) (nats type-eq-decl nil fmla nil)
    (v adt-constructor-decl "[nat -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subterm adt-def-decl "boolean" term_adt nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (term type-decl nil term_adt nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (parsubst_aux_TCC1 0
  (parsubst_aux_TCC1-1 nil 3578256978 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil))
 (parsubst_aux_TCC2 0
  (parsubst_aux_TCC2-1 nil 3578256978 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil))
 (parsubst_aux_TCC3 0
  (parsubst_aux_TCC3-1 nil 3578256978 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil))
   nil))
 (parsubst_aux_TCC4 0
  (parsubst_aux_TCC4-1 nil 3578256978 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (term type-decl nil term_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (parsubst_TCC1 0
  (parsubst_TCC1-1 nil 3578256945 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (funpred type-decl nil funpred_adt nil)
    (ifun? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil)
    (ufun? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil)
    (fun? type-eq-decl nil funpred_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term_adt nil) (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt
           nil))
   nil))
 (diamond_TCC1 0
  (diamond_TCC1-1 nil 3578254612 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (freevars_TCC1 0
  (freevars_TCC1-1 nil 3578257827 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)) nil))
 (freevars_TCC2 0
  (freevars_TCC2-1 nil 3578257827 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)) nil))
 (freevars_TCC3 0
  (freevars_TCC3-1 nil 3578257827 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)) nil))
 (freevars_TCC4 0
  (freevars_TCC4-1 nil 3578257827 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil))
   nil))
 (freefor_forall 0
  (freefor_forall-1 nil 3578259229 ("" (induct-and-simplify f) nil nil)
   ((fmla type-decl nil fmla nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (freefor def-decl "bool" fmla nil)
    (freefor const-decl "bool" fmla nil)
    (fmla_induction formula-decl nil fmla nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (member def-decl "bool" list_props nil))
   shostak))
 (freefor_boundvars 0
  (freefor_boundvars-1 nil 3578259295
   (""
    (induct-and-simplify f :theories more_list_props :exclude
     member_nth)
    nil nil)
   ((fmla type-decl nil fmla nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (freefor const-decl "bool" fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (boundvars def-decl "list[nat]" fmla nil)
    (fmla_induction formula-decl nil fmla nil)
    (freefor def-decl "bool" fmla nil)
    (member_append formula-decl nil more_list_props nil))
   shostak)))

