(funpred)
(term)
(fmla)
(smap)
(term_props
 (vars_TCC1 0
  (vars_TCC1-1 nil 3578336065 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (funpred type-decl nil funpred_adt nil)
    (fun? adt-def-decl "boolean" funpred_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil)
    (subterm adt-def-decl "boolean" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (vars_subterm 0
  (vars_subterm-1 nil 3578336616
   ("" (expand member)
    (("" (induct t)
      (("1" (grind) (("1" (decompose-equality -3) nil nil)) nil)
       ("2" (skosimp*)
        (("2" (expand subterm +)
          (("2" (expand vars +)
            (("2" (prop)
              (("1" (skeep)
                (("1" (inst + i)
                  (("1" (inst -2 i)
                    (("1" (inst -2 n!1) (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (expand member)
                  (("2" (inst -2 z)
                    (("2" (inst 1 z)
                      (("2" (inst -2 n!1) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((term type-decl nil term_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (vars def-decl "set[nat]" term_props nil)
    (subterm adt-def-decl "boolean" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (v adt-constructor-decl "[nat -> (var?)]" term_adt nil)
    (term_induction formula-decl nil term_adt nil)
    (index adt-accessor-decl "[(var?) -> nat]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (singleton const-decl "(singleton?)" sets nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (funpred type-decl nil funpred_adt nil)
    (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil)
    (fun? adt-def-decl "boolean" funpred_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (member const-decl "bool" sets nil))
   shostak))
 (parsubst_TCC1 0
  (parsubst_TCC1-1 nil 3578336065 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (funpred type-decl nil funpred_adt nil)
    (fun? adt-def-decl "boolean" funpred_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil)
    (subterm adt-def-decl "boolean" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil))
   nil))
 (parsubst_TCC2 0
  (parsubst_TCC2-1 nil 3578336065 ("" (subtype-tcc) nil nil)
   ((smap const-decl "{r: finseq[T] | r`length = s`length}" smap nil))
   nil))
 (fsubst_TCC1 0
  (fsubst_TCC1-1 nil 3578338624 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (funpred type-decl nil funpred_adt nil)
    (ufun? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil)
    (fun? adt-def-decl "boolean" funpred_adt nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (smap const-decl "{r: finseq[T] | r`length = s`length}" smap nil))
   nil))
 (fsubst_TCC2 0
  (fsubst_TCC2-1 nil 3578338624 ("" (subtype-tcc) nil nil)
   ((smap const-decl "{r: finseq[T] | r`length = s`length}" smap nil))
   nil)))
(fmla_props
 (diamond_TCC1 0
  (diamond_TCC1-1 nil 3578336272 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (freevars_TCC1 0
  (freevars_TCC1-1 nil 3578336272 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla_adt nil))
   nil))
 (freevars_TCC2 0
  (freevars_TCC2-1 nil 3578336272 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla_adt nil))
   nil))
 (freevars_TCC3 0
  (freevars_TCC3-1 nil 3578336272 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla_adt nil))
   nil))
 (freevars_TCC4 0
  (freevars_TCC4-1 nil 3578336272 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[fmla])" fmla_adt nil))
   nil))
 (parsubst_TCC1 0
  (parsubst_TCC1-1 nil 3578336272
   ("" (grind :defs nil :rewrites map_length) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (funpred type-decl nil funpred_adt nil)
    (pred? adt-def-decl "boolean" funpred_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt
           nil))
   nil))
 (parsubst_TCC2 0
  (parsubst_TCC2-1 nil 3578336272
   ("" (grind)
    (("" (typepred "mapping!1(x1!1)") (("" (grind) nil nil)) nil)) nil)
   ((vars def-decl "set[nat]" term_props nil)
    (set type-eq-decl nil sets nil) (fmla type-decl nil fmla_adt nil)
    (v adt-constructor-decl "[nat -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (freefor const-decl "bool" fmla_props nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (parsubst_TCC3 0
  (parsubst_TCC3-1 nil 3578336272
   ("" (grind)
    (("" (typepred "mapping!1(x1!1)") (("" (grind) nil nil)) nil)) nil)
   ((vars def-decl "set[nat]" term_props nil)
    (set type-eq-decl nil sets nil) (fmla type-decl nil fmla_adt nil)
    (v adt-constructor-decl "[nat -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (freefor const-decl "bool" fmla_props nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (parsubst_TCC4 0
  (parsubst_TCC4-1 nil 3578336272
   ("" (grind)
    (("" (typepred "mapping!1(x1!1)") (("" (grind) nil nil)) nil)) nil)
   ((vars def-decl "set[nat]" term_props nil)
    (set type-eq-decl nil sets nil) (fmla type-decl nil fmla_adt nil)
    (v adt-constructor-decl "[nat -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (freefor const-decl "bool" fmla_props nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (parsubst_TCC5 0
  (parsubst_TCC5-1 nil 3578336272
   ("" (grind)
    (("" (typepred "mapping!1(x1!1)") (("" (grind) nil nil)) nil)) nil)
   ((vars def-decl "set[nat]" term_props nil)
    (set type-eq-decl nil sets nil) (fmla type-decl nil fmla_adt nil)
    (v adt-constructor-decl "[nat -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (add const-decl "(nonempty?)" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (freefor const-decl "bool" fmla_props nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (parsubst_TCC6 0
  (parsubst_TCC6-1 nil 3578336272
   ("" (grind)
    (("" (typepred "mapping!1(x1!1)") (("" (grind) nil nil)) nil)) nil)
   ((vars def-decl "set[nat]" term_props nil)
    (set type-eq-decl nil sets nil) (fmla type-decl nil fmla_adt nil)
    (v adt-constructor-decl "[nat -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (freefor const-decl "bool" fmla_props nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (fsubst_TCC1 0
  (fsubst_TCC1-1 nil 3578340693 ("" (subtype-tcc) nil nil)
   ((smap const-decl "{r: finseq[T] | r`length = s`length}" smap nil))
   nil))
 (fsubst_TCC2 0
  (fsubst_TCC2-1 nil 3578340693 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (funpred type-decl nil funpred_adt nil)
    (ufun? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil)
    (fmla type-decl nil fmla_adt nil) (set type-eq-decl nil sets nil)
    (term type-decl nil term_adt nil)
    (vars def-decl "set[nat]" term_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla_props nil))
   nil))
 (fsubst_TCC3 0
  (fsubst_TCC3-1 nil 3578340693 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (funpred type-decl nil funpred_adt nil)
    (ufun? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil)
    (fmla type-decl nil fmla_adt nil) (set type-eq-decl nil sets nil)
    (term type-decl nil term_adt nil)
    (vars def-decl "set[nat]" term_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla_props nil))
   nil))
 (fsubst_TCC4 0
  (fsubst_TCC4-1 nil 3578340693 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (funpred type-decl nil funpred_adt nil)
    (ufun? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil)
    (fmla type-decl nil fmla_adt nil) (set type-eq-decl nil sets nil)
    (term type-decl nil term_adt nil)
    (vars def-decl "set[nat]" term_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla_props nil))
   nil))
 (fsubst_TCC5 0
  (fsubst_TCC5-1 nil 3578340693 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (funpred type-decl nil funpred_adt nil)
    (ufun? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil)
    (fmla type-decl nil fmla_adt nil) (set type-eq-decl nil sets nil)
    (term type-decl nil term_adt nil)
    (vars def-decl "set[nat]" term_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla_props nil))
   nil)))

