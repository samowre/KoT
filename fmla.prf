(symbol)
(symbol_props)
(term)
(fmla)
(term_props
 (vars_TCC1 0
  (vars_TCC1-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symbol type-decl nil symbol_adt nil)
    (fun? adt-def-decl "boolean" symbol_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (set type-eq-decl nil sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq2set const-decl "set[T]" set_props nil)
    (subterm adt-def-decl "boolean" term_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil))
   nil))
 (vars_subterm 0
  (vars_subterm-1 nil 3578336814
   ("" (induct-and-simplify t :defs nil)
    (("1" (grind) nil nil)
     ("2" (grind) (("2" (decompose-equality) nil nil)) nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil))
    nil)
   ((args adt-accessor-decl
          "[d: (apply?) -> {l: finseq[term] | l`length = arity(fun(d))}]"
          term_adt nil)
    (fun adt-accessor-decl "[(apply?) -> (fun?)]" term_adt nil)
    (apply? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (apply1_var!1 skolem-const-decl "(fun?)" term_props nil)
    (apply2_var!1 skolem-const-decl
     "{l: finseq[term] | l`length = arity(apply1_var!1)}" term_props
     nil)
    (z!1 skolem-const-decl "below[apply2_var!1`length]" term_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (fun? adt-def-decl "boolean" symbol_adt nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (symbol type-decl nil symbol_adt nil)
    (finseq2set const-decl "set[T]" set_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (index adt-accessor-decl "[(var?) -> nat]" term_adt nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (term type-decl nil term_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (vars def-decl "set[nat]" term_props nil)
    (subterm adt-def-decl "boolean" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (v adt-constructor-decl "[nat -> (var?)]" term_adt nil)
    (term_induction formula-decl nil term_adt nil))
   shostak))
 (vars_increases 0
  (vars_increases-1 nil 3578336842
   ("" (induct-and-simplify s :defs nil)
    (("1" (grind) nil nil)
     ("2" (expand vars 1 2)
      (("2" (expand subset? +)
        (("2" (skeep)
          (("2" (expand member -3)
            (("2" (expand "<<" -2)
              (("2" (skeep)
                (("2" (grind :defs nil)
                  (("2" (inst - z) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq2set const-decl "set[T]" set_props nil)
    (subterm adt-def-decl "boolean" term_adt nil)
    (t!1 skolem-const-decl "term" term_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (apply? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (fun adt-accessor-decl "[(apply?) -> (fun?)]" term_adt nil)
    (args adt-accessor-decl
          "[d: (apply?) -> {l: finseq[term] | l`length = arity(fun(d))}]"
          term_adt nil)
    (apply1_var!1 skolem-const-decl "(fun?)" term_props nil)
    (apply2_var!1 skolem-const-decl
     "{l: finseq[term] | l`length = arity(apply1_var!1)}" term_props
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (z skolem-const-decl "below[apply2_var!1`length]" term_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (symbol type-decl nil symbol_adt nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (fun? adt-def-decl "boolean" symbol_adt nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (term type-decl nil term_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (vars def-decl "set[nat]" term_props nil)
    (term_induction formula-decl nil term_adt nil))
   shostak))
 (parsubst_TCC1 0
  (parsubst_TCC1-1 nil 3578336763 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (term type-decl nil term_adt nil) (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (i!1 skolem-const-decl "nat" term_props nil)
    (mapping!1 skolem-const-decl "[nat -> term]" term_props nil)
    (s!1 skolem-const-decl "term" term_props nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (index adt-accessor-decl "[(var?) -> nat]" term_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (vars def-decl "set[nat]" term_props nil))
   nil))
 (parsubst_TCC2 0
  (parsubst_TCC2-1 nil 3578336763 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symbol type-decl nil symbol_adt nil)
    (fun? adt-def-decl "boolean" symbol_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil)
    (subterm adt-def-decl "boolean" term_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil))
   nil))
 (parsubst_TCC3 0
  (parsubst_TCC3-1 nil 3578336763
   ("" (grind :defs nil)
    (("" (typepred "v1!1(t!1, mapping!1)")
      (("" (expand subset?)
        (("" (skeep)
          (("" (inst - x)
            (("" (prop)
              (("" (expand member)
                (("" (expand vars -1)
                  (("" (expand vars 1)
                    (("" (skeep)
                      (("" (typepred t)
                        (("" (inst 1 t)
                          (("" (skeep)
                            (("" (inst 1 k)
                              ((""
                                (typepred k)
                                ((""
                                  (rewrite -7 :dir rl)
                                  ((""
                                    (use vars_increases)
                                    (("" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (vars def-decl "set[nat]" term_props nil)
    (< const-decl "bool" reals nil)
    (apply? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (fun adt-accessor-decl "[(apply?) -> (fun?)]" term_adt nil)
    (args adt-accessor-decl
          "[d: (apply?) -> {l: finseq[term] | l`length = arity(fun(d))}]"
          term_adt nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (subterm adt-def-decl "boolean" term_adt nil)
    (vars_increases formula-decl nil term_props nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symbol type-decl nil symbol_adt nil)
    (fun? adt-def-decl "boolean" symbol_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil))
   nil))
 (parsubst_TCC4 0
  (parsubst_TCC4-1 nil 3578336763 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil))
 (parsubst_TCC5 0
  (parsubst_TCC5-1 nil 3578336763
   ("" (grind :if-match nil :exclude "fun?")
    (("" (typepred "v1!1(args!1`seq(i!1), mapping!1)")
      (("" (expand subset?)
        (("" (inst -1 x!1)
          (("" (prop)
            (("1" (expand member -1)
              (("1" (expand vars -1)
                (("1" (skeep)
                  (("1" (typepred t)
                    (("1" (inst 1 t)
                      (("1" (grind) nil nil)
                       ("2" (skeep)
                        (("2" (inst + k)
                          (("2" (typepred k) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term_adt nil)
    (apply? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (fun adt-accessor-decl "[(apply?) -> (fun?)]" term_adt nil)
    (args adt-accessor-decl
          "[d: (apply?) -> {l: finseq[term] | l`length = arity(fun(d))}]"
          term_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symbol type-decl nil symbol_adt nil)
    (fun? adt-def-decl "boolean" symbol_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (subset? const-decl "bool" sets nil)
    (vars def-decl "set[nat]" term_props nil)
    (member const-decl "bool" sets nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (fsubst_TCC1 0
  (fsubst_TCC1-1 nil 3578336763 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symbol type-decl nil symbol_adt nil)
    (ufun? adt-recognizer-decl "[symbol -> boolean]" symbol_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (fun? adt-def-decl "boolean" symbol_adt nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil))
 (fsubst_TCC2 0
  (fsubst_TCC2-1 nil 3578336763 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil)))
(fmla_props
 (diamond_TCC1 0
  (diamond_TCC1-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (freevars_TCC1 0
  (freevars_TCC1-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla_adt nil))
   nil))
 (freevars_TCC2 0
  (freevars_TCC2-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla_adt nil))
   nil))
 (freevars_TCC3 0
  (freevars_TCC3-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla_adt nil))
   nil))
 (freevars_TCC4 0
  (freevars_TCC4-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[fmla])" fmla_adt nil))
   nil))
 (parsubst_TCC1 0
  (parsubst_TCC1-1 nil 3578336763 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil))
 (parsubst_TCC2 0
  (parsubst_TCC2-1 nil 3578336763
   ("" (grind :if-match nil)
    (("" (typepred "mapping!1(x1!1)") (("" (grind) nil nil)) nil)) nil)
   ((vars def-decl "set[nat]" term_props nil)
    (set type-eq-decl nil sets nil) (fmla type-decl nil fmla_adt nil)
    (v adt-constructor-decl "[nat -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (freefor const-decl "bool" fmla_props nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (parsubst_TCC3 0
  (parsubst_TCC3-1 nil 3578336763
   ("" (grind)
    (("" (typepred "mapping!1(x1!1)") (("" (grind) nil nil)) nil)) nil)
   ((vars def-decl "set[nat]" term_props nil)
    (set type-eq-decl nil sets nil) (fmla type-decl nil fmla_adt nil)
    (v adt-constructor-decl "[nat -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (freefor const-decl "bool" fmla_props nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (parsubst_TCC4 0
  (parsubst_TCC4-1 nil 3578336763
   ("" (grind)
    (("" (typepred "mapping!1(x1!1)") (("" (grind) nil nil)) nil)) nil)
   ((vars def-decl "set[nat]" term_props nil)
    (set type-eq-decl nil sets nil) (fmla type-decl nil fmla_adt nil)
    (v adt-constructor-decl "[nat -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (freefor const-decl "bool" fmla_props nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (parsubst_TCC5 0
  (parsubst_TCC5-1 nil 3578336763
   ("" (grind)
    (("" (typepred "mapping!1(x1!1)") (("" (grind) nil nil)) nil)) nil)
   ((vars def-decl "set[nat]" term_props nil)
    (set type-eq-decl nil sets nil) (fmla type-decl nil fmla_adt nil)
    (v adt-constructor-decl "[nat -> (var?)]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (add const-decl "(nonempty?)" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (freefor const-decl "bool" fmla_props nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (parsubst_TCC6 0
  (parsubst_TCC6-1 nil 3578336763 ("" (grind :defs nil) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term_adt nil) (fmla type-decl nil fmla_adt nil)
    (set type-eq-decl nil sets nil)
    (freefor const-decl "bool" fmla_props nil)
    (vars def-decl "set[nat]" term_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (subst_TCC1 0
  (subst_TCC1-1 nil 3578336763 ("" (subtype-tcc) nil nil) nil nil))
 (fsubst_TCC1 0
  (fsubst_TCC1-1 nil 3578336763 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil))
 (fsubst_TCC2 0
  (fsubst_TCC2-1 nil 3578336763 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symbol type-decl nil symbol_adt nil)
    (ufun? adt-recognizer-decl "[symbol -> boolean]" symbol_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (fmla type-decl nil fmla_adt nil) (set type-eq-decl nil sets nil)
    (term type-decl nil term_adt nil)
    (vars def-decl "set[nat]" term_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla_props nil))
   nil))
 (fsubst_TCC3 0
  (fsubst_TCC3-1 nil 3578336763 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symbol type-decl nil symbol_adt nil)
    (ufun? adt-recognizer-decl "[symbol -> boolean]" symbol_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (fmla type-decl nil fmla_adt nil) (set type-eq-decl nil sets nil)
    (term type-decl nil term_adt nil)
    (vars def-decl "set[nat]" term_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla_props nil))
   nil))
 (fsubst_TCC4 0
  (fsubst_TCC4-1 nil 3578336763 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symbol type-decl nil symbol_adt nil)
    (ufun? adt-recognizer-decl "[symbol -> boolean]" symbol_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (fmla type-decl nil fmla_adt nil) (set type-eq-decl nil sets nil)
    (term type-decl nil term_adt nil)
    (vars def-decl "set[nat]" term_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla_props nil))
   nil))
 (fsubst_TCC5 0
  (fsubst_TCC5-1 nil 3578336763 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symbol type-decl nil symbol_adt nil)
    (ufun? adt-recognizer-decl "[symbol -> boolean]" symbol_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (fmla type-decl nil fmla_adt nil) (set type-eq-decl nil sets nil)
    (term type-decl nil term_adt nil)
    (vars def-decl "set[nat]" term_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla_props nil))
   nil))
 (psubst_TCC1 0
  (psubst_TCC1-1 nil 3578336763
   ("" (grind :rewrites every_forall) nil nil)
   ((freefor const-decl "bool" fmla_props nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (every_forall formula-decl nil more_list_props nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (freevars def-decl "set[nat]" fmla_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member def-decl "bool" list_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (term type-decl nil term_adt nil)
    (below type-eq-decl nil nat_types nil)
    (pred? adt-def-decl "boolean" symbol_adt nil)
    (vars const-decl "set[nat]" fmla_props nil)
    (set type-eq-decl nil sets nil) (fmla type-decl nil fmla_adt nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uniques? def-decl "bool" more_list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (upred? adt-recognizer-decl "[symbol -> boolean]" symbol_adt nil)
    (symbol type-decl nil symbol_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (psubst_TCC2 0
  (psubst_TCC2-1 nil 3578336763 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symbol type-decl nil symbol_adt nil)
    (upred? adt-recognizer-decl "[symbol -> boolean]" symbol_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (fmla type-decl nil fmla_adt nil)
    (freevars def-decl "set[nat]" fmla_props nil)
    (list2set def-decl "set[T]" list2set nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (vars const-decl "set[nat]" fmla_props nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla_props nil))
   nil))
 (psubst_TCC3 0
  (psubst_TCC3-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symbol type-decl nil symbol_adt nil)
    (upred? adt-recognizer-decl "[symbol -> boolean]" symbol_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (fmla type-decl nil fmla_adt nil)
    (freevars def-decl "set[nat]" fmla_props nil)
    (list2set def-decl "set[T]" list2set nil)
    (freefor const-decl "bool" fmla_props nil)
    (vars const-decl "set[nat]" fmla_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (<< adt-def-decl "(strict_well_founded?[fmla])" fmla_adt nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (member const-decl "bool" sets nil))
   nil))
 (psubst_TCC4 0
  (psubst_TCC4-1 nil 3578336763
   ("" (grind :rewrites every_forall) nil nil)
   ((freefor const-decl "bool" fmla_props nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (vars const-decl "set[nat]" fmla_props nil)
    (vars!1 skolem-const-decl
     "{vars: (uniques?[nat]) | length(vars) = arity(u!1)}" fmla_props
     nil)
    (u!1 skolem-const-decl "(upred?)" fmla_props nil)
    (x!1 skolem-const-decl "nat" fmla_props nil)
    (member def-decl "bool" list_props nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (every_forall formula-decl nil more_list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (list2set def-decl "set[T]" list2set nil)
    (freevars def-decl "set[nat]" fmla_props nil)
    (fmla type-decl nil fmla_adt nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uniques? def-decl "bool" more_list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (upred? adt-recognizer-decl "[symbol -> boolean]" symbol_adt nil)
    (symbol type-decl nil symbol_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (psubst_TCC5 0
  (psubst_TCC5-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symbol type-decl nil symbol_adt nil)
    (upred? adt-recognizer-decl "[symbol -> boolean]" symbol_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (fmla type-decl nil fmla_adt nil)
    (freevars def-decl "set[nat]" fmla_props nil)
    (list2set def-decl "set[T]" list2set nil)
    (freefor const-decl "bool" fmla_props nil)
    (vars const-decl "set[nat]" fmla_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (<< adt-def-decl "(strict_well_founded?[fmla])" fmla_adt nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (member const-decl "bool" sets nil))
   nil))
 (psubst_TCC6 0
  (psubst_TCC6-1 nil 3578336763
   ("" (grind :rewrites every_forall) nil nil)
   ((freefor const-decl "bool" fmla_props nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (vars const-decl "set[nat]" fmla_props nil)
    (vars!1 skolem-const-decl
     "{vars: (uniques?[nat]) | length(vars) = arity(u!1)}" fmla_props
     nil)
    (u!1 skolem-const-decl "(upred?)" fmla_props nil)
    (x!1 skolem-const-decl "nat" fmla_props nil)
    (member def-decl "bool" list_props nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (every_forall formula-decl nil more_list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (list2set def-decl "set[T]" list2set nil)
    (freevars def-decl "set[nat]" fmla_props nil)
    (fmla type-decl nil fmla_adt nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uniques? def-decl "bool" more_list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (upred? adt-recognizer-decl "[symbol -> boolean]" symbol_adt nil)
    (symbol type-decl nil symbol_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (psubst_TCC7 0
  (psubst_TCC7-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (symbol type-decl nil symbol_adt nil)
    (upred? adt-recognizer-decl "[symbol -> boolean]" symbol_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (fmla type-decl nil fmla_adt nil)
    (freevars def-decl "set[nat]" fmla_props nil)
    (list2set def-decl "set[T]" list2set nil)
    (freefor const-decl "bool" fmla_props nil)
    (vars const-decl "set[nat]" fmla_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (<< adt-def-decl "(strict_well_founded?[fmla])" fmla_adt nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (member const-decl "bool" sets nil))
   nil))
 (psubst_TCC8 0
  (psubst_TCC8-1 nil 3578336763
   ("" (grind :rewrites every_forall) nil nil)
   ((freefor const-decl "bool" fmla_props nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (vars const-decl "set[nat]" fmla_props nil)
    (vars!1 skolem-const-decl
     "{vars: (uniques?[nat]) | length(vars) = arity(u!1)}" fmla_props
     nil)
    (u!1 skolem-const-decl "(upred?)" fmla_props nil)
    (x!1 skolem-const-decl "nat" fmla_props nil)
    (member def-decl "bool" list_props nil)
    (add const-decl "(nonempty?)" sets nil)
    (boundvars def-decl "set[nat]" fmla_props nil)
    (every_forall formula-decl nil more_list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (list2set def-decl "set[T]" list2set nil)
    (freevars def-decl "set[nat]" fmla_props nil)
    (fmla type-decl nil fmla_adt nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uniques? def-decl "bool" more_list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (upred? adt-recognizer-decl "[symbol -> boolean]" symbol_adt nil)
    (symbol type-decl nil symbol_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)))

