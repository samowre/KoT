(funpred)(fmla (termvars_TCC1 0 (termvars_TCC1-1 nil 3462850563 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil)) (termvars_TCC2 0 (termvars_TCC2-1 nil 3462850563 ("" (grind) nil nil) ((every adt-def-decl "boolean" list_adt nil)) nil)) (termvars_TCC3 0 (termvars_TCC3-1 nil 3462850563 ("" (skosimp*) (("" (rewrite "every_nth") (("" (skosimp*) (("" (expand "<<") (("" (ground) (("" (rewrite "some_nth") (("" (inst?) (("1" (ground) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((every_nth formula-decl nil list_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (<< adt-def-decl "(well_founded?[term])" fmla nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (funpred type-decl nil funpred_adt nil) (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil) (fun? adt-def-decl "boolean" funpred_adt nil) (term type-decl nil fmla nil) (some_nth formula-decl nil minlist nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil) (below type-eq-decl nil naturalnumbers nil) (apply? adt-recognizer-decl "[term -> boolean]" fmla nil) (fun adt-accessor-decl "[(apply?) -> (fun?)]" fmla nil) (args adt-accessor-decl "[d: (apply?) -> {ss: list[term] | length(ss) = arity(fun(d))}]" fmla nil) (s!1 skolem-const-decl "term" fmla nil) (i!1 skolem-const-decl "below(length(ss!1))" fmla nil) (ss!1 skolem-const-decl "{ss: list[term] | length(ss) = arity(f!1)}" fmla nil) (f!1 skolem-const-decl "(fun?)" fmla nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil)) (reduce_reduce_TCC1 0 (reduce_reduce_TCC1-1 nil 3475778550 ("" (grind) (("1" (rewrite "every_forall") (("1" (skosimp*) (("1" (rewrite "some_exists") (("1" (inst + "a!1") (("1" (forward-chain "member_suffix") nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite "every_forall") (("2" (skosimp*) (("2" (rewrite "some_exists") (("2" (inst + "a!1") (("2" (forward-chain "member_suffix") nil nil)) nil)) nil)) nil)) nil)) nil) ((every_forall formula-decl nil minlist nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (some adt-def-decl "boolean" list_adt nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (pred type-eq-decl nil defined_types nil) (term type-decl nil fmla nil) (some_exists formula-decl nil minlist nil) (member_suffix formula-decl nil minlist nil) (<< adt-def-decl "(well_founded?[term])" fmla nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (funpred type-decl nil funpred_adt nil) (fun? adt-def-decl "boolean" funpred_adt nil)) nil)) (reduce_reduce 0 (reduce_reduce-1 nil 3475778551 ("" (skosimp) (("" (induct "tt") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "reduce" +) (("2" (ground) (("2" (use "suffix_transitivity[term]" :polarity? t) (("2" (grind) (("2" (expand "suffix?" 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (induct "tt") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (grind) (("1" (rewrite "some_member") (("1" (inst?) (("1" (use "suffix_member[term]") (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (use "suffix_transitivity[term]" :polarity? t) (("2" (grind) (("2" (expand "suffix?" 1) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (use "suffix_transitivity[term]" :polarity? t) (("3" (grind) (("3" (expand "suffix?" 1) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((s!1 skolem-const-decl "term" fmla nil) (<< adt-def-decl "(well_founded?[term])" fmla nil) (well_founded? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (ss!1 skolem-const-decl "list[term]" fmla nil) (suffix? def-decl "bool" minlist nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (reduce adt-def-decl "[list -> range]" list_adt_reduce nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (term type-decl nil fmla nil) (list_induction formula-decl nil list_adt nil) (suffix_transitivity formula-decl nil minlist nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (suffix_member formula-decl nil minlist nil) (some_member formula-decl nil minlist nil) (OR const-decl "[bool, bool -> bool]" booleans nil)) shostak)) (map_map 0 (map_map-1 nil 3475803062 ("" (skosimp) (("" (induct "tt") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "map" +) (("2" (ground) (("2" (use "suffix_transitivity[term]" :polarity? t) (("2" (grind) (("2" (expand "suffix?" 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (induct "tt") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (grind) (("1" (rewrite "some_member") (("1" (inst?) (("1" (use "suffix_member[term]") (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (use "suffix_transitivity[term]" :polarity? t) (("2" (grind) (("2" (expand "suffix?" 1) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (use "suffix_transitivity[term]" :polarity? t) (("3" (grind) (("3" (expand "suffix?" 1) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((s!1 skolem-const-decl "term" fmla nil) (<< adt-def-decl "(well_founded?[term])" fmla nil) (well_founded? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (ss!1 skolem-const-decl "list[term]" fmla nil) (suffix? def-decl "bool" minlist nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (map adt-def-decl "list[T1]" list_adt_map nil) (term type-decl nil fmla nil) (list_induction formula-decl nil list_adt nil) (suffix_transitivity formula-decl nil minlist nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (suffix_member formula-decl nil minlist nil) (some_member formula-decl nil minlist nil) (OR const-decl "[bool, bool -> bool]" booleans nil)) shostak)) (length_length 0 (length_length-1 nil 3476244199 ("" (skosimp*) (("" (rewrite "length_length[term, {t | t << s!1}]") nil nil)) nil) ((length_length formula-decl nil list_subtype nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (term type-decl nil fmla nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (<< adt-def-decl "(well_founded?[term])" fmla nil)) shostak)) (subst_TCC1 0 (subst_TCC1-1 nil 3475778550 ("" (grind) (("1" (rewrite "map_length") (("1" (assert) (("1" (use "length_length") (("1" (grind) (("1" (expand "suffix?") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "map_length") (("2" (assert) (("2" (use "length_length") (("2" (grind) (("2" (expand "suffix?") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((map_length formula-decl nil more_map_props nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (<< adt-def-decl "(well_founded?[term])" fmla nil) (length_length formula-decl nil fmla nil) (suffix? def-decl "bool" minlist nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (funpred type-decl nil funpred_adt nil) (fun? adt-def-decl "boolean" funpred_adt nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (list type-decl nil list_adt nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil)) nil)) (termvars_TCC4 0 (termvars_TCC4-1 nil 3463023513 ("" (termination-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil)) nil)) (subst_TCC2 0 (subst_TCC2-1 nil 3475778550 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (<< adt-def-decl "(well_founded?[list])" list_adt nil)) nil)) (parsubst_TCC1 0 (parsubst_TCC1-1 nil 3475778550 ("" (grind) (("1" (rewrite "map_length") (("1" (use "length_length") (("1" (ground) (("1" (inst?) (("1" (ground) (("1" (expand "suffix?") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "map_length") (("2" (use "length_length") (("2" (ground) (("2" (inst?) (("2" (ground) (("2" (expand "suffix?") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((map_length formula-decl nil more_map_props nil) (pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (<< adt-def-decl "(well_founded?[term])" fmla nil) (suffix? def-decl "bool" minlist nil) (length_length formula-decl nil fmla nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (funpred type-decl nil funpred_adt nil) (fun? adt-def-decl "boolean" funpred_adt nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil)) nil)) (freevars_TCC1 0 (freevars_TCC1-1 nil 3463023513 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(well_founded?[fmla])" fmla nil)) nil)) (freevars_TCC2 0 (freevars_TCC2-1 nil 3475778550 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(well_founded?[fmla])" fmla nil)) nil)) (freevars_TCC3 0 (freevars_TCC3-1 nil 3475778550 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(well_founded?[fmla])" fmla nil)) nil)) (freevars_TCC4 0 (freevars_TCC4-1 nil 3475778550 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (<< adt-def-decl "(well_founded?[fmla])" fmla nil)) nil)) (aux_subst 0 (aux_subst-1 nil 3480276521 ("" (induct-and-simplify "ss" 1 :defs T :if-match best) nil nil) ((list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (subst def-decl "list[term]" fmla nil) (term type-decl nil fmla nil) (list_induction formula-decl nil list_adt nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) shostak)) (subst_TCC3 0 (subst_TCC3-1 nil 3475778550 ("" (subtype-tcc) (("" (replace -4 * RL) (("" (lemma "aux_subst") (("" (assert) (("" (rewrite "aux_subst") nil nil)) nil)) nil)) nil)) nil) ((aux_subst formula-decl nil fmla nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (freefor def-decl "bool" fmla nil) (termvars def-decl "list[(var?)]" fmla nil) (funpred type-decl nil funpred_adt nil) (pred? adt-def-decl "boolean" funpred_adt nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil)) nil)) (subst_TCC4 0 (subst_TCC4-1 nil 3475778550 ("" (subtype-tcc) (("" (grind) nil nil)) nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (freefor def-decl "bool" fmla nil) (termvars def-decl "list[(var?)]" fmla nil)) nil)) (subst_TCC5 0 (subst_TCC5-1 nil 3475778550 ("" (subtype-tcc) (("" (grind) nil nil)) nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (freefor def-decl "bool" fmla nil) (termvars def-decl "list[(var?)]" fmla nil)) nil)) (subst_TCC6 0 (subst_TCC6-1 nil 3475778550 ("" (subtype-tcc) (("" (grind) nil nil)) nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (freefor def-decl "bool" fmla nil) (termvars def-decl "list[(var?)]" fmla nil)) nil)) (subst_TCC7 0 (subst_TCC7-1 nil 3475778550 ("" (subtype-tcc) (("" (grind) nil nil)) nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (freefor def-decl "bool" fmla nil) (termvars def-decl "list[(var?)]" fmla nil)) nil)) (subst_TCC8 0 (subst_TCC8-1 nil 3475778550 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (freefor def-decl "bool" fmla nil) (termvars def-decl "list[(var?)]" fmla nil) (<< adt-def-decl "(well_founded?[fmla])" fmla nil)) nil)) (ub_max_index 0 (ub_max_index-1 nil 3480430970 ("" (skosimp) (("" (split) (("1" (flatten) (("1" (expand max_index) (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (expand maxlist) (("1" (inst -2 "minlist(xx!1, LAMBDA (a: (var?)): -v_index(a))") nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (skolem-typepred) (("2" (expand max_index) (("2" (lift-if) (("2" (split) (("1" (expand maxlist) (("1" (expand minlist) (("1" (flatten) (("1" (lemma minlist_TCC1 (l "xx!1" key "-v_index")) (("1" (flatten) (("1" (inst -2 "x!1") (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand member) (("2" (lift-if) (("2" (split) (("1" (propax) nil nil) ("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((max_index const-decl "nat" fmla nil) (maxlist const-decl "T" minlist nil) (v_index adt-accessor-decl "[(var?) -> nat]" fmla nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (minlist const-decl "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES key(c) <= key(b))}" minlist nil) (<= const-decl "bool" reals nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (member def-decl "bool" list_props nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (list type-decl nil list_adt nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (boolean nonempty-type-decl nil booleans nil) (term type-decl nil fmla nil) (minus_int_is_int application-judgement "int" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minlist_TCC1 subtype-tcc nil minlist nil)) shostak)) (parsubstr_TCC1 0 (parsubstr_TCC1-1 nil 3475778550 ("" (subtype-tcc) (("" (replace -4 * RL) (("" (lemma map_length (f "(LAMBDA s: parsubst(s, xx!1, tt!1))" l "ss!1")) (("" (propax) nil nil)) nil)) nil)) nil) ((parsubst def-decl "term" fmla nil) (map_length formula-decl nil more_map_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (max_index const-decl "nat" fmla nil) (termvars def-decl "list[(var?)]" fmla nil) (funpred type-decl nil funpred_adt nil) (pred? adt-def-decl "boolean" funpred_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (length def-decl "nat" list_props nil) (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil)) nil)) (parsubstr_TCC2 0 (parsubstr_TCC2-1 nil 3475778550 ("" (subtype-tcc) (("" (expand termvars +) (("" (expand termvars + 1) (("" (expand append) (("" (expand append +) (("" (lemma ub_max_index) (("" (inst -1 "1 + m!1" "cons(v(1 + m!1), termvars(tt!1))") (("" (rewrite -1) (("" (assert) (("" (lemma minlist_TCC1 (l "cons(v(1 + m!1), (termvars(tt!1)))" key "LAMBDA (a: (var?)): -v_index(a)")) (("1" (flatten) (("1" (assert) (("1" (inst -2 "v(1 + m!1)") (("1" (delete -1 -2) (("1" (lemma ub_max_index) (("1" (inst -1 "1+m!1" "cons(v(1 + m!1), termvars(tt!1))") (("1" (expand max_index -1) (("1" (expand maxlist -1) (("1" (expand minlist -1) (("1" (delete 2) (("1" (skolem-typepred) (("1" (expand member -2) (("1" (split) (("1" (assert) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil) ("2" (lemma ub_max_index) (("2" (inst -1 "m!1" "termvars(tt!1)") (("2" (replace -4 -1) (("2" (assert) (("2" (inst -1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (expand max_index -2) (("2" (lift-if) (("2" (split) (("1" (flatten) (("1" (assert) (("1" (lemma ub_max_index) (("1" (inst -1 "1+m!1" "cons(v(1 + m!1), termvars(tt!1))") (("1" (expand max_index -1) (("1" (expand maxlist -1) (("1" (expand minlist -1) (("1" (delete 2 3) (("1" (skolem-typepred) (("1" (expand member -2) (("1" (split) (("1" (replace -1) (("1" (assert) nil nil)) nil) ("2" (lemma ub_max_index) (("2" (inst -1 "m!1" "termvars(tt!1)") (("2" (expand max_index -1) (("2" (expand maxlist -1) (("2" (expand minlist -1) (("2" (inst -1 "x!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand member -3) (("2" (lift-if) (("2" (split) (("1" (propax) nil nil) ("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((append def-decl "list[T]" list_props nil) (ub_max_index formula-decl nil fmla nil) (maxlist const-decl "T" minlist nil) (minlist const-decl "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES key(c) <= key(b))}" minlist nil) (minus_int_is_int application-judgement "int" integers nil) (minlist_TCC1 subtype-tcc nil minlist nil) (- const-decl "[numfield -> numfield]" number_fields nil) (v_index adt-accessor-decl "[(var?) -> nat]" fmla nil) (member def-decl "bool" list_props nil) (x!1 skolem-const-decl "{x: (var?) | member(x, cons(v(1 + m!1), termvars(tt!1)))}" fmla nil) (m!1 skolem-const-decl "{m: nat | max_index(termvars(tt!1)) <= m}" fmla nil) (tt!1 skolem-const-decl "list[term]" fmla nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (v adt-constructor-decl "[nat -> (var?)]" fmla nil) (termvars def-decl "list[(var?)]" fmla nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (term type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (max_index const-decl "nat" fmla nil) (termvars def-decl "list[(var?)]" fmla nil)) nil)) (parsubstr_TCC3 0 (parsubstr_TCC3-1 nil 3480359894 ("" (skolem-typepred) (("" (flatten) (("" (lemma ub_max_index) (("" (inst -1 "max(m!1, v_index(y!1))" "termvars(cons[term](y!1, tt!1))") (("" (assert) (("" (skolem-typepred) (("" (expand member -2) (("" (lift-if) (("" (split) (("1" (propax) nil nil) ("2" (flatten) (("2" (split) (("1" (expand termvars -1) (("1" (expand termvars -1 1) (("1" (expand append -1) (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (expand termvars -1) (("2" (expand termvars -1 1) (("2" (expand append -1) (("2" (expand append -1) (("2" (lemma ub_max_index) (("2" (inst -1 "m!1" "termvars(tt!1)") (("2" (assert) (("2" (inst -1 x!1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (v_index adt-accessor-decl "[(var?) -> nat]" fmla nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (member def-decl "bool" list_props nil) (append def-decl "list[T]" list_props nil) (termvars def-decl "list[(var?)]" fmla nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (ub_max_index formula-decl nil fmla nil) (termvars def-decl "list[(var?)]" fmla nil) (max_index const-decl "nat" fmla nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (term type-decl nil fmla nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil)) (parsubst_TCC2 0 (parsubst_TCC2-1 nil 3475778550 ("" (subtype-tcc) nil nil) nil nil)) (fsubst_TCC1 0 (fsubst_TCC1-1 nil 3475778550 ("" (skolem-typepred) (("" (flatten) (("" (delete 1) (("" (hide -1 -2 -3) (("" (use map_length ("l" "ss!1" "f" "LAMBDA (r: term | r << s!1): v!1(r, u!1, vars!1, t!1)")) (("" (replace -2 1 RL) (("" (replace -1 1) (("" (use length_length) (("" (replace -3 -1) (("" (replace -4 -1) (("" (inst? -1) (("" (expand suffix?) (("" (lift-if) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((length_length formula-decl nil fmla nil) (suffix? def-decl "bool" minlist nil) (<< adt-def-decl "(well_founded?[term])" fmla nil) (well_founded? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (map_length formula-decl nil more_map_props nil) (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (fun? adt-def-decl "boolean" funpred_adt nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (term type-decl nil fmla nil) (ufun? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil) (funpred type-decl nil funpred_adt nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil)) (fsubst_TCC2 0 (fsubst_TCC2-1 nil 3475778550 ("" (subtype-tcc) (("" (replace -4 * RL) (("" (rewrite map_length) nil nil)) nil)) nil) ((fsubst def-decl "term" fmla nil) (map_length formula-decl nil more_map_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (funpred type-decl nil funpred_adt nil) (ufun? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil) (term type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (pred? adt-def-decl "boolean" funpred_adt nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil)) nil)) (fmla_equal_TCC1 0 (fmla_equal_TCC1-1 nil 3475778550 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(well_founded?[fmla])" fmla nil)) nil)) (fmla_equal_TCC2 0 (fmla_equal_TCC2-1 nil 3475778550 ("" (termination-tcc) nil nil) ((<< adt-def-decl "(well_founded?[fmla])" fmla nil)) nil)) (fmla_equal_TCC3 0 (fmla_equal_TCC3-1 nil 3475778550 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (<< adt-def-decl "(well_founded?[fmla])" fmla nil)) nil)) (fmla_equal_TCC4 0 (fmla_equal_TCC4-1 nil 3475778550 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (<< adt-def-decl "(well_founded?[fmla])" fmla nil)) nil)) (freevars_TCC5 0 (freevars_TCC5-1 nil 3475778550 ("" (termination-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil)) nil)) (freesymbols_TCC1 0 (freesymbols_TCC1-1 nil 3463023513 ("" (grind) nil nil) ((every adt-def-decl "boolean" list_adt nil)) nil)) (freesymbols_TCC2 0 (freesymbols_TCC2-1 nil 3463061727 ("" (skosimp*) (("" (rewrite "every_nth") (("" (typepred "freesymbols(ss!1)") (("" (rewrite "every_nth") (("" (grind :exclude "nth") nil nil)) nil)) nil)) nil)) nil) ((every_nth formula-decl nil list_props nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (usymb? const-decl "bool" fmla nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (term type-decl nil fmla nil) (freesymbols def-decl "list[(ufun?)]" fmla nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil) (pred? adt-def-decl "boolean" funpred_adt nil) (funpred type-decl nil funpred_adt nil) (boolean nonempty-type-decl nil booleans nil) (ufun? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (NOT const-decl "[bool -> bool]" booleans nil)) nil)) (sentence_list_append 0 (sentence_list_append-2 "" 3542738247 ("" (skosimp* :preds? t) (("" (generalize AA!1 AA) (("" (induct AA) (("1" (grind) nil nil) ("2" (flatten) (("2" (grind) nil nil)) nil) ("3" (skosimp* :preds? t) (("3" (assert) (("3" (expand append 1) (("3" (expand sentence_list?) (("3" (expand "freevars" 1) (("3" (split) (("1" (prop) (("1" (lift-if) (("1" (prop) (("1" (lemma "append_null[fmla]") (("1" (inst -1 "cons2_var!1") (("1" (case-replace "BB!1 = null") (("1" (replace -2) (("1" (propax) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (split 2) (("1" (flatten) (("1" (assert) (("1" (lift-if) (("1" (hide -2) (("1" (grind) (("1" (hide 1 3) (("1" (case "null?(freevars(cons1_var!1))") (("1" (expand "append" -2) (("1" (assert) nil nil)) nil) ("2" (expand "append") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (flatten) (("2" (grind) (("1" (case "null?(freevars(cons1_var!1))") (("1" (expand "append" -2 1) (("1" (assert) nil nil)) nil) ("2" (grind) nil nil)) nil) ("2" (case "null?(freevars(cons1_var!1))") (("1" (expand "append" -2 1) (("1" (assert) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (assert) (("3" (prop) (("1" (case "null?(freevars(cons1_var!1))") (("1" (expand "append" -2 1) (("1" (assert) (("1" (lift-if) (("1" (assert) (("1" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) (("2" (case "null?(freevars(cons1_var!1))") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ("3" (case "null?(freevars(cons1_var!1))") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak) (sentence_list_append-1 nil 3483832392 ("" (skolem-typepred) (("" (flatten) (("" (generalize AA!1 AA) (("" (induct AA) (("1" (grind) nil nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (expand append 1) (("2" (expand sentence_list? 1) (("2" (expand freevars 1) (("2" (replace -3 -1) (("2" (expand sentence_list? -2) (("2" (expand freevars -2) (("2" (case "null?(freevars(cons1_var!1))") (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (sentence_list? const-decl "bool" fmla nil) (append def-decl "list[T]" list_props nil) (term type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (freevars def-decl "list[(var?)]" fmla nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (append_null formula-decl nil list_props nil) (freevars def-decl "list[(var?)]" fmla nil) (list_induction formula-decl nil list_adt nil)) shostak)))
