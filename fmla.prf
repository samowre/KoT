(funpred)
(preterm)
(preterm_funs
 (termnats_TCC1 0
  (termnats_TCC1-1 nil 3578158485
   ("" (use "strict_well_founded?" ("<" "list_adt[preterm].<<"))
    (("" (use "strict_well_founded?" ("<" "preterm_adt.<<"))
      (("" (simplify)
        (("" (flatten)
          (("" (expand "well_founded?")
            (("" (hide -1 -3)
              (("" (skeep)
                (("" (inst?)
                  (("" (prop)
                    (("" (skeep)
                      (("" (case "var?(y)")
                        (("1" (grind) nil nil)
                         ("2" (case "null?(args(y))")
                          (("1" (grind) nil nil)
                           ("2"
                            (inst -2
                             "LAMBDA (l: list[preterm]): p(apply(fun(y), l)) AND subterm(l, args(y))")
                            (("2" (split)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 3 "apply(fun(y), y_1)")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (expand "lt")
                                      (("1"
                                        (split)
                                        (("1"
                                          (typepred "x_1")
                                          (("1"
                                            (inst -4 x_1)
                                            (("1"
                                              (typepred "y_1")
                                              (("1"
                                                (hide -3)
                                                (("1"
                                                  (hide -4)
                                                  (("1"
                                                    (hide -4)
                                                    (("1"
                                                      (expand "<<")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (rewrite
                                                             "some_exists[preterm]")
                                                            (("1"
                                                              (inst
                                                               2
                                                               "x_1")
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   1
                                                                   3
                                                                   4)
                                                                  (("1"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (inst -5 "args(x_1)")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (typepred "x_1")
                                              (("2"
                                                (eta "(apply?)")
                                                (("2"
                                                  (inst - x_1)
                                                  (("2"
                                                    (rewrite -4)
                                                    (("2"
                                                      (rewrite -1)
                                                      (("2"
                                                        (typepred
                                                         "y_1")
                                                        (("2"
                                                          (hide
                                                           -1
                                                           -4
                                                           -7
                                                           -8)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -2
                                                               2
                                                               3)
                                                              (("2"
                                                                (rewrite
                                                                 -3)
                                                                (("2"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst 1 "args(y)")
                                (("2"
                                  (typepred "y")
                                  (("2"
                                    (eta "(apply?)")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (rewrite -1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (preterm type-decl nil preterm_adt nil)
    (var? adt-recognizer-decl "[preterm -> boolean]" preterm_adt nil)
    (v_index adt-accessor-decl "[(var?) -> nat]" preterm_adt nil)
    (v adt-constructor-decl "[nat -> (var?)]" preterm_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (subterm adt-def-decl "boolean" preterm_adt nil)
    (member def-decl "bool" list_props nil))
   nil))
 (termnats_TCC2 0
  (termnats_TCC2-1 nil 3578158485 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (funpred type-decl nil funpred_adt nil)
    (fun? adt-def-decl "boolean" funpred_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil)
    (subterm adt-def-decl "boolean" preterm_adt nil))
   nil))
 (termnats_TCC3 0
  (termnats_TCC3-1 nil 3578158485 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (funpred type-decl nil funpred_adt nil)
    (fun? adt-def-decl "boolean" funpred_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (some adt-def-decl "boolean" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil)
    (subterm adt-def-decl "boolean" preterm_adt nil))
   nil))
 (termnats_TCC4 0
  (termnats_TCC4-1 nil 3578158485 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (funpred type-decl nil funpred_adt nil)
    (fun? adt-def-decl "boolean" funpred_adt nil))
   nil))
 (termnats_TCC5 0
  (termnats_TCC5-1 nil 3578158485 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (funpred type-decl nil funpred_adt nil)
    (fun? adt-def-decl "boolean" funpred_adt nil)
    (member def-decl "bool" list_props nil)
    (lt const-decl "bool" preterm_funs nil))
   nil))
 (termnats_TCC6 0
  (termnats_TCC6-1 nil 3578158485 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (funpred type-decl nil funpred_adt nil)
    (fun? adt-def-decl "boolean" funpred_adt nil)
    (lt const-decl "bool" preterm_funs nil))
   nil))
 (termnats_TCC7 0
  (termnats_TCC7-1 nil 3578164866 ("" (subtype-tcc) nil nil) nil nil))
 (termnats_spec 0
  (termnats_spec-1 nil 3578156594
   ("" (induct s1)
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (use "every_forall[preterm]")
        (("2" (prop)
          (("2" (hide -1 -3)
            (("2" (skeep)
              (("2" (prop)
                (("1" (expand "termnats" -1)
                  (("1" (expand "reduce" -1) (("1" (postpone) nil nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (typepred "s")
                    (("2" (inst?)
                      (("2" (prop)
                        (("2" (inst?)
                          (("2" (flatten)
                            (("2" (simplify)
                              (("2"
                                (assert)
                                (("2"
                                  (hide -2)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (expand "termnats" 1)
                                      (("2"
                                        (expand "reduce" 1)
                                        (("2"
                                          (rewrite
                                           "flatten_member[nat]")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (simplify)
                                              (("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (termnats_v 0
  (termnats_v-1 nil 3578156455 ("" (grind) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (flatten const-decl "list[T]" more_list_props nil)
    (reduce adt-def-decl "[preterm -> range]" preterm_adt_reduce nil))
   shostak))
 (termnats_apply 0
  (termnats_apply-1 nil 3578156459 ("" (postpone) nil nil) nil
   shostak)))

