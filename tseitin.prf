(tseitin
 (form2cnf_aux_TCC1 0
  (form2cnf_aux_TCC1-1 nil 3526131282 ("" (termination-tcc) nil nil)
   nil nil))
 (form2cnf_aux_TCC2 0
  (form2cnf_aux_TCC2-1 nil 3526131282 ("" (subtype-tcc) nil nil) nil
   nil))
 (form2cnf_aux_TCC3 0
  (form2cnf_aux_TCC3-1 nil 3526131282 ("" (subtype-tcc) nil nil) nil
   nil))
 (form2cnf_aux_TCC4 0
  (form2cnf_aux_TCC4-1 nil 3526131282 ("" (termination-tcc) nil nil)
   nil nil))
 (form2cnf_aux_TCC5 0
  (form2cnf_aux_TCC5-1 nil 3526231143 ("" (cases-tcc) nil nil) nil
   nil))
 (form2cnf_aux_TCC6 0
  (form2cnf_aux_TCC6-1 nil 3526231416 ("" (subtype-tcc) nil nil) nil
   nil))
 (form2cnf_aux_TCC7 0
  (form2cnf_aux_TCC7-1 nil 3526231416 ("" (termination-tcc) nil nil)
   nil nil))
 (form2cnf_aux_TCC8 0
  (form2cnf_aux_TCC8-1 nil 3526306290 ("" (termination-tcc) nil nil)
   nil nil))
 (form2aux_char 0
  (form2aux_char-1 nil 3526131283
   ("" (induct "form")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("phi!1" "phi!2"))
      (("3" (skosimp*)
        (("3" (inst -1 "e0!1")
          (("3" (inst -1 "n!1")
            (("3" (split)
              (("1"
                (name-replace "n1!1" "form2cnf_aux(phi!1,n!1)`1" nil)
                (("1"
                  (name-replace "i1!1" "form2cnf_aux(phi!1,n!1)`2" nil)
                  (("1"
                    (name-replace "cls1!1" "form2cnf_aux(phi!1,n!1)`3"
                     nil)
                    (("1" (skosimp*)
                      (("1" (inst -10 "e1!1")
                        (("1" (inst -10 "n1!1")
                          (("1" (split)
                            (("1" (skosimp*)
                              (("1"
                                (name-replace
                                 "n2!1"
                                 "form2cnf_aux(phi!2,n1!1)`1"
                                 nil)
                                (("1"
                                  (name-replace
                                   "i2!1"
                                   "form2cnf_aux(phi!2,n1!1)`2"
                                   nil)
                                  (("1"
                                    (name-replace
                                     "cls2!1"
                                     "form2cnf_aux(phi!2,n1!1)`3"
                                     nil)
                                    (("1"
                                      (inst
                                       1
                                       "e1!2 WITH [n2!1 := meaning(nand(phi!1,phi!2), e0!1)]")
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "eqval")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst -5 "v!1")
                                              (("1"
                                                (inst -14 "v!1")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand
                                           "form2cnf_aux"
                                           :if-simplifies
                                           T)
                                          (("2"
                                            (expand "satisfies")
                                            (("2"
                                              (rewrite "every_append")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (rewrite "every")
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       "satisfies")
                                                      (("1"
                                                        (rewrite
                                                         "some")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (rewrite
                                                             "some")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (rewrite
                                                                 "some")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite "every")
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (expand
                                                           "satisfies")
                                                          (("1"
                                                            (rewrite
                                                             "some")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (rewrite
                                                                 "some")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (rewrite
                                                                     "some")
                                                                    (("1"
                                                                      (replace
                                                                       -12
                                                                       1)
                                                                      (("1"
                                                                        (replace
                                                                         -3
                                                                         1)
                                                                        (("1"
                                                                          (replace
                                                                           -12
                                                                           2)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "satisfies")
                                                                              (("1"
                                                                                (expand
                                                                                 "lookup")
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -7
                                                                                             2)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "meaning"
                                                                                               :if-simplifies
                                                                                               T)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "eqval_char")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "phi!2"
                                                                                                   "e1!1"
                                                                                                   "e0!1")
                                                                                                  (("2"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "every")
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (expand
                                                               "satisfies")
                                                              (("1"
                                                                (rewrite
                                                                 "some")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (rewrite
                                                                     "some")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (rewrite
                                                                         "some")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (rewrite
                                                                             "some")
                                                                            (("1"
                                                                              (replace
                                                                               -11
                                                                               1)
                                                                              (("1"
                                                                                (replace
                                                                                 -12
                                                                                 2)
                                                                                (("1"
                                                                                  (replace
                                                                                   -12
                                                                                   3)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     2)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3
                                                                                       3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "satisfies")
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "lookup")
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "lookup")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "lookup")
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -9
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "eqval")
                                                                                                            (("2"
                                                                                                              (inst-cp
                                                                                                               -7
                                                                                                               "i1!1")
                                                                                                              (("2"
                                                                                                                (rewrite-with-fnum
                                                                                                                 -8
                                                                                                                 -1
                                                                                                                 :dir
                                                                                                                 RL)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -18
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "eqval_char")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "phi!2"
                                                                                                                       "e1!1"
                                                                                                                       "e0!1")
                                                                                                                      (("1"
                                                                                                                        (rewrite-with-fnum
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "every")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -12 1)
                                                  (("2"
                                                    (replace -10 1)
                                                    (("2"
                                                      (replace -1 1)
                                                      (("2"
                                                        (rewrite
                                                         "every_append")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (lemma
                                                             "eqval_clauses")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "cls1!1"
                                                               "e1!1"
                                                               "e1!2
                          WITH [n2!1 := meaning(nand(phi!1, phi!2), e0!1)]")
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (expand
                                                                   "satisfies"
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -15)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "eqval"
                                                                   1)
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (inst
                                                                             -20
                                                                             "i!1")
                                                                            (("1"
                                                                              (inst
                                                                               -21
                                                                               "i!1")
                                                                              (("1"
                                                                                (inst
                                                                                 -11
                                                                                 "i!1")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "eqval"
                                                                             -5)
                                                                            (("2"
                                                                              (inst
                                                                               -5
                                                                               "i!1")
                                                                              (("2"
                                                                                (split
                                                                                 -5)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "eqval_clauses")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "cls2!1"
                                                               "e1!2
                          WITH [n2!1 := meaning(nand(phi!1, phi!2), e0!1)]"
                                                               "e1!2")
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "satisfies"
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "eqval")
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -19
                                                                       "i!1")
                                                                      (("2"
                                                                        (inst
                                                                         -20
                                                                         "i!1")
                                                                        (("2"
                                                                          (inst
                                                                           -10
                                                                           "i!1")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil)
                                         ("4" (grind) nil nil)
                                         ("5" (grind) nil nil)
                                         ("6"
                                          (skosimp)
                                          (("6"
                                            (expand
                                             "form2cnf_aux"
                                             :if-simplifies
                                             T)
                                            (("6"
                                              (replace -13 1)
                                              (("6"
                                                (replace -4 1)
                                                (("6"
                                                  (inst -10 "i!1")
                                                  (("6"
                                                    (inst -19 "i!1")
                                                    (("6"
                                                      (inst -20 "i!1")
                                                      (("6"
                                                        (delete -5)
                                                        (("6"
                                                          (delete -13)
                                                          (("6"
                                                            (delete
                                                             -13)
                                                            (("6"
                                                              (delete
                                                               -13)
                                                              (("6"
                                                                (delete
                                                                 -6)
                                                                (("6"
                                                                  (delete
                                                                   -5)
                                                                  (("6"
                                                                    (rewrite
                                                                     "FV_append")
                                                                    (("6"
                                                                      (grind)
                                                                      (("6"
                                                                        (lemma
                                                                         "FV_append")
                                                                        (("6"
                                                                          (inst
                                                                           -1
                                                                           "cls1!1"
                                                                           "cls2!1")
                                                                          (("6"
                                                                            (replace
                                                                             -1)
                                                                            (("6"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (delete 2)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst -11 "v!1")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst -3 "v!1") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skolem 1 ("phi!1" "phi!2"))
      (("4" (skosimp*)
        (("4" (inst -1 "e0!1")
          (("4" (inst -1 "n!1")
            (("4" (split -1)
              (("1" (skosimp*)
                (("1"
                  (name-replace "n1" "form2cnf_aux(phi!1, n!1)`1" nil)
                  (("1"
                    (name-replace "i1" "form2cnf_aux(phi!1, n!1)`2"
                     nil)
                    (("1"
                      (name-replace "cls1" "form2cnf_aux(phi!1, n!1)`3"
                       nil)
                      (("1" (inst -10 "e1!1")
                        (("1" (inst -10 "n1")
                          (("1" (split -10)
                            (("1" (skosimp*)
                              (("1"
                                (name-replace
                                 "n2"
                                 "form2cnf_aux(phi!2, n1)`1"
                                 nil)
                                (("1"
                                  (name-replace
                                   "i2"
                                   "form2cnf_aux(phi!2, n1)`2"
                                   nil)
                                  (("1"
                                    (name-replace
                                     "cls2"
                                     "form2cnf_aux(phi!2, n1)`3"
                                     nil)
                                    (("1"
                                      (inst
                                       1
                                       "e1!2 WITH [n2 := meaning(piff(phi!1,phi!2),e0!1)]")
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "eqval")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst -5 "v!1")
                                              (("1"
                                                (inst -20 "v!1")
                                                (("1"
                                                  (inst -19 "v!1")
                                                  (("1"
                                                    (inst -10 "v!1")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand
                                           "form2cnf_aux"
                                           :if-simplifies
                                           T)
                                          (("2"
                                            (replace -10 1)
                                            (("2"
                                              (replace -11 1)
                                              (("2"
                                                (replace -12 1)
                                                (("2"
                                                  (replace -1 1)
                                                  (("2"
                                                    (replace -2 1)
                                                    (("2"
                                                      (replace -3 1)
                                                      (("2"
                                                        (expand
                                                         "satisfies"
                                                         1
                                                         1)
                                                        (("2"
                                                          (rewrite
                                                           "every_append")
                                                          (("2"
                                                            (rewrite
                                                             "every_append")
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (lemma
                                                                 "eqval_char")
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "phi!1"
                                                                   "e0!1"
                                                                   "e1!2 WITH  [n2 := meaning(piff(phi!1, phi!2), e0!1)]")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -1
                                                                     "phi!2"
                                                                     "e1!1"
                                                                     "e1!2 WITH  [n2 := meaning(piff(phi!1, phi!2), e0!1)]")
                                                                    (("1"
                                                                      (delete
                                                                       -1)
                                                                      (("1"
                                                                        (rewrite
                                                                         "every")
                                                                        (("1"
                                                                          (rewrite
                                                                           "every")
                                                                          (("1"
                                                                            (rewrite
                                                                             "every")
                                                                            (("1"
                                                                              (rewrite
                                                                               "every")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "every")
                                                                                (("1"
                                                                                  (expand
                                                                                   "satisfies"
                                                                                   1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "some")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "some")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "some")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "some")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "some"
                                                                                             :if-simplifies
                                                                                             T)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "some"
                                                                                               :if-simplifies
                                                                                               T)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "some"
                                                                                                 :if-simplifies
                                                                                                 T)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "some"
                                                                                                   :if-simplifies
                                                                                                   T)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "satisfies"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "lookup"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (split)
                                                                                                          (("1"
                                                                                                            (split)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (split)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (split)
                                                                                                                    (("1"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -10
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (delete
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (delete
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "eqval_char")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "phi!2"
                                                                                                                                 "e0!1"
                                                                                                                                 "e1!1")
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (lift-if)
                                                                                                                (("2"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (split)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "eqval")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -8
                                                                                                                           "i1")
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -8)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               2
                                                                                                                               :dir
                                                                                                                               RL)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -19
                                                                                                                                 2)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "meaning"
                                                                                                                                   -3)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "eqval_char")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "phi!2"
                                                                                                                                       "e0!1"
                                                                                                                                       "e1!1")
                                                                                                                                      (("1"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (flatten)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "meaning"
                                                                                                                 1)
                                                                                                                (("3"
                                                                                                                  (lemma
                                                                                                                   "eqval_char")
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "phi!2"
                                                                                                                     "e0!1"
                                                                                                                     "e1!1")
                                                                                                                    (("3"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (flatten)
                                                                                                              (("4"
                                                                                                                (lemma
                                                                                                                 "eqval_char")
                                                                                                                (("4"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "phi!2"
                                                                                                                   "e0!1"
                                                                                                                   "e1!1")
                                                                                                                  (("4"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (delete
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "eqval")
                                                                                                              (("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -6
                                                                                                                   "v!1")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -11
                                                                                                                     "v!1")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -15
                                                                                                                       "v!1")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -20
                                                                                                                         "v!1")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -21
                                                                                                                           "v!1")
                                                                                                                          (("2"
                                                                                                                            (grind
                                                                                                                             :exclude
                                                                                                                             "satisfies")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "eqval")
                                                                                                          (("2"
                                                                                                            (delete
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (skosimp)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -6
                                                                                                                 "v!1")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -15
                                                                                                                   "v!1")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -20
                                                                                                                     "v!1")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -21
                                                                                                                       "v!1")
                                                                                                                      (("2"
                                                                                                                        (grind
                                                                                                                         :exclude
                                                                                                                         "satisfies")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (rewrite
                                                                                           "every")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "every")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (rewrite
                                                                                         "every")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "every")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "every")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (rewrite
                                                                                       "every")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "every")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "every")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "every")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (rewrite
                                                                                 "every")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "every")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "every")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "every")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "every")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "every")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "every")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "every")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "every")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "every")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "every")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "every")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "every")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "every")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "every")
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "every")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "every")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "every")
                                                                            (("2"
                                                                              (rewrite
                                                                               "every")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "every")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "every")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "every")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "every")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "every")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "every")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "every")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "every")
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "every")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "every")
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "every")
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "every")
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "every")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "every")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "eqval_clauses")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "cls1"
                                                                   "e1!1"
                                                                   "e1!2
                          WITH [n2 := meaning(piff(phi!1, phi!2), e0!1)]")
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "satisfies"
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "satisfies"
                                                                         -15)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "eqval")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (inst
                                                                           -5
                                                                           "i!1")
                                                                          (("2"
                                                                            (inst
                                                                             -10
                                                                             "i!1")
                                                                            (("2"
                                                                              (inst
                                                                               -14
                                                                               "i!1")
                                                                              (("2"
                                                                                (inst
                                                                                 -19
                                                                                 "i!1")
                                                                                (("2"
                                                                                  (inst
                                                                                   -20
                                                                                   "i!1")
                                                                                  (("2"
                                                                                    (grind
                                                                                     :exclude
                                                                                     "satisfies")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (lemma
                                                                 "eqval_clauses")
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "cls2"
                                                                   "e1!2"
                                                                   "e1!2
                          WITH [n2 := meaning(piff(phi!1, phi!2), e0!1)]")
                                                                  (("3"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (grind
                                                                       :exclude
                                                                       "eqval")
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "eqval")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (inst
                                                                           -5
                                                                           "i!1")
                                                                          (("2"
                                                                            (inst
                                                                             -10
                                                                             "i!1")
                                                                            (("2"
                                                                              (inst
                                                                               -19
                                                                               "i!1")
                                                                              (("2"
                                                                                (inst
                                                                                 -20
                                                                                 "i!1")
                                                                                (("2"
                                                                                  (inst
                                                                                   -14
                                                                                   "i!1")
                                                                                  (("2"
                                                                                    (delete
                                                                                     2)
                                                                                    (("2"
                                                                                      (grind
                                                                                       :exclude
                                                                                       "satisfies")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil)
                                         ("4" (grind) nil nil)
                                         ("5" (grind) nil nil)
                                         ("6"
                                          (skosimp*)
                                          (("6"
                                            (case "i!1 < n2+1")
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (delete 2)
                                              (("2"
                                                (delete -6)
                                                (("2"
                                                  (delete -14)
                                                  (("2"
                                                    (inst -9 "i!1")
                                                    (("2"
                                                      (inst -17 "i!1")
                                                      (("2"
                                                        (inst
                                                         -18
                                                         "i!1")
                                                        (("2"
                                                          (delete -5)
                                                          (("2"
                                                            (delete
                                                             -12)
                                                            (("2"
                                                              (expand
                                                               "form2cnf_aux"
                                                               -1
                                                               :if-simplifies
                                                               T)
                                                              (("2"
                                                                (replace
                                                                 -11
                                                                 -1)
                                                                (("2"
                                                                  (replace
                                                                   -10
                                                                   -1)
                                                                  (("2"
                                                                    (replace
                                                                     -2
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -3
                                                                       -1)
                                                                      (("2"
                                                                        (replace
                                                                         -4
                                                                         -1)
                                                                        (("2"
                                                                          (rewrite
                                                                           "FV_append")
                                                                          (("2"
                                                                            (rewrite
                                                                             "FV_append")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (delete 2)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst -10 "v!1")
                                  (("2"
                                    (inst -11 "v!1")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (delete -1)
                (("2" (delete 2)
                  (("2" (skosimp)
                    (("2" (inst -2 "v!1") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp*)
      (("5" (inst 1 "e0!1 WITH [n!1 := TRUE]") (("5" (grind) nil nil))
        nil))
      nil))
    nil)
   ((propform type-decl nil formulas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (env type-eq-decl nil clauses nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (< const-decl "bool" reals nil)
    (eqval const-decl "bool" formulas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (form2cnf_aux def-decl "[posnat, posnat, list[list[int]]]" tseitin
     nil)
    (propform_induction formula-decl nil formulas nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (lookup const-decl "bool" clauses nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (emptyset const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (union const-decl "set" sets nil)
    (eqval_char formula-decl nil formulas nil)
    (eqval_clauses formula-decl nil clauses nil)
    (eqval const-decl "bool" clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (every_append formula-decl nil list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (FV_append formula-decl nil clauses nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (nand? adt-recognizer-decl "[propform -> boolean]" formulas nil)
    (nand adt-constructor-decl "[[propform, propform] -> (nand?)]"
     formulas nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (piff? adt-recognizer-decl "[propform -> boolean]" formulas nil)
    (piff adt-constructor-decl "[[propform, propform] -> (piff?)]"
     formulas nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (form2cnf_TCC1 0
  (form2cnf_TCC1-1 nil 3526246211 ("" (subtype-tcc) nil nil) nil nil))
 (form2cnf_maxvar 0
  (form2cnf_maxvar-1 nil 3526246213
   ("" (lemma "form2aux_char")
    (("" (skosimp*)
      (("" (inst -1 "form!1" "LAMBDA(i:posnat):FALSE" "maxvar(form!1)")
        (("" (assert)
          (("" (split)
            (("1" (skosimp*)
              (("1" (inst -6 "i!1") (("1" (grind) nil nil)) nil)) nil)
             ("2" (lemma "maxvar_char")
              (("2" (skosimp*)
                (("2" (inst -1 "form!1" "v!1") (("2" (prop) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((form2aux_char formula-decl nil tseitin nil)
    (propform type-decl nil formulas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (env type-eq-decl nil clauses nil)
    (FALSE const-decl "bool" booleans nil)
    (maxvar def-decl "posnat" formulas nil)
    (member const-decl "bool" sets nil)
    (eqval const-decl "bool" formulas nil)
    (lookup const-decl "bool" clauses nil)
    (form2cnf const-decl "[posnat, list[list[int]]]" tseitin nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (singleton const-decl "(singleton?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (maxvar_char formula-decl nil formulas nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (extform2cnf_maxvar 0
  (extform2cnf_maxvar-1 nil 3526343298
   ("" (lemma "form2cnf_maxvar")
    (("" (skosimp)
      (("" (skosimp)
        (("" (inst -1 "extform2propform(form!1)" "i!1")
          (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((propform type-decl nil formulas nil)
    (extform type-decl nil formulas nil)
    (extform2propform def-decl "propform" formulas nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (form2cnf const-decl "[posnat, list[list[int]]]" tseitin nil)
    (extform2cnf const-decl "[posnat, list[list[int]]]" tseitin nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (form2cnf_maxvar formula-decl nil tseitin nil))
   shostak))
 (form2cnf_char 0
  (form2cnf_char-1 nil 3526246790
   ("" (skosimp*)
    (("" (lemma "form2aux_char")
      (("" (lemma "form2cnf_maxvar")
        (("" (inst? -1)
          (("" (inst? -2)
            (("" (inst -2 "maxvar(form!1)")
              (("" (assert)
                (("" (split)
                  (("1" (skosimp*)
                    (("1" (replace -3 1 :dir RL)
                      (("1" (inst -8 "e1!1") (("1" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "maxvar_char")
                    (("2" (skosimp*)
                      (("2" (inst -1 "form!1" "v!1")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((form2cnf_maxvar formula-decl nil tseitin nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (env type-eq-decl nil clauses nil)
    (maxvar_char formula-decl nil formulas nil)
    (member const-decl "bool" sets nil)
    (eqval const-decl "bool" formulas nil)
    (lookup const-decl "bool" clauses nil)
    (form2cnf const-decl "[posnat, list[list[int]]]" tseitin nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (maxvar def-decl "posnat" formulas nil)
    (propform type-decl nil formulas nil)
    (form2aux_char formula-decl nil tseitin nil))
   shostak))
 (extform2cnf_char 0
  (extform2cnf_char-1 nil 3526343398
   ("" (skosimp*)
    (("" (lemma "form2cnf_char")
      (("" (inst -1 "extform2propform(form!1)")
        (("" (lemma "extform2propform_char") (("" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((form2cnf_char formula-decl nil tseitin nil)
    (extform2propform_char formula-decl nil formulas nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (lookup const-decl "bool" clauses nil)
    (extform2cnf const-decl "[posnat, list[list[int]]]" tseitin nil)
    (form2cnf const-decl "[posnat, list[list[int]]]" tseitin nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (extform2propform def-decl "propform" formulas nil)
    (extform type-decl nil formulas nil)
    (propform type-decl nil formulas nil))
   shostak))
 (mkgoal_aux_TCC1 0
  (mkgoal_aux_TCC1-1 nil 3526343819 ("" (termination-tcc) nil nil) nil
   nil))
 (mkgoal_aux_TCC2 0
  (mkgoal_aux_TCC2-1 nil 3526343819 ("" (subtype-tcc) nil nil) nil
   nil))
 (mkgoal_aux_char 0
  (mkgoal_aux_char-1 nil 3526343819
   ("" (skosimp) (("" (induct-and-simplify "cls") nil nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (mkgoal_aux def-decl "[below(n) -> list[int]]" tseitin nil) nil
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil
    (env type-eq-decl nil clauses nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil))
   shostak))
 (mkgoal_char 0
  (mkgoal_char-1 nil 3526344010
   ("" (lemma "mkgoal_aux_char")
    (("" (skosimp*)
      (("" (inst -1 "length(cls!1)" "cls!1" "e!1")
        (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (mkgoal const-decl "[below(length(cls)) -> list[int]]" tseitin nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (lookup const-decl "bool" clauses nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mkgoal_aux_char formula-decl nil tseitin nil))
   shostak)))

