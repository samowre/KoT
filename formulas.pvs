formulas[vars:TYPE]  : THEORY
BEGIN

IMPORTING lists, clauses, certificates

i,j:VAR posnat
n: VAR posnat

propform : DATATYPE 
   BEGIN 
      vbl(v:vars) : vbl? 
      nand(left,right:propform) : land?
   END propform

meaning(form:propform,val:[vars->bool]) : RECURSIVE bool = 
   CASES form OF 
      vbl(v) : val(v), 
      nand(left,right) : NOT(meaning(left,val) AND meaning(right,val)) 
   ENDCASES
MEASURE form BY <<

FV(form:propform) : RECURSIVE set[vars] = 
   CASES form OF 
      vbl(v) : singleton(v), 
      nand(left,right) : union(FV(left), FV(right))
   ENDCASES 
MEASURE form BY <<

eqval(eta1,eta2:[vars->bool],X:set[vars]) : bool = FORALL(v:vars):
   member(v,X) IMPLIES eta1(v)=eta2(v)

eqval_char : LEMMA 
   FORALL (phi:propform): FORALL(eta1,eta2:[vars->bool]): 
       eqval(eta1,eta2,FV(phi)) IMPLIES meaning(phi,eta1)=meaning(phi,eta2)
END formulas 
