(toplevelsat
 (toplevelsat_TCC1 0
  (toplevelsat_TCC1-1 nil 3526344480 ("" (subtype-tcc) nil nil) nil
   nil))
 (toplevelsat_TCC2 0
  (toplevelsat_TCC2-1 nil 3526344480 ("" (subtype-tcc) nil nil) nil
   nil))
 (toplevelsat 0
  (toplevelsat-1 nil 3526344481
   ("" (skosimp*)
    (("" (assert)
      (("" (skosimp*)
        (("" (lemma "extform2cnf_char")
          (("" (inst -1 "form!1")
            (("" (split -1)
              (("1" (inst -1 "e!1") nil nil)
               ("2" (lemma "mkgoal_char")
                (("2"
                  (lemma
                   "certificates[extform2cnf(form!1)`1,length(extform2cnf(form!1)`2)]")
                  (("1" (inst? -1)
                    (("1" (skosimp)
                      (("1" (inst? -2)
                        (("1" (split -2)
                          (("1" (inst -2 "e!2")
                            (("1" (split -2)
                              (("1"
                                (delete -2)
                                (("1"
                                  (delete -2)
                                  (("1"
                                    (delete 2)
                                    (("1"
                                      (expand
                                       "satisfies[extform2cnf(form!1)`1,length(extform2cnf(form!1)`2)]"
                                       1)
                                      (("1"
                                        (skosimp)
                                        (("1" (inst -1 "i!1") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((extform2cnf_char formula-decl nil tseitin nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (extform2cnf const-decl "[posnat, list[list[int]]]" tseitin nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (certificates formula-decl nil certificates nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (satisfies const-decl "bool" certificates nil)
    (env type-eq-decl nil clauses nil)
    (command type-decl nil certificates nil)
    (mkgoal const-decl "[below(length(cls)) -> list[int]]" tseitin nil)
    (cnf type-eq-decl nil certificates nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (form2cnf const-decl "[posnat, list[list[int]]]" tseitin nil)
    (mkgoal_char formula-decl nil tseitin nil)
    (extform type-decl nil formulas nil))
   shostak)))

