(trace2fmla
 (translate_lit_TCC1 0
  (translate_lit_TCC1-1 nil 3482187575 3482776332
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace2fmla nil)
    (n formal-const-decl "nat" trace2fmla nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace2fmla nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   280 200 nil nil))
 (translate_lit_TCC2 0
  (translate_lit_TCC2-1 nil 3482187575 3482776333
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) unchecked
   ((pred? adt-def-decl "boolean" funpred_adt nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace2fmla nil)
    (n formal-const-decl "nat" trace2fmla nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace2fmla nil)
    (tr_literal? const-decl "bool" trace_resolution nil))
   297 170 t nil))
 (translate_lit_TCC3 0
  (translate_lit_TCC3-1 nil 3482187575 3482776333
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) unchecked
   ((length def-decl "nat" list_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace2fmla nil)
    (n formal-const-decl "nat" trace2fmla nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace2fmla nil)
    (tr_literal? const-decl "bool" trace_resolution nil))
   295 180 t nil))
 (translate_lit_TCC4 0
  (translate_lit_TCC4-1 nil 3482187575 3482776333
   ("" (subtype-tcc) nil nil) unchecked
   ((prop_atom? const-decl "bool" resolution nil)
    (literal? const-decl "bool" resolution nil))
   64 50 nil nil))
 (translate_lit_TCC5 0
  (translate_lit_TCC5-1 nil 3482187575 3482776333
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) unchecked
   ((pred? adt-def-decl "boolean" funpred_adt nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace2fmla nil)
    (n formal-const-decl "nat" trace2fmla nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace2fmla nil)
    (tr_literal? const-decl "bool" trace_resolution nil))
   269 190 t nil))
 (translate_lit_TCC6 0
  (translate_lit_TCC6-1 nil 3482187575 3482776334
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) unchecked
   ((length def-decl "nat" list_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace2fmla nil)
    (n formal-const-decl "nat" trace2fmla nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace2fmla nil)
    (tr_literal? const-decl "bool" trace_resolution nil))
   275 180 t nil))
 (translate_lit_TCC7 0
  (translate_lit_TCC7-1 nil 3482187575 3482776334 ("" (grind) nil nil)
   unchecked
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (prop_atom? const-decl "bool" resolution nil)
    (literal? const-decl "bool" resolution nil))
   133 60 t nil))
 (index_index 0
  (index_index-1 nil 3482187759 3482679619 ("" (grind) nil nil)
   unfinished
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace2fmla nil)
    (n formal-const-decl "nat" trace2fmla nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace2fmla nil)
    (index const-decl "posnat" resolution nil)
    (prop_atom? const-decl "bool" resolution nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (tr_literal? const-decl "bool" trace_resolution nil))
   144 80 t shostak))
 (translate_clause_TCC1 0
  (translate_clause_TCC1-1 nil 3482245688 3482776335
   ("" (induct cl)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem-typepred)
      (("3" (flatten)
        (("3" (lemma tr_clause_prop)
          (("3" (inst -1 "cons(cons1_var!1, cons2_var!1)")
            (("3" (flatten)
              (("3" (hide -2)
                (("3" (replace -5)
                  (("3" (split -1)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (flatten)
                      (("3" (assert)
                        (("3" (hide -4)
                          (("3" (lemma clause_prop)
                            (("3" (expand map 2)
                              (("3"
                                (inst
                                 -1
                                 "cons(translate_lit(cons1_var!1),
                   map(translate_lit)(cons2_var!1))")
                                (("3"
                                  (flatten)
                                  (("3"
                                    (hide -1)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (lemma index_index)
                                        (("3"
                                          (lemma index_index)
                                          (("3"
                                            (inst -1 cons1_var!1)
                                            (("3"
                                              (inst
                                               -2
                                               "car(cons2_var!1)")
                                              (("3"
                                                (replace -1)
                                                (("3"
                                                  (expand map 1 2)
                                                  (("3"
                                                    (lift-if)
                                                    (("3"
                                                      (split 1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (tr_clause_prop formula-decl nil trace_resolution nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (index_index formula-decl nil trace2fmla nil)
    (clause_prop formula-decl nil resolution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (index const-decl "posnat" resolution nil)
    (sorted? def-decl "bool" sortedlist nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace2fmla nil)
    (n formal-const-decl "nat" trace2fmla nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace2fmla nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (clause? const-decl "bool" resolution nil)
    (literal? const-decl "bool" resolution nil)
    (fmla type-decl nil fmla nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   1130 890 t nil))
 (clause_clause 0
  (clause_clause-1 nil 3482677228 3482679628
   ("" (induct cl)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem-typepred)
      (("3" (flatten)
        (("3" (skolem-typepred)
          (("3" (split 2)
            (("1" (expand member 1 1)
              (("1" (flatten)
                (("1" (split -1)
                  (("1" (grind) nil nil)
                   ("2" (expand translate_clause 1 1)
                    (("2" (expand map 1 1)
                      (("2" (expand member 1 1)
                        (("2" (lemma tr_clause_prop)
                          (("2"
                            (inst -1 "cons(cons1_var!1, cons2_var!1)")
                            (("2" (flatten)
                              (("2"
                                (hide -2)
                                (("2"
                                  (replace -7 -1)
                                  (("2"
                                    (split -1)
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil)
                                     ("3"
                                      (flatten)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide -6)
                                          (("3"
                                            (inst -6 k!1)
                                            (("3"
                                              (flatten)
                                              (("3"
                                                (hide -7)
                                                (("3"
                                                  (replace -3)
                                                  (("3"
                                                    (expand
                                                     translate_clause
                                                     -6)
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -4)
              (("2" (expand translate_clause 1)
                (("2" (expand map 1)
                  (("2" (expand member 1)
                    (("2" (flatten)
                      (("2" (split -1)
                        (("1" (expand translate_lit -1)
                          (("1" (lift-if -1)
                            (("1" (lift-if -1)
                              (("1"
                                (split -1)
                                (("1"
                                  (lift-if -1)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "pred(atom(upred(k!1, 0), null)) = pred(atom(upred(cons1_var!1, 0), null))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "index(upred(k!1, 0)) = index(upred(cons1_var!1, 0))")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (replace -1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -3)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (lemma tr_clause_prop)
                                        (("2"
                                          (inst
                                           -1
                                           "cons(cons1_var!1, cons2_var!1)")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (replace -7)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (flatten)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (case
                                         "arg(f_not(atom(upred(abs(k!1), 0), null))) = arg(f_not(atom(upred(abs(cons1_var!1), 0), null)))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "pred(atom(upred(abs(k!1), 0), null)) = pred(atom(upred(abs(cons1_var!1), 0), null))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "index(upred(abs(k!1), 0)) = index(upred(abs(cons1_var!1), 0))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma tr_clause_prop)
                          (("2"
                            (inst -1 "cons(cons1_var!1, cons2_var!1)")
                            (("2" (flatten)
                              (("2"
                                (hide -2)
                                (("2"
                                  (replace -6)
                                  (("2"
                                    (split -1)
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil)
                                     ("3"
                                      (flatten)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (inst -6 k!1)
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (hide -6)
                                              (("3"
                                                (expand
                                                 translate_clause
                                                 -6)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (fmla type-decl nil fmla nil)
    (literal? const-decl "bool" resolution nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (clause? const-decl "bool" resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace2fmla nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace2fmla nil)
    (m formal-const-decl "nat" trace2fmla nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (sorted? def-decl "bool" sortedlist nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (tr_clause_prop formula-decl nil trace_resolution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (index shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (upred adt-constructor-decl "[[nat, nat] -> (upred?)]" funpred_adt
     nil)
    (upred? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil)
    (atom adt-constructor-decl
          "[[pred: (pred?), {ss: list[term] | length(ss) = arity(pred)}] -> (atom?)]"
          fmla nil)
    (arity shared-adt-accessor-decl "[funpred -> nat]" funpred_adt nil)
    (length def-decl "nat" list_props nil)
    (term type-decl nil fmla nil)
    (pred adt-accessor-decl "[(atom?) -> (pred?)]" fmla nil)
    (pred? adt-def-decl "boolean" funpred_adt nil)
    (atom? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (funpred type-decl nil funpred_adt nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla nil)
    (arg adt-accessor-decl "[(f_not?) -> fmla]" fmla nil)
    (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   1100 550 t shostak))
 (translate_cons_TCC1 0
  (translate_cons_TCC1-1 nil 3482245688 3482776335
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (use tr_clause_prop)
        (("" (flatten)
          (("" (hide -2)
            (("" (replace -3)
              (("" (split -1)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (flatten) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((sorted? def-decl "bool" sortedlist nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index const-decl "posnat" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (tr_clause_prop formula-decl nil trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace2fmla nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace2fmla nil)
    (m formal-const-decl "nat" trace2fmla nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   528 450 t nil))
 (translate_cons_TCC2 0
  (translate_cons_TCC2-1 nil 3482805344 nil ("" (subtype-tcc) nil nil)
   nil nil nil nil nil nil))
 (translate_cons 0
  (translate_cons-1 nil 3482679632 3482805356
   ("" (skolem!)
    (("" (flatten)
      (("" (expand translate_clause 1 1)
        (("" (expand map) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((translate_clause const-decl "(clause?)" trace2fmla nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (map adt-def-decl "list[T1]" list_adt_map nil))
   4328 150 t shostak))
 (neg_translate_TCC1 0
  (neg_translate_TCC1-1 nil 3482804348 3482804393
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) unchecked
   ((i formal-const-decl "upto(n)" trace2fmla nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace2fmla nil)
    (m formal-const-decl "nat" trace2fmla nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   6534 280 t nil))
 (translate_inclusion_TCC1 0
  (translate_inclusion_TCC1-1 nil 3482804348 nil
   ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))
 (translate_inclusion 0
  (translate_inclusion-1 nil 3482806421 3482806569
   ("" (skosimp)
    (("" (generalize lk!1 "lk")
      (("1" (induct lk)
        (("1" (grind) nil nil)
         ("2" (skosimp)
          (("2" (expand subset + 1)
            (("2" (expand subset + 2) (("2" (postpone) nil nil)) nil))
            nil))
          nil)
         ("3" (postpone) nil nil) ("4" (postpone) nil nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   unfinished nil 148719 870 t shostak)))

