(sortedlist
 (sorted?_TCC1 0
  (sorted?_TCC1-1 nil 3482515380 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (cdr_sorted 0
  (cdr_sorted-1 nil 3578234647 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil))
   shostak))
 (car_sorted 0
  (car_sorted-1 nil 3578063647
   ("" (induct sl)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (expand sorted? 1 2)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (prop)
            (("1" (inst - a)
              (("1" (grind :exclude sorted? :if-match all)
                (("1" (grind)
                  (("1" (case "a=car(cons2_var)")
                    (("1" (grind) nil nil)
                     ("2" (grind)
                      (("2" (expand member -3) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (injective? const-decl "bool" functions nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sorted? def-decl "bool" sortedlist nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (nth_sorted 0
  (nth_sorted-1 nil 3578163072
   ("" (induct l)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (prop)
        (("1" (skeep)
          (("1" (inst - "i-1" "j-1")
            (("1" (expand nth +)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (grind) nil nil)
                       ("2" (use member_nth (x "nth(cons2_var,j-1)"))
                        (("1"
                          (use car_sorted
                               (a
                                "nth(cons2_var,j-1)"
                                sl
                                "cons(cons1_var,cons2_var)"))
                          (("1" (prop)
                            (("1" (inst + "j-1")
                              (("1"
                                (hide -1 -2 -3 -4 -5 -6 2 3 5)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3 -1 -4 -5 -6 -7 3)
                            (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide -2 -3 -1 -4 -5 -6 -7 3)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil) ("3" (assert) nil nil)
                   ("4" (assert) nil nil) ("5" (assert) nil nil)
                   ("6" (assert) nil nil) ("7" (assert) nil nil)
                   ("8" (assert)
                    (("8" (lift-if)
                      (("8" (prop)
                        (("8"
                          (use car_sorted
                               (a
                                "nth(cons2_var,i-1)"
                                sl
                                "cons(cons1_var,cons2_var)"))
                          (("8" (prop)
                            (("1" (assert) nil nil)
                             ("2"
                              (use member_nth (x "nth(cons2_var,i-1)"))
                              (("2"
                                (prop)
                                (("2" (inst + "i-1") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (typepred j)
                (("2" (hide -2 -3)
                  (("2"
                    (use car_sorted
                         (a "nth(cons(cons1_var,cons2_var),i)" sl
                          "cons(cons1_var,cons2_var)"))
                    (("2" (grind)
                      (("2"
                        (use member_nth
                             (x "nth(cons(cons1_var,cons2_var),i)"))
                        (("2" (prop)
                          (("2" (inst + "i-1")
                            (("1" (grind)
                              (("1"
                                (expand nth 1 2)
                                (("1"
                                  (grind :exclude nth)
                                  (("1"
                                    (hide 1 2 3 4)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind)
                              (("2"
                                (typepred i)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (typepred i)
              (("3" (grind)
                (("1"
                  (use car_sorted
                       (a "nth(cons2_var,j-1)" sl
                        "cons(cons1_var,cons2_var)"))
                  (("1" (use member_nth (x "nth(cons2_var,j-1)"))
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2"
                  (use car_sorted
                       (a "nth(cons2_var,j-1)" sl
                        "cons(cons1_var,cons2_var)"))
                  (("1" (use member_nth (x "nth(cons2_var,j-1)"))
                    (("1" (grind) nil nil)) nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand sorted? +)
          (("2" (lift-if)
            (("2" (prop)
              (("2" (inst - 0 1)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (grind) nil nil)
         ("4" (hide 1 3)
          (("4" (skeep)
            (("4" (inst - "i+1" "j+1")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below(length(cons2_var))" sortedlist nil)
    (j skolem-const-decl "below(length(cons2_var))" sortedlist nil)
    (TRUE const-decl "bool" booleans nil)
    (member def-decl "bool" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (car_sorted formula-decl nil sortedlist nil)
    (member_nth formula-decl nil more_list_props nil)
    (j skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
     sortedlist nil)
    (i skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
     sortedlist nil)
    (cons2_var skolem-const-decl "list[T]" sortedlist nil)
    (cons1_var skolem-const-decl "T" sortedlist nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sorted? def-decl "bool" sortedlist nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (s_member_TCC1 0
  (s_member_TCC1-1 nil 3577837025 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (s_member_TCC2 0
  (s_member_TCC2-1 nil 3577837025 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (s_remove_TCC1 0
  (s_remove_TCC1-1 nil 3577837025 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (member def-decl "bool" list_props nil))
   nil))
 (s_remove_TCC2 0
  (s_remove_TCC2-1 nil 3577837025
   ("" (skeep)
    (("" (prop)
      (("1" (typepred sl) (("1" (grind) nil nil)) nil)
       ("2" (skeep)
        (("2" (prop)
          (("1" (typepred sl)
            (("1" (use car_sorted) (("1" (grind) nil nil)) nil)) nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (car_sorted formula-decl nil sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member def-decl "bool" list_props nil))
   nil))
 (s_remove_TCC3 0
  (s_remove_TCC3-1 nil 3577837025
   ("" (grind-with-lemmas car_sorted :exclude sorted? :if-match all)
    (("" (lemma car_sorted)
      (("" (inst - x!1 sl!1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((car_sorted formula-decl nil sortedlist nil)
    (sorted? def-decl "bool" sortedlist nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member def-decl "bool" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (s_remove_TCC4 0
  (s_remove_TCC4-1 nil 3577837025
   ("" (skeep)
    (("" (prop)
      (("1" (expand sorted?)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (typepred "v(a,slt)")
              (("1" (inst - "car(v(a,slt))")
                (("1" (lemma car_sorted)
                  (("1" (inst - "car(v(a,slt))" sl)
                    (("1" (grind) nil nil)
                     ("2" (typepred sl) (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (typepred sl) (("2" (grind) nil nil)) nil))
                nil)
               ("2" (typepred sl) (("2" (grind) nil nil)) nil))
              nil)
             ("2" (typepred "v(a,slt)")
              (("1" (propax) nil nil)
               ("2" (typepred sl) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand member +)
          (("2" (typepred "v(a,slt)")
            (("1" (inst - x) (("1" (grind) nil nil)) nil)
             ("2" (typepred sl) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (injective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (car_sorted formula-decl nil sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (slt skolem-const-decl "list[T]" sortedlist nil)
    (sorted? def-decl "bool" sortedlist nil))
   nil))
 (s_insert_TCC1 0
  (s_insert_TCC1-1 nil 3577837025
   ("" (grind) (("" (typepred key) (("" (grind) nil nil)) nil)) nil)
   ((key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (injective? const-decl "bool" functions nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (sorted? def-decl "bool" sortedlist nil))
   nil))
 (s_insert_TCC2 0
  (s_insert_TCC2-1 nil 3577837025
   ("" (grind :exclude sorted?)
    (("1" (typepred key) (("1" (grind) nil nil)) nil)
     ("2" (grind) nil nil))
    nil)
   ((key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (injective? const-decl "bool" functions nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (member def-decl "bool" list_props nil))
   nil))
 (s_insert_TCC3 0
  (s_insert_TCC3-1 nil 3577837025
   ("" (skeep)
    (("" (skeep)
      (("" (prop)
        (("" (grind) (("" (typepred key) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member def-decl "bool" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (injective? const-decl "bool" functions nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil))
   nil))
 (s_insert_TCC4 0
  (s_insert_TCC4-1 nil 3577837025
   ("" (skeep)
    (("" (prop)
      (("1" (expand sorted?)
        (("1" (typepred "v(a,slt)")
          (("1" (inst - "car(v(a,slt))")
            (("1" (lemma car_sorted)
              (("1" (inst - "car(v(a,slt))" sl)
                (("1" (grind) nil nil)
                 ("2" (typepred sl) (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (grind) nil nil)
             ("3" (typepred sl) (("3" (grind) nil nil)) nil))
            nil)
           ("2" (typepred sl) (("2" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (typepred "v(a,slt)")
          (("1" (inst - x)
            (("1" (expand member 1 1) (("1" (grind) nil nil)) nil))
            nil)
           ("2" (typepred sl) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (injective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (car_sorted formula-decl nil sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sl skolem-const-decl "(sorted?)" sortedlist nil)
    (v skolem-const-decl
     "[d1: {z: [T, (sorted?)] | length(z`2) < length(sl)} ->
   {s: (sorted?) |
            FORALL x:
              member(x, s) IFF key(x) = key(d1`1) OR member(x, d1`2)}]"
     sortedlist nil)
    (a skolem-const-decl "T" sortedlist nil)
    (slt skolem-const-decl "list[T]" sortedlist nil)
    (sorted? def-decl "bool" sortedlist nil))
   nil))
 (sort_TCC1 0
  (sort_TCC1-1 nil 3577837025 ("" (grind) nil nil)
   ((sorted? def-decl "bool" sortedlist nil)
    (member def-decl "bool" list_props nil))
   nil))
 (sort_TCC2 0
  (sort_TCC2-1 nil 3577837025 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (sort_TCC3 0
  (sort_TCC3-1 nil 3577837025
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v(lt)")
        (("" (typepred "s_insert(h,v(lt))")
          (("" (inst - x)
            (("" (inst - x)
              (("" (typepred key) (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((s_insert def-decl
     "{s: (sorted?) | FORALL x: member(x, s) IFF key(x) = key(a) OR member(x, sl)}"
     sortedlist nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (injective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil))
   nil))
 (s_member_member 0
  (s_member_member-1 nil 3578055388
   ("" (induct-and-simplify sl :exclude sorted?)
    (("1" (lemma car_sorted)
      (("1" (inst - a!1 "cons(cons1_var!1,cons2_var!1)")
        (("1" (grind) nil nil)) nil))
      nil)
     ("2" (typepred key) (("2" (grind) nil nil)) nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (grind) nil nil))
    nil)
   ((key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (injective? const-decl "bool" functions nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_sorted formula-decl nil sortedlist nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sorted? def-decl "bool" sortedlist nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (s_member def-decl "bool" sortedlist nil)
    (member def-decl "bool" list_props nil)
    (T formal-type-decl nil sortedlist nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (s_remove_remove 0
  (s_remove_remove-1 nil 3578071003
   ("" (induct sl)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (prop)
          (("1" (expand s_remove +)
            (("1" (expand remove +)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (typepred key)
                    (("1" (inst - a)
                      (("1" (expand filter)
                        (("1" (expand remove)
                          (("1" (lemma car_sorted)
                            (("1"
                              (inst - "car(cons2_var)"
                               "cons(cons1_var,cons2_var)")
                              (("1"
                                (expand s_remove -4)
                                (("1"
                                  (grind :exclude (sorted? filter))
                                  nil
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind :exclude (sorted?))
                    (("2" (expand s_remove)
                      (("2" (grind :exclude (sorted? filter))
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst - a)
                    (("3" (expand remove -)
                      (("3" (expand filter +)
                        (("3" (grind :exclude (sorted? filter)) nil
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons1_var skolem-const-decl "T" sortedlist nil)
    (cons2_var skolem-const-decl "list[T]" sortedlist nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (member_filter application-judgement
     "{m | FORALL x: member(x, m) IFF p(x) AND member(x, l)}"
     sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car_sorted formula-decl nil sortedlist nil)
    (filter def-decl "list[T]" filters nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (remove const-decl
            "{m | FORALL x: member(x, m) IFF (x /= a AND member(x, l))}"
      more_list_props nil)
    (/= const-decl "boolean" notequal nil)
    (s_remove def-decl "{s: (sorted?) |
         FORALL x: member(x, s) IFF NOT key(x) = key(a) AND member(x, sl)}"
     sortedlist nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (injective? const-decl "bool" functions nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sorted? def-decl "bool" sortedlist nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (insert_remove 0
  (insert_remove-1 nil 3578072551
   ("" (induct-and-simplify sl :exclude sorted?)
    (("1" (typepred key)
      (("1" (expand s_insert +) (("1" (grind) nil nil)) nil)) nil)
     ("2" (grind) nil nil) ("3" (grind) nil nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sorted? def-decl "bool" sortedlist nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (injective? const-decl "bool" functions nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (s_insert def-decl
     "{s: (sorted?) | FORALL x: member(x, s) IFF key(x) = key(a) OR member(x, sl)}"
     sortedlist nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (s_remove def-decl "{s: (sorted?) |
         FORALL x: member(x, s) IFF NOT key(x) = key(a) AND member(x, sl)}"
     sortedlist nil)
    (T formal-type-decl nil sortedlist nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (remove_insert 0
  (remove_insert-1 nil 3578072670
   ("" (induct-and-simplify sl :exclude sorted?) (("" (grind) nil nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sorted? def-decl "bool" sortedlist nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (injective? const-decl "bool" functions nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (s_remove def-decl "{s: (sorted?) |
         FORALL x: member(x, s) IFF NOT key(x) = key(a) AND member(x, sl)}"
     sortedlist nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (s_insert def-decl
     "{s: (sorted?) | FORALL x: member(x, s) IFF key(x) = key(a) OR member(x, sl)}"
     sortedlist nil)
    (T formal-type-decl nil sortedlist nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (insert_no_change 0
  (insert_no_change-1 nil 3578072686
   ("" (induct sl)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (expand s_insert +)
          (("3" (prop)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (decompose-equality) (("1" (grind) nil nil)) nil)
                 ("2" (typepred key) (("2" (grind) nil nil)) nil)
                 ("3" (decompose-equality)
                  (("3" (inst - a) (("3" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (lift-if)
              (("2" (grind)
                (("2" (lemma car_sorted)
                  (("2" (inst - a "cons(cons1_var,cons2_var)")
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car_sorted formula-decl nil sortedlist nil)
    (cons2_var skolem-const-decl "list[T]" sortedlist nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (< const-decl "bool" reals nil)
    (cons1_var skolem-const-decl "T" sortedlist nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (s_insert def-decl
     "{s: (sorted?) | FORALL x: member(x, s) IFF key(x) = key(a) OR member(x, sl)}"
     sortedlist nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (injective? const-decl "bool" functions nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sorted? def-decl "bool" sortedlist nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (remove_no_change 0
  (remove_no_change-1 nil 3578073080
   ("" (induct sl)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (split -1)
          (("1" (prop)
            (("1" (expand s_remove -1)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (grind) nil nil)
                   ("2" (use s_member_member) (("2" (grind) nil nil))
                    nil)
                   ("3" (inst - a)
                    (("3" (decompose-equality)
                      (("3" (typepred key) (("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand s_remove +)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (typepred key) (("1" (grind) nil nil)) nil)
                   ("2" (inst - a) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (s_member def-decl "bool" sortedlist nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons1_var skolem-const-decl "T" sortedlist nil)
    (cons2_var skolem-const-decl "list[T]" sortedlist nil)
    (s_member_member formula-decl nil sortedlist nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (s_remove def-decl "{s: (sorted?) |
         FORALL x: member(x, s) IFF NOT key(x) = key(a) AND member(x, sl)}"
     sortedlist nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (injective? const-decl "bool" functions nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sorted? def-decl "bool" sortedlist nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (s_subset?_TCC1 0
  (s_subset?_TCC1-1 nil 3577837025
   ("" (skeep)
    (("" (skeep) (("" (typepred sl1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil))
   nil))
 (s_subset?_TCC2 0
  (s_subset?_TCC2-1 nil 3577837025
   ("" (skeep)
    (("" (skeep) (("" (typepred sl2) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil))
   nil))
 (s_subset?_TCC3 0
  (s_subset?_TCC3-1 nil 3577837025 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (s_subset?_TCC4 0
  (s_subset?_TCC4-1 nil 3577837025
   ("" (skeep)
    (("" (skeep) (("" (typepred sl2) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil))
   nil))
 (s_subset?_TCC5 0
  (s_subset?_TCC5-1 nil 3577837025 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (s_subset?_TCC6 0
  (s_subset?_TCC6-1 nil 3577837025 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (s_subset?_TCC7 0
  (s_subset?_TCC7-1 nil 3577837025 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (sorted_uniques 0
  (sorted_uniques-1 nil 3578073858
   ("" (induct-and-simplify sl :exclude sorted?)
    (("1" (lemma car_sorted)
      (("1" (inst - cons1_var!1 "cons(cons1_var!1,cons2_var!1)")
        (("1" (grind) nil nil)) nil))
      nil)
     ("2" (grind) nil nil))
    nil)
   ((car_sorted formula-decl nil sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sorted? def-decl "bool" sortedlist nil)
    (uniques? def-decl "bool" more_list_props nil)
    (T formal-type-decl nil sortedlist nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (s_subset_subset 0
  (s_subset_subset-1 nil 3578074019
   ("" (induct sl2)
    (("1" (grind) nil nil)
     ("2" (grind)
      (("1" (grind)
        (("1" (expand s_subset?) (("1" (grind) nil nil)) nil)) nil)
       ("2" (grind) (("2" (expand every) (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (split -1)
          (("1" (prop)
            (("1"
              (use member_subset (l sl1 m "cons(cons1_var,cons2_var)"))
              (("1" (prop)
                (("1" (skeep)
                  (("1" (expand s_subset? -2)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (lift-if)
                          (("2" (prop)
                            (("1" (grind) nil nil)
                             ("2" (typepred key)
                              (("2"
                                (inst - "cdr(sl1)")
                                (("2"
                                  (use
                                   member_subset
                                   (l "cdr(sl1)" m "cons2_var"))
                                  (("2"
                                    (prop)
                                    (("1" (postpone) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (inst - sl1)
                              (("3"
                                (typepred key)
                                (("3"
                                  (use
                                   member_subset
                                   (l sl1 m "cons2_var"))
                                  (("3"
                                    (grind
                                     :exclude
                                     (sorted?
                                      member
                                      s_subset?
                                      subset?))
                                    (("3"
                                      (expand member 5)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand s_subset? +)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (lift-if)
                    (("2" (prop)
                      (("1"
                        (use member_subset
                             (l sl1 m "cons(cons1_var,cons2_var)"))
                        (("1" (prop)
                          (("1" (inst - "car(sl1)")
                            (("1"
                              (use s_member_member
                                   (a
                                    "car(sl1)"
                                    sl
                                    "cons(cons1_var,cons2_var)"))
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst - "cdr(sl1)")
                        (("2" (case "subset?(cdr(sl1),cons2_var)")
                          (("1" (grind) nil nil)
                           ("2" (hide -3 2)
                            (("2" (use member_subset (l "cdr(sl1)"))
                              (("2"
                                (use member_subset (l sl1))
                                (("2"
                                  (prop)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst - x)
                                      (("2"
                                        (auto-rewrite car_sorted)
                                        (("2"
                                          (typepred key)
                                          (("2"
                                            (grind
                                             :exclude
                                             (sorted?
                                              member
                                              s_subset?
                                              subset?))
                                            (("1" (postpone) nil nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (inst - sl1) (("3" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (s_equal_equal 0
  (s_equal_equal-1 nil 3578083479
   ("" (skeep)
    (("" (auto-rewrite s_subset_subset) (("" (grind) nil nil)) nil))
    nil)
   ((T formal-type-decl nil sortedlist nil)
    (subset? const-decl "bool" more_list_props nil)
    (s_subset_subset formula-decl nil sortedlist nil)
    (s_equal? const-decl "bool" sortedlist nil)
    (equal? const-decl "bool" more_list_props nil))
   shostak))
 (strict_order 0
  (strict_order-1 nil 3578083502
   ("" (auto-rewrite every_forall)
    (("" (grind :if-match nil :exclude sorted?)
      (("1" (grind :if-match all) nil nil)
       ("2" (grind :if-match all) nil nil))
      nil))
    nil)
   ((T formal-type-decl nil sortedlist nil)
    (every_forall formula-decl nil more_list_props nil)
    (< const-decl "[[(sorted?), (sorted?)] -> bool]" sortedlist nil)
    (irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (sorted? def-decl "bool" sortedlist nil)
    (list type-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (member def-decl "bool" list_props nil))
   shostak))
 (order_char 0
  (order_char-1 nil 3578141480
   ("" (auto-rewrite every_forall)
    (("" (grind-with-lemmas car_sorted :if-match all :exclude sorted?)
      (("" (lemma car_sorted)
        (("" (inst - y!1 sl2!1) (("" (grind :exclude sorted?) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member def-decl "bool" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (< const-decl "[[(sorted?), (sorted?)] -> bool]" sortedlist nil)
    (every_forall formula-decl nil more_list_props nil)
    (T formal-type-decl nil sortedlist nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car_sorted formula-decl nil sortedlist nil))
   shostak))
 (order_rcdr_TCC1 0
  (order_rcdr_TCC1-1 nil 3578141399 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (< const-decl "[[(sorted?), (sorted?)] -> bool]" sortedlist nil))
   nil))
 (order_rcdr_TCC2 0
  (order_rcdr_TCC2-1 nil 3578141399 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (< const-decl "[[(sorted?), (sorted?)] -> bool]" sortedlist nil))
   nil))
 (order_rcdr 0
  (order_rcdr-1 nil 3578142050
   ("" (skeep)
    (("" (use-with "order_char" -1)
      (("" (use-with "order_char" 1)
        (("" (prop)
          (("1" (grind) nil nil)
           ("2" (skeep)
            (("2" (inst - x y)
              (("2" (expand member -3 2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (< const-decl "[[(sorted?), (sorted?)] -> bool]" sortedlist nil)
    (order_char formula-decl nil sortedlist nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member def-decl "bool" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (order_lcdr_TCC1 0
  (order_lcdr_TCC1-1 nil 3578141399 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (< const-decl "[[(sorted?), (sorted?)] -> bool]" sortedlist nil))
   nil))
 (order_lcdr 0
  (order_lcdr-1 nil 3578142210
   ("" (skeep)
    (("" (use-with "order_char" -1)
      (("" (use-with "order_char" 1)
        (("" (grind :if-match all) nil nil)) nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (< const-decl "[[(sorted?), (sorted?)] -> bool]" sortedlist nil)
    (order_char formula-decl nil sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (member def-decl "bool" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (append_sorted 0
  (append_sorted-1 nil 3578083784
   ("" (induct sl1)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (prop)
          (("1" (expand (sorted? append) +)
            (("1" (use order_lcdr)
              (("1" (prop)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (lemma member_append)
                      (("1"
                        (inst - cons2_var sl2
                         "car(append(cons2_var,sl2))")
                        (("1" (prop)
                          (("1"
                            (use car_sorted
                                 (a "car(append(cons2_var,sl2))"))
                            (("1" (grind :exclude sorted?) nil nil))
                            nil)
                           ("2" (use-with "order_char" -4)
                            (("2" (prop)
                              (("2"
                                (inst
                                 -
                                 cons1_var
                                 "car(append(cons2_var,sl2))")
                                (("2"
                                  (grind :exclude sorted?)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (grind :exclude sorted?) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind :exclude sorted?) nil nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil)
           ("2" (use append_null (l "cons(cons1_var,cons2_var)"))
            (("2" (grind :exclude sorted?) nil nil)) nil)
           ("3" (use order_char)
            (("3" (prop)
              (("1" (grind) nil nil)
               ("2" (expand append -1)
                (("2" (expand sorted? -1)
                  (("2" (skeep)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (expand append -1)
                          (("1" (grind :exclude sorted?) nil nil)) nil)
                         ("2" (inst - sl2)
                          (("2" (prop)
                            (("2" (use order_char)
                              (("2"
                                (prop)
                                (("2"
                                  (inst - x y)
                                  (("2"
                                    (grind :exclude sorted?)
                                    (("1"
                                      (lemma car_sorted)
                                      (("1"
                                        (inst
                                         -
                                         "car(cons2_var)"
                                         "cons(cons1_var,cons2_var)")
                                        (("1"
                                          (rewrite every_forall)
                                          (("1"
                                            (inst - "car(cons2_var)")
                                            (("1"
                                              (grind :exclude sorted?)
                                              (("1"
                                                (expand member 1)
                                                (("1"
                                                  (grind
                                                   :exclude
                                                   sorted?)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand member 1)
                                                (("2"
                                                  (grind
                                                   :exclude
                                                   sorted?)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand member 1)
                                                (("3"
                                                  (grind
                                                   :exclude
                                                   sorted?)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand append -5)
                                              (("2"
                                                (grind
                                                 :exclude
                                                 sorted?)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand append -5)
                                          (("2"
                                            (grind :exclude sorted?)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma car_sorted)
                                      (("2"
                                        (inst
                                         -
                                         "car(cons2_var)"
                                         "cons(cons1_var,cons2_var)")
                                        (("1"
                                          (rewrite every_forall)
                                          (("1"
                                            (inst - "car(cons2_var)")
                                            (("1"
                                              (grind :exclude sorted?)
                                              (("1"
                                                (expand member 1)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (expand member 1)
                                                (("2" (grind) nil nil))
                                                nil)
                                               ("3"
                                                (expand member 1)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand append -5)
                                              (("2"
                                                (grind
                                                 :exclude
                                                 sorted?)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand append -5)
                                          (("2"
                                            (grind :exclude sorted?)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (grind) nil nil) ("5" (grind) nil nil)
           ("6" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sorted? def-decl "bool" sortedlist nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "[[(sorted?), (sorted?)] -> bool]" sortedlist nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (T formal-type-decl nil sortedlist nil)
    (list_induction formula-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons2_var skolem-const-decl "list[T]" sortedlist nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (injective? const-decl "bool" functions nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (every_forall formula-decl nil more_list_props nil)
    (append_null formula-decl nil list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (order_char formula-decl nil sortedlist nil)
    (member def-decl "bool" list_props nil)
    (car_sorted formula-decl nil sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_append formula-decl nil more_list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (order_lcdr formula-decl nil sortedlist nil))
   shostak))
 (filter_sorted 0
  (filter_sorted-1 nil 3577837025
   ("" (induct sl)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (expand filter +)
          (("3" (prop)
            (("1" (inst - p)
              (("1" (expand sorted? +)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1"
                      (use car_sorted
                           (a "car(filter(cons2_var,p))" sl
                            "cons(cons1_var,cons2_var)"))
                      (("1" (grind :exclude sorted?)
                        (("1" (grind :exclude sorted?)
                          (("1" (lemma member_filter)
                            (("1"
                              (inst - cons2_var p
                               "car(filter(cons2_var,p))")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_filter application-judgement
     "{m | FORALL x: member(x, m) IFF p(x) AND member(x, l)}"
     sortedlist nil)
    (car_sorted formula-decl nil sortedlist nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (member_filter judgement-tcc nil list_filter_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (filter def-decl "list[T]" filters nil)
    (pred type-eq-decl nil defined_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (sorted? def-decl "bool" sortedlist nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil)))

