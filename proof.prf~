(proof
 (conclusion_TCC1 0
  (conclusion_TCC1-1 nil 3480972004 3483143063
   ("" (subtype-tcc) nil nil) proved nil 16 20 nil nil))
 (checkProof_TCC1 0
  (checkProof_TCC1-1 nil 3480972004 3483143063
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (list type-decl nil list_adt nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (below type-eq-decl nil naturalnumbers nil))
   125 90 nil nil))
 (checkProof_TCC2 0
  (checkProof_TCC2-1 nil 3480972004 3483143064
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (replace -2 -4) (("" (assert) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (two_premise? adt-def-decl "boolean" proof nil)
    (one_premise? adt-def-decl "boolean" proof nil)
    (below type-eq-decl nil naturalnumbers nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   189 150 t nil))
 (checkProof_TCC3 0
  (checkProof_TCC3-1 nil 3480972004 3483143064
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((two_premise? adt-def-decl "boolean" proof nil)
    (one_premise? adt-def-decl "boolean" proof nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (list type-decl nil list_adt nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (below type-eq-decl nil naturalnumbers nil))
   366 290 t nil))
 (checkProof_TCC4 0
  (checkProof_TCC4-1 nil 3480972004 3483143064
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((two_premise? adt-def-decl "boolean" proof nil)
    (one_premise? adt-def-decl "boolean" proof nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (list type-decl nil list_adt nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (below type-eq-decl nil naturalnumbers nil))
   334 240 t nil))
 (checkProof_TCC5 0
  (checkProof_TCC5-1 nil 3480972004 3483143065
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((two_premise? adt-def-decl "boolean" proof nil)
    (one_premise? adt-def-decl "boolean" proof nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (list type-decl nil list_adt nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (below type-eq-decl nil naturalnumbers nil))
   344 280 t nil))
 (checkProof_TCC6 0
  (checkProof_TCC6-1 nil 3480972004 3483143065
   ("" (subtype-tcc) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   proved
   ((two_premise? adt-def-decl "boolean" proof nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (list type-decl nil list_adt nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (below type-eq-decl nil naturalnumbers nil))
   297 240 t nil))
 (checkProof_TCC7 0
  (checkProof_TCC7-1 nil 3480972004 3483143065
   ("" (subtype-tcc) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   proved
   ((two_premise? adt-def-decl "boolean" proof nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (list type-decl nil list_adt nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (below type-eq-decl nil naturalnumbers nil))
   371 290 t nil))
 (checkProof_TCC8 0
  (checkProof_TCC8-1 nil 3480972004 3483143106
   ("" (subtype-tcc) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   proved
   ((below type-eq-decl nil naturalnumbers nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (two_premise? adt-def-decl "boolean" proof nil))
   6869 380 t nil))
 (checkProof_TCC9 0
  (checkProof_TCC9-1 nil 3480972004 3483143121
   ("" (subtype-tcc) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   proved
   ((below type-eq-decl nil naturalnumbers nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (two_premise? adt-def-decl "boolean" proof nil))
   9371 390 t nil))
 (checkProof_TCC10 0
  (checkProof_TCC10-1 nil 3480972004 3483143067
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((two_premise? adt-def-decl "boolean" proof nil)
    (one_premise? adt-def-decl "boolean" proof nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (list type-decl nil list_adt nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (below type-eq-decl nil naturalnumbers nil))
   327 250 t nil))
 (checkProof_TCC11 0
  (checkProof_TCC11-1 nil 3480972004 3483143067
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((two_premise? adt-def-decl "boolean" proof nil)
    (one_premise? adt-def-decl "boolean" proof nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (list type-decl nil list_adt nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (below type-eq-decl nil naturalnumbers nil))
   342 270 t nil))
 (checkProof_TCC12 0
  (checkProof_TCC12-1 nil 3480972004 3483143067
   ("" (subtype-tcc) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   proved
   ((two_premise? adt-def-decl "boolean" proof nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (list type-decl nil list_adt nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (below type-eq-decl nil naturalnumbers nil))
   337 240 t nil))
 (checkProof_TCC13 0
  (checkProof_TCC13-1 nil 3480972004 3483143068
   ("" (subtype-tcc) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   proved
   ((two_premise? adt-def-decl "boolean" proof nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (list type-decl nil list_adt nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (below type-eq-decl nil naturalnumbers nil))
   352 260 t nil))
 (checkProof_TCC14 0
  (checkProof_TCC14-1 nil 3480972004 3483143146
   ("" (subtype-tcc) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   proved
   ((below type-eq-decl nil naturalnumbers nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (two_premise? adt-def-decl "boolean" proof nil))
   6481 380 t nil))
 (checkProof_TCC15 0
  (checkProof_TCC15-1 nil 3480972004 3483143159
   ("" (subtype-tcc) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   proved
   ((below type-eq-decl nil naturalnumbers nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (two_premise? adt-def-decl "boolean" proof nil))
   7174 400 t nil))
 (checkProof_TCC16 0
  (checkProof_TCC16-1 nil 3480972004 3483143069
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((two_premise? adt-def-decl "boolean" proof nil)
    (one_premise? adt-def-decl "boolean" proof nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (list type-decl nil list_adt nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (below type-eq-decl nil naturalnumbers nil))
   323 270 t nil))
 (checkProof_TCC17 0
  (checkProof_TCC17-1 nil 3480972004 3483143069
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((two_premise? adt-def-decl "boolean" proof nil)
    (one_premise? adt-def-decl "boolean" proof nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (list type-decl nil list_adt nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (below type-eq-decl nil naturalnumbers nil))
   346 290 t nil))
 (checkProof_TCC18 0
  (checkProof_TCC18-1 nil 3480972004 3483143069
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((two_premise? adt-def-decl "boolean" proof nil)
    (one_premise? adt-def-decl "boolean" proof nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ufun? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil)
    (funpred type-decl nil funpred_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (list type-decl nil list_adt nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (below type-eq-decl nil naturalnumbers nil))
   335 260 t nil))
 (checkProof_TCC19 0
  (checkProof_TCC19-1 nil 3480972004 3483143070
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((two_premise? adt-def-decl "boolean" proof nil)
    (one_premise? adt-def-decl "boolean" proof nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ufun? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil)
    (funpred type-decl nil funpred_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (list type-decl nil list_adt nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (below type-eq-decl nil naturalnumbers nil))
   360 290 t nil))
 (checkProof_TCC20 0
  (checkProof_TCC20-1 nil 3480972004 3483143070
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((two_premise? adt-def-decl "boolean" proof nil)
    (one_premise? adt-def-decl "boolean" proof nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (var? adt-recognizer-decl "[term -> boolean]" fmla nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil fmla nil)
    (ufun? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil)
    (funpred type-decl nil funpred_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (list type-decl nil list_adt nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (below type-eq-decl nil naturalnumbers nil))
   406 300 t nil))
 (checkProof_TCC21 0
  (checkProof_TCC21-1 nil 3480972004 3483143071
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((two_premise? adt-def-decl "boolean" proof nil)
    (one_premise? adt-def-decl "boolean" proof nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (var? adt-recognizer-decl "[term -> boolean]" fmla nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (term type-decl nil fmla nil)
    (ufun? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil)
    (funpred type-decl nil funpred_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (list type-decl nil list_adt nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (below type-eq-decl nil naturalnumbers nil))
   389 320 t nil))
 (checkProof_TCC22 0
  (checkProof_TCC22-1 nil 3483119892 3483143172
   ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved
   ((below type-eq-decl nil naturalnumbers nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (funpred type-decl nil funpred_adt nil)
    (upred? adt-recognizer-decl "[funpred -> boolean]" funpred_adt nil)
    (term type-decl nil fmla nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" fmla nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (one_premise? adt-def-decl "boolean" proof nil)
    (two_premise? adt-def-decl "boolean" proof nil))
   5359 300 t nil))
 (checkProof_TCC23 0
  (checkProof_TCC23-1 nil 3483119892 3483143071
   ("" (subtype-tcc) nil nil) unfinished nil 352 260 nil nil))
 (compose?_TCC1 0
  (compose?_TCC1-1 nil 3480972004 3483143071 ("" (subtype-tcc) nil nil)
   unfinished nil 112 80 nil nil))
 (main_TCC1 0
  (main_TCC1-1 nil 3480972004 3483143072 ("" (subtype-tcc) nil nil)
   unfinished nil 127 90 nil nil)))

