assoc2[K: TYPE, V: TYPE]: THEORY
BEGIN
  lists: LIBRARY "../lists"
  IMPORTING lists@more_list_props

  k, x: VAR K
  ks: VAR list[K]
  v, y: VAR V
  vs: VAR finseq[V]
  f: VAR [K -> V]

  assoc2(k, ks, (vs | vs`length = length(ks))): lift[V] =
    CASES findi(LAMBDA x: x = k, ks) OF
      bottom: bottom,
      up(i): up(vs(i))
    ENDCASES

  assoc2_lift_not_member: THEOREM
    FORALL (vs | vs`length = length(ks)):
      NOT member(k, ks) IMPLIES bottom?(assoc2(k, ks, vs))

  assoc2_lift_member: THEOREM
    FORALL (vs | vs`length = length(ks)):
      member(k, ks) IMPLIES
        EXISTS (i: below(length(ks)) | nth(ks, i) = k):
	  assoc2(k, ks, vs) = up(vs(i))

  assoc2(k, ks, (vs | vs`length = length(ks)), v): V =
    CASES findi(LAMBDA x: x = k, ks) OF
      bottom: v,
      up(i): vs(i)
    ENDCASES

  assoc2_not_member: THEOREM
    FORALL (vs | vs`length = length(ks)):
      NOT member(k, ks) IMPLIES assoc2(k, ks, vs, v) = v

  assoc2_member: THEOREM
    FORALL (vs | vs`length = length(ks)):
      member(k, ks) IMPLIES
        EXISTS (i: below(length(ks)) | nth(ks, i) = k):
	  assoc2(k, ks, vs, v) = vs(i)

END assoc2

smap[K: TYPE, V: TYPE]: THEORY
BEGIN
  f: VAR [K -> V]
  ks: VAR finseq[K]
  vs: VAR finseq[V]

  smap(f)(ks): { vs | vs`length = ks`length } =
    (# length := ks`length
     , seq    := LAMBDA (i: below(ks`length)): f(ks(i))
     #)

  smap_length: THEOREM
    smap(f)(ks)`length = ks`length

  smap_seq: THEOREM
    FORALL (i: below(ks`length)):
      smap(f)(ks)(i) = f(ks(i))
END smap

setmap[K: TYPE, V: TYPE]: THEORY
BEGIN
  f: VAR [K -> V]
  ks: VAR set[K]
  v: VAR V
  
  setmap(f)(ks): MACRO set[V] =
    { v | EXISTS (k: (ks)): v = f(k) }
  CONVERSION setmap

  setapply(F: [K -> set[V]])(ks): MACRO set[V] =
    { v | EXISTS (k: (ks)): member(v, F(k)) }
  CONVERSION setapply
END setmap

set_props[T: TYPE]: THEORY
BEGIN
  x: VAR T
  a, b: VAR set[T]

  ;∅: MACRO set[T] = emptyset
  ;∈(x, a): MACRO bool = member(x, a)
  ;⊂(a, b): MACRO bool = subset?(a, b)
  ;∪(a, b): MACRO set[T] = union(a, b)
  ;∪(a, x): MACRO set[T] = add(x, a)
  ;∪(x, a): MACRO set[T] = add(x, a)
  ;-(a, b): MACRO set[T] = difference(a, b)
  ;-(x, a): MACRO set[T] = remove(x, a)
  ;-(a, x): MACRO set[T] = remove(x, a)
  ;∩(a, b): MACRO set[T] = intersection(a, b)
  ;Δ(a, b): MACRO set[T] = symmetric_difference(a, b)

  finseq2set(seq: finseq[T]): set[T] =
    { x | EXISTS (i: below(seq`length)): x = seq(i) }
  CONVERSION finseq2set
END set_props

more_finseq_props[T: TYPE]: THEORY
BEGIN
  p: VAR pred[T]
  s: VAR finseq[T]
  
  findi(p, s, (i: upto(s`length))):
    RECURSIVE lift[{ i: below(s`length) | p(s(i)) }] =
    IF i = s`length THEN bottom
    ELSIF p(s(i)) THEN up(i)
    ELSE findi(p, s, i + 1)
    ENDIF
  MEASURE s`length - i

  findi_exists: THEOREM
    FORALL (i: upto(s`length)):
      (EXISTS (j: subrange(i, s`length - 1)): p(s(j))) IMPLIES up?(findi(p, s, i))

  find(p, s): lift[{ i: below(s`length) | p(s(i)) }] =
    findi(p, s, 0)

  find_exists: THEOREM
    (EXISTS (i: below(s`length)): p(s(i))) IMPLIES up?(find(p, s))

END more_finseq_props

