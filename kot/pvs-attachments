(attachments parse_cert3
;;; opens input file and starts the parse
(defattach parse_file (infile)
  (with-open-file (in infile
		      :direction :input)
		  (array_form in)))

(defun array_form (stream)
  (multiple-value-bind (max_lit nc lc la)
      (parse_line* stream)
     (vector max_lit nc la lc)))
	    ;(pc-typecheck (pc-parse "pico_data" 'type-expr)))))

;; returns max_literal, nb of clauses,
;; the list of clauses and the list of antecedents
;(defun parse_line*
;  (stream
;   &optional (max 0) (nl 0) (clauses nil) (antecs nil))
;  (let ((line
;	 (read-line stream nil 'eof)))
;    (if	(eq line 'eof)
;	;; end of stream
;	(values max
;		nl
;		clauses
;;		antecs)
 ;     (multiple-value-bind
;	  (new_clause local_max new_antec)
	  ;; extract data from the line
	;  (create_lists line)
;	(parse_line* stream
;		     (max local_max max)
;		     (+ nl 1)
;		     (cons new_clause clauses)
;		     (cons new_antec antecs))))))

(defun parse_line* (stream)
  (let* ((maxim 0) (nl 0) (clauses nil) (antecs nil)
	 (line (read-line stream nil 'eof)))
    (loop while (not (eq line 'eof)) do
      (multiple-value-bind
	  (new_clause local_max new_antec)
	  ;; extract data from the line
	  (create_lists line)
	(push new_clause clauses)
	(push new_antec antecs)
	(setf maxim (max maxim local_max))
	(setf nl (+ 1 nl)))
      (setf line (read-line stream nil 'eof)))
    (values maxim nl clauses antecs)))
    

(defun read_clause* (line pos &optional (acc nil) (max_aux 0))
  (multiple-value-bind (word npos)
      (read-from-string line nil 'eol :start pos)
    (if (eq word 's)
	(values
	 npos
	 (nreverse acc)
	 max_aux)
      (read_clause* line npos
		    (cons word acc)
		    (max max_aux word)))))

;; adds to acc until 's is read
(defun read_antec* (line pos &optional (acc nil))
  (multiple-value-bind (word npos)
      (read-from-string line nil 'eol :start pos)
    (if (eq word 's)
	(nreverse acc)
      (read_antec* line npos (cons word acc)))))

(defun create_lists (line)
  ;;read line number
  (multiple-value-bind (line_number pos)
      (read-from-string line nil 'eol :start 0)
    ;;read first literal or *
    (multiple-value-bind (first_lit npos)
	(read-from-string line nil 'eol :start pos)
      (multiple-value-bind (nnpos clause max_clause)
	  (if (eq first_lit '*)
	      ;; if empty clause
	      (values npos nil 0)
	    ;; return pos in string, clause and its max
	    (read_clause* line pos))
	;; returns the clause, clause_max and antecedents list
	(values
	 clause
	 max_clause
	 (read_antec* line nnpos)))))))
