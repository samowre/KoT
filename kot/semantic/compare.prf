(compare (simeq_TCC1 0
          (simeq_TCC1-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((pretype formula-decl nil language nil)
            (mu_size application-judgement "{A | size(A) = size(T)}"
             supertype nil))
           nil))
         (simeq_TCC2 0
          (simeq_TCC2-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (pretype formula-decl nil language nil))
           nil))
         (simeq_TCC3 0
          (simeq_TCC3-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (pretype formula-decl nil language nil))
           nil))
         (simeq_TCC4 0
          (simeq_TCC4-1 nil 3582057425
           ("" (skosimp* :preds? t)
            (("" (assert)
              (("" (rewrite -3)
                (("" (rewrite -3)
                  (("" (assert)
                    (("" (use "mu_size")
                      (("" (assert)
                        (("" (rewrite -1) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (mu_size application-judgement "{A | size(A) = size(T)}"
             supertype nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (size def-decl "nat" subst nil)
            (mu_size judgement-tcc nil supertype nil)
            (pretype formula-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil))
           nil))
         (simeq_TCC5 0
          (simeq_TCC5-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (pretype formula-decl nil language nil))
           nil))
         (simeq_TCC6 0
          (simeq_TCC6-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (pretype formula-decl nil language nil))
           nil))
         (simeq_TCC7 0
          (simeq_TCC7-1 nil 3582057425
           ("" (skosimp* :preds? t)
            (("" (assert)
              (("" (rewrite -3)
                (("" (rewrite -3)
                  (("" (assert)
                    (("" (assert)
                      (("" (grind)
                        (("" (rewrite "size")
                          (("" (assert) (("" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (size def-decl "nat" subst nil)
            (pretype formula-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil))
           nil))
         (simeq_TCC8 0
          (simeq_TCC8-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (pretype formula-decl nil language nil)
            (interp formula-decl nil language nil)
            (preterm formula-decl nil language nil))
           nil))
         (simeq_TCC9 0
          (simeq_TCC9-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (pretype formula-decl nil language nil))
           nil))
         (simeq_TCC10 0
          (simeq_TCC10-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (pretype formula-decl nil language nil))
           nil))
         (simeq_TCC11 0
          (simeq_TCC11-1 nil 3582057425
           ("" (skosimp* :preds? t)
            (("" (assert)
              (("" (rewrite -3)
                (("" (assert)
                  (("" (grind)
                    (("" (grind)
                      (("" (grind)
                        (("" (grind !!)
                          (("" (grind !)
                            (("" (rewrite "size")
                              ((""
                                (assert)
                                ((""
                                  (lift-if)
                                  (("" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (size def-decl "nat" subst nil)
            (pretype formula-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil))
           nil))
         (simeq_TCC12 0
          (simeq_TCC12-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (pretype formula-decl nil language nil))
           nil))
         (simeq_TCC13 0
          (simeq_TCC13-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (pretype formula-decl nil language nil))
           nil))
         (simeq_TCC14 0
          (simeq_TCC14-1 nil 3582057425
           ("" (assert)
            (("" (skosimp* :preds? t)
              (("" (assert)
                (("" (rewrite -3)
                  (("" (assert)
                    (("" (assert)
                      (("" (rewrite "size")
                        (("" (assert)
                          (("" (lift-if) (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (pretype formula-decl nil language nil)
            (size def-decl "nat" subst nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (simeq_TCC15 0
          (simeq_TCC15-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (pretype formula-decl nil language nil)
            (interp formula-decl nil language nil)
            (preterm formula-decl nil language nil))
           nil))
         (simeq_TCC16 0
          (simeq_TCC16-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((preterm formula-decl nil language nil)) nil))
         (simeq_TCC17 0
          (simeq_TCC17-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((preterm formula-decl nil language nil)) nil))
         (simeq_TCC18 0
          (simeq_TCC18-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (pretype formula-decl nil language nil))
           nil))
         (simeq_TCC19 0
          (simeq_TCC19-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (pretype formula-decl nil language nil))
           nil))
         (simeq_TCC20 0
          (simeq_TCC20-1 nil 3582057425
           ("" (skosimp* :preds? t)
            (("" (rewrite -3)
              (("" (assert)
                (("" (rewrite "size")
                  (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ((real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (size def-decl "nat" subst nil)
            (pretype formula-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil))
           nil))
         (simeq_TCC21 0
          (simeq_TCC21-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((preterm formula-decl nil language nil)) nil))
         (simeq_TCC22 0
          (simeq_TCC22-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (pretype formula-decl nil language nil)
            (expr formula-decl nil language nil))
           nil))
         (simeq_TCC23 0
          (simeq_TCC23-1 nil 3582057425
           ("" (skosimp* :preds? t)
            (("" (assert)
              (("" (typepred "subst")
                (("" (inst?)
                  (("" (assert)
                    (("" (flatten)
                      (("" (assert)
                        (("" (rewrite -8)
                          (("" (rewrite -8) (("" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((lproj adt-constructor-decl "[semantic -> (lproj?)]"
             language nil)
            (lproj? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (pretype formula-decl nil language nil)
            (expr? const-decl "[semantic -> bool]" language nil)
            (expr type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (interp? const-decl "[semantic -> bool]" language nil)
            (subst def-decl "{f |
         (pretype?(e) => pretype?(f)) AND
          (preterm?(e) => preterm?(f)) AND (interp?(e) => interp?(f))}"
                   subst
              nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil))
           nil))
         (simeq_TCC24 0
          (simeq_TCC24-1 nil 3582057425 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (pretype formula-decl nil language nil)
            (expr formula-decl nil language nil))
           nil))
         (simeq_TCC25 0
          (simeq_TCC25-1 nil 3582057425
           ("" (skosimp* :preds? t)
            (("" (typepred "subst")
              (("" (inst?)
                (("" (assert)
                  (("" (rewrite -5)
                    (("" (rewrite -5)
                      (("" (assert) (("" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((subst def-decl "{f |
         (pretype?(e) => pretype?(f)) AND
          (preterm?(e) => preterm?(f)) AND (interp?(e) => interp?(f))}"
                   subst
              nil)
            (interp? const-decl "[semantic -> bool]" language nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (expr type-eq-decl nil language nil)
            (expr? const-decl "[semantic -> bool]" language nil)
            (pretype formula-decl nil language nil)
            (lproj? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (lproj adt-constructor-decl "[semantic -> (lproj?)]"
             language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil))
           nil))
         (simeq_TCC26 0
          (simeq_TCC26-1 nil 3582057425
           ("" (skosimp* :preds? t)
            (("" (typepred "subst")
              (("" (use "subst_size")
                (("1" (assert)
                  (("1" (rewrite -6)
                    (("1" (assert)
                      (("1" (rewrite -1) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (rewrite -5) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ((subst def-decl "{f |
         (pretype?(e) => pretype?(f)) AND
          (preterm?(e) => preterm?(f)) AND (interp?(e) => interp?(f))}"
                   subst
              nil)
            (interp? const-decl "[semantic -> bool]" language nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (expr type-eq-decl nil language nil)
            (expr? const-decl "[semantic -> bool]" language nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (size def-decl "nat" subst nil)
            (pretype formula-decl nil language nil)
            (A2!1 skolem-const-decl "semantic" compare nil)
            (lproj adt-constructor-decl "[semantic -> (lproj?)]"
             language nil)
            (lproj? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (subst_size judgement-tcc nil subst nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil))
           nil)))

