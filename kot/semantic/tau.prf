(tau
 (π_TCC1 0
  (π_TCC1-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (π_TCC2 0
  (π_TCC2-1 nil 3582642913 ("" (grind) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil))
 (τ_TCC1 0
  (τ_TCC1-1 nil 3582642913 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (pretcc type-eq-decl nil tau nil)
    (/= const-decl "boolean" notequal nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (τ_TCC2 0
  (τ_TCC2-1 nil 3582642913 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (pretype formula-decl nil language nil)
    (ktype_decl adt-def-decl "boolean" decl nil)
    (kvar_decl adt-def-decl "boolean" decl nil)
    (kconst_decl adt-def-decl "boolean" decl nil)
    (kind const-decl "kind" decl nil)
    (app_symbol_context rec-application-judgement "(kcontext?)" map
     nil))
   nil))
 (τ_TCC3 0
  (τ_TCC3-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (typepred kind)
      (("" (grind)
        (("" (use app_symbol_context) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((decl type-decl nil decl nil) (keyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (kind type-eq-decl nil language nil)
    (kind const-decl "kind" decl nil)
    (app_symbol_context recursive-judgement-axiom nil map nil)
    (kcontext? const-decl "bool" decl nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" map nil) (app_symbol def-decl "decl" map nil)
    (app_symbol_context rec-application-judgement "(kcontext?)" map
     nil)
    (ktype_decl adt-def-decl "boolean" decl nil)
    (kvar_decl adt-def-decl "boolean" decl nil)
    (kconst_decl adt-def-decl "boolean" decl nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil))
   nil))
 (τ_TCC4 0
  (τ_TCC4-1 nil 3582642913
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (kvar_app_symbol formula-decl nil map nil)
    (pretype formula-decl nil language nil)
    (kind const-decl "kind" decl nil))
   nil))
 (τ_TCC5 0
  (τ_TCC5-1 nil 3582642913
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((app_symbol def-decl "decl" map nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (context formula-decl nil language nil)
    (nonempty_context formula-decl nil language nil)
    (kvar_app_symbol formula-decl nil map nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (typed? const-decl "bool" decl nil)
    (kind const-decl "kind" decl nil))
   nil))
 (τ_TCC6 0
  (τ_TCC6-1 nil 3582642913 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (preterm formula-decl nil language nil)
    (ktype_decl adt-def-decl "boolean" decl nil)
    (kvar_decl adt-def-decl "boolean" decl nil)
    (kconst_decl adt-def-decl "boolean" decl nil)
    (kind const-decl "kind" decl nil)
    (app_symbol_context rec-application-judgement "(kcontext?)" map
     nil))
   nil))
 (τ_TCC7 0
  (τ_TCC7-1 nil 3582642913 ("" (grind) nil nil)
   ((ktype_decl adt-def-decl "boolean" decl nil)
    (kvar_decl adt-def-decl "boolean" decl nil)
    (kconst_decl adt-def-decl "boolean" decl nil)
    (kind const-decl "kind" decl nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil)
    (app_symbol_context rec-application-judgement "(kcontext?)" map
     nil))
   nil))
 (τ_TCC8 0
  (τ_TCC8-1 nil 3582642913 ("" (termination-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC9 0
  (τ_TCC9-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (kvar_decl adt-def-decl "boolean" decl nil)
    (kconst_decl adt-def-decl "boolean" decl nil)
    (kind const-decl "kind" decl nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (dconst_def? adt-recognizer-decl "[decl -> boolean]" decl nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (app_symbol def-decl "decl" map nil) (∈ def-decl "bool" map nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (dtype_def? adt-recognizer-decl "[decl -> boolean]" decl nil)
    (decl type-decl nil decl nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ktype_decl adt-def-decl "boolean" decl nil)
    (app_symbol_context rec-application-judgement "(kcontext?)" map
     nil))
   nil))
 (τ_TCC10 0
  (τ_TCC10-1 nil 3582642913
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC11 0
  (τ_TCC11-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (hide -6)
      (("" (bddsimp -3)
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (use pretheory_is_context)
          (("3" (use context_is_map :polarity? t) nil nil)) nil))
        nil))
      nil))
    nil)
   ((pretheory_is_context judgement-tcc nil subtype nil)
    (pretheory type-eq-decl nil language nil)
    (context_is_map judgement-tcc nil subtype nil)
    (Θ!1 skolem-const-decl "well_formed_context" tau nil)
    (m!1 skolem-const-decl "symbol" tau nil)
    (Δ!1 skolem-const-decl "{x: semantic |
         IF dtype_def?(app_symbol(Θ!1)(m!1)) THEN pretype?(x)
         ELSE IF dconst_def?(app_symbol(Θ!1)(m!1)) THEN preterm?(x)
              ELSE pretheory?(x)
              ENDIF
         ENDIF}" tau nil)
    (kconst_decl adt-def-decl "boolean" decl nil)
    (kvar_decl adt-def-decl "boolean" decl nil)
    (app_symbol_context rec-application-judgement "(kcontext?)" map
     nil)
    (kind const-decl "kind" decl nil)
    (ktype_decl adt-def-decl "boolean" decl nil)
    (dconst_def? adt-recognizer-decl "[decl -> boolean]" decl nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (app_symbol def-decl "decl" map nil) (∈ def-decl "bool" map nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (dtype_def? adt-recognizer-decl "[decl -> boolean]" decl nil)
    (decl type-decl nil decl nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC12 0
  (τ_TCC12-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (split 1)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (flatten) (("6" (postpone) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (app_symbol def-decl "decl" map nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (τ_TCC13 0
  (τ_TCC13-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (expand kind -14)
          (("" (case "dtheory?(app_symbol(Θ!1)(m!1))")
            (("1" (use app_symbol_pretheory) (("1" (grind) nil nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pretheory type-eq-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (interp_for? def-decl "bool" interp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (interp def-decl
            "{Δ: pretheory | weight(F)(Δ) <= weight(F)(Γ) + weight(F)(σ)}"
            interp nil)
    (app_symbol_context rec-application-judgement "(kcontext?)" map
     nil)
    (kind const-decl "kind" decl nil)
    (app_symbol_pretheory judgement-tcc nil map nil)
    (ktheory? const-decl "bool" decl nil)
    (ktype_decl adt-def-decl "boolean" decl nil)
    (kvar_decl adt-def-decl "boolean" decl nil)
    (kconst_decl adt-def-decl "boolean" decl nil)
    (dtheory? adt-recognizer-decl "[decl -> boolean]" decl nil)
    (dconst_def? adt-recognizer-decl "[decl -> boolean]" decl nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (app_symbol def-decl "decl" map nil) (∈ def-decl "bool" map nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (dtype_def? adt-recognizer-decl "[decl -> boolean]" decl nil)
    (decl type-decl nil decl nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC14 0
  (τ_TCC14-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (inst?) (("" (flatten) (("" (postpone) nil nil)) nil)) nil))
    nil)
   ((context formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (dtheory adt-accessor-decl "[(ktheory?) -> semantic]" language nil)
    (context_is_map judgement-tcc nil subtype nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (interp def-decl
            "{Δ: pretheory | weight(F)(Δ) <= weight(F)(Γ) + weight(F)(σ)}"
            interp nil)
    (interp_for? def-decl "bool" interp nil)
    (interp type-eq-decl nil language nil)
    (pretheory type-eq-decl nil language nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (kvar_app_symbol formula-decl nil map nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (app_symbol def-decl "decl" map nil)
    (< const-decl "bool" reals nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (kind const-decl "kind" decl nil))
   nil))
 (τ_TCC15 0
  (τ_TCC15-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (split 2) (("1" (propax) nil nil) ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((pretheory type-eq-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (interp_for? def-decl "bool" interp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (interp def-decl
            "{Δ: pretheory | weight(F)(Δ) <= weight(F)(Γ) + weight(F)(σ)}"
            interp nil)
    (dconst_def? adt-recognizer-decl "[decl -> boolean]" decl nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (app_symbol def-decl "decl" map nil) (∈ def-decl "bool" map nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (dtype_def? adt-recognizer-decl "[decl -> boolean]" decl nil)
    (decl type-decl nil decl nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC16 0
  (τ_TCC16-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (inst?) (("" (flatten) (("" (postpone) nil nil)) nil)) nil))
    nil)
   nil nil))
 (τ_TCC17 0
  (τ_TCC17-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (inst?) (("" (flatten) (("" (postpone) nil nil)) nil)) nil))
    nil)
   ((ktype_decl adt-def-decl "boolean" decl nil)
    (kvar_decl adt-def-decl "boolean" decl nil)
    (kconst_decl adt-def-decl "boolean" decl nil)
    (kind const-decl "kind" decl nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC18 0
  (τ_TCC18-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (split 2)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil)
           ("4" (assert) nil nil)
           ("5" (assert) (("5" (grind) nil nil)) nil)
           ("6" (assert)
            (("6" (split 1)
              (("1" (rewrite -15) (("1" (assert) nil nil)) nil)
               ("2" (rewrite -15) (("2" (assert) nil nil)) nil)
               ("3" (rewrite -15) (("3" (assert) nil nil)) nil)
               ("4" (rewrite -15)
                (("4" (assert) (("4" (postpone) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ktype_decl adt-def-decl "boolean" decl nil)
    (kvar_decl adt-def-decl "boolean" decl nil)
    (kconst_decl adt-def-decl "boolean" decl nil)
    (kind const-decl "kind" decl nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC19 0
  (τ_TCC19-1 nil 3582642913 ("" (grind) nil nil)
   ((ktype_decl adt-def-decl "boolean" decl nil)
    (kvar_decl adt-def-decl "boolean" decl nil)
    (kconst_decl adt-def-decl "boolean" decl nil)
    (kind const-decl "kind" decl nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil)
    (app_symbol_context rec-application-judgement "(kcontext?)" map
     nil))
   nil))
 (τ_TCC20 0
  (τ_TCC20-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (split 2)
          (("1" (grind) nil nil)
           ("2" (assert) (("2" (grind) nil nil)) nil)
           ("3" (assert) (("3" (grind) nil nil)) nil)
           ("4" (assert) (("4" (grind) nil nil)) nil)
           ("5" (assert) (("5" (grind) nil nil)) nil)
           ("6" (assert) (("6" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pretheory type-eq-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (interp_for? def-decl "bool" interp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (interp def-decl
            "{Δ: pretheory | weight(F)(Δ) <= weight(F)(Γ) + weight(F)(σ)}"
            interp nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil)
    (context formula-decl nil language nil)
    (ktype_decl adt-def-decl "boolean" decl nil)
    (app_symbol_context rec-application-judgement "(kcontext?)" map
     nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (dconst_def? adt-recognizer-decl "[decl -> boolean]" decl nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (app_symbol def-decl "decl" map nil) (∈ def-decl "bool" map nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (dtype_def? adt-recognizer-decl "[decl -> boolean]" decl nil)
    (decl type-decl nil decl nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC21 0
  (τ_TCC21-1 nil 3582642913 ("" (termination-tcc) nil nil)
   ((ktype_decl adt-def-decl "boolean" decl nil)
    (kvar_decl adt-def-decl "boolean" decl nil)
    (kconst_decl adt-def-decl "boolean" decl nil)
    (kind const-decl "kind" decl nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil)
    (app_symbol_context rec-application-judgement "(kcontext?)" map
     nil))
   nil))
 (τ_TCC22 0
  (τ_TCC22-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((ktype_decl adt-def-decl "boolean" decl nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil)
    (app_symbol_context rec-application-judgement "(kcontext?)" map
     nil))
   nil))
 (τ_TCC23 0
  (τ_TCC23-1 nil 3582642913 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (context formula-decl nil language nil)
    (concat_empty formula-decl nil context nil)
    (well_formed? def-decl "bool" well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (τ_TCC24 0
  (τ_TCC24-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (inst?) (("" (flatten) (("" (postpone) nil nil)) nil)) nil))
    nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC25 0
  (τ_TCC25-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (split 1)
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (assert) nil nil)
           ("4" (reveal -2)
            (("4" (inst - "kvar(A!1, Θ!1)")
              (("4" (inst - B!1)
                (("4" (flatten)
                  (("4" (assert)
                    (("4" (assert)
                      (("4" (rewrite -20) (("4" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (assert) nil nil)
           ("6" (assert)
            (("6" (reveal -2)
              (("6" (inst - "kvar(A!1, Θ!1)")
                (("6" (inst - B!1)
                  (("6" (flatten)
                    (("6" (assert)
                      (("6" (rewrite -19) (("6" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC26 0
  (τ_TCC26-1 nil 3582642913
   ("" (grind) (("" (rewrite doubleplus_empty) nil nil)) nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC27 0
  (τ_TCC27-1 nil 3582642913 ("" (termination-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC28 0
  (τ_TCC28-1 nil 3582642913
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil) nil nil))
 (τ_TCC29 0
  (τ_TCC29-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (context formula-decl nil language nil)
    (concat_empty formula-decl nil context nil)
    (well_formed? def-decl "bool" well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (τ_TCC30 0
  (τ_TCC30-1 nil 3582642913
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC31 0
  (τ_TCC31-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (copy -5)
      (("" (inst - Θ!1)
        (("" (inst - A!1)
          (("" (inst - "kvar(A!1, Θ!1)")
            (("" (inst - B!1)
              (("" (flatten) (("" (assert) (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC32 0
  (τ_TCC32-1 nil 3582642913 ("" (termination-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC33 0
  (τ_TCC33-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC34 0
  (τ_TCC34-1 nil 3582642913
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC35 0
  (τ_TCC35-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (context formula-decl nil language nil)
    (concat_empty formula-decl nil context nil)
    (well_formed? def-decl "bool" well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (τ_TCC36 0
  (τ_TCC36-1 nil 3582642913
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (sbool const-decl "symbol" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC37 0
  (τ_TCC37-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (copy -6)
      (("" (inst - Θ!1)
        (("" (inst - T!1)
          (("" (inst - "kvar(T!1, Θ!1)")
            (("" (inst - a!1)
              (("" (flatten) (("" (assert) (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (sbool const-decl "symbol" language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (pretype type-eq-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC38 0
  (τ_TCC38-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (sbool const-decl "symbol" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC39 0
  (τ_TCC39-1 nil 3582642913 ("" (termination-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC40 0
  (τ_TCC40-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC41 0
  (τ_TCC41-1 nil 3582642913
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (sbool const-decl "symbol" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC42 0
  (τ_TCC42-1 nil 3582642913 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ktype_decl adt-def-decl "boolean" decl nil)
    (kvar_decl adt-def-decl "boolean" decl nil)
    (kconst_decl adt-def-decl "boolean" decl nil)
    (kind const-decl "kind" decl nil))
   nil))
 (τ_TCC43 0
  (τ_TCC43-1 nil 3582642913
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm formula-decl nil language nil)
    (ktype_decl adt-def-decl "boolean" decl nil))
   nil))
 (τ_TCC44 0
  (τ_TCC44-1 nil 3582642913
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((ktype_decl adt-def-decl "boolean" decl nil)
    (kvar_decl adt-def-decl "boolean" decl nil)
    (kconst_decl adt-def-decl "boolean" decl nil)
    (kind const-decl "kind" decl nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC45 0
  (τ_TCC45-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm formula-decl nil language nil)
    (ktype_decl adt-def-decl "boolean" decl nil))
   nil))
 (τ_TCC46 0
  (τ_TCC46-1 nil 3582642913 ("" (termination-tcc) nil nil)
   ((ktype_decl adt-def-decl "boolean" decl nil)
    (kvar_decl adt-def-decl "boolean" decl nil)
    (kconst_decl adt-def-decl "boolean" decl nil)
    (kind const-decl "kind" decl nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC47 0
  (τ_TCC47-1 nil 3582642913
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (pretype type-eq-decl nil language nil))
   nil))
 (τ_TCC48 0
  (τ_TCC48-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (typepred "μ0(Tf!1)")
        (("" (rewrite -13) (("" (assert) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (μ0 def-decl "pretype" supertype nil)
    (pretype type-eq-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC49 0
  (τ_TCC49-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (pretype type-eq-decl nil language nil))
   nil))
 (τ_TCC50 0
  (τ_TCC50-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (invoke (typepred "%1") (~ + "subst(%,%,%)"))
      (("" (typepred "μ0(Tf!1)")
        (("" (rewrite -18)
          (("" (assert)
            (("" (bddsimp -3)
              (("1" (assert) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subst def-decl "{f |
         (pretype?(e) => pretype?(f)) AND
          (preterm?(e) => preterm?(f)) AND
           (interp?(e) => interp?(f)) AND (pretheory?(e) => pretheory?(f))}"
           subst
      nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (μ0 def-decl "pretype" supertype nil)
    (pretype type-eq-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC51 0
  (τ_TCC51-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (typepred "μ0(Tf!1)")
      (("" (rewrite -13) (("" (assert) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((μ0 def-decl "pretype" supertype nil)
    (pretype formula-decl nil language nil)
    (pretype type-eq-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC52 0
  (τ_TCC52-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (copy -7)
      (("" (inst - Θ!1)
        (("" (inst - f!1)
          (("" (inst - Θ!1)
            (("" (inst - a!1)
              (("" (flatten) (("" (assert) (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype type-eq-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC53 0
  (τ_TCC53-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC54 0
  (τ_TCC54-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC55 0
  (τ_TCC55-1 nil 3582642913 ("" (termination-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC56 0
  (τ_TCC56-1 nil 3582642913
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC57 0
  (τ_TCC57-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (context formula-decl nil language nil)
    (concat_empty formula-decl nil context nil)
    (well_formed? def-decl "bool" well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (τ_TCC58 0
  (τ_TCC58-1 nil 3582642913
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC59 0
  (τ_TCC59-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (inst - Θ!1) (("" (inst - A!1) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((pretype formula-decl nil language nil)
    (pretype type-eq-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC60 0
  (τ_TCC60-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (copy -6)
      (("" (inst - Θ!1)
        (("" (inst - A!1)
          (("" (inst - "kvar(A!1, Θ!1)")
            (("" (inst - a!1)
              (("" (flatten) (("" (assert) (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (pretype type-eq-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC61 0
  (τ_TCC61-1 nil 3582642913 ("" (termination-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC62 0
  (τ_TCC62-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC63 0
  (τ_TCC63-1 nil 3582642913
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((pretype formula-decl nil language nil)) nil))
 (τ_TCC64 0
  (τ_TCC64-1 nil 3582642913
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC65 0
  (τ_TCC65-1 nil 3582642913 ("" (termination-tcc) nil nil)
   ((pretype formula-decl nil language nil)) nil))
 (τ_TCC66 0
  (τ_TCC66-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (copy -7)
      (("" (inst - Θ!1)
        (("" (inst - a1!1)
          (("" (inst - Θ!1)
            (("" (inst - a2!1)
              (("" (flatten) (("" (assert) (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype type-eq-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC67 0
  (τ_TCC67-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC68 0
  (τ_TCC68-1 nil 3582642913 ("" (termination-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC69 0
  (τ_TCC69-1 nil 3582642913
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (pretype type-eq-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (τ_TCC70 0
  (τ_TCC70-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (typepred "μ0(A!1)")
      (("" (rewrite -11) (("" (assert) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((μ0 def-decl "pretype" supertype nil)
    (pretype formula-decl nil language nil)
    (pretype type-eq-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC71 0
  (τ_TCC71-1 nil 3582642913 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (pretype type-eq-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (τ_TCC72 0
  (τ_TCC72-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC73 0
  (τ_TCC73-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC74 0
  (τ_TCC74-1 nil 3582642913
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (pretype type-eq-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (τ_TCC75 0
  (τ_TCC75-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (typepred "μ0(A!1)")
      (("" (rewrite -11) (("" (assert) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((μ0 def-decl "pretype" supertype nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil)
    (pretype type-eq-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC76 0
  (τ_TCC76-1 nil 3582642913 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (pretype type-eq-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (τ_TCC77 0
  (τ_TCC77-1 nil 3582642913
   ("" (skosimp* :preds? t)
    (("" (invoke (typepred "%1") (~ + "subst(%,%,%)"))
      (("" (typepred "μ0(A!1)")
        (("" (rewrite -16) (("" (assert) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((lproj adt-constructor-decl "[semantic -> (lproj?)]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subst def-decl "{f |
         (pretype?(e) => pretype?(f)) AND
          (preterm?(e) => preterm?(f)) AND
           (interp?(e) => interp?(f)) AND (pretheory?(e) => pretheory?(f))}"
           subst
      nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (μ0 def-decl "pretype" supertype nil)
    (pretype type-eq-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC78 0
  (τ_TCC78-1 nil 3582642913 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (pretype type-eq-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (τ_TCC79 0
  (τ_TCC79-1 nil 3582642913 ("" (termination-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC80 0
  (τ_TCC80-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil))
 (τ_TCC81 0
  (τ_TCC81-1 nil 3582650759
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (pretype type-eq-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (τ_TCC82 0
  (τ_TCC82-1 nil 3582650759 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (pretheory formula-decl nil language nil))
   nil))
 (τ_TCC83 0
  (τ_TCC83-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (assert)
          (("" (bddsimp -6)
            (("1" (use context_is_map :polarity? t) nil nil)
             ("2" (expand CONTEXT?)
              (("2" (bddsimp -6)
                (("1" (use pretheory_is_context :polarity? t)
                  (("1" (inst - Γ!1)
                    (("1" (use context_is_map :polarity? t) nil nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (Γ!1 skolem-const-decl "semantic" tau nil)
    (context_is_map judgement-tcc nil subtype nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC84 0
  (τ_TCC84-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (CONTEXT? const-decl "bool" language nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (τ_TCC85 0
  (τ_TCC85-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC86 0
  (τ_TCC86-1 nil 3582650759
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil) nil nil))
 (τ_TCC87 0
  (τ_TCC87-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (bddsimp -7)
          (("1" (use pretheory_is_context :polarity? t)
            (("1" (use context_is_map :polarity? t) nil nil)) nil)
           ("2" (bddsimp -6)
            (("1" (use context_is_map :polarity? t) nil nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((context_is_map judgement-tcc nil subtype nil)
    (Γ!1 skolem-const-decl "semantic" tau nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (CONTEXT? const-decl "bool" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC88 0
  (τ_TCC88-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (bddsimp -6)
          (("1" (propax) nil nil)
           ("2" (bddsimp -6)
            (("1" (use pretheory_is_context :polarity? t) nil nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((⊥ adt-constructor-decl "(undefined?)" language nil)
    (/= const-decl "boolean" notequal nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pretcc type-eq-decl nil tau nil)
    (keyword type-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (w def-decl "ordinal" weight nil)
    (extend const-decl "R" extend nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (pretheory type-eq-decl nil language nil)
    (Γ!1 skolem-const-decl "semantic" tau nil)
    (CONTEXT? const-decl "bool" language nil))
   nil))
 (τ_TCC89 0
  (τ_TCC89-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (assert)
          (("" (bddsimp -10)
            (("1" (lemma well_formed_concat)
              (("1" (inst - "〈〉" Γ!1 Θ!1) (("1" (assert) nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (well_formed_concat formula-decl nil well_formed nil)
    (concat_empty formula-decl nil context nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC90 0
  (τ_TCC90-1 nil 3582650759
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC91 0
  (τ_TCC91-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (copy -5)
      (("" (inst - Θ!1)
        (("" (inst - Γ!1)
          (("" (inst - "Θ!1 ++ Γ!1")
            (("" (inst - T!1)
              (("" (flatten)
                (("" (assert)
                  (("" (split 3)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil) ("4" (assert) nil nil)
                     ("5" (assert) nil nil)
                     ("6" (flatten)
                      (("6" (split 2)
                        (("1" (grind) nil nil)
                         ("2" (assert) (("2" (grind) nil nil)) nil)
                         ("3" (assert) (("3" (grind) nil nil)) nil)
                         ("4" (assert) (("4" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (++ def-decl
     "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
     context nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (<= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (ord type-decl nil language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC92 0
  (τ_TCC92-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC93 0
  (τ_TCC93-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC94 0
  (τ_TCC94-1 nil 3582650759
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (CONTEXT? const-decl "bool" language nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (τ_TCC95 0
  (τ_TCC95-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (assert)
          (("" (bddsimp -7)
            (("1" (use pretheory_is_context :polarity? t)
              (("1" (use context_is_map :polarity? t) nil nil)) nil)
             ("2" (bddsimp -6)
              (("1" (use context_is_map :polarity? t) nil nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (pretheory type-eq-decl nil language nil)
    (Γ!1 skolem-const-decl "semantic" tau nil)
    (context_is_map judgement-tcc nil subtype nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC96 0
  (τ_TCC96-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (CONTEXT? const-decl "bool" language nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (τ_TCC97 0
  (τ_TCC97-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC98 0
  (τ_TCC98-1 nil 3582650759
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil) nil nil))
 (τ_TCC99 0
  (τ_TCC99-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (assert)
          (("" (bddsimp -6)
            (("1" (use pretheory_is_context :polarity? t) nil nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (Γ!1 skolem-const-decl "semantic" tau nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC100 0
  (τ_TCC100-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (lemma well_formed_concat)
          (("" (inst - "〈〉" Γ!1 Θ!1)
            (("" (assert)
              (("" (rewrite -13 :dir rl) (("" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_formed_concat formula-decl nil well_formed nil)
    (CONTEXT? const-decl "bool" language nil)
    (concat_empty formula-decl nil context nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC101 0
  (τ_TCC101-1 nil 3582650759
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC102 0
  (τ_TCC102-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (copy -5)
      (("" (inst - Θ!1)
        (("" (inst - Γ!1)
          (("" (inst - "Θ!1 ++ Γ!1")
            (("" (inst - T!1)
              (("" (flatten)
                (("" (assert)
                  (("" (grind)
                    (("" (use pretheory_is_context :polarity? t) nil
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (++ def-decl
     "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
     context nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (<= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (ord type-decl nil language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC103 0
  (τ_TCC103-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC104 0
  (τ_TCC104-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC105 0
  (τ_TCC105-1 nil 3582650759
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC106 0
  (τ_TCC106-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (assert)
          (("" (bddsimp -6)
            (("1" (use context_is_map :polarity? t) nil nil)
             ("2" (bddsimp -6)
              (("1" (use pretheory_is_context :polarity? t)
                (("1" (inst - Γ!1)
                  (("1" (use context_is_map :polarity? t) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (Γ!1 skolem-const-decl "semantic" tau nil)
    (context_is_map judgement-tcc nil subtype nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC107 0
  (τ_TCC107-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (assert)
          (("" (bddsimp -6)
            (("1" (use pretheory_is_context :polarity? t) nil nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (Γ!1 skolem-const-decl "semantic" tau nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC108 0
  (τ_TCC108-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (assert)
          (("" (lemma well_formed_concat)
            (("" (inst - "〈〉" Γ!1 Θ!1) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (concat_empty formula-decl nil context nil)
    (well_formed_concat formula-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC109 0
  (τ_TCC109-1 nil 3582650759
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC110 0
  (τ_TCC110-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (copy -5)
      (("" (inst - Θ!1)
        (("" (inst - Γ!1)
          (("" (inst - "Θ!1 ++ Γ!1")
            (("" (inst - T!1)
              (("" (flatten)
                (("" (assert)
                  (("" (split 3)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil) ("4" (assert) nil nil)
                     ("5" (assert) nil nil)
                     ("6" (flatten)
                      (("6" (assert)
                        (("6" (split 2)
                          (("1" (assert) (("1" (grind) nil nil)) nil)
                           ("2" (assert) (("2" (grind) nil nil)) nil)
                           ("3" (assert) (("3" (grind) nil nil)) nil)
                           ("4" (assert) (("4" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (++ def-decl
     "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
     context nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (<= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (ord type-decl nil language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC111 0
  (τ_TCC111-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC112 0
  (τ_TCC112-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC113 0
  (τ_TCC113-1 nil 3582650759
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil) nil nil))
 (τ_TCC114 0
  (τ_TCC114-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (assert)
          (("" (bddsimp -6)
            (("1" (use context_is_map :polarity? t) nil nil)
             ("2" (bddsimp -6)
              (("1" (use pretheory_is_context :polarity? t)
                (("1" (inst - Γ!1)
                  (("1" (use context_is_map :polarity? t) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (Γ!1 skolem-const-decl "semantic" tau nil)
    (context_is_map judgement-tcc nil subtype nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC115 0
  (τ_TCC115-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (bddsimp -6)
          (("1" (propax) nil nil)
           ("2" (bddsimp -6)
            (("1" (use pretheory_is_context :polarity? t) nil nil)
             ("2" (assert)
              (("2" (rewrite -12 :dir rl) (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (Γ!1 skolem-const-decl "semantic" tau nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC116 0
  (τ_TCC116-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (assert)
          (("" (lemma well_formed_concat)
            (("" (inst - "〈〉" Γ!1 Θ!1) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (concat_empty formula-decl nil context nil)
    (well_formed_concat formula-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC117 0
  (τ_TCC117-1 nil 3582650759
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil) nil nil))
 (τ_TCC118 0
  (τ_TCC118-1 nil 3582650759
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (pretype type-eq-decl nil language nil)
    (++ def-decl
     "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
     context nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (<= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (ord type-decl nil language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (CONTEXT? const-decl "bool" language nil))
   nil))
 (τ_TCC119 0
  (τ_TCC119-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst - "Θ!1 ++ Γ!1")
      (("" (inst - T!1) (("" (flatten) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord type-decl nil language nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (<= const-decl "bool" reals nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (++ def-decl
     "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
     context nil)
    (CONTEXT? const-decl "bool" language nil)
    (pretype type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC120 0
  (τ_TCC120-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (pretype type-eq-decl nil language nil)
    (++ def-decl
     "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
     context nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (<= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (ord type-decl nil language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (CONTEXT? const-decl "bool" language nil))
   nil))
 (τ_TCC121 0
  (τ_TCC121-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (copy -7)
      (("" (copy -7)
        (("" (inst - Θ!1)
          (("" (inst - Γ!1)
            (("" (inst - "Θ!1 ++ Γ!1")
              (("" (copy -9)
                (("" (inst - T!1)
                  (("" (inst - a!1)
                    (("" (flatten)
                      (("" (assert)
                        (("" (split 3)
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (grind) nil nil) ("4" (assert) nil nil)
                           ("5" (assert) nil nil)
                           ("6" (flatten)
                            (("6" (assert)
                              (("6"
                                (split 2)
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil)
                                 ("3"
                                  (assert)
                                  (("3" (grind) nil nil))
                                  nil)
                                 ("4"
                                  (assert)
                                  (("4" (grind) nil nil))
                                  nil)
                                 ("5"
                                  (assert)
                                  (("5" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord type-decl nil language nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (<= const-decl "bool" reals nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (++ def-decl
     "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
     context nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (CONTEXT? const-decl "bool" language nil)
    (pretype type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC122 0
  (τ_TCC122-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC123 0
  (τ_TCC123-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC124 0
  (τ_TCC124-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC125 0
  (τ_TCC125-1 nil 3582650759
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC126 0
  (τ_TCC126-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (bddsimp -6)
          (("1" (use context_is_map :polarity? t) nil nil)
           ("2" (bddsimp -6)
            (("1" (use pretheory_is_context :polarity? t)
              (("1" (inst - Γ!1)
                (("1" (use context_is_map :polarity? t) nil nil)) nil))
              nil)
             ("2" (assert) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((context_is_map judgement-tcc nil subtype nil)
    (Γ!1 skolem-const-decl "semantic" tau nil)
    (CONTEXT? const-decl "bool" language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (pretheory type-eq-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC127 0
  (τ_TCC127-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (bddsimp -6)
          (("1" (propax) nil nil)
           ("2" (bddsimp -6)
            (("1" (use pretheory_is_context :polarity? t) nil nil)
             ("2" (assert) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (Γ!1 skolem-const-decl "semantic" tau nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC128 0
  (τ_TCC128-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (assert)
          (("" (lemma well_formed_concat)
            (("" (inst - "〈〉" Γ!1 Θ!1) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (concat_empty formula-decl nil context nil)
    (well_formed_concat formula-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC129 0
  (τ_TCC129-1 nil 3582650759
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC130 0
  (τ_TCC130-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (copy -5)
      (("" (inst - Θ!1)
        (("" (inst - Γ!1)
          (("" (inst - "Θ!1 ++ Γ!1")
            (("" (inst - T!1)
              (("" (flatten)
                (("" (assert)
                  (("" (split 3)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil) ("4" (assert) nil nil)
                     ("5" (assert) nil nil)
                     ("6" (flatten)
                      (("6" (assert)
                        (("6" (split 2)
                          (("1" (assert) (("1" (grind) nil nil)) nil)
                           ("2" (assert) (("2" (grind) nil nil)) nil)
                           ("3" (assert) (("3" (grind) nil nil)) nil)
                           ("4" (assert) (("4" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (++ def-decl
     "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
     context nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (<= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (ord type-decl nil language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC131 0
  (τ_TCC131-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC132 0
  (τ_TCC132-1 nil 3582650759 ("" (termination-tcc) nil nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC133 0
  (τ_TCC133-1 nil 3582650759
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC134 0
  (τ_TCC134-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (assert)
          (("" (bddsimp -6)
            (("1" (use context_is_map :polarity? t) nil nil)
             ("2" (bddsimp -6)
              (("1" (use pretheory_is_context :polarity? t)
                (("1" (inst - Γ!1)
                  (("1" (use context_is_map :polarity? t) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (Γ!1 skolem-const-decl "semantic" tau nil)
    (context_is_map judgement-tcc nil subtype nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC135 0
  (τ_TCC135-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (assert)
          (("" (bddsimp -6)
            (("1" (use pretheory_is_context :polarity? t) nil nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (Γ!1 skolem-const-decl "semantic" tau nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC136 0
  (τ_TCC136-1 nil 3582650759
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("" (flatten)
        (("" (assert)
          (("" (lemma well_formed_concat)
            (("" (inst - "〈〉" Γ!1 Θ!1) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((CONTEXT? const-decl "bool" language nil)
    (concat_empty formula-decl nil context nil)
    (well_formed_concat formula-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (extend const-decl "R" extend nil)
    (w def-decl "ordinal" weight nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (keyword type-decl nil language nil)
    (pretcc type-eq-decl nil tau nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (KCONTEXT? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTERM? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil))
   nil))
 (τ_TCC137 0
  (τ_TCC137-1 nil 3582650759
   ("" (skosimp* :preds? t) (("" (postpone) nil nil)) nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC138 0
  (τ_TCC138-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC139 0
  (τ_TCC139-1 nil 3582650759 ("" (subtype-tcc) nil nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC140 0
  (τ_TCC140-1 nil 3582650759 ("" (termination-tcc) nil nil)
   ((CONTEXT? const-decl "bool" language nil)
    (fail const-decl "[keyword, list[pretcc]]" tau nil))
   nil))
 (τ_TCC141 0
  (τ_TCC141-1 nil 3583072319 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC142 0
  (τ_TCC142-1 nil 3583072319 ("" (subtype-tcc) nil nil)
   ((fail const-decl "[keyword, list[pretcc]]" tau nil)) nil)))

