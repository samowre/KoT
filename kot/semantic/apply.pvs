apply: THEORY
BEGIN
  IMPORTING decl

  S: VAR syntaxic
  Γ, Δ, Θ: VAR context
  A, B, T: VAR pretype
  r, s: VAR symbol
  n, m: VAR name
  x, y: VAR nat
  a, b, f, g: VAR preterm
  σ, τ: VAR interp

  % Check if a symbol is defined in a map (= context, theory or interpretation)
  % i.e if there is a declaration (def or decl) of this symbol (as a type, term, theory)
  ;∈(s, (S: map)): RECURSIVE bool =
    COND
      empty?(S) -> FALSE,
      null?(S) -> FALSE,
      kvar?(S) -> s ∈ rest(S :: nonempty),
      ELSE -> s = s(S) OR s ∈ rest(S :: nonempty)
    ENDCOND
  MEASURE w(S)
  AUTO_REWRITE+ ∈
  member_nonempty: THEOREM
    FORALL s, (S: map): s ∈ S IMPLIES nonempty?(S)
  ;∉(s, (S: map)): MACRO bool = NOT s ∈ S

  % The same for a variable
  % Note that since a variable cannot appear in a theory or interpretation
  % this ∈ is defined over contexts only
  ;∈(x, Γ): RECURSIVE bool =
    COND
      empty?(Γ) -> FALSE,
      kvar?(Γ) -> x = 0 OR (x - 1) ∈ rest(Γ :: nonempty_context),
      ELSE -> x ∈ rest(Γ :: nonempty_context)
    ENDCOND
  MEASURE w(Γ)
  AUTO_REWRITE+ ∈
  member_var_nonempty_context: THEOREM
    FORALL x, Γ: x ∈ Γ IMPLIES nonempty_context?(Γ)
  ;∉(x, Γ): MACRO bool = NOT x ∈ Γ
  
  % Takes a map S = (Γ, s: _, Δ) and returns (s: _, Δ)
  % Used only as an argument of the functions kind, definition, type_
  app_symbol(S: nonempty)(s | s ∈ S): RECURSIVE
    { T: nonempty | (interp?(S) => interp?(T)) AND
                    (context?(S) => context?(T)) AND
		    (pretheory?(S) => pretheory?(T)) AND
		    w(T) <= w(S) } =
    COND
      kvar?(S) -> app_symbol(rest(S))(s),
      ELSE -> IF s = s(S) THEN S ELSE app_symbol(rest(S))(s) ENDIF
    ENDCOND
  MEASURE w(S)
  AUTO_REWRITE+ app_symbol
  CONVERSION+ app_symbol

  app_symbol_is_definition: JUDGEMENT app_symbol(σ | nonempty?(σ))(s | s ∈ σ) HAS_TYPE definition

  % The same for variables
  app_var(Γ)(x | x ∈ Γ): RECURSIVE
    { Δ | kvar?(Δ) AND nonempty?(Δ) AND w(Δ) <= w(Γ) } =
    COND
      kvar?(Γ) -> IF x = 0 THEN Γ ELSE app_var(rest(Γ))(x - 1) ENDIF,
      ELSE -> app_var(rest(Γ))(x)
    ENDCOND
  MEASURE w(Γ)
  CONVERSION+ app_var
END apply
