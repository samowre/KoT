(supertype (μ0_TCC1 0
            (μ0_TCC1-1 nil 3582060608 ("" (subtype-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (pretype formula-decl nil language nil))
             nil))
           (μ0_TCC2 0
            (μ0_TCC2-1 nil 3582060608 ("" (termination-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (real_lt_is_strict_total_order name-judgement
               "(strict_total_order?[real])" real_props nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (nnint_plus_nnint_is_nnint application-judgement
               "nonneg_int" integers nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil)
              (weight def-decl "nat" language nil)
              (pretype formula-decl nil language nil))
             nil))
           (divide_TCC1 0
            (divide_TCC1-1 nil 3582052817 ("" (subtype-tcc) nil nil)
             ((pretype formula-decl nil language nil)) nil))
           (divide_TCC2 0
            (divide_TCC2-1 nil 3582052817 ("" (subtype-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (pretype formula-decl nil language nil))
             nil))
           (divide_TCC3 0
            (divide_TCC3-1 nil 3582052817 ("" (subtype-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (preterm? const-decl "[semantic -> bool]" language nil)
              (preterm type-eq-decl nil language nil)
              (list2finseq const-decl "finseq[T]" list2finseq nil)
              (sand const-decl "symbol" language nil)
              (preterm formula-decl nil language nil)
              (pretype formula-decl nil language nil))
             nil))
           (divide_TCC4 0
            (divide_TCC4-1 nil 3582052817 ("" (subtype-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (pretype formula-decl nil language nil))
             nil))
           (divide_TCC5 0
            (divide_TCC5-1 nil 3582052817
             ("" (termination-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (real_lt_is_strict_total_order name-judgement
               "(strict_total_order?[real])" real_props nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (nnint_plus_nnint_is_nnint application-judgement
               "nonneg_int" integers nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil)
              (weight def-decl "nat" language nil)
              (pretype formula-decl nil language nil))
             nil))
           (divide_TCC6 0
            (divide_TCC6-1 nil 3582052817 ("" (subtype-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (pretype formula-decl nil language nil))
             nil))
           (divide_TCC7 0
            (divide_TCC7-1 nil 3582052817 ("" (subtype-tcc) nil nil)
             nil nil))
           (divide_TCC8 0
            (divide_TCC8-1 nil 3582060608
             ("" (termination-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (real_lt_is_strict_total_order name-judgement
               "(strict_total_order?[real])" real_props nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (nnint_plus_nnint_is_nnint application-judgement
               "nonneg_int" integers nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil)
              (weight def-decl "nat" language nil)
              (pretype formula-decl nil language nil))
             nil))
           (divide_TCC9 0
            (divide_TCC9-1 nil 3582060608 ("" (subtype-tcc) nil nil)
             ((pretype formula-decl nil language nil)) nil))
           (divide_TCC10 0
            (divide_TCC10-1 nil 3582060608 ("" (subtype-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (pretype formula-decl nil language nil))
             nil))
           (divide_TCC11 0
            (divide_TCC11-1 nil 3582060608
             ("" (termination-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (real_lt_is_strict_total_order name-judgement
               "(strict_total_order?[real])" real_props nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (nnint_plus_nnint_is_nnint application-judgement
               "nonneg_int" integers nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil)
              (weight def-decl "nat" language nil)
              (pretype formula-decl nil language nil))
             nil))
           (divide_TCC12 0
            (divide_TCC12-1 nil 3582060608 ("" (subtype-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (pretype formula-decl nil language nil))
             nil))
           (divide_TCC13 0
            (divide_TCC13-1 nil 3582060608 ("" (subtype-tcc) nil nil)
             nil nil))
           (divide_TCC14 0
            (divide_TCC14-1 nil 3582060608
             ("" (termination-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (real_lt_is_strict_total_order name-judgement
               "(strict_total_order?[real])" real_props nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (nnint_plus_nnint_is_nnint application-judgement
               "nonneg_int" integers nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil)
              (weight def-decl "nat" language nil)
              (pretype formula-decl nil language nil))
             nil))
           (divide_TCC15 0
            (divide_TCC15-1 nil 3582060608 ("" (subtype-tcc) nil nil)
             ((pretype formula-decl nil language nil)) nil))
           (divide_TCC16 0
            (divide_TCC16-1 nil 3582060608 ("" (cases-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (pretype formula-decl nil language nil))
             nil))
           (divide_size_TCC1 0
            (divide_size_TCC1-1 nil 3582059150
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (pretype formula-decl nil language nil)
              (size def-decl "nat" subst nil))
             nil))
           (divide_size_TCC2 0
            (divide_size_TCC2-1 nil 3582059150
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (pretype formula-decl nil language nil)
              (size def-decl "nat" subst nil))
             nil))
           (divide_size_TCC3 0
            (divide_size_TCC3-1 nil 3582059150
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (preterm? const-decl "[semantic -> bool]" language nil)
              (preterm type-eq-decl nil language nil)
              (length def-decl "nat" list_props nil)
              (list2finseq const-decl "finseq[T]" list2finseq nil)
              (sand const-decl "symbol" language nil)
              (preterm formula-decl nil language nil)
              (pretype formula-decl nil language nil)
              (size def-decl "nat" subst nil))
             nil))
           (divide_size_TCC4 0
            (divide_size_TCC4-1 nil 3582059150
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (preterm? const-decl "[semantic -> bool]" language nil)
              (preterm type-eq-decl nil language nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (number nonempty-type-decl nil numbers nil)
              (= const-decl "[T, T -> boolean]" equalities nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (nnint_plus_nnint_is_nnint application-judgement
               "nonneg_int" integers nil)
              (pretype formula-decl nil language nil)
              (size def-decl "nat" subst nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil))
             nil))
           (divide_size_TCC5 0
            (divide_size_TCC5-1 nil 3582059150
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (preterm? const-decl "[semantic -> bool]" language nil)
              (preterm type-eq-decl nil language nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (number nonempty-type-decl nil numbers nil)
              (= const-decl "[T, T -> boolean]" equalities nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (nnint_plus_nnint_is_nnint application-judgement
               "nonneg_int" integers nil)
              (pretype formula-decl nil language nil)
              (size def-decl "nat" subst nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil))
             nil))
           (mubody_TCC1 0
            (mubody_TCC1-1 nil 3582052817
             ("" (well-founded-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (< const-decl "bool" reals nil)
              (ord type-decl nil language nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (weight def-decl "nat" language nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (<= const-decl "bool" reals nil)
              (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
               nil)
              (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
              (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
               language nil)
              (ord_symbol adt-constructor-decl "(ord_symbol?)" language
               nil)
              (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
               nil)
              (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
              (numfield nonempty-type-eq-decl nil number_fields nil)
              (+ const-decl "[numfield, numfield -> numfield]"
                 number_fields nil)
              (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
               language nil)
              (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
               language nil)
              (ord_itype? adt-recognizer-decl "[ord -> boolean]"
               language nil)
              (ord_itype adt-constructor-decl "(ord_itype?)" language
               nil)
              (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
               language nil)
              (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
               language nil)
              (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
               language nil)
              (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
               language nil)
              (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
               language nil)
              (ord_iconst adt-constructor-decl "(ord_iconst?)" language
               nil)
              (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
               language nil)
              (ord_kconst_decl adt-constructor-decl
               "(ord_kconst_decl?)" language nil)
              (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
               language nil)
              (preterm? const-decl "[semantic -> bool]" language nil)
              (preterm type-eq-decl nil language nil)
              (preterm formula-decl nil language nil)
              (pretype formula-decl nil language nil))
             nil))
           (mubody_TCC2 0
            (mubody_TCC2-1 nil 3582052817
             ("" (termination-tcc) nil nil)
             ((preterm formula-decl nil language nil)) nil))
           (mubody_TCC3 0
            (mubody_TCC3-1 nil 3582052817 ("" (subtype-tcc) nil nil)
             ((pretype formula-decl nil language nil)
              (divide_size rec-application-judgement
               "{A | size(A) = size(T)}" supertype nil))
             nil))
           (mubody_TCC4 0
            (mubody_TCC4-1 nil 3582052817
             ("" (termination-tcc) nil nil) nil nil))
           (mubody_TCC5 0
            (mubody_TCC5-1 nil 3582052817
             ("" (termination-tcc) nil nil)
             ((preterm formula-decl nil language nil)) nil))
           (mubody_size_TCC1 0
            (mubody_size_TCC1-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((length def-decl "nat" list_props nil)
              (list2finseq const-decl "finseq[T]" list2finseq nil)
              (strue const-decl "symbol" language nil)
              (preterm formula-decl nil language nil))
             nil))
           (mubody_size_TCC2 0
            (mubody_size_TCC2-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (pretype formula-decl nil language nil)
              (size def-decl "nat" subst nil))
             nil))
           (mubody_size_TCC3 0
            (mubody_size_TCC3-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((length def-decl "nat" list_props nil)
              (list2finseq const-decl "finseq[T]" list2finseq nil)
              (strue const-decl "symbol" language nil)
              (preterm formula-decl nil language nil))
             nil))
           (mubody_size_TCC4 0
            (mubody_size_TCC4-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (pretype formula-decl nil language nil)
              (size def-decl "nat" subst nil))
             nil))
           (mubody_size_TCC5 0
            (mubody_size_TCC5-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (preterm? const-decl "[semantic -> bool]" language nil)
              (preterm type-eq-decl nil language nil)
              (number nonempty-type-decl nil numbers nil)
              (= const-decl "[T, T -> boolean]" equalities nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (size def-decl "nat" subst nil)
              (lam? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (interp formula-decl nil language nil)
              (preterm formula-decl nil language nil)
              (pretype formula-decl nil language nil)
              (pretheory formula-decl nil language nil)
              (expr formula-decl nil language nil))
             nil))
           (mubody_size_TCC6 0
            (mubody_size_TCC6-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (preterm? const-decl "[semantic -> bool]" language nil)
              (preterm type-eq-decl nil language nil)
              (number nonempty-type-decl nil numbers nil)
              (= const-decl "[T, T -> boolean]" equalities nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (size def-decl "nat" subst nil)
              (lam? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (pretype formula-decl nil language nil)
              (shift_size application-judgement
               "{B | size(B) = size(A)}" subst nil)
              (length def-decl "nat" list_props nil)
              (list2finseq const-decl "finseq[T]" list2finseq nil)
              (sand const-decl "symbol" language nil)
              (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
              (preterm formula-decl nil language nil))
             nil))
           (mubody_size_TCC7 0
            (mubody_size_TCC7-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (preterm? const-decl "[semantic -> bool]" language nil)
              (preterm type-eq-decl nil language nil)
              (number nonempty-type-decl nil numbers nil)
              (= const-decl "[T, T -> boolean]" equalities nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (size def-decl "nat" subst nil)
              (lam? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (pretype formula-decl nil language nil))
             nil))
           (mubody_size_TCC8 0
            (mubody_size_TCC8-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (preterm? const-decl "[semantic -> bool]" language nil)
              (preterm type-eq-decl nil language nil)
              (number nonempty-type-decl nil numbers nil)
              (= const-decl "[T, T -> boolean]" equalities nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (size def-decl "nat" subst nil)
              (lam? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (pretype formula-decl nil language nil))
             nil))
           (mubody_size_TCC9 0
            (mubody_size_TCC9-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (preterm? const-decl "[semantic -> bool]" language nil)
              (preterm type-eq-decl nil language nil)
              (number nonempty-type-decl nil numbers nil)
              (= const-decl "[T, T -> boolean]" equalities nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (size def-decl "nat" subst nil)
              (lam? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (interp formula-decl nil language nil)
              (preterm formula-decl nil language nil)
              (pretype formula-decl nil language nil)
              (pretheory formula-decl nil language nil)
              (expr formula-decl nil language nil))
             nil))
           (mubody_size_TCC10 0
            (mubody_size_TCC10-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (preterm? const-decl "[semantic -> bool]" language nil)
              (preterm type-eq-decl nil language nil)
              (number nonempty-type-decl nil numbers nil)
              (= const-decl "[T, T -> boolean]" equalities nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (size def-decl "nat" subst nil)
              (lam? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (shift_size application-judgement
               "{B | size(B) = size(A)}" subst nil)
              (length def-decl "nat" list_props nil)
              (list2finseq const-decl "finseq[T]" list2finseq nil)
              (sequalities const-decl "symbol" language nil)
              (sT const-decl "symbol" language nil)
              (sbool const-decl "symbol" language nil)
              (sequal const-decl "symbol" language nil)
              (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
              (strue const-decl "symbol" language nil)
              (pretype formula-decl nil language nil)
              (interp formula-decl nil language nil)
              (preterm formula-decl nil language nil))
             nil))
           (mubody_size_TCC11 0
            (mubody_size_TCC11-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (preterm? const-decl "[semantic -> bool]" language nil)
              (preterm type-eq-decl nil language nil)
              (number nonempty-type-decl nil numbers nil)
              (= const-decl "[T, T -> boolean]" equalities nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (lam? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (nnint_plus_nnint_is_nnint application-judgement
               "nonneg_int" integers nil)
              (pretype formula-decl nil language nil)
              (size def-decl "nat" subst nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil))
             nil))
           (mubody_size_TCC12 0
            (mubody_size_TCC12-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (preterm? const-decl "[semantic -> bool]" language nil)
              (preterm type-eq-decl nil language nil)
              (number nonempty-type-decl nil numbers nil)
              (= const-decl "[T, T -> boolean]" equalities nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (size def-decl "nat" subst nil)
              (lam? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (interp formula-decl nil language nil)
              (preterm formula-decl nil language nil)
              (pretype formula-decl nil language nil)
              (pretheory formula-decl nil language nil)
              (expr formula-decl nil language nil))
             nil))
           (mubody_size_TCC13 0
            (mubody_size_TCC13-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (preterm? const-decl "[semantic -> bool]" language nil)
              (preterm type-eq-decl nil language nil)
              (number nonempty-type-decl nil numbers nil)
              (= const-decl "[T, T -> boolean]" equalities nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (size def-decl "nat" subst nil)
              (shift_size application-judgement
               "{B | size(B) = size(A)}" subst nil)
              (pretype formula-decl nil language nil)
              (lam? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
              (preterm formula-decl nil language nil))
             nil))
           (mubody_size_TCC14 0
            (mubody_size_TCC14-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
              (pretype formula-decl nil language nil)
              (divide_size rec-application-judgement
               "{A | size(A) = size(T)}" supertype nil))
             nil))
           (mubody_size_TCC15 0
            (mubody_size_TCC15-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (preterm? const-decl "[semantic -> bool]" language nil)
              (preterm type-eq-decl nil language nil)
              (number nonempty-type-decl nil numbers nil)
              (= const-decl "[T, T -> boolean]" equalities nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (size def-decl "nat" subst nil)
              (lam? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (interp formula-decl nil language nil)
              (preterm formula-decl nil language nil)
              (pretype formula-decl nil language nil)
              (pretheory formula-decl nil language nil)
              (expr formula-decl nil language nil))
             nil))
           (mubody_size_TCC16 0
            (mubody_size_TCC16-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((preterm formula-decl nil language nil)) nil))
           (mubody_size_TCC17 0
            (mubody_size_TCC17-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (preterm? const-decl "[semantic -> bool]" language nil)
              (preterm type-eq-decl nil language nil)
              (number nonempty-type-decl nil numbers nil)
              (= const-decl "[T, T -> boolean]" equalities nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (size def-decl "nat" subst nil)
              (shift_size application-judgement
               "{B | size(B) = size(A)}" subst nil)
              (subst_size application-judgement
               "{A: pretype | size(A) = size(T)}" subst nil)
              (pretype formula-decl nil language nil)
              (lam? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (length def-decl "nat" list_props nil)
              (list2finseq const-decl "finseq[T]" list2finseq nil)
              (sand const-decl "symbol" language nil)
              (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
              (subst def-decl "{f |
         (pretype?(e) => pretype?(f)) AND
          (preterm?(e) => preterm?(f)) AND
           (interp?(e) => interp?(f)) AND (pretheory?(e) => pretheory?(f))}"
                     subst
                nil)
              (preterm formula-decl nil language nil))
             nil))
           (mubody_size_TCC18 0
            (mubody_size_TCC18-1 nil 3582058996
             ("" (recursive-judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (preterm? const-decl "[semantic -> bool]" language nil)
              (preterm type-eq-decl nil language nil)
              (number nonempty-type-decl nil numbers nil)
              (= const-decl "[T, T -> boolean]" equalities nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (divide_size rec-application-judgement
               "{A | size(A) = size(T)}" supertype nil)
              (shift_size application-judgement
               "{B | size(B) = size(A)}" subst nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (nnint_plus_nnint_is_nnint application-judgement
               "nonneg_int" integers nil)
              (pretype formula-decl nil language nil)
              (lam? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
              (size def-decl "nat" subst nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil))
             nil))
           (mu_size 0
            (mu_size-1 nil 3582059273 ("" (judgement-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (mubody_size rec-application-judgement
               "{x: [pretype, preterm] | size(x`1) = size(T)}"
               supertype nil)
              (μ const-decl "pretype" supertype nil))
             nil))
           (mu_TCC1 0
            (mu_TCC1-1 nil 3582052817 ("" (subtype-tcc) nil nil)
             ((π const-decl "preterm" supertype nil)
              (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
              (preterm formula-decl nil language nil)
              (shift_size application-judgement
               "{B | size(B) = size(A)}" subst nil))
             nil))
           (mu 0
            (mu-1 nil 3582052885
             ("" (skosimp* :preds? t)
              (("" (assert)
                (("" (rewrite "μ")
                  (("" (rewrite "μ")
                    (("" (rewrite "π")
                      (("" (lift-if)
                        (("" (split)
                          (("1" (flatten)
                            (("1" (rewrite "mubody")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (rewrite "mubody")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (rewrite "mubody")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "mubody")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        (("1"
                                                          (apply-extensionality)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split 2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply-extensionality)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ((mu_size application-judgement "{A | size(A) = size(T)}"
               supertype nil)
              (semantic_dot_extensionality formula-decl nil language
               nil)
              (interp adt-accessor-decl "[(dot?) -> semantic]" language
                      nil)
              (m adt-accessor-decl "[(dot?) -> symbol]" language nil)
              (dot adt-constructor-decl
               "[[symbol, semantic, symbol] -> (dot?)]" language nil)
              (semantic_symbol_extensionality formula-decl nil language
               nil)
              (symbol? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (s shared-adt-accessor-decl "[{x: semantic |
              symbol?(x) OR dot?(x) OR ktype_decl?(x) OR ktype_def?(x)
           OR ktype_ext?(x) OR kconst_decl?(x) OR kconst_def?(x)
           OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   symbol]" language nil)
              (iconst? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (itype? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (ktheory? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (dot? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (OR const-decl "[bool, bool -> bool]" booleans nil)
              (symbol adt-constructor-decl "[symbol -> (symbol?)]"
               language nil)
              (symbol nonempty-type-eq-decl nil language nil)
              (char type-eq-decl nil strings nil)
              (char? adt-recognizer-decl "[character -> boolean]"
               character_adt nil)
              (character type-decl nil character_adt nil)
              (below type-eq-decl nil nat_types nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (divide_size rec-application-judgement
               "{A | size(A) = size(T)}" supertype nil)
              (pretype formula-decl nil language nil)
              (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
              (shift_size application-judgement
               "{B | size(B) = size(A)}" subst nil)
              (mubody def-decl "[pretype, preterm]" supertype nil)
              (π const-decl "preterm" supertype nil)
              (mubody_size rec-application-judgement
               "{x: [pretype, preterm] | size(x`1) = size(T)}"
               supertype nil)
              (μ const-decl "pretype" supertype nil)
              (boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil))
             shostak))
           (pi_TCC1 0
            (pi_TCC1-1 nil 3582054499 ("" (subtype-tcc) nil nil)
             ((preterm formula-decl nil language nil)) nil))
           (pi_TCC2 0
            (pi_TCC2-1 nil 3582054499 ("" (subtype-tcc) nil nil)
             ((preterm formula-decl nil language nil)) nil))
           (pi_TCC3 0
            (pi_TCC3-1 nil 3582054499 ("" (subtype-tcc) nil nil)
             ((preterm formula-decl nil language nil)) nil))
           (pi_TCC4 0
            (pi_TCC4-1 nil 3582054499 ("" (subtype-tcc) nil nil)
             ((μ const-decl "pretype" supertype nil)) nil))
           (pi_TCC5 0
            (pi_TCC5-1 nil 3582054499 ("" (subtype-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil)
              (μ const-decl "pretype" supertype nil)
              (pretype formula-decl nil language nil))
             nil))
           (pi_TCC6 0
            (pi_TCC6-1 nil 3582054499 ("" (subtype-tcc) nil nil)
             ((preterm formula-decl nil language nil)) nil))
           (pi_TCC7 0
            (pi_TCC7-1 nil 3582054499 ("" (subtype-tcc) nil nil)
             ((π const-decl "preterm" supertype nil)
              (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil))
             nil))
           (pi_TCC8 0
            (pi_TCC8-1 nil 3582054499 ("" (subtype-tcc) nil nil)
             ((preterm formula-decl nil language nil)) nil))
           (pi_TCC9 0
            (pi_TCC9-1 nil 3582054499 ("" (subtype-tcc) nil nil)
             ((preterm formula-decl nil language nil)) nil))
           (pi_TCC10 0
            (pi_TCC10-1 nil 3582054499 ("" (subtype-tcc) nil nil)
             ((π const-decl "preterm" supertype nil)
              (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
              (interp formula-decl nil language nil)
              (preterm formula-decl nil language nil)
              (pretype formula-decl nil language nil)
              (pretheory formula-decl nil language nil)
              (expr formula-decl nil language nil)
              (shift_size application-judgement
               "{B | size(B) = size(A)}" subst nil))
             nil))
           (pi 0
            (pi-1 nil 3582054618
             ("" (skosimp* :preds? t)
              (("" (assert)
                (("" (lift-if)
                  (("" (split)
                    (("1" (flatten)
                      (("1" (rewrite "π")
                        (("1" (rewrite "μ")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (rewrite "mubody")
                                (("1"
                                  (assert)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite "π")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (rewrite "π")
                                (("1"
                                  (rewrite "π")
                                  (("1"
                                    (rewrite "μ")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "mubody")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (rewrite "π")
                                    (("1"
                                      (rewrite "μ")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite "π")
                                          (("1"
                                            (rewrite "π")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite "mubody")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite "μ")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite "π")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite "mubody")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        (("1"
                                                          (grind)
                                                          (("1"
                                                            (decompose-equality)
                                                            (("1"
                                                              (grind)
                                                              (("1"
                                                                (apply-extensionality)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (decompose-equality)
                                                            (("1"
                                                              (apply-extensionality)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ((π const-decl "preterm" supertype nil)
              (mubody_size rec-application-judgement
               "{x: [pretype, preterm] | size(x`1) = size(T)}"
               supertype nil)
              (pretype formula-decl nil language nil)
              (mubody def-decl "[pretype, preterm]" supertype nil)
              (shift_size application-judgement
               "{B | size(B) = size(A)}" subst nil)
              (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
              (supertype adt-accessor-decl "[(subtype?) -> semantic]"
                         language nil)
              (subtype? adt-recognizer-decl "[semantic -> boolean]"
                        language nil)
              (μ const-decl "pretype" supertype nil)
              (divide_size rec-application-judgement
               "{A | size(A) = size(T)}" supertype nil)
              (right shared-adt-accessor-decl
               "[{x: semantic | prod?(x) OR pair?(x)} -> semantic]"
               language nil)
              (left shared-adt-accessor-decl
               "[{x: semantic | prod?(x) OR pair?(x)} -> semantic]"
               language nil)
              (pair? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (prod? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (OR const-decl "[bool, bool -> bool]" booleans nil)
              (dot adt-constructor-decl
               "[[symbol, semantic, symbol] -> (dot?)]" language nil)
              (m adt-accessor-decl "[(dot?) -> symbol]" language nil)
              (interp adt-accessor-decl "[(dot?) -> semantic]" language
                      nil)
              (semantic_dot_extensionality formula-decl nil language
               nil)
              (strue const-decl "symbol" language nil)
              (list2finseq const-decl "finseq[T]" list2finseq nil)
              (length def-decl "nat" list_props nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (lam adt-constructor-decl
                   "[[semantic, semantic] -> (lam?)]" language nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (below type-eq-decl nil nat_types nil)
              (character type-decl nil character_adt nil)
              (char? adt-recognizer-decl "[character -> boolean]"
               character_adt nil)
              (char type-eq-decl nil strings nil)
              (symbol nonempty-type-eq-decl nil language nil)
              (symbol? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (symbol adt-constructor-decl "[symbol -> (symbol?)]"
               language nil)
              (dot? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (ktheory? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (itype? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (iconst? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (s shared-adt-accessor-decl "[{x: semantic |
              symbol?(x) OR dot?(x) OR ktype_decl?(x) OR ktype_def?(x)
           OR ktype_ext?(x) OR kconst_decl?(x) OR kconst_def?(x)
           OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   symbol]" language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (< const-decl "bool" reals nil)
              (list type-decl nil list_adt nil)
              (cons? adt-recognizer-decl "[list -> boolean]" list_adt
               nil)
              (cons adt-constructor-decl "[[T, list] -> (cons?)]"
                    list_adt nil)
              (char adt-constructor-decl "[below[256] -> (char?)]"
                    character_adt nil)
              (null? adt-recognizer-decl "[list -> boolean]" list_adt
               nil)
              (null adt-constructor-decl "(null?)" list_adt nil)
              (nth def-decl "T" list_props nil)
              (semantic_lam_extensionality formula-decl nil language
               nil)
              (lam? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (semantic_symbol_extensionality formula-decl nil language
               nil)
              (fun? adt-recognizer-decl "[semantic -> boolean]"
               language nil)
              (range adt-accessor-decl "[(fun?) -> semantic]" language
                     nil)
              (mu_size application-judgement "{A | size(A) = size(T)}"
               supertype nil)
              (boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (semantic type-decl nil language nil)
              (pretype? const-decl "[semantic -> bool]" language nil)
              (pretype type-eq-decl nil language nil))
             shostak)))

