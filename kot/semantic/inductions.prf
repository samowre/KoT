(inductions
 (syntaxic_induction_TCC1 0
  (syntaxic_induction_TCC1-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC2 0
  (syntaxic_induction_TCC2-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC3 0
  (syntaxic_induction_TCC3-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC4 0
  (syntaxic_induction_TCC4-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC5 0
  (syntaxic_induction_TCC5-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC6 0
  (syntaxic_induction_TCC6-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC7 0
  (syntaxic_induction_TCC7-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC8 0
  (syntaxic_induction_TCC8-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC9 0
  (syntaxic_induction_TCC9-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC10 0
  (syntaxic_induction_TCC10-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC11 0
  (syntaxic_induction_TCC11-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC12 0
  (syntaxic_induction_TCC12-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC13 0
  (syntaxic_induction_TCC13-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC14 0
  (syntaxic_induction_TCC14-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC15 0
  (syntaxic_induction_TCC15-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC16 0
  (syntaxic_induction_TCC16-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC17 0
  (syntaxic_induction_TCC17-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC18 0
  (syntaxic_induction_TCC18-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC19 0
  (syntaxic_induction_TCC19-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC20 0
  (syntaxic_induction_TCC20-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC21 0
  (syntaxic_induction_TCC21-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC22 0
  (syntaxic_induction_TCC22-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction_TCC23 0
  (syntaxic_induction_TCC23-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (syntaxic_induction 0
  (syntaxic_induction-1 nil 3582895151
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (induct "x" :name "semantic_induction")
        (("1" (assert) nil nil)
         ("2" (hide-all-but (-1 +)) (("2" (grind) nil nil)) nil)
         ("3" (hide-all-but (-2 +)) (("3" (grind) nil nil)) nil)
         ("4" (hide-all-but (-9 +)) (("4" (grind) nil nil)) nil)
         ("5" (hide-all-but (-10 +)) (("5" (grind) nil nil)) nil)
         ("6" (hide-all-but (-11 +)) (("6" (grind) nil nil)) nil)
         ("7" (hide-all-but (-3 +)) (("7" (grind) nil nil)) nil)
         ("8" (hide-all-but (-4 +)) (("8" (grind) nil nil)) nil)
         ("9" (hide-all-but (-5 +)) (("9" (grind) nil nil)) nil)
         ("10" (hide-all-but (-6 +)) (("10" (grind) nil nil)) nil)
         ("11" (hide-all-but (-7 +)) (("11" (grind) nil nil)) nil)
         ("12" (hide-all-but (-8 +)) (("12" (grind) nil nil)) nil)
         ("13" (hide-all-but (-15 +)) (("13" (grind) nil nil)) nil)
         ("14" (hide-all-but (-16 +))
          (("14" (grind :polarity? t)
            (("14" (use "pretheory_is_context") nil nil)) nil))
          nil)
         ("15" (hide-all-but (-17 +))
          (("15" (grind) (("15" (use "pretheory_is_context") nil nil))
            nil))
          nil)
         ("16" (hide-all-but (-18 +))
          (("16" (grind) (("16" (use "pretheory_is_context") nil nil))
            nil))
          nil)
         ("17" (hide-all-but (-19 +)) (("17" (grind) nil nil)) nil)
         ("18" (use "pretheory_is_context")
          (("18" (hide-all-but (-21 +))
            (("18" (grind)
              (("18" (use "pretheory_is_context") nil nil)) nil))
            nil))
          nil)
         ("19" (hide-all-but (-21 +))
          (("19" (grind) (("19" (use "pretheory_is_context") nil nil))
            nil))
          nil)
         ("20" (hide-all-but (-22 +))
          (("20" (grind) (("20" (use "pretheory_is_context") nil nil))
            nil))
          nil)
         ("21" (hide-all-but (-23 +)) (("21" (grind) nil nil)) nil)
         ("22" (use "pretheory_is_context") (("22" (assert) nil nil))
          nil)
         ("23" (hide-all-but (-13 +)) (("23" (grind) nil nil)) nil)
         ("24" (hide-all-but (-14 +)) (("24" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((kconst_ext2_var!1 skolem-const-decl "semantic" inductions nil)
    (kconst_ext3_var!1 skolem-const-decl "semantic" inductions nil)
    (kconst_def2_var!1 skolem-const-decl "semantic" inductions nil)
    (kconst_def3_var!1 skolem-const-decl "semantic" inductions nil)
    (kconst_def4_var!1 skolem-const-decl "semantic" inductions nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl3_var!1 skolem-const-decl "semantic" inductions nil)
    (kconst_decl2_var!1 skolem-const-decl "semantic" inductions nil)
    (ktype_ext2_var!1 skolem-const-decl "semantic" inductions nil)
    (ktype_def2_var!1 skolem-const-decl "semantic" inductions nil)
    (ktype_def3_var!1 skolem-const-decl "semantic" inductions nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (ktype_decl2_var!1 skolem-const-decl "semantic" inductions nil)
    (context type-eq-decl nil language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (dot2_var!1 skolem-const-decl "semantic" inductions nil)
    (interp type-eq-decl nil language nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (semantic_induction formula-decl nil language nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   shostak))
 (map_induction_TCC1 0
  (map_induction_TCC1-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((map formula-decl nil language nil)) nil))
 (map_induction_TCC2 0
  (map_induction_TCC2-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((map formula-decl nil language nil)) nil))
 (map_induction_TCC3 0
  (map_induction_TCC3-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((map formula-decl nil language nil)) nil))
 (map_induction_TCC4 0
  (map_induction_TCC4-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((map formula-decl nil language nil)) nil))
 (map_induction_TCC5 0
  (map_induction_TCC5-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((map formula-decl nil language nil)) nil))
 (map_induction_TCC6 0
  (map_induction_TCC6-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((map formula-decl nil language nil)) nil))
 (map_induction_TCC7 0
  (map_induction_TCC7-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((map formula-decl nil language nil)) nil))
 (map_induction_TCC8 0
  (map_induction_TCC8-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((map formula-decl nil language nil)) nil))
 (map_induction_TCC9 0
  (map_induction_TCC9-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((map formula-decl nil language nil)) nil))
 (map_induction_TCC10 0
  (map_induction_TCC10-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((map formula-decl nil language nil)) nil))
 (map_induction_TCC11 0
  (map_induction_TCC11-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((map formula-decl nil language nil)) nil))
 (map_induction_TCC12 0
  (map_induction_TCC12-1 nil 3582894727 ("" (subtype-tcc) nil nil)
   ((map formula-decl nil language nil)) nil))
 (map_induction 0
  (map_induction-1 nil 3582894952
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (induct "x" :name "syntaxic_induction")
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (grind) nil nil) ("4" (grind) nil nil)
         ("5" (grind) nil nil) ("6" (grind) nil nil)
         ("7" (grind) nil nil) ("8" (grind) nil nil)
         ("9" (grind) nil nil) ("10" (grind) nil nil)
         ("11" (grind) nil nil) ("12" (grind) nil nil)
         ("13" (grind) nil nil)
         ("14" (hide-all-but (-11 +))
          (("14" (grind :polarity? t)
            (("1" (use "interp_is_map") nil nil)
             ("2" (use "interp_is_map") nil nil))
            nil))
          nil)
         ("15" (hide-all-but (-12 +))
          (("15" (grind :polarity? t)
            (("1" (use "interp_is_map") nil nil)
             ("2" (use "interp_is_map") nil nil))
            nil))
          nil)
         ("16" (grind) nil nil)
         ("17" (hide-all-but (-2 +))
          (("17" (grind :polarity? t)
            (("17" (use "context_is_map") nil nil)) nil))
          nil)
         ("18" (hide-all-but (-3 +))
          (("18" (skosimp* :preds? t)
            (("18" (inst -6 "s!1" "T!1" "Δ!1")
              (("18" (use "context_is_map") (("18" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("19" (hide-all-but (-4 +))
          (("19" (grind :polarity? t)
            (("19" (use "context_is_map") nil nil)) nil))
          nil)
         ("20" (hide-all-but (-5 +))
          (("20" (skosimp* :preds? t)
            (("20" (inst -6 "T!1" "Δ!1")
              (("20" (assert)
                (("20" (use "context_is_map") (("20" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("21" (hide-all-but (-6 +))
          (("21" (skosimp* :preds? t)
            (("21" (inst - "s!1" "T!1" "Δ!1")
              (("21" (assert)
                (("21" (use "context_is_map") (("21" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("22" (hide-all-but (-7 +))
          (("22" (skosimp* :preds? t)
            (("22" (inst - "s!1" "T!1" "a!1" "Δ!1")
              (("22" (assert)
                (("22" (use "context_is_map") (("22" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("23" (hide-all-but (-8 +))
          (("23" (skosimp* :preds? t)
            (("23" (inst - "s!1" "T!1" "Δ!1")
              (("23" (use "context_is_map") (("23" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("24" (hide-all-but (-9 +))
          (("24" (use "context_is_map") (("24" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (context_is_map judgement-tcc nil subtype nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (interp_is_map judgement-tcc nil subtype nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (interp type-eq-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (map formula-decl nil language nil)
    (syntaxic_induction formula-decl nil inductions nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   shostak))
 (expr_induction_TCC1 0
  (expr_induction_TCC1-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC2 0
  (expr_induction_TCC2-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC3 0
  (expr_induction_TCC3-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC4 0
  (expr_induction_TCC4-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC5 0
  (expr_induction_TCC5-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC6 0
  (expr_induction_TCC6-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC7 0
  (expr_induction_TCC7-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC8 0
  (expr_induction_TCC8-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC9 0
  (expr_induction_TCC9-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC10 0
  (expr_induction_TCC10-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC11 0
  (expr_induction_TCC11-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC12 0
  (expr_induction_TCC12-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC13 0
  (expr_induction_TCC13-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC14 0
  (expr_induction_TCC14-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC15 0
  (expr_induction_TCC15-1 nil 3583006869 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC16 0
  (expr_induction_TCC16-1 nil 3583006869 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC17 0
  (expr_induction_TCC17-1 nil 3583006869 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC18 0
  (expr_induction_TCC18-1 nil 3583006869 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC19 0
  (expr_induction_TCC19-1 nil 3583006869 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC20 0
  (expr_induction_TCC20-1 nil 3583006869 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC21 0
  (expr_induction_TCC21-1 nil 3583006869 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction 0
  (expr_induction-1 nil 3582656682
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (induct "x" :name "syntaxic_induction")
        (("1" (assert) nil nil) ("2" (assert) nil nil)
         ("3" (assert) nil nil) ("4" (assert) nil nil)
         ("5" (assert) nil nil) ("6" (assert) nil nil)
         ("7" (assert) nil nil) ("8" (assert) nil nil)
         ("9" (assert) nil nil) ("10" (assert) nil nil)
         ("11" (assert) nil nil) ("12" (assert) nil nil)
         ("13" (assert) nil nil) ("14" (assert) nil nil)
         ("15" (assert) nil nil) ("16" (assert) nil nil)
         ("17" (assert)
          (("17" (skosimp* :preds? t)
            (("17" (assert)
              (("17" (inst -19 "s!1" "Δ!1") (("17" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("18" (assert)
          (("18" (skosimp* :preds? t)
            (("18" (assert)
              (("18" (inst -22 "s!1" "T!1" "Δ!1")
                (("18" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("19" (skosimp* :preds? t)
          (("19" (assert)
            (("19" (inst -21 "s!1 " "Δ!1") (("19" (assert) nil nil))
              nil))
            nil))
          nil)
         ("20" (skosimp* :preds? t) (("20" (assert) nil nil)) nil)
         ("21" (skosimp* :preds? t)
          (("21" (assert)
            (("21" (inst -24 "s!1" "T!1" "Δ!1")
              (("21" (assert) nil nil)) nil))
            nil))
          nil)
         ("22" (skosimp* :preds? t)
          (("22" (assert)
            (("22" (inst -27 "s!1" "T!1" "a!1" "Δ!1")
              (("22" (assert) nil nil)) nil))
            nil))
          nil)
         ("23" (skosimp* :preds? t)
          (("23" (assert)
            (("23" (inst -26 "s!1" "T!1" "Δ!1")
              (("23" (assert) nil nil)) nil))
            nil))
          nil)
         ("24" (assert) nil nil))
        nil))
      nil))
    nil)
   ((semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (syntaxic_induction formula-decl nil inductions nil)
    (expr formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil))
   shostak))
 (context_induction_TCC1 0
  (context_induction_TCC1-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction_TCC2 0
  (context_induction_TCC2-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction_TCC3 0
  (context_induction_TCC3-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction_TCC4 0
  (context_induction_TCC4-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction_TCC5 0
  (context_induction_TCC5-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction_TCC6 0
  (context_induction_TCC6-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction_TCC7 0
  (context_induction_TCC7-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction_TCC8 0
  (context_induction_TCC8-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction_TCC9 0
  (context_induction_TCC9-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction 0
  (context_induction-1 nil 3582655284
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (induct "x")
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (grind) nil nil) ("4" (grind) nil nil)
         ("5" (grind) nil nil) ("6" (grind) nil nil)
         ("7" (grind) nil nil) ("8" (grind) nil nil)
         ("9" (grind) nil nil) ("10" (grind) nil nil)
         ("11" (grind) nil nil) ("12" (grind) nil nil)
         ("13" (grind) nil nil)
         ("14" (skosimp* :preds? t)
          (("14" (rewrite "context" -2)
            (("14" (assert)
              (("14" (inst -4 "ktype_decl1_var!1" "ktype_decl2_var!1")
                (("14" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("15" (skosimp* :preds? t)
          (("15" (rewrite "context" -3)
            (("15" (assert)
              (("15" (flatten)
                (("15" (assert)
                  (("15"
                    (inst -7 "ktype_def1_var!1" "ktype_def2_var!1"
                     "ktype_def3_var!1")
                    (("15" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("16" (skosimp* :preds? t)
          (("16" (rewrite "context" -2)
            (("16" (assert)
              (("16" (inst -6 "ktype_ext1_var!1" "ktype_ext2_var!1")
                (("16" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("17" (skosimp* :preds? t)
          (("17" (assert)
            (("17" (flatten)
              (("17" (assert)
                (("17" (inst -9 "kvar1_var!1" "kvar2_var!1")
                  (("17" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("18" (skosimp* :preds? t)
          (("18" (assert)
            (("18" (flatten)
              (("18" (assert)
                (("18"
                  (inst -10 "kconst_decl1_var!1 " "kconst_decl2_var!1"
                   "kconst_decl3_var!1")
                  (("18" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("19" (skosimp* :preds? t)
          (("19" (assert)
            (("19" (flatten)
              (("19" (assert)
                (("19"
                  (inst -13 "kconst_def1_var!1 " "kconst_def2_var!1"
                   "kconst_def3_var!1" "kconst_def4_var!1")
                  (("19" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("20" (skosimp* :preds? t)
          (("20" (assert)
            (("20" (flatten)
              (("20" (assert)
                (("20"
                  (inst -12 "kconst_ext1_var!1" "kconst_ext2_var!1"
                   "kconst_ext3_var!1")
                  (("20" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("21" (skosimp* :preds? t)
          (("21" (assert)
            (("21" (flatten)
              (("21" (assert)
                (("21"
                  (inst -13 "ktheory1_var!1" "ktheory2_var!1"
                   "ktheory3_var!1")
                  (("21" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("22" (assert) nil nil) ("23" (assert) nil nil)
         ("24" (assert) nil nil))
        nil))
      nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (context formula-decl nil language nil)
    (semantic_induction formula-decl nil language nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   shostak))
 (interp_induction_TCC1 0
  (interp_induction_TCC1-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)) nil))
 (interp_induction_TCC2 0
  (interp_induction_TCC2-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)) nil))
 (interp_induction_TCC3 0
  (interp_induction_TCC3-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)) nil))
 (interp_induction 0
  (interp_induction-1 nil 3582656489
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (induct "x")
        (("1" (assert) nil nil) ("2" (assert) nil nil)
         ("3" (assert) nil nil) ("4" (assert) nil nil)
         ("5" (assert) nil nil) ("6" (assert) nil nil)
         ("7" (assert) nil nil) ("8" (assert) nil nil)
         ("9" (assert) nil nil) ("10" (assert) nil nil)
         ("11" (assert) nil nil) ("12" (assert) nil nil)
         ("13" (assert) nil nil) ("14" (assert) nil nil)
         ("15" (assert) nil nil) ("16" (assert) nil nil)
         ("17" (assert) nil nil) ("18" (assert) nil nil)
         ("19" (assert) nil nil) ("20" (assert) nil nil)
         ("21" (assert) nil nil) ("22" (assert) nil nil)
         ("23" (assert)
          (("23" (skosimp* :preds? t)
            (("23" (assert)
              (("23"
                (inst -6 "itype1_var!1" "itype2_var!1" "itype3_var!1")
                (("23" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("24" (assert)
          (("24" (skosimp* :preds? t)
            (("24" (assert)
              (("24"
                (inst -7 "iconst1_var!1" "iconst2_var!1"
                 "iconst3_var!1")
                (("24" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (interp formula-decl nil language nil)
    (semantic_induction formula-decl nil language nil)
    (interp type-eq-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   shostak))
 (pretype_induction_TCC1 0
  (pretype_induction_TCC1-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((pretype formula-decl nil language nil)) nil))
 (pretype_induction_TCC2 0
  (pretype_induction_TCC2-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((pretype formula-decl nil language nil)) nil))
 (pretype_induction_TCC3 0
  (pretype_induction_TCC3-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((pretype formula-decl nil language nil)) nil))
 (pretype_induction_TCC4 0
  (pretype_induction_TCC4-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((pretype formula-decl nil language nil)) nil))
 (pretype_induction_TCC5 0
  (pretype_induction_TCC5-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((pretype formula-decl nil language nil)) nil))
 (pretype_induction 0
  (pretype_induction-1 nil 3582656208
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (assert)
        (("" (induct "x")
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (assert)
            (("3" (skosimp* :preds? t)
              (("3" (assert)
                (("3" (inst -4 "dot1_var!1" "dot2_var!1" "dot3_var!1")
                  nil nil))
                nil))
              nil))
            nil)
           ("4" (skosimp* :preds? t)
            (("4" (assert)
              (("4" (flatten)
                (("4" (assert)
                  (("4" (inst -7 "fun1_var!1" "fun2_var!1")
                    (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (skosimp* :preds? t)
            (("5" (assert)
              (("5" (flatten)
                (("5" (assert)
                  (("5" (inst -8 "prod1_var!1" "prod2_var!1")
                    (("5" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (assert)
            (("6" (skosimp* :preds? t)
              (("6" (assert)
                (("6" (inst -9 "subtype1_var!1" "subtype2_var!1")
                  (("6" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("7" (assert) nil nil) ("8" (assert) nil nil)
           ("9" (assert) nil nil) ("10" (assert) nil nil)
           ("11" (assert) nil nil) ("12" (assert) nil nil)
           ("13" (assert) nil nil) ("14" (assert) nil nil)
           ("15" (assert) nil nil) ("16" (assert) nil nil)
           ("17" (assert) nil nil) ("18" (assert) nil nil)
           ("19" (assert) nil nil) ("20" (assert) nil nil)
           ("21" (assert) nil nil) ("22" (assert) nil nil)
           ("23" (assert) nil nil) ("24" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (semantic_induction formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil))
   shostak))
 (preterm_induction_TCC1 0
  (preterm_induction_TCC1-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (preterm_induction_TCC2 0
  (preterm_induction_TCC2-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (preterm_induction_TCC3 0
  (preterm_induction_TCC3-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (preterm_induction_TCC4 0
  (preterm_induction_TCC4-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (preterm_induction_TCC5 0
  (preterm_induction_TCC5-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (preterm_induction_TCC6 0
  (preterm_induction_TCC6-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (preterm_induction_TCC7 0
  (preterm_induction_TCC7-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (preterm_induction_TCC8 0
  (preterm_induction_TCC8-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (preterm_induction 0
  (preterm_induction-1 nil 3582656313
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (induct "x")
        (("1" (assert) nil nil) ("2" (assert) nil nil)
         ("3" (skosimp* :preds? t)
          (("3" (assert) (("3" (inst? :polarity? t) nil nil)) nil))
          nil)
         ("4" (skosimp* :preds? t) (("4" (assert) nil nil)) nil)
         ("5" (assert) nil nil)
         ("6" (skosimp* :preds? t) (("6" (assert) nil nil)) nil)
         ("7" (assert) nil nil)
         ("8" (skosimp* :preds? t)
          (("8" (assert)
            (("8" (flatten)
              (("8" (assert)
                (("8" (inst? :polarity? t) (("8" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("9" (assert)
          (("9" (skosimp* :preds? t)
            (("9" (assert)
              (("9" (inst -9 "lam1_var!1" "lam2_var!1")
                (("9" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("10" (skosimp* :preds? t)
          (("10" (assert)
            (("10" (flatten)
              (("10" (assert)
                (("10" (inst -10 "pair1_var!1" "pair2_var!1")
                  (("10" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("11" (skosimp* :preds? t)
          (("11" (assert)
            (("11" (inst -9 "lproj1_var!1") (("11" (assert) nil nil))
              nil))
            nil))
          nil)
         ("12" (skosimp* :preds? t)
          (("12" (assert)
            (("12" (inst -10 "rproj1_var!1") (("12" (assert) nil nil))
              nil))
            nil))
          nil)
         ("13" (assert) nil nil) ("14" (assert) nil nil)
         ("15" (assert) nil nil) ("16" (assert) nil nil)
         ("17" (assert) nil nil) ("18" (assert) nil nil)
         ("19" (assert) nil nil) ("20" (assert) nil nil)
         ("21" (assert) nil nil) ("22" (assert) nil nil)
         ("23" (assert) nil nil) ("24" (assert) nil nil))
        nil))
      nil))
    nil)
   ((pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (interp type-eq-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (preterm formula-decl nil language nil)
    (semantic_induction formula-decl nil language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   shostak)))

