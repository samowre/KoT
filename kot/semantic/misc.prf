(ordinals_props
 (ordinal_of_nat_TCC1 0
  (ordinal_of_nat_TCC1-1 nil 3582470498 ("" (grind) nil nil)
   ((ordinal? def-decl "bool" ordinals nil)) nil))
 (ordinal_of_nat_TCC2 0
  (ordinal_of_nat_TCC2-1 nil 3582470498 ("" (grind) nil nil)
   ((ordinal? def-decl "bool" ordinals nil)) nil))
 (ordinal_of_nat_TCC3 0
  (ordinal_of_nat_TCC3-1 nil 3582645510 ("" (subtype-tcc) nil nil) nil
   nil))
 (ordinal_of_nat_lt 0
  (ordinal_of_nat_lt-1 nil 3582645393 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< def-decl "bool" ordinals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ordinal_of_nat const-decl "ordinal" ordinals_props nil))
   shostak))
 (ordinal_of_nat_le 0
  (ordinal_of_nat_le-1 nil 3582645516
   ("" (grind) (("" (decompose-equality) nil nil)) nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< def-decl "bool" ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" ordinals nil)
    (ordinal_of_nat const-decl "ordinal" ordinals_props nil))
   shostak))
 (omega_TCC1 0
  (omega_TCC1-1 nil 3582470498 ("" (grind) nil nil)
   ((ordinal? def-decl "bool" ordinals nil)
    (ordinal_of_nat const-decl "ordinal" ordinals_props nil))
   nil))
 (lt_exp 0
  (lt_exp-1 nil 3582555182
   (""
    (apply (then
            (invoke (induct-and-simplify "%1") (~ "FORALL (%1: %): %"))
            (invoke (expand "<" $1n) (~ "% < add(%, %, %)")) (grind)))
    nil nil)
   ((ordstruct type-decl nil ordstruct_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ordinal? def-decl "bool" ordinals nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (ordstruct_induction formula-decl nil ordstruct_adt nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   shostak))
 (lt_rest 0
  (lt_rest-1 nil 3582558063
   ("" (grind)
    (("" (typepred! "rest(n0x!1)" :implicit? t) (("" (grind) nil nil))
      nil))
    nil)
   ((rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< def-decl "bool" ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil))
   shostak))
 (max_TCC1 0
  (max_TCC1-1 nil 3582566980 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (> const-decl "bool" ordinals nil)
    (>= const-decl "bool" ordinals nil))
   nil))
 (max_TCC2 0
  (max_TCC2-1 nil 3582566980
   ("" (grind-with-lemmas :lemmas "ordinal_trichotomy") nil nil)
   ((ordinal_trichotomy formula-decl nil ordinals nil)
    (> const-decl "bool" ordinals nil)
    (>= const-decl "bool" ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   nil))
 (min_TCC1 0
  (min_TCC1-1 nil 3582566980 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (<= const-decl "bool" ordinals nil))
   nil))
 (min_TCC2 0
  (min_TCC2-1 nil 3582566980
   ("" (grind-with-lemmas :lemmas "ordinal_trichotomy") nil nil)
   ((ordinal_trichotomy formula-decl nil ordinals nil)
    (<= const-decl "bool" ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   nil))
 (nzordinal_max 0
  (nzordinal_max-1 nil 3582566980
   ("" (skosimp* :preds? t)
    (("" (expand "max")
      (("" (case "x!1 > y!1")
        (("1" (assert)
          (("1" (expand ">=")
            (("1" (expand ">") (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (assert)
          (("2" (expand ">=")
            (("2" (flatten)
              (("2" (use "ordinal_trichotomy")
                (("2" (assert)
                  (("2" (expand ">") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (>= const-decl "bool" ordinals nil)
    (> const-decl "bool" ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (/= const-decl "boolean" notequal nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (nzordinal type-eq-decl nil ordinals_props nil))
   nil))
 (nzordinal_min 0
  (nzordinal_min-1 nil 3582566980
   ("" (skosimp* :preds? t)
    (("" (expand "min")
      (("" (case "x!1 < y!1")
        (("1" (assert)
          (("1" (expand "<=") (("1" (propax) nil nil)) nil)) nil)
         ("2" (assert)
          (("2" (expand "<=")
            (("2" (flatten)
              (("2" (use "ordinal_trichotomy") (("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min const-decl "{z | z <= x AND z <= y}" ordinals_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (<= const-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (/= const-decl "boolean" notequal nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (nzordinal type-eq-decl nil ordinals_props nil))
   nil))
 (min_le 0
  (min_le-1 nil 3582567211
   ("" (grind)
    (("1" (use "ordinal_transitive" :polarity? t)
      (("1" (assert) nil nil)) nil)
     ("2" (use "ordinal_transitive" :polarity? t)
      (("2" (assert)
        (("2" (use "ordinal_trichotomy" :polarity? t)
          (("2" (assert) nil nil)) nil))
        nil))
      nil)
     ("3" (use "ordinal_trichotomy" :polarity? t)
      (("3" (assert) nil nil)) nil))
    nil)
   ((ordinal_trichotomy formula-decl nil ordinals nil)
    (ordinal_transitive formula-decl nil ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (<= const-decl "bool" ordinals nil)
    (min const-decl "{z | z <= x AND z <= y}" ordinals_props nil))
   shostak))
 (min_lt 0
  (min_lt-1 nil 3582567343
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy"))
    (("" (use "ordinal_transitive" :polarity? t)
      (("" (use "ordinal_transitive" :polarity? t :if-match all)
        (("" (assert)
          (("" (lemma "ordinal_transitive")
            (("" (inst -1 "b!1" "a!1" "c!1") (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min const-decl "{z | z <= x AND z <= y}" ordinals_props nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (ordinal_transitive formula-decl nil ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (min_ge 0
  (min_ge-1 nil 3582567523
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy"))
    (("" (lemma "ordinal_transitive")
      (("" (inst -1 "c!1" "b!1" "a!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((>= const-decl "bool" ordinals nil)
    (min const-decl "{z | z <= x AND z <= y}" ordinals_props nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (ordinal_transitive formula-decl nil ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (min_gt 0
  (min_gt-1 nil 3582567579
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy"))
    (("" (lemma "ordinal_transitive")
      (("" (inst -1 "c!1" "b!1" "a!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((> const-decl "bool" ordinals nil)
    (min const-decl "{z | z <= x AND z <= y}" ordinals_props nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (ordinal_transitive formula-decl nil ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (le_min 0
  (le_min-1 nil 3582567658
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy"))
    (("" (lemma "ordinal_transitive")
      (("" (inst -1 "a!1" "c!1" "b!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((<= const-decl "bool" ordinals nil)
    (min const-decl "{z | z <= x AND z <= y}" ordinals_props nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (ordinal_transitive formula-decl nil ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (lt_min 0
  (lt_min-1 nil 3582567678
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy"))
    (("" (lemma "ordinal_transitive")
      (("" (inst -1 "a!1" "c!1" "b!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((min const-decl "{z | z <= x AND z <= y}" ordinals_props nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (ordinal_transitive formula-decl nil ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (ge_min 0
  (ge_min-1 nil 3582567689
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy"))
    (("" (lemma "ordinal_transitive")
      (("" (inst -1 "c!1" "b!1" "a!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((>= const-decl "bool" ordinals nil)
    (min const-decl "{z | z <= x AND z <= y}" ordinals_props nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (ordinal_transitive formula-decl nil ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (gt_min 0
  (gt_min-1 nil 3582567736
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy"))
    (("" (lemma "ordinal_transitive")
      (("" (inst -1 "c!1" "b!1" "a!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((> const-decl "bool" ordinals nil)
    (min const-decl "{z | z <= x AND z <= y}" ordinals_props nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (ordinal_transitive formula-decl nil ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (max_le 0
  (max_le-1 nil 3582567753
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy"))
    (("" (lemma "ordinal_transitive")
      (("" (inst -1 "a!1" "b!1" "c!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((<= const-decl "bool" ordinals nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (> const-decl "bool" ordinals nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (ordinal_transitive formula-decl nil ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (max_lt 0
  (max_lt-1 nil 3582567769
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy" "ordinal_transitive"))
    nil nil)
   ((ordinal_transitive formula-decl nil ordinals nil)
    (> const-decl "bool" ordinals nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   shostak))
 (max_ge 0
  (max_ge-1 nil 3582567823
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy" "ordinal_transitive"))
    nil nil)
   ((ordinal_transitive formula-decl nil ordinals nil)
    (> const-decl "bool" ordinals nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (>= const-decl "bool" ordinals nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   shostak))
 (max_gt 0
  (max_gt-1 nil 3582567829
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy" "ordinal_transitive"))
    nil nil)
   ((ordinal_transitive formula-decl nil ordinals nil)
    (> const-decl "bool" ordinals nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   shostak))
 (le_max 0
  (le_max-1 nil 3582567832
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy" "ordinal_transitive"))
    nil nil)
   ((ordinal_transitive formula-decl nil ordinals nil)
    (> const-decl "bool" ordinals nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (<= const-decl "bool" ordinals nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   shostak))
 (lt_max 0
  (lt_max-1 nil 3582567834
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy" "ordinal_transitive"))
    nil nil)
   ((ordinal_transitive formula-decl nil ordinals nil)
    (> const-decl "bool" ordinals nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   shostak))
 (ge_max 0
  (ge_max-1 nil 3582567836
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy" "ordinal_transitive"))
    nil nil)
   ((ordinal_transitive formula-decl nil ordinals nil)
    (> const-decl "bool" ordinals nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (>= const-decl "bool" ordinals nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   shostak))
 (gt_max 0
  (gt_max-1 nil 3582567839
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy" "ordinal_transitive"))
    nil nil)
   ((ordinal_transitive formula-decl nil ordinals nil)
    (> const-decl "bool" ordinals nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   shostak))
 (strict_lt 0
  (strict_lt-1 nil 3582567841
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy" "ordinal_transitive"
      "ordinal_irreflexive"))
    nil nil)
   ((ordinal_trichotomy formula-decl nil ordinals nil)
    (ordinal_irreflexive formula-decl nil ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (strict_total_order? const-decl "bool" orders nil)
    (trichotomous? const-decl "bool" orders nil)
    (strict_order? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (irreflexive? const-decl "bool" relations nil)
    (restrict const-decl "R" restrict nil)
    (ordinal_transitive formula-decl nil ordinals nil))
   shostak))
 (total_le 0
  (total_le-1 nil 3582567853
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy" "ordinal_transitive"
      "ordinal_irreflexive"))
    nil nil)
   ((ordinal_trichotomy formula-decl nil ordinals nil)
    (ordinal_irreflexive formula-decl nil ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (total_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" ordinals nil)
    (ordinal_transitive formula-decl nil ordinals nil))
   shostak))
 (strict_gt 0
  (strict_gt-1 nil 3582567856
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy" "ordinal_transitive"
      "ordinal_irreflexive"))
    nil nil)
   ((ordinal_trichotomy formula-decl nil ordinals nil)
    (ordinal_irreflexive formula-decl nil ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (strict_total_order? const-decl "bool" orders nil)
    (trichotomous? const-decl "bool" orders nil)
    (strict_order? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (irreflexive? const-decl "bool" relations nil)
    (restrict const-decl "R" restrict nil)
    (> const-decl "bool" ordinals nil)
    (ordinal_transitive formula-decl nil ordinals nil))
   shostak))
 (total_ge 0
  (total_ge-1 nil 3582567858
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy" "ordinal_transitive"
      "ordinal_irreflexive"))
    nil nil)
   ((ordinal_trichotomy formula-decl nil ordinals nil)
    (ordinal_irreflexive formula-decl nil ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (total_order? const-decl "bool" orders nil)
    (dichotomous? const-decl "bool" orders nil)
    (partial_order? const-decl "bool" orders nil)
    (antisymmetric? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (restrict const-decl "R" restrict nil)
    (>= const-decl "bool" ordinals nil)
    (ordinal_transitive formula-decl nil ordinals nil))
   shostak))
 (lt_cut 0
  (lt_cut-1 nil 3582567861
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy" "ordinal_transitive"
      "ordinal_irreflexive"))
    nil nil)
   ((ordinal_transitive formula-decl nil ordinals nil)
    (ordinal_irreflexive formula-decl nil ordinals nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   shostak))
 (le_cut 0
  (le_cut-1 nil 3582567863
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy" "ordinal_transitive"
      "ordinal_irreflexive"))
    nil nil)
   ((ordinal_transitive formula-decl nil ordinals nil)
    (<= const-decl "bool" ordinals nil)
    (ordinal_irreflexive formula-decl nil ordinals nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   shostak))
 (gt_cut 0
  (gt_cut-1 nil 3582567865
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy" "ordinal_transitive"
      "ordinal_irreflexive"))
    nil nil)
   ((ordinal_transitive formula-decl nil ordinals nil)
    (> const-decl "bool" ordinals nil)
    (ordinal_irreflexive formula-decl nil ordinals nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   shostak))
 (ge_cut 0
  (ge_cut-1 nil 3582567867
   (""
    (grind-with-lemmas :polarity? t :lemmas
     ("ordinal_transitive" "ordinal_trichotomy" "ordinal_transitive"
      "ordinal_irreflexive"))
    nil nil)
   ((ordinal_transitive formula-decl nil ordinals nil)
    (>= const-decl "bool" ordinals nil)
    (ordinal_irreflexive formula-decl nil ordinals nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   shostak))
 (plus_TCC1 0
  (plus_TCC1-1 nil 3582470498 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (>= const-decl "bool" ordinals nil))
   nil))
 (plus_TCC2 0
  (plus_TCC2-1 nil 3582470498 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (>= const-decl "bool" ordinals nil))
   nil))
 (plus_TCC3 0
  (plus_TCC3-1 nil 3582470498 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (>= const-decl "bool" ordinals nil))
   nil))
 (plus_TCC4 0
  (plus_TCC4-1 nil 3582470498 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (>= const-decl "bool" ordinals nil)
    (> const-decl "bool" ordinals nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil))
   nil))
 (plus_TCC5 0
  (plus_TCC5-1 nil 3582470498 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (>= const-decl "bool" ordinals nil)
    (> const-decl "bool" ordinals nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil))
   nil))
 (plus_TCC6 0
  (plus_TCC6-1 nil 3582470498
   ("" (grind-with-lemmas :lemmas "ordinal_antisym") nil nil)
   ((ordinal_antisym formula-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (>= const-decl "bool" ordinals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" ordinals nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil))
 (plus_TCC7 0
  (plus_TCC7-1 nil 3582470498 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< def-decl "bool" ordinals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ordinal? def-decl "bool" ordinals nil)
    (>= const-decl "bool" ordinals nil)
    (> const-decl "bool" ordinals nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil))
   nil))
 (plus_TCC8 0
  (plus_TCC8-1 nil 3582470498 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (plus_TCC9 0
  (plus_TCC9-1 nil 3582472932 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ordinal? def-decl "bool" ordinals nil))
   nil))
 (plus_TCC10 0
  (plus_TCC10-1 nil 3582552885 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (reduce adt-def-decl "[ordstruct -> range]"
      ordstruct_adt_reduce nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size const-decl "[ordstruct -> nat]" ordinals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (plus_TCC11 0
  (plus_TCC11-1 nil 3582552885
   ("" (auto-rewrite "ordinal?")
    (("" (skosimp* :preds? t)
      (("" (assert)
        (("" (assert)
          (("" (flatten)
            (("" (lift-if)
              (("" (assert)
                (("" (rewrites (-10 -11) :dont-delete? t)
                  (("" (assert)
                    (("" (use "ordinal_trichotomy" :polarity? t)
                      (("" (assert)
                        (("" (inst?)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (lift-if)
                                (("1"
                                  (assert)
                                  (("1"
                                    (case "v!1 = zero")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (typepred!
                                                 "v1!1(v!1, add(j!1, z!1, w!1))"
                                                 :implicit?
                                                 t)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite
                                                     -10
                                                     :dont-delete?
                                                     t)
                                                    (("2"
                                                      (split 4)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "max_lt")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand ">=")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "<"
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (decompose-equality
                                                                     3)
                                                                    (("2"
                                                                      (typepred
                                                                       "v1!1(v!1, add(j!1, z!1, w!1))")
                                                                      (("2"
                                                                        (expand
                                                                         ">=")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand ">=")
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (expand
                                                             "<"
                                                             1)
                                                            (("3"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (assert)
                                                        (("4"
                                                          (expand
                                                           "max"
                                                           1)
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (expand
                                                               ">")
                                                              (("4"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite -10)
                            (("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (size const-decl "[ordstruct -> nat]" ordinals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (max_lt formula-decl nil ordinals_props nil)
    (ordstruct_add_extensionality formula-decl nil ordstruct_adt nil)
    (> const-decl "bool" ordinals nil) (< def-decl "bool" ordinals nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (reduce adt-def-decl "[ordstruct -> range]"
      ordstruct_adt_reduce nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (plus_zero_TCC1 0
  (plus_zero_TCC1-1 nil 3582552172 ("" (grind) nil nil)
   ((ordinal? def-decl "bool" ordinals nil)) nil))
 (plus_zero 0
  (plus_zero-1 nil 3582491009
   ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   shostak))
 (plus__zero 0
  (plus__zero-1 nil 3582491036
   ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   shostak))
 (zero_plus 0
  (zero_plus-1 nil 3582583491
   ("" (skosimp* :preds? t)
    (("" (typepred "x!1 + y!1")
      (("" (expand ">=" -2)
        (("" (assert)
          (("" (rewrite -9)
            (("" (expand "<" -2) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< def-decl "bool" ordinals nil) (> const-decl "bool" ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   shostak))
 (exp_plus_TCC1 0
  (exp_plus_TCC1-1 nil 3582552172 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil))
   nil))
 (exp_plus_TCC2 0
  (exp_plus_TCC2-1 nil 3582552172 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil))
   nil))
 (exp_plus 0
  (exp_plus-1 nil 3582555311
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (invoke (typepred "%1") (~ "% + %")) (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil))
   shostak))
 (plus_add 0
  (plus_add-1 nil 3582556974
   ("" (skosimp* :preds? t)
    (("" (expand "+" 1 1)
      (("" (expand ">")
        (("" (assert)
          (("" (assert)
            (("" (use "ordinal_antisym")
              (("1" (assert)
                (("1" (decompose-equality)
                  (("1"
                    (invoke (case "%1 = %2") (~ 1 "% + %1 = % + %2"))
                    (("1" (assert) nil nil)
                     ("2" (decompose-equality) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ordinal_antisym formula-decl nil ordinals nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" ordinals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (ordstruct_add_extensionality formula-decl nil ordstruct_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil))
   shostak))
 (plus_lt 0
  (plus_lt-1 nil 3582557043
   ("" (skosimp* :preds? t)
    (("" (expand "+")
      (("" (assert) (("" (decompose-equality) nil nil)) nil)) nil))
    nil)
   ((+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (ordstruct_add_extensionality formula-decl nil ordstruct_adt nil)
    (rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil))
   shostak))
 (plus_add_add 0
  (plus_add_add-1 nil 3582557061
   ("" (skosimp* :preds? t)
    (("" (expand "+" 1 1)
      (("" (use "ordinal_irreflexive") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ordinal_irreflexive formula-decl nil ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil))
   shostak))
 (lt__plus 0
  (lt__plus-1 nil 3582557304
   ("" (induct "x" :name "ordinal_induction")
    (("" (skosimp* :preds? t)
      (("" (case "r!1 = zero")
        (("1" (rewrite -1) (("1" (assert) nil nil)) nil)
         ("2" (assert)
          (("2" (expand "+" 2)
            (("2" (assert)
              (("2" (case "y!1 = zero")
                (("1" (rewrite -1)
                  (("1" (assert)
                    (("1" (extensionality "(nonzero?)")
                      (("1"
                        (inst -1 "r!1"
                         " add(coef(r!1), exp(r!1), rest(r!1))")
                        (("1" (assert)
                          (("1" (rewrite -1 :dir rl)
                            (("1"
                              (use "ordinal_irreflexive" :polarity? t)
                              (("1"
                                (use
                                 "ordinal_irreflexive"
                                 :polarity?
                                 t)
                                (("1"
                                  (inst -1 "zero")
                                  (("1"
                                    (inst -1 "r!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (lift-if)
                    (("2" (split +)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "<" 1 2)
                            (("1" (assert)
                              (("1"
                                (expand "<" 1)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split +)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "<" 1 2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "<" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (expand "<" 2 2)
                                (("2"
                                  (bddsimp)
                                  (("1"
                                    (inst -4 "rest(r!1)")
                                    (("1"
                                      (use "lt_rest")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -5 "y!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (extensionality
                                               "(nonzero?)")
                                              (("1"
                                                (inst
                                                 -1
                                                 "y!1"
                                                 " add(coef(y!1), exp(y!1), rest(y!1))")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil)
                                   ("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (lt_rest formula-decl nil ordinals_props nil)
    (ordstruct_add_extensionality formula-decl nil ordstruct_adt nil)
    (ordinal_irreflexive formula-decl nil ordinals nil)
    (rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (plus_zero formula-decl nil ordinals_props nil)
    (ordinal_induction formula-decl nil ordinals nil)
    (+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (< def-decl "bool" ordinals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil))
   shostak))
 (both_sides_plus 0
  (both_sides_plus-1 nil 3582568870
   ("" (induct "x" :name "ordinal_induction")
    (("" (skosimp* :preds? t)
      (("" (bddsimp)
        (("1" (expand "+ " -5)
          (("1" (assert)
            (("1" (lift-if)
              (("1" (assert)
                (("1" (lift-if)
                  (("1" (lift-if)
                    (("1" (lift-if)
                      (("1" (lift-if)
                        (("1" (bddsimp)
                          (("1"
                            (invoke (decompose-equality $1n)
                             (~ "add(%, %, %) = add(%, %, %)"))
                            (("1"
                              (invoke (rewrites $1n)
                               (~ "exp(%) = exp(%)"))
                              (("1"
                                (use
                                 "ordinal_irreflexive"
                                 :polarity?
                                 t)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (invoke (decompose-equality $1n)
                             (~ "add(%, %, %) = add(%, %, %)"))
                            (("2"
                              (invoke (rewrites $1n)
                               (~ "exp(%) = exp(%)"))
                              (("2"
                                (use
                                 "ordinal_irreflexive"
                                 :polarity?
                                 t)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3"
                            (invoke (decompose-equality $1n)
                             (~ "add(%, %, %) = add(%, %, %)"))
                            (("3"
                              (invoke (rewrites $1n)
                               (~ "exp(%) = exp(%)"))
                              (("3"
                                (use
                                 "ordinal_irreflexive"
                                 :polarity?
                                 t)
                                (("3"
                                  (assert)
                                  (("3"
                                    (use "lt__plus" :polarity? t)
                                    (("3"
                                      (inst?)
                                      (("3"
                                        (expand "<" -1 1)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (rewrite -3 :dir rl)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4"
                            (invoke (decompose-equality $1n)
                             (~ "add(%, %, %) = add(%, %, %)"))
                            (("4"
                              (invoke (rewrites $1n)
                               (~ "exp(%) = exp(%)"))
                              (("4"
                                (use
                                 "ordinal_irreflexive"
                                 :polarity?
                                 t)
                                (("4"
                                  (assert)
                                  (("4"
                                    (use
                                     "ordinal_irreflexive"
                                     :polarity?
                                     t)
                                    (("4" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5"
                            (invoke (decompose-equality $1n)
                             (~ "add(%, %, %) = add(%, %, %)"))
                            (("5"
                              (invoke (rewrites $1n :dont-delete? t)
                               (~ "exp(%) = exp(%)"))
                              (("5"
                                (use
                                 "ordinal_irreflexive"
                                 :polarity?
                                 t)
                                (("5"
                                  (invoke
                                   (rewrites $1n :dont-delete? t)
                                   (~ "exp(%) = exp(%)"))
                                  (("5"
                                    (use
                                     "ordinal_irreflexive"
                                     :polarity?
                                     t)
                                    (("5"
                                      (assert)
                                      (("5"
                                        (invoke
                                         (rewrites $1n :dont-delete? t)
                                         (~ "exp(%) = exp(%)"))
                                        (("5"
                                          (use
                                           "ordinal_irreflexive"
                                           :polarity?
                                           t)
                                          (("5"
                                            (invoke
                                             (rewrites
                                              $1n
                                              :dont-delete?
                                              t)
                                             (~ "exp(%) = exp(%)"))
                                            (("5"
                                              (use
                                               "ordinal_irreflexive"
                                               :polarity?
                                               t)
                                              (("5"
                                                (extensionality
                                                 "(nonzero?)")
                                                (("5"
                                                  (assert)
                                                  (("5"
                                                    (inst
                                                     -1
                                                     "y!1"
                                                     "z!1")
                                                    (("5"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("6"
                            (invoke (decompose-equality $1n)
                             (~ "add(%, %, %) = add(%, %, %)"))
                            (("6"
                              (invoke (rewrites $1n :dont-delete? t)
                               (~ "exp(%) = exp(%)"))
                              (("6"
                                (use
                                 "ordinal_irreflexive"
                                 :polarity?
                                 t)
                                (("6"
                                  (extensionality "(nonzero?)")
                                  (("6" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("7"
                            (invoke (decompose-equality $1n)
                             (~ "add(%, %, %) = add(%, %, %)"))
                            (("7"
                              (invoke (rewrites $1n :dont-delete? t)
                               (~ "exp(%) = exp(%)"))
                              (("7"
                                (use
                                 "ordinal_irreflexive"
                                 :polarity?
                                 t)
                                (("7"
                                  (extensionality "(nonzero?)")
                                  (("7"
                                    (assert)
                                    (("7"
                                      (use "lt__plus" :polarity? t)
                                      (("7"
                                        (inst?)
                                        (("7"
                                          (expand "<" -1 1)
                                          (("7"
                                            (assert)
                                            (("7" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("8"
                            (invoke (decompose-equality $1n)
                             (~ "add(%, %, %) = add(%, %, %)"))
                            (("8"
                              (invoke (rewrites $1n :dont-delete? t)
                               (~ "exp(%) = exp(%)"))
                              (("8"
                                (use
                                 "ordinal_irreflexive"
                                 :polarity?
                                 t)
                                (("8"
                                  (extensionality "(nonzero?)")
                                  (("8" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("9"
                            (invoke (decompose-equality $1n)
                             (~ "add(%, %, %) = add(%, %, %)"))
                            (("9"
                              (invoke (rewrites $1n :dont-delete? t)
                               (~ "exp(%) = exp(%)"))
                              (("9"
                                (use
                                 "ordinal_irreflexive"
                                 :polarity?
                                 t)
                                (("9"
                                  (extensionality "(nonzero?)")
                                  (("9"
                                    (assert)
                                    (("9"
                                      (use "lt__plus")
                                      (("9"
                                        (expand "<" -1 1)
                                        (("9"
                                          (use
                                           "ordinal_irreflexive"
                                           :polarity?
                                           t)
                                          (("9"
                                            (rewrite -6)
                                            (("9"
                                              (use
                                               "ordinal_irreflexive"
                                               :polarity?
                                               t)
                                              (("9" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("10"
                            (invoke (decompose-equality $1n)
                             (~ "add(%, %, %) = add(%, %, %)"))
                            (("10"
                              (invoke (rewrites $1n :dont-delete? t)
                               (~ "exp(%) = exp(%)"))
                              (("10"
                                (use
                                 "ordinal_irreflexive"
                                 :polarity?
                                 t)
                                (("10"
                                  (extensionality "(nonzero?)")
                                  (("10" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("11"
                            (invoke (decompose-equality $1n)
                             (~ "add(%, %, %) = add(%, %, %)"))
                            (("11"
                              (invoke (rewrites $1n :dont-delete? t)
                               (~ "exp(%) = exp(%)"))
                              (("11"
                                (use
                                 "ordinal_irreflexive"
                                 :polarity?
                                 t)
                                (("11"
                                  (extensionality "(nonzero?)")
                                  (("11"
                                    (assert)
                                    (("11"
                                      (inst -1 "y!1" "z!1")
                                      (("11" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("12"
                            (invoke (decompose-equality $1n)
                             (~ "add(%, %, %) = add(%, %, %)"))
                            (("12"
                              (invoke (rewrites $1n :dont-delete? t)
                               (~ "exp(%) = exp(%)"))
                              (("12"
                                (use
                                 "ordinal_irreflexive"
                                 :polarity?
                                 t)
                                (("12"
                                  (extensionality "(nonzero?)")
                                  (("12" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("13"
                            (invoke (decompose-equality $1n)
                             (~ "add(%, %, %) = add(%, %, %)"))
                            (("13"
                              (invoke (rewrites $1n :dont-delete? t)
                               (~ "exp(%) = exp(%)"))
                              (("13"
                                (use
                                 "ordinal_irreflexive"
                                 :polarity?
                                 t)
                                (("13"
                                  (extensionality "(nonzero?)")
                                  (("13"
                                    (assert)
                                    (("13"
                                      (use
                                       "ordinal_irreflexive"
                                       :polarity?
                                       t)
                                      (("13" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("14"
                            (invoke (decompose-equality $1n)
                             (~ "add(%, %, %) = add(%, %, %)"))
                            (("14"
                              (invoke (rewrites $1n :dont-delete? t)
                               (~ "exp(%) = exp(%)"))
                              (("14"
                                (use
                                 "ordinal_irreflexive"
                                 :polarity?
                                 t)
                                (("14"
                                  (extensionality "(nonzero?)")
                                  (("14" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("15" (decompose-equality -5)
                            (("15" (assert)
                              (("15"
                                (inst -5 "rest(r!1)")
                                (("15"
                                  (use "lt_rest")
                                  (("15"
                                    (assert)
                                    (("15"
                                      (inst
                                       -6
                                       "add(coef(y!1), exp(y!1), rest(y!1))"
                                       "add(coef(z!1), exp(z!1), rest(z!1))")
                                      (("15"
                                        (assert)
                                        (("15"
                                          (decompose-equality -6)
                                          (("15"
                                            (extensionality
                                             "(nonzero?)")
                                            (("15"
                                              (inst -1 "y!1" "z!1")
                                              (("15" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< def-decl "bool" ordinals nil)
    (ordinal_irreflexive formula-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (lt__plus formula-decl nil ordinals_props nil)
    (ordstruct_add_extensionality formula-decl nil ordstruct_adt nil)
    (lt_rest formula-decl nil ordinals_props nil)
    (ordinal_induction formula-decl nil ordinals nil)
    (+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil))
   shostak))
 (idem_add_is_zero 0
  (idem_add_is_zero-1 nil 3582570139
   ("" (induct "x" :name "ordinal_induction")
    (("" (skosimp* :preds? t)
      (("" (expand "+" -3)
        (("" (assert)
          (("" (use "ordinal_irreflexive" :polarity? t)
            (("" (inst -1 "exp(r!1)")
              (("1" (assert) (("1" (decompose-equality) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (ordinal_irreflexive formula-decl nil ordinals nil)
    (ordinal_induction formula-decl nil ordinals nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (>= const-decl "bool" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil))
   shostak))
 (both_sides_plus_lt1 0
  (both_sides_plus_lt1-1 nil 3582570183
   ("" (induct "y" :name "ordinal_induction")
    (("" (skosimp* :preds? t)
      (("" (expand "+" -5)
        (("" (assert)
          (("" (lift-if)
            (("" (lift-if)
              (("" (lift-if)
                (("" (lift-if)
                  (("" (lift-if)
                    (("" (lift-if)
                      (("" (bddsimp)
                        (("1" (assert)
                          (("1"
                            (use "ordinal_irreflexive" :polarity? t)
                            nil nil))
                          nil)
                         ("2" (expand "<" 2) (("2" (assert) nil nil))
                          nil)
                         ("3" (expand "<" 3) (("3" (assert) nil nil))
                          nil)
                         ("4" (expand "<") (("4" (assert) nil nil))
                          nil)
                         ("5" (expand "<") (("5" (assert) nil nil))
                          nil)
                         ("6" (expand "<" -7) (("6" (assert) nil nil))
                          nil)
                         ("7" (expand "<" -7)
                          (("7" (assert)
                            (("7"
                              (use "ordinal_irreflexive" :polarity? t)
                              (("1"
                                (assert)
                                (("1"
                                  (use
                                   "ordinal_irreflexive"
                                   :polarity?
                                   t)
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("8" (expand "<" -7)
                          (("8" (assert) (("8" (assert) nil nil)) nil))
                          nil)
                         ("9" (expand "<" -6) (("9" (assert) nil nil))
                          nil)
                         ("10" (assert)
                          (("10" (expand "<" -6)
                            (("10" (grind) nil nil)) nil))
                          nil)
                         ("11" (expand "<" -7)
                          (("11" (assert)
                            (("11"
                              (use "ordinal_irreflexive" :polarity? t)
                              (("1"
                                (assert)
                                (("1"
                                  (use
                                   "ordinal_irreflexive"
                                   :polarity?
                                   t)
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("12" (assert)
                          (("12" (expand "<" -7)
                            (("12" (propax) nil nil)) nil))
                          nil)
                         ("13" (assert)
                          (("13" (expand "<" -6)
                            (("13" (propax) nil nil)) nil))
                          nil)
                         ("14" (assert)
                          (("14" (expand "<" -7)
                            (("14" (assert)
                              (("14"
                                (rewrite -5 :dir rl)
                                (("14"
                                  (expand "<" 5)
                                  (("14" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("15" (assert)
                          (("15" (expand "<" -7)
                            (("15" (assert)
                              (("15"
                                (split -7)
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (use
                                     "ordinal_irreflexive"
                                     :polarity?
                                     t)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("16" (assert)
                          (("16" (expand "<" -6)
                            (("16" (propax) nil nil)) nil))
                          nil)
                         ("17" (assert)
                          (("17" (expand "<" -6)
                            (("17" (assert)
                              (("17"
                                (use
                                 "ordinal_irreflexive"
                                 :polarity?
                                 t)
                                (("17"
                                  (assert)
                                  (("17"
                                    (use "lt_cut" :polarity? t)
                                    (("17"
                                      (lemma "lt_cut")
                                      (("17"
                                        (assert)
                                        (("17"
                                          (expand "<" 6)
                                          (("17"
                                            (assert)
                                            (("17"
                                              (use
                                               "lt_cut"
                                               :polarity?
                                               t)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "exp(x!1)"
                                                   "exp(z!1)"
                                                   "exp(r!1)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("4"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil)
                                               ("3" (grind) nil nil)
                                               ("4" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("18" (assert)
                          (("18" (expand "<" -6)
                            (("18" (assert)
                              (("18"
                                (expand "<" 7)
                                (("18" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("19" (assert)
                          (("19" (expand "<" -5)
                            (("19" (split -5)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "<" 8)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "<" 8)
                                (("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (flatten)
                                (("3"
                                  (assert)
                                  (("3"
                                    (inst -7 "rest(r!1)")
                                    (("3"
                                      (use "lt_rest")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (inst
                                           -8
                                           "rest(x!1)"
                                           "add(coef(z!1), exp(z!1), rest(z!1)) ")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (expand "<" 8)
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (lt_rest formula-decl nil ordinals_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (lt_cut formula-decl nil ordinals_props nil)
    (rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ordinal_irreflexive formula-decl nil ordinals nil)
    (ordinal_induction formula-decl nil ordinals nil)
    (+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (>= const-decl "bool" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< def-decl "bool" ordinals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil))
   shostak))
 (both_sides_plus_lt2 0
  (both_sides_plus_lt2-1 nil 3582571910
   ("" (induct "z" :name "ordinal_induction")
    (("" (skosimp* :preds? t)
      (("" (lemma "lt__plus")
        (("" (case "r!1 = zero")
          (("1" (rewrite -1) (("1" (assert) nil nil)) nil)
           ("2" (case "y!1 = zero")
            (("1" (assert)
              (("1" (rewrite -1)
                (("1" (assert)
                  (("1" (typepred "r!1 + x!1")
                    (("1" (assert)
                      (("1" (expand ">=" -2)
                        (("1" (split -2)
                          (("1" (assert)
                            (("1" (expand "<" 2 1)
                              (("1"
                                (use "ordinal_antisym")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (rewrite -1 :dir rl)
                              (("2"
                                (use "ordinal_irreflexive")
                                (("2"
                                  (use "ordinal_irreflexive")
                                  (("2"
                                    (expand "<" 4 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand ">=" -2)
                                        (("2"
                                          (case "x!1 = zero")
                                          (("1" (grind) nil nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (case "x!1 = zero")
                (("1" (assert)
                  (("1" (rewrite -1 :dont-delete? t)
                    (("1" (assert)
                      (("1" (inst -2 "r!1" "y!1") nil nil)) nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "+" 4)
                    (("2" (assert)
                      (("2" (lift-if +)
                        (("2" (lift-if +)
                          (("2" (lift-if +)
                            (("2" (lift-if +)
                              (("2"
                                (split +)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (bddsimp +)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil)
                                       ("3" (grind) nil nil)
                                       ("4"
                                        (assert)
                                        (("4"
                                          (expand "<" 3)
                                          (("4"
                                            (expand "<" -1)
                                            (("4"
                                              (assert)
                                              (("4"
                                                (use
                                                 "lt_cut"
                                                 :polarity?
                                                 t)
                                                (("1" (assert) nil nil)
                                                 ("2" (grind) nil nil)
                                                 ("3" (grind) nil nil)
                                                 ("4" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (expand "<" -2)
                                        (("5"
                                          (assert)
                                          (("5"
                                            (use
                                             "ordinal_antisym"
                                             :polarity?
                                             t)
                                            (("1" (assert) nil nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("6"
                                        (assert)
                                        (("6"
                                          (expand "<" -1)
                                          (("6"
                                            (split -)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use
                                                 "ordinal_antisym"
                                                 :polarity?
                                                 t)
                                                (("1" (assert) nil nil)
                                                 ("2" (grind) nil nil)
                                                 ("3" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite -1)
                                                  (("2"
                                                    (use
                                                     "ordinal_irreflexive"
                                                     :polarity?
                                                     t)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (flatten)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (rewrite
                                                   -1
                                                   :dont-delete?
                                                   t)
                                                  (("3"
                                                    (rewrite
                                                     -2
                                                     :dont-delete?
                                                     t)
                                                    (("3"
                                                      (use
                                                       "ordinal_irreflexive"
                                                       :polarity?
                                                       t)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (bddsimp +)
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil)
                                     ("3" (grind) nil nil)
                                     ("4" (grind) nil nil)
                                     ("5" (grind) nil nil)
                                     ("6" (grind) nil nil)
                                     ("7" (grind) nil nil)
                                     ("8"
                                      (assert)
                                      (("8"
                                        (expand "<" -2)
                                        (("8"
                                          (assert)
                                          (("8"
                                            (lemma
                                             "ordinal_trichotomy")
                                            (("8"
                                              (inst
                                               -1
                                               "exp(r!1)"
                                               "exp(x!1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "ordinal_transitive")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "exp(x!1)"
                                                     "exp(r!1)"
                                                     "exp(y!1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "<" 3)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("4"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil)
                                               ("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("9"
                                      (assert)
                                      (("9"
                                        (expand "<" 4)
                                        (("9" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("10"
                                      (assert)
                                      (("10"
                                        (expand "<" 5)
                                        (("10"
                                          (flatten)
                                          (("10"
                                            (assert)
                                            (("10"
                                              (inst -6 "rest(r!1)")
                                              (("10"
                                                (use "lt_rest")
                                                (("10"
                                                  (assert)
                                                  (("10"
                                                    (inst
                                                     -7
                                                     "add(coef(x!1), exp(x!1), rest(x!1))"
                                                     "add(coef(y!1), exp(y!1), rest(y!1))")
                                                    (("10"
                                                      (assert)
                                                      (("10"
                                                        (expand "<" -2)
                                                        (("10"
                                                          (expand
                                                           "<"
                                                           10)
                                                          (("10"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("11"
                                      (assert)
                                      (("11"
                                        (expand "<" -2)
                                        (("11"
                                          (assert)
                                          (("11"
                                            (lemma
                                             "ordinal_trichotomy")
                                            (("11"
                                              (inst
                                               -1
                                               "exp(r!1)"
                                               "exp(x!1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "ordinal_transitive")
                                                  (("1"
                                                    (rewrite -3)
                                                    (("1"
                                                      (expand "<" 4)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2" (grind) nil nil))
                                                nil)
                                               ("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("12"
                                      (expand "<" -1)
                                      (("12"
                                        (assert)
                                        (("12"
                                          (split -)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (use
                                               "ordinal_irreflexive"
                                               :polarity?
                                               t)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (use
                                                   "ordinal_irreflexive"
                                                   :polarity?
                                                   t)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (inst -6 "rest(r!1)")
                                              (("2"
                                                (use "lt_rest")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -7
                                                     "add(coef(x!1), exp(x!1), rest(x!1))"
                                                     "add(coef(y!1), exp(y!1), rest(y!1))")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "<" -7)
                                                        (("2"
                                                          (expand
                                                           "<"
                                                           4)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (plus_zero formula-decl nil ordinals_props nil)
    (rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_rest formula-decl nil ordinals_props nil)
    (ordinal_transitive formula-decl nil ordinals nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (lt_cut formula-decl nil ordinals_props nil)
    (plus__zero formula-decl nil ordinals_props nil)
    (exp_plus formula-decl nil ordinals_props nil)
    (ordinal_antisym formula-decl nil ordinals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" ordinals nil)
    (ordinal_irreflexive formula-decl nil ordinals nil)
    (lt__plus formula-decl nil ordinals_props nil)
    (ordinal_induction formula-decl nil ordinals nil)
    (+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< def-decl "bool" ordinals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil))
   shostak))
 (both_sides_plus_le1 0
  (both_sides_plus_le1-1 nil 3582574104
   ("" (induct "y" :name "ordinal_induction")
    (("" (skosimp* :preds? t)
      (("" (expand "<=" -5)
        (("" (assert)
          (("" (split -5)
            (("1" (assert)
              (("1" (expand "+" 1)
                (("1" (assert)
                  (("1" (lift-if)
                    (("1" (lift-if)
                      (("1" (lift-if)
                        (("1" (case "x!1 = zero")
                          (("1" (assert)
                            (("1" (case "r!1 = zero")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "<=" 1)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case "z!1 = zero")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "<=")
                                      (("1"
                                        (expand "<")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (split +)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "<=")
                                          (("1"
                                            (expand "<" +)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (decompose-equality
                                                   3)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "<=")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand "<" 1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "<=")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand "<" 2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "ordinal_trichotomy")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "exp(r!1)"
                                                               "exp(z!1)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (case "z!1 = zero")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (split +)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (case "r!1 = zero")
                                          (("1"
                                            (assert)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (split +)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split +)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "<="
                                                           +)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "<"
                                                               2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (lemma
                                                                   "ordinal_trichotomy")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "exp(r!1)"
                                                                     "exp(z!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split +)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (case "r!1 = zero")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (split +)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand "<=")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "<"
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "<"
                                                                   -3)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       "lt_cut"
                                                                       :polarity?
                                                                       t)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("4"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split +)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (case "r!1 = zero")
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (split +)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "<" -2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (use
                                                             "lt_cut"
                                                             :polarity?
                                                             t)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("4"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split +)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand "<=")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "<"
                                                                 -1)
                                                                (("2"
                                                                  (split
                                                                   -)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (flatten)
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (expand
                                                                         "<"
                                                                         2)
                                                                        (("3"
                                                                          (flatten)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (inst
                                                                               -7
                                                                               "rest(r!1)")
                                                                              (("3"
                                                                                (use
                                                                                 "lt_rest")
                                                                                (("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (inst
                                                                                     -8
                                                                                     "rest(x!1)"
                                                                                     " add(coef(z!1), exp(z!1), rest(z!1))")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct_add_extensionality formula-decl nil ordstruct_adt nil)
    (rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_rest formula-decl nil ordinals_props nil)
    (lt_cut formula-decl nil ordinals_props nil)
    (ordinal_induction formula-decl nil ordinals nil)
    (+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (>= const-decl "bool" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" ordinals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil))
   shostak))
 (both_sides_plus_le2 0
  (both_sides_plus_le2-1 nil 3582575492
   ("" (induct "z" :name "ordinal_induction")
    (("" (skosimp* :preds? t)
      (("" (use "both_sides_plus_lt2" :polarity? t)
        (("" (split)
          (("1" (assert)
            (("1" (flatten)
              (("1" (assert)
                (("1" (expand "<=")
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (use "both_sides_plus")
                        (("1" (assert)
                          (("1" (expand "+" 1)
                            (("1" (lift-if)
                              (("1"
                                (lift-if)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (bddsimp +)
                                        (("1" (grind) nil nil)
                                         ("2" (grind) nil nil)
                                         ("3" (grind) nil nil)
                                         ("4" (grind) nil nil)
                                         ("5"
                                          (assert)
                                          (("5"
                                            (case "y!1 = zero")
                                            (("1"
                                              (rewrite -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "<" -3)
                                                  (("1"
                                                    (typepred
                                                     "r!1 + x!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "r!1 = zero")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "nonzero?(r!1 + x!1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -10)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "max")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         ">")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "ordinal_antisym")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "exp(r!1)"
                                                                               "exp(x!1)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "max"
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           ">")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "ordinal_antisym")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "exp(r!1)"
                                                                                 "exp(x!1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (lemma
                                                                     "ordinal_antisym")
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "exp(r!1)"
                                                                       "exp(x!1)")
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (expand
                                                                           "max"
                                                                           -1)
                                                                          (("3"
                                                                            (expand
                                                                             ">")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("6"
                                          (assert)
                                          (("6"
                                            (decompose-equality 4)
                                            (("1"
                                              (expand "+" -3)
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "y!1 = zero")
                                              (("1"
                                                (rewrite
                                                 -1
                                                 :dont-delete?
                                                 t)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case "r!1 = zero")
                                                    (("1"
                                                      (rewrite
                                                       -1
                                                       :dont-delete?
                                                       t)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (inst
                                                         -5
                                                         "zero"
                                                         "x!1"
                                                         "r!1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "<"
                                                             -5
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (use
                                                                 "ordinal_antisym"
                                                                 :polarity?
                                                                 t)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("7"
                                          (assert)
                                          (("7"
                                            (case "y!1 = zero")
                                            (("1"
                                              (rewrite
                                               -1
                                               :dont-delete?
                                               t)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "ordinal_trichotomy")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "exp(r!1)"
                                                     "exp(x!1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "<" -4)
                                                        (("1"
                                                          (typepred
                                                           "r!1 + x!1")
                                                          (("1"
                                                            (case
                                                             "r!1 + x!1 = zero")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "r!1 = zero")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     -10)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "max")
                                                                        (("1"
                                                                          (expand
                                                                           ">")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "ordinal_antisym")
                                                                              (("1"
                                                                                (use
                                                                                 "ordinal_irreflexive"
                                                                                 :polarity?
                                                                                 t)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "max")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             ">")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (decompose-equality
                                                                           7)
                                                                          (("3"
                                                                            (expand
                                                                             "+"
                                                                             -3)
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (inst
                                                                                 -17
                                                                                 "rest(r!1)")
                                                                                (("3"
                                                                                  (use
                                                                                   "lt_rest")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (inst
                                                                                       -18
                                                                                       "add(coef(x!1), exp(x!1), rest(x!1))"
                                                                                       "zero")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "<"
                                                                                           -18)
                                                                                          (("3"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      (("3"
                                                        (hide-all-but
                                                         (-7 1))
                                                        (("3"
                                                          (expand
                                                           "ordinal?"
                                                           -1)
                                                          (("3"
                                                            (lift-if)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (reveal
                                                                 *)
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (case
                                                                     "r!1 = zero")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite
                                                                         -1
                                                                         :dont-delete?
                                                                         t)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("8"
                                          (assert)
                                          (("8"
                                            (case "r!1 = zero")
                                            (("1"
                                              (rewrite
                                               -1
                                               :dont-delete?
                                               t)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "+" -3)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "<" -3)
                                                    (("2"
                                                      (expand "<" 6)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("9" (grind) nil nil)
                                         ("10"
                                          (assert)
                                          (("10"
                                            (case "r!1 = zero")
                                            (("1"
                                              (rewrite
                                               -1
                                               :dont-delete?
                                               t)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "+" -2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "<" -2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "ordinal_trichotomy")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "exp(r!1)"
                                                           "exp(x!1)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "lt_cut")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "exp(x!1)"
                                                                 "exp(r!1)"
                                                                 "exp(y!1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "<"
                                                                     8)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("4"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("11"
                                          (assert)
                                          (("11"
                                            (case "r!1 = zero")
                                            (("1"
                                              (rewrite
                                               -1
                                               :dont-delete?
                                               t)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "+" -3)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "<" -3)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (use
                                                         "ordinal_antisym"
                                                         :polarity?
                                                         t)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("12"
                                          (assert)
                                          (("12"
                                            (case "r!1 = zero")
                                            (("1"
                                              (rewrite
                                               -1
                                               :dont-delete?
                                               t)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand "+" -3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "<" -3)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("13"
                                          (assert)
                                          (("13"
                                            (rewrite -1)
                                            (("13"
                                              (lemma
                                               "ordinal_trichotomy")
                                              (("13"
                                                (inst
                                                 -1
                                                 "exp(y!1)"
                                                 "exp(x!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "<" 8)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("14"
                                          (case "r!1 = zero")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite -1)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (expand "+" -2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "<" -2)
                                                  (("2"
                                                    (split -2)
                                                    (("1"
                                                      (use
                                                       "ordinal_antisym"
                                                       :polarity?
                                                       t)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           -1
                                                           :dont-delete?
                                                           t)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (rewrite
                                                               -1
                                                               :dont-delete?
                                                               t
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (use
                                                                 "ordinal_irreflexive"
                                                                 :polarity?
                                                                 t)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (flatten)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (lemma
                                                           "both_sides_plus_lt2")
                                                          (("3"
                                                            (lemma
                                                             "both_sides_plus_lt1")
                                                            (("3"
                                                              (rewrite
                                                               -3)
                                                              (("3"
                                                                (use
                                                                 "ordinal_irreflexive")
                                                                (("3"
                                                                  (use
                                                                   "ordinal_irreflexive"
                                                                   :polarity?
                                                                   t)
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("15"
                                          (assert)
                                          (("15"
                                            (case "r!1 = zero")
                                            (("1"
                                              (rewrite -1)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand "+" -2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "<" -2)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("16"
                                          (assert)
                                          (("16"
                                            (case "r!1 = zero")
                                            (("1"
                                              (rewrite -1)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand "+" -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "<" -1)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "ordinal_irreflexive"
                                                         :polarity?
                                                         t)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (inst
                                                         -6
                                                         "rest(r!1)")
                                                        (("2"
                                                          (use
                                                           "lt_rest")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -7
                                                               "add(coef(x!1), exp(x!1), rest(x!1)) "
                                                               "add(coef(y!1), exp(y!1), rest(y!1))")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "<"
                                                                   10)
                                                                  (("2"
                                                                    (expand
                                                                     "<"
                                                                     -7)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "<=")
              (("2" (assert)
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (use "both_sides_plus")
                      (("2" (assert)
                        (("2" (inst -3 "x!1" "y!1" "r!1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_plus_lt1 formula-decl nil ordinals_props nil)
    (lt_cut formula-decl nil ordinals_props nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (lt_rest formula-decl nil ordinals_props nil)
    (ordinal_irreflexive formula-decl nil ordinals nil)
    (plus_zero formula-decl nil ordinals_props nil)
    (ordstruct_add_extensionality formula-decl nil ordstruct_adt nil)
    (rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (exp_plus formula-decl nil ordinals_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ordinal_antisym formula-decl nil ordinals nil)
    (> const-decl "bool" ordinals nil)
    (plus__zero formula-decl nil ordinals_props nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (< def-decl "bool" ordinals nil)
    (both_sides_plus formula-decl nil ordinals_props nil)
    (both_sides_plus_lt2 formula-decl nil ordinals_props nil)
    (ordinal_induction formula-decl nil ordinals nil)
    (+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" ordinals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil))
   shostak))
 (lt_plus_lt 0
  (lt_plus_lt-1 nil 3582573492
   ("" (use "both_sides_plus_le1")
    (("" (use "both_sides_plus_lt2")
      (("" (skosimp* :preds? t)
        (("" (inst -5 "z!1" "w!1" "y!1")
          (("" (assert)
            (("" (inst -6 "x!1" "y!1" "z!1")
              (("" (assert)
                (("" (expand "<=" -6)
                  (("" (use "lt_cut" :polarity? t)
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((both_sides_plus_lt2 formula-decl nil ordinals_props nil)
    (<= const-decl "bool" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" ordinals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (lt_cut formula-decl nil ordinals_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (both_sides_plus_le1 formula-decl nil ordinals_props nil))
   shostak))
 (le_plus_le 0
  (le_plus_le-1 nil 3582580591
   ("" (use "lt_plus_lt")
    (("" (skosimp* :preds? t)
      (("" (expand "<=" -7)
        (("" (split -7)
          (("1" (inst -6 "w!1" "x!1" "y!1" "z!1")
            (("1" (assert)
              (("1" (expand "<=") (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (assert)
            (("2" (rewrite -1)
              (("2" (assert)
                (("2" (use "both_sides_plus_le1")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (both_sides_plus_le1 formula-decl nil ordinals_props nil)
    (<= const-decl "bool" ordinals nil)
    (lt_plus_lt formula-decl nil ordinals_props nil))
   shostak))
 (plus_plus_plus 0
  (plus_plus_plus-1 nil 3582581109
   ("" (induct "x" :name "ordinal_induction")
    (("" (skosimp* :preds? t)
      ((""
        (case "r!1 = zero OR y!1 = zero OR z!1 = zero OR (r!1 + y!1 = zero) OR (y!1 + z!1 = zero)")
        (("1" (split -1)
          (("1" (rewrite -1) (("1" (assert) nil nil)) nil)
           ("2" (rewrite -1) (("2" (assert) nil nil)) nil)
           ("3" (rewrite -1) (("3" (assert) nil nil)) nil)
           ("4" (typepred "r!1 + y!1")
            (("4" (assert)
              (("4" (expand ">=") (("4" (grind) nil nil)) nil)) nil))
            nil)
           ("5" (typepred "y!1 + z!1")
            (("5" (expand ">=")
              (("5" (assert) (("5" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (expand "+" 6)
              (("2" (lift-if)
                (("2" (bddsimp +)
                  (("1" (smash)
                    (("1" (rewrite -3)
                      (("1" (use "ordinal_antisym" :polarity? t)
                        (("1" (assert) nil nil) ("2" (grind) nil nil)
                         ("3" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (use "lt_cut" :polarity? t)
                      (("1" (assert) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil) ("4" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (smash) nil nil)
                   ("3" (assert)
                    (("3" (lift-if)
                      (("3" (bddsimp +)
                        (("1" (assert)
                          (("1" (assert)
                            (("1" (lift-if)
                              (("1"
                                (assert)
                                (("1"
                                  (bddsimp +)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "ordinal_trichotomy")
                                      (("1"
                                        (inst -1 "exp(y!1)" "exp(r!1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "lt_cut")
                                            (("1"
                                              (inst
                                               -1
                                               "exp(y!1)"
                                               "exp(r!1)"
                                               "exp(z!1)")
                                              (("1" (assert) nil nil)
                                               ("2" (grind) nil nil)
                                               ("3" (grind) nil nil)
                                               ("4" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (smash)
                                (("2"
                                  (rewrite -1 :dont-delete? t)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma "ordinal_trichotomy")
                                      (("2"
                                        (inst -1 "exp(z!1)" "exp(y!1)")
                                        (("1" (assert) nil nil)
                                         ("2" (grind) nil nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (smash)
                          (("1" (decompose-equality 10)
                            (("1" (inst -5 "rest(r!1)")
                              (("1"
                                (use "lt_rest")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst
                                     -6
                                     " add(coef(y!1), exp(y!1), rest(y!1))"
                                     " add(coef(z!1), exp(z!1), rest(z!1)) ")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite -6)
                                        (("1"
                                          (use
                                           "both_sides_plus"
                                           :polarity?
                                           t)
                                          (("1"
                                            (inst
                                             -1
                                             "rest(r!1)"
                                             "add(coef(y!1), exp(y!1), rest(y!1)) + add(coef(z!1), exp(z!1), rest(z!1))"
                                             "add(coef(z!1), exp(z!1), rest(z!1))")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite -1 :dont-delete? t)
                            (("2" (assert)
                              (("2"
                                (decompose-equality 11)
                                (("2"
                                  (inst -5 "rest(r!1)")
                                  (("2"
                                    (use "lt_rest")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (delete -1)
                                        (("2"
                                          (lemma "both_sides_plus")
                                          (("2"
                                            (inst
                                             -6
                                             " add(coef(y!1), exp(y!1), rest(y!1))"
                                             " add(coef(z!1), exp(z!1), rest(z!1)) ")
                                            (("1"
                                              (rewrite
                                               -2
                                               :dont-delete?
                                               t)
                                              (("1"
                                                (rewrite
                                                 -6
                                                 :dir
                                                 rl
                                                 :dont-delete?
                                                 t)
                                                (("1"
                                                  (rewrite
                                                   -6
                                                   :dir
                                                   rl
                                                   :dont-delete?
                                                   t)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "rest(r!1)"
                                                     "add(coef(y!1), exp(z!1), rest(y!1)) + add(coef(z!1), exp(z!1), rest(z!1))"
                                                     "add(coef(y!1) + coef(z!1), exp(z!1), rest(z!1))")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (decompose-equality 12)
                            (("3" (inst -4 "rest(r!1)")
                              (("3"
                                (use "lt_rest")
                                (("3"
                                  (assert)
                                  (("3" (grind :if-match all) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (lt_cut formula-decl nil ordinals_props nil)
    (ordinal_antisym formula-decl nil ordinals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (both_sides_plus formula-decl nil ordinals_props nil)
    (lt_rest formula-decl nil ordinals_props nil)
    (ordstruct_add_extensionality formula-decl nil ordstruct_adt nil)
    (rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (plus_zero formula-decl nil ordinals_props nil)
    (plus__zero formula-decl nil ordinals_props nil)
    (< def-decl "bool" ordinals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" ordinals nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordinal_induction formula-decl nil ordinals nil)
    (+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil))
   shostak))
 (plus_has_identity 0
  (plus_has_identity-1 nil 3582556964
   ("" (expand "has_identity?")
    (("" (inst 1 "zero") (("1" (grind) nil nil) ("2" (grind) nil nil))
      nil))
    nil)
   ((zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (ordinal? def-decl "bool" ordinals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (identity? const-decl "bool" operator_defs nil)
    (+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (plus__zero formula-decl nil ordinals_props nil)
    (has_identity? const-decl "bool" operator_defs nil))
   nil))
 (plus_is_associative 0
  (plus_is_associative-1 nil 3582556964
   ("" (expand "associative?")
    (("" (lemma "plus_plus_plus") (("" (propax) nil nil)) nil)) nil)
   ((plus_plus_plus formula-decl nil ordinals_props nil)
    (associative? const-decl "bool" operator_defs nil))
   nil))
 (difference_TCC1 0
  (difference_TCC1-1 nil 3582584307 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (<= const-decl "bool" ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< def-decl "bool" ordinals nil))
   nil))
 (difference_TCC2 0
  (difference_TCC2-1 nil 3582584307
   ("" (lemma "ordinal_irreflexive")
    (("" (lemma "ordinal_trichotomy")
      (("" (grind-with-ext)
        (("1" (decompose-equality) nil nil)
         ("2" (decompose-equality) nil nil)
         ("3" (decompose-equality) nil nil))
        nil))
      nil))
    nil)
   ((ordinal_trichotomy formula-decl nil ordinals nil)
    (rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< def-decl "bool" ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" ordinals nil)
    (ordinal_irreflexive formula-decl nil ordinals nil))
   nil))
 (difference_TCC3 0
  (difference_TCC3-1 nil 3582584307
   ("" (termination-tcc)
    (("1" (use "ordinal_irreflexive" :polarity? t) nil nil)
     ("2" (use "ordinal_irreflexive" :polarity? t) nil nil)
     ("3" (use "ordinal_irreflexive" :polarity? t) nil nil)
     ("4" (use "ordinal_irreflexive" :polarity? t)
      (("4" (grind) (("4" (decompose-equality -9) nil nil)) nil)) nil)
     ("5" (grind) (("5" (decompose-equality -9) nil nil)) nil)
     ("6" (decompose-equality -7) nil nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (<= const-decl "bool" ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< def-decl "bool" ordinals nil)
    (reduce adt-def-decl "[ordstruct -> range]"
      ordstruct_adt_reduce nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size const-decl "[ordstruct -> nat]" ordinals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (difference_TCC4 0
  (difference_TCC4-1 nil 3582584307
   ("" (lemma "ordinal_irreflexive")
    (("" (apply (then (grind-with-ext) (decompose-equality))) nil nil))
    nil)
   ((rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< def-decl "bool" ordinals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (<= const-decl "bool" ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (ordinal_irreflexive formula-decl nil ordinals nil))
   nil))
 (difference_TCC5 0
  (difference_TCC5-1 nil 3582584307 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (<= const-decl "bool" ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< def-decl "bool" ordinals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ordinal? def-decl "bool" ordinals nil))
   nil))
 (plus__minus 0
  (plus__minus-1 nil 3582635609
   ("" (induct "x" :name "ordinal_induction")
    (("" (skosimp* :preds? t)
      (("" (case "y!1 = zero OR r!1 = zero")
        (("1" (grind) nil nil)
         ("2" (flatten)
          (("2" (expand "-" +)
            (("2" (expand "+" +)
              (("2" (assert)
                (("2" (assert)
                  (("2" (lift-if)
                    (("2" (lift-if +)
                      (("2" (lift-if +)
                        (("2" (lift-if +)
                          (("2" (bddsimp +)
                            (("1" (inst -6 "rest(r!1)")
                              (("1"
                                (use "lt_rest")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -7 "rest(y!1)")
                                    (("1"
                                      (rewrite -2 :dont-delete? t)
                                      (("1"
                                        (rewrite -3 :dont-delete? t)
                                        (("1"
                                          (decompose-equality 3)
                                          (("1"
                                            (typepred!
                                             "rest(y!1)"
                                             :implicit?
                                             t)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "rest(r!1) - rest(y!1) = zero")
                                                  (("1"
                                                    (rewrite -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (rewrite -1 :dont-delete? t)
                                (("2"
                                  (rewrite -2 :dont-delete? t)
                                  (("2"
                                    (inst -6 "rest(r!1)")
                                    (("2"
                                      (use "lt_rest")
                                      (("2"
                                        (typepred!
                                         "rest(y!1)"
                                         :implicit?
                                         t)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -9 "rest(y!1)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (postpone) nil nil)
                             ("4" (postpone) nil nil)
                             ("5" (postpone) nil nil)
                             ("6" (postpone) nil nil)
                             ("7" (postpone) nil nil)
                             ("8" (postpone) nil nil)
                             ("9" (postpone) nil nil)
                             ("10" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (times_TCC1 0
  (times_TCC1-1 nil 3582470498 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ordinal? def-decl "bool" ordinals nil))
   nil))
 (times_TCC2 0
  (times_TCC2-1 nil 3582470498 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (times_TCC3 0
  (times_TCC3-1 nil 3582470498 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (times_TCC4 0
  (times_TCC4-1 nil 3582470498 ("" (grind) nil nil)
   ((ordinal? def-decl "bool" ordinals nil)) nil))
 (times_TCC5 0
  (times_TCC5-1 nil 3582470498 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (times_TCC6 0
  (times_TCC6-1 nil 3582470498 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (times_TCC7 0
  (times_TCC7-1 nil 3582470498 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (times_TCC8 0
  (times_TCC8-1 nil 3582470498 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (times_TCC9 0
  (times_TCC9-1 nil 3582470498 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (times_TCC10 0
  (times_TCC10-1 nil 3582470498 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil))
 (times_TCC11 0
  (times_TCC11-1 nil 3582470498 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (times_TCC12 0
  (times_TCC12-1 nil 3582470498 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (reduce adt-def-decl "[ordstruct -> range]"
      ordstruct_adt_reduce nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size const-decl "[ordstruct -> nat]" ordinals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (ordinal_mult_zero 0
  (ordinal_mult_zero-1 nil 3582480152
   ("" (grind) (("" (expand "*") (("" (grind) nil nil)) nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? const-decl "bool" operator_defs nil)
    (* def-decl "ordinal" ordinals_props nil)
    (ordinal? def-decl "bool" ordinals nil))
   nil))
 (ordinal_mult_no_zero_divisors 0
  (ordinal_mult_no_zero_divisors-1 nil 3582480248
   ("" (induct "y")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skosimp* :preds? t)
      (("3" (expand "ordinal?" -5)
        (("3" (flatten)
          (("3" (assert)
            (("3" (expand "*" -8)
              (("3" (typepred "+")
                (("3"
                  (invoke (inst -1 "(%1, %2)") (~ -12 "%1 + %2 = %"))
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (case "add2_var!1 = zero")
                            (("1" (assert)
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (smash)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (invoke
                                         (case "%1 = zero")
                                         (~ -16 "zero?(%1)"))
                                        (("1"
                                          (rewrite -1)
                                          (("1"
                                            (inst
                                             -12
                                             "add(coef(x!1), exp(x!1), rest(x!1))")
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil)
                                       ("3" (grind) nil nil)
                                       ("4"
                                        (case
                                         "x!1 = add(coef(x!1), exp(x!1), rest(x!1))")
                                        (("1"
                                          (rewrite -1 :dir rl)
                                          (("1"
                                            (invoke
                                             (typepred "%1 + %2")
                                             (~ -16 "zero?(%1 + %2)"))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "<" -20)
                                                (("1"
                                                  (hide-all-but -20)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (decompose-equality 1)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (smash)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (case
                                     "x!1 = add(coef(x!1), exp(x!1), rest(x!1))")
                                    (("1"
                                      (rewrite -1 :dir rl)
                                      (("1"
                                        (inst -11 "x!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (invoke
                                             (typepred "%1 + %2")
                                             (~ -15 "zero?(%1 + %2)"))
                                            (("1"
                                              (split -4)
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (hide-all-but
                                                   (-2 -3 -19 +))
                                                  (("2"
                                                    (expand ">=")
                                                    (("2"
                                                      (case
                                                       "add(add1_var!1, exp(x!1) + add2_var!1, zero) + x!1 * add3_var!1 = zero")
                                                      (("1"
                                                        (rewrite -1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (decompose-equality 1)
                                      nil
                                      nil))
                                    nil)
                                   ("3" (grind) nil nil)
                                   ("4"
                                    (hide-all-but (-1 -2 -3 -15 +))
                                    (("4"
                                      (case
                                       "x!1 = add(coef(x!1), exp(x!1), rest(x!1))")
                                      (("1"
                                        (rewrite -1 :dir rl)
                                        (("1"
                                          (case
                                           "add(add1_var!1, exp(x!1) + add2_var!1, zero) + x!1 * add3_var!1 = zero")
                                          (("1"
                                            (rewrite -1)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (decompose-equality 1)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil)
                   ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (identity? const-decl "bool" operator_defs nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct_add_extensionality formula-decl nil ordstruct_adt nil)
    (has_identity? const-decl "bool" operator_defs nil)
    (associative? const-decl "bool" operator_defs nil)
    (+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (>= const-decl "bool" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil)
    (ordstruct_induction formula-decl nil ordstruct_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (* def-decl "ordinal" ordinals_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil))
   shostak))
 (ordinal_mult_one_TCC1 0
  (ordinal_mult_one_TCC1-1 nil 3582480152 ("" (grind) nil nil)
   ((ordinal? def-decl "bool" ordinals nil)
    (ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil))
   nil))
 (ordinal_mult_one 0
  (ordinal_mult_one-1 nil 3582481386
   ("" (expand "identity?")
    (("" (induct "x")
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (grind) nil nil)
       ("4" (skosimp* :preds? t)
        (("4" (expand "ordinal?" -4)
          (("4" (flatten)
            (("4" (assert)
              (("4" (assert)
                (("4" (flatten)
                  (("4" (split 1)
                    (("1" (grind) nil nil)
                     ("2" (assert)
                      (("2" (expand "*" 1 1)
                        (("2" (assert)
                          (("2" (lift-if)
                            (("2" (split 1)
                              (("1"
                                (flatten)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (rewrite -5)
                                  (("2"
                                    (expand "+" 2 1)
                                    (("2"
                                      (expand "+" 2 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "ordinal_antisym"
                                                         ("r"
                                                          "add2_var!1"
                                                          "s"
                                                          "exp(add3_var!1)"))
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "+"
                                                         2
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (decompose-equality
                                                             2)
                                                            (("2"
                                                              (decompose-equality
                                                               1)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (grind) nil nil) ("6" (grind) nil nil)
       ("7" (grind) nil nil) ("8" (grind) nil nil))
      nil))
    nil)
   ((zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ordinal? def-decl "bool" ordinals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (* def-decl "ordinal" ordinals_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ordstruct_induction formula-decl nil ordstruct_adt nil)
    (ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_zero formula-decl nil ordinals_props nil)
    (< def-decl "bool" ordinals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (ordstruct_add_extensionality formula-decl nil ordstruct_adt nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (ordinal_antisym formula-decl nil ordinals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (plus_has_identity name-judgement "(has_identity?[ordinal])"
     ordinals_props nil)
    (plus_is_associative name-judgement "(associative?[ordinal])"
     ordinals_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (identity? const-decl "bool" operator_defs nil))
   shostak))
 (ordinal_mult_has_zero 0
  (ordinal_mult_has_zero-1 nil 3582480152
   ("" (expand "has_zero?")
    (("" (inst 1 "zero") (("" (use "ordinal_mult_zero") nil nil)) nil))
    nil)
   ((ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (ordinal_mult_zero judgement-tcc nil ordinals_props nil)
    (has_zero? const-decl "bool" operator_defs nil))
   nil))
 (ordinal_mult_has_identity 0
  (ordinal_mult_has_identity-1 nil 3582480152
   ("" (expand "has_identity?")
    (("" (inst 1 "add(1, zero, zero)")
      (("1" (use "ordinal_mult_one") nil nil) ("2" (grind) nil nil))
      nil))
    nil)
   ((ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ordinal? def-decl "bool" ordinals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal_mult_one formula-decl nil ordinals_props nil)
    (has_identity? const-decl "bool" operator_defs nil))
   nil))
 (mult_zero 0
  (mult_zero-1 nil 3582491048
   ("" (use "ordinal_mult_zero") (("" (grind) nil nil)) nil)
   ((* def-decl "ordinal" ordinals_props nil)
    (ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil)
    (ordinal_mult_zero judgement-tcc nil ordinals_props nil))
   shostak))
 (mult__zero 0
  (mult__zero-1 nil 3582491056
   ("" (use "ordinal_mult_zero") (("" (grind) nil nil)) nil)
   ((* def-decl "ordinal" ordinals_props nil)
    (zero? const-decl "bool" operator_defs nil)
    (ordinal_mult_has_zero name-judgement "(has_zero?[ordinal])"
     ordinals_props nil)
    (ordinal_mult_has_identity name-judgement
     "(has_identity?[ordinal])" ordinals_props nil)
    (ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil)
    (ordinal_mult_zero judgement-tcc nil ordinals_props nil))
   shostak))
 (ordinal_mult_right_increasing 0
  (ordinal_mult_right_increasing-1 nil 3582481631
   ("" (auto-rewrite "plus_zero" "plus__zero" "mult_zero" "mult__zero")
    (("" (case "FORALL (t: ordinal): zero?(t) IMPLIES t = zero")
      (("1" (induct "y" :name "ordinal_induction")
        (("1" (skosimp* :preds? t)
          (("1" (expand "*" 1)
            (("1" (lift-if)
              (("1" (lift-if)
                (("1" (lift-if)
                  (("1" (lift-if)
                    (("1" (bddsimp +)
                      (("1" (rewrite -8)
                        (("1" (expand ">" -7) (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "ordinal?" -5)
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split -6)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "rest(r!1) = zero AND x!1 = zero AND exp(r!1) = zero")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (rewrite -1 :dont-delete? t)
                                          (("1"
                                            (rewrite
                                             -2
                                             :dont-delete?
                                             t)
                                            (("1"
                                              (rewrite
                                               *
                                               :dont-delete?
                                               t)
                                              (("1"
                                                (rewrite
                                                 -3
                                                 :dont-delete?
                                                 t)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "<" 3)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "<" -1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert)
                        (("3" (case "x!1 = zero")
                          (("1" (rewrite -1 :dont-delete? t)
                            (("1" (expand ">")
                              (("1"
                                (assert)
                                (("1"
                                  (typepred!
                                   "add(coef(r!1), exp(z!1) + exp(r!1), zero) + add(coef(z!1), exp(z!1), rest(z!1)) * rest(r!1)")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (expand ">=")
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "ordinal_transitive")
                                                  (("1"
                                                    (invoke
                                                     (inst
                                                      -1
                                                      "zero"
                                                      "%1"
                                                      "%2")
                                                     (~ -2 "%1 < %2"))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "<" 1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite -1 :dir rl)
                                                (("2"
                                                  (expand "<" 4)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (assert)
                        (("6" (expand "ordinal?" -3)
                          (("6" (expand "ordinal?" -5)
                            (("6" (flatten)
                              (("6"
                                (lift-if)
                                (("6"
                                  (assert)
                                  (("6"
                                    (split -4)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -7)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "rest(r!1) = zero AND rest(x!1) = zero AND exp(r!1) = zero AND exp(x!1) = zero")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (rewrite
                                                 -1
                                                 :dont-delete?
                                                 t)
                                                (("1"
                                                  (rewrite
                                                   -2
                                                   :dont-delete?
                                                   t)
                                                  (("1"
                                                    (rewrite
                                                     -3
                                                     :dont-delete?
                                                     t)
                                                    (("1"
                                                      (rewrite
                                                       -4
                                                       :dont-delete?
                                                       t)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "<"
                                                           4)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 ">")
                                                                (("1"
                                                                  (expand
                                                                   "<"
                                                                   -13)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (rewrite
                                                                       -3
                                                                       :dont-delete?
                                                                       t)
                                                                      (("1"
                                                                        (rewrite
                                                                         -4
                                                                         :dont-delete?
                                                                         t)
                                                                        (("1"
                                                                          (expand
                                                                           "<"
                                                                           -13
                                                                           1)
                                                                          (("1"
                                                                            (rewrite
                                                                             -1
                                                                             :dont-delete?
                                                                             t)
                                                                            (("1"
                                                                              (rewrite
                                                                               -2
                                                                               :dont-delete?
                                                                               t)
                                                                              (("1"
                                                                                (expand
                                                                                 "<"
                                                                                 -13
                                                                                 2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "both_sides_times_pos_neg_lt2")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "coef(z!1)"
                                                                                       "coef(x!1)"
                                                                                       "coef(r!1)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (expand "<" -1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "<" -1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("7" (assert)
                        (("7" (expand "ordinal?" -4)
                          (("7" (flatten)
                            (("7" (lift-if)
                              (("7"
                                (assert)
                                (("7"
                                  (split -5)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "rest(r!1) = zero AND exp(r!1) = zero")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (rewrite -2 :dont-delete? t)
                                          (("1"
                                            (rewrite
                                             -1
                                             :dont-delete?
                                             t)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "<" -9)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand ">")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "<" -9)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "<" -1)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lift-if)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("8" (assert)
                        (("8" (expand "ordinal?" -2)
                          (("8" (flatten)
                            (("8" (lift-if)
                              (("8"
                                (assert)
                                (("8"
                                  (split -3)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "rest(x!1) = zero AND exp(x!1) = zero")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (rewrite -1 :dont-delete? t)
                                          (("1"
                                            (rewrite
                                             -2
                                             :dont-delete?
                                             t)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand ">")
                                                (("1"
                                                  (expand "<" -9)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       -2
                                                       :dont-delete?
                                                       t)
                                                      (("1"
                                                        (typepred!
                                                         "add(coef(r!1), exp(z!1) + exp(r!1), zero) + add(coef(z!1), exp(z!1), rest(z!1)) * rest(r!1)")
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   ">=")
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "ordinal_transitive")
                                                                      (("1"
                                                                        (invoke
                                                                         (inst
                                                                          -1
                                                                          "add(coef(z!1) * coef(x!1), exp(z!1), rest(z!1))"
                                                                          "%1"
                                                                          "%2")
                                                                         (~
                                                                          -2
                                                                          "%1 < %2"))
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "<"
                                                                             1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "ordinal_plus_right_increasing")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "zero"
                                                                                     "exp(r!1)"
                                                                                     "exp(z!1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (expand
                                                                           "<"
                                                                           5)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (lemma
                                                                               "ordinal_plus_right_increasing")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "zero"
                                                                                 "exp(r!1)"
                                                                                 "exp(z!1)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "<" -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("9" (assert)
                        (("9" (expand ">")
                          (("9" (assert)
                            (("9"
                              (lemma "ordinal_plus_right_increasing")
                              (("9"
                                (inst
                                 -1
                                 "zero"
                                 "add(coef(z!1), exp(z!1), rest(z!1))"
                                 "add(coef(x!1), exp(z!1) + exp(x!1), zero)")
                                (("9"
                                  (assert)
                                  (("9"
                                    (expand "<" -1 1)
                                    (("9"
                                      (assert)
                                      (("9"
                                        (lemma "ordinal_transitive")
                                        (("9"
                                          (lemma
                                           "ordinal_plus_left_increasing")
                                          (("9"
                                            (assert)
                                            (("9"
                                              (expand "<" -8)
                                              (("9"
                                                (split -8)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "ordinal?"
                                                     (-5 -7))
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "ordinal_plus_right_increasing")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (flatten)
                                                  (("3"
                                                    (rewrite -1)
                                                    (("3"
                                                      (rewrite -1)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (lemma
                                                           "ordinal_plus_right_increasing")
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "add(coef(z!1), exp(z!1), rest(z!1)) * rest(x!1) "
                                                             "add(coef(z!1), exp(z!1), rest(z!1)) * rest(r!1)"
                                                             "add(coef(r!1), exp(z!1) + exp(r!1), zero)")
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (inst
                                                                 -8
                                                                 "rest(r!1)")
                                                                (("3"
                                                                  (expand
                                                                   "<"
                                                                   -8
                                                                   1)
                                                                  (("3"
                                                                    (lift-if)
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (split
                                                                         -8)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "rest(r!1) = zero")
                                                                              (("1"
                                                                                (rewrite
                                                                                 -1
                                                                                 :dont-delete?
                                                                                 t)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "<"
                                                                                     -4)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "rest(x!1)"
                                                                                   "add(coef(z!1), exp(z!1), rest(z!1))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "<"
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("10" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   nil shostak))
 (ordinal_plus_mult_associative 0
  (ordinal_plus_mult_associative-1 nil 3582480152
   ("" (judgement-tcc) nil nil) nil nil)))

