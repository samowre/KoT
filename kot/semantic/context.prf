(context (doubleplus_TCC1 0
          (doubleplus_TCC1-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (pretheory_is_context judgement-tcc nil subtype nil)
            (pretheory formula-decl nil language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil))
           nil))
         (doubleplus_TCC2 0
          (doubleplus_TCC2-1 nil 3581870591 ("" (grind) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC3 0
          (doubleplus_TCC3-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC4 0
          (doubleplus_TCC4-1 nil 3581870591
           ("" (skosimp* :preds? t)
            (("" (assert)
              (("" (assert)
                (("" (rewrite "context" +)
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ((posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil))
           nil))
         (doubleplus_TCC5 0
          (doubleplus_TCC5-1 nil 3581870591 ("" (grind) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC6 0
          (doubleplus_TCC6-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC7 0
          (doubleplus_TCC7-1 nil 3581870591 ("" (grind) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (Δ1!1 skolem-const-decl "semantic" context nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (weight def-decl "nat" language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC8 0
          (doubleplus_TCC8-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC9 0
          (doubleplus_TCC9-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC10 0
          (doubleplus_TCC10-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (weight def-decl "nat" language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC11 0
          (doubleplus_TCC11-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC12 0
          (doubleplus_TCC12-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC13 0
          (doubleplus_TCC13-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (Δ1!1 skolem-const-decl "semantic" context nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (weight def-decl "nat" language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC14 0
          (doubleplus_TCC14-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC15 0
          (doubleplus_TCC15-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC16 0
          (doubleplus_TCC16-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (Δ1!1 skolem-const-decl "semantic" context nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (weight def-decl "nat" language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC17 0
          (doubleplus_TCC17-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC18 0
          (doubleplus_TCC18-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC19 0
          (doubleplus_TCC19-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (Δ1!1 skolem-const-decl "semantic" context nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (weight def-decl "nat" language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC20 0
          (doubleplus_TCC20-1 nil 3581870591 ("" (cases-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC21 0
          (doubleplus_TCC21-1 nil 3582048724
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC22 0
          (doubleplus_TCC22-1 nil 3582048724 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (Δ1!1 skolem-const-decl "semantic" context nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (weight def-decl "nat" language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC23 0
          (doubleplus_TCC23-1 nil 3582048724 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC24 0
          (doubleplus_TCC24-1 nil 3582048724
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC25 0
          (doubleplus_TCC25-1 nil 3582048724 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (Δ1!1 skolem-const-decl "semantic" context nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (weight def-decl "nat" language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC26 0
          (doubleplus_TCC26-1 nil 3582048724 ("" (cases-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (concat_is_associative 0
          (concat_is_associative-1 nil 3583239198
           ("" (induct "Θ" :name "context_induction")
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil) ("6" (grind) nil nil)
             ("7" (grind) nil nil) ("8" (grind) nil nil)
             ("9" (grind) nil nil))
            nil)
           ((pretheory? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (context_induction formula-decl nil inductions nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (<= const-decl "bool" reals nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (weight def-decl "nat" language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (ord type-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil))
           shostak))
         (concat_empty_TCC1 0
          (concat_empty_TCC1-1 nil 3583239283
           ("" (subtype-tcc) nil nil)
           ((pretheory formula-decl nil language nil)
            (pretheory_is_context judgement-tcc nil subtype nil))
           nil))
         (concat_empty 0
          (concat_empty-1 nil 3583239292
           ("" (induct-and-simplify "Γ" :name "context_induction") nil
            nil)
           ((int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (even_minus_odd_is_odd application-judgement "odd_int"
             integers nil)
            (mult_divides2 application-judgement "(divides(m))" divides
             nil)
            (mult_divides1 application-judgement "(divides(n))" divides
             nil)
            (even_times_int_is_even application-judgement "even_int"
             integers nil)
            (nnint_times_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (pretheory_is_context judgement-tcc nil subtype nil)
            (pretheory formula-decl nil language nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (number nonempty-type-decl nil numbers nil)
            (ord type-decl nil language nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (empty? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (〈〉 adt-constructor-decl "(empty?)" language nil)
            (context_induction formula-decl nil inductions nil))
           shostak))
         (concat__empty 0
          (concat__empty-1 nil 3583239289 ("" (grind) nil nil)
           ((++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil))
           shostak))
         (dsymbols_concat 0
          (dsymbols_concat-1 nil 3583170966
           (""
            (auto-rewrite ("definition" "closed?" "definition?" "find"
                           "union" "member" "subset?" "difference"
                           "type_"))
            (("" (induct "Δ" :name "context_induction")
              (("1" (grind)
                (("1" (grind) (("1" (grind-with-ext) nil nil)) nil))
                nil)
               ("2" (grind-with-ext) nil nil)
               ("3" (grind-with-ext) nil nil)
               ("4" (grind-with-ext) nil nil)
               ("5" (grind-with-ext) nil nil)
               ("6" (grind-with-ext) nil nil)
               ("7" (grind-with-ext) nil nil)
               ("8" (grind-with-ext) nil nil)
               ("9" (grind-with-ext) nil nil))
              nil))
            nil)
           ((int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (ord type-decl nil language nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (OR const-decl "[bool, bool -> bool]" booleans nil)
            (context_induction formula-decl nil inductions nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (nonempty? const-decl "bool" sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (member const-decl "bool" sets nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil))
           shostak))
         (symbols_concat 0
          (symbols_concat-1 nil 3583171006
           (""
            (auto-rewrite ("definition" "closed?" "definition?" "find"
                           "union" "member" "subset?" "difference"
                           "type_")
                          "dsymbols" "symbols" "++")
            (("" (induct "Δ" :name "context_induction")
              (("1" (grind-with-ext) nil nil)
               ("2" (grind-with-ext) nil nil)
               ("3" (grind-with-ext)
                (("1" (lemma "dsymbols_concat")
                  (("1" (grind-with-ext) nil nil)) nil)
                 ("2" (grind-with-ext)
                  (("2" (lemma "dsymbols_concat")
                    (("2" (grind-with-ext) nil nil)) nil))
                  nil)
                 ("3" (lemma "dsymbols_concat")
                  (("3" (grind-with-ext) nil nil)) nil)
                 ("4" (auto-rewrite "symbols_shift")
                  (("4" (assert) nil nil)) nil)
                 ("5" (auto-rewrite "symbols_shift")
                  (("5" (assert) nil nil)) nil))
                nil)
               ("4" (lemma "dsymbols_concat")
                (("4" (grind-with-ext) nil nil)) nil)
               ("5" (lemma "dsymbols_concat")
                (("5" (grind-with-ext)
                  (("1" (auto-rewrite "symbols_shift")
                    (("1" (assert) nil nil)) nil)
                   ("2" (auto-rewrite "symbols_shift")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("6" (lemma "dsymbols_concat")
                (("6" (grind-with-ext)
                  (("1" (auto-rewrite "symbols_shift")
                    (("1" (auto-rewrite "symbols_shift")
                      (("1" (auto-rewrite "symbols_shift")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (auto-rewrite "symbols_shift")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("7" (lemma "dsymbols_concat")
                (("7" (grind-with-ext)
                  (("1" (auto-rewrite "symbols_shift")
                    (("1" (assert) nil nil)) nil)
                   ("2" (auto-rewrite "symbols_shift")
                    (("2" (assert) nil nil)) nil)
                   ("3" (auto-rewrite "symbols_shift")
                    (("3" (assert) nil nil)) nil)
                   ("4" (auto-rewrite "symbols_shift")
                    (("4" (assert) nil nil)) nil))
                  nil))
                nil)
               ("8" (lemma "dsymbols_concat")
                (("8" (grind-with-ext)
                  (("1" (auto-rewrite "symbols_shift")
                    (("1" (assert) nil nil)) nil)
                   ("2" (auto-rewrite "symbols_shift")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("9" (lemma "dsymbols_concat")
                (("9" (grind-with-ext)
                  (("1" (auto-rewrite "symbols_shift")
                    (("1" (assert) nil nil)) nil)
                   ("2" (auto-rewrite "symbols_shift")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ((int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (syntaxic? const-decl "[semantic -> bool]" language nil)
            (syntaxic type-eq-decl nil language nil)
            (symbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (ord type-decl nil language nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (OR const-decl "[bool, bool -> bool]" booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (context_induction formula-decl nil inductions nil)
            (dsymbols_concat formula-decl nil context nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (member const-decl "bool" sets nil)
            (union const-decl "set" sets nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil))
           shostak))
         (dvars_concat 0
          (dvars_concat-1 nil 3583171134
           (""
            (auto-rewrite ("definition" "closed?" "definition?" "find"
                           "union" "member" "subset?" "difference"
                           "type_")
                          "dsymbols" "symbols" "++")
            (("" (induct "Δ" :name "context_induction")
              (("1" (grind-with-ext) nil nil)
               ("2" (grind-with-ext) nil nil)
               ("3" (grind-with-ext) nil nil)
               ("4" (grind-with-ext) nil nil)
               ("5" (grind-with-ext) nil nil)
               ("6" (grind-with-ext) nil nil)
               ("7" (grind-with-ext) nil nil)
               ("8" (grind-with-ext) nil nil)
               ("9" (grind-with-ext) nil nil))
              nil))
            nil)
           ((int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (ord type-decl nil language nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (context_induction formula-decl nil inductions nil)
            (dvars_pretheory formula-decl nil syntaxic_sets nil)
            (pretheory_is_context judgement-tcc nil subtype nil)
            (pretheory formula-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil))
           shostak))
         (vars_concat 0
          (vars_concat-1 nil 3582908413
           ("" (auto-rewrite "dvars_concat")
            (("" (induct "Δ" :name "context_induction")
              (("1" (grind) (("1" (grind-with-ext) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (grind) (("3" (grind-with-ext) nil nil)) nil)
               ("4" (grind) nil nil)
               ("5" (grind) (("5" (grind-with-ext) nil nil)) nil)
               ("6" (grind) (("6" (grind-with-ext) nil nil)) nil)
               ("7" (grind) (("7" (grind-with-ext) nil nil)) nil)
               ("8" (grind) (("8" (grind-with-ext) nil nil)) nil)
               ("9" (grind) (("9" (grind-with-ext) nil nil)) nil))
              nil))
            nil)
           ((int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (set type-eq-decl nil sets nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (syntaxic? const-decl "[semantic -> bool]" language nil)
            (syntaxic type-eq-decl nil language nil)
            (vars def-decl "set[nat]" syntaxic_sets nil)
            (ord type-decl nil language nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (OR const-decl "[bool, bool -> bool]" booleans nil)
            (- const-decl "set[nat]" syntaxic_sets nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (context_induction formula-decl nil inductions nil)
            (member const-decl "bool" sets nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (union const-decl "set" sets nil)
            (dvars_concat formula-decl nil context nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil))
           shostak))
         (closed_concat 0
          (closed_concat-1 nil 3583176480
           (""
            (auto-rewrite ("symbols_concat" "dsymbols_concat"
                           "vars_concat" "dvars_concat"))
            (("" (skosimp* :preds? t)
              (("" (expand "closed?")
                (("" (assert)
                  (("" (bddsimp)
                    (("1" (assert)
                      (("1" (grind-with-ext :if-match nil)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (grind-with-ext :if-match nil)
                      (("1" (inst - "x!1") (("1" (assert) nil nil))
                        nil)
                       ("2" (inst -7 "dvars(Δ!1) + x!1")
                        (("2" (assert) nil nil)) nil))
                      nil)
                     ("3" (grind-with-ext :if-match nil)
                      (("3" (grind) nil nil)) nil)
                     ("4" (grind-with-ext :if-match nil)
                      (("4" (inst - "x!1 - dvars(Δ!1)")
                        (("4" (assert) nil nil)) nil))
                      nil)
                     ("5" (grind-with-ext :if-match nil)
                      (("5" (grind) nil nil)) nil)
                     ("6" (grind-with-ext :if-match nil)
                      (("6" (inst - "x!1") (("6" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (dvars_concat formula-decl nil context nil)
            (dsymbols_concat formula-decl nil context nil)
            (vars_concat formula-decl nil context nil)
            (symbols_concat formula-decl nil context nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (nnint_times_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (even_times_int_is_even application-judgement "even_int"
             integers nil)
            (mult_divides1 application-judgement "(divides(n))" divides
             nil)
            (mult_divides2 application-judgement "(divides(m))" divides
             nil)
            (- const-decl "set[nat]" syntaxic_sets nil)
            (member const-decl "bool" sets nil)
            (real_ge_is_total_order name-judgement
             "(total_order?[real])" real_props nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (closed? const-decl "bool" syntaxic_sets nil))
           shostak))
         (uniques_concat 0
          (uniques_concat-1 nil 3583176842
           ("" (auto-rewrite "dsymbols_concat" "symbols_concat")
            (("" (induct "Δ" :name "context_induction")
              (("1" (grind) nil nil)
               ("2" (skosimp* :preds? t)
                (("2" (assert)
                  (("2" (inst - "Γ!1")
                    (("2" (grind :polarity? t) nil nil)) nil))
                  nil))
                nil)
               ("3" (skosimp* :preds? t)
                (("3" (inst - "Γ!1")
                  (("3" (grind :polarity? t) nil nil)) nil))
                nil)
               ("4" (skosimp* :preds? t)
                (("4" (inst - "Γ!1")
                  (("4" (grind :polarity? t) nil nil)) nil))
                nil)
               ("5" (skosimp* :preds? t)
                (("5" (inst - "Γ!1")
                  (("5" (grind :polarity? t) nil nil)) nil))
                nil)
               ("6" (skosimp* :preds? t)
                (("6" (inst - "Γ!1")
                  (("6" (grind :polarity? t) nil nil)) nil))
                nil)
               ("7" (skosimp* :preds? t)
                (("7" (inst - "Γ!1")
                  (("7" (grind :polarity? t) nil nil)) nil))
                nil)
               ("8" (skosimp* :preds? t)
                (("8" (inst - "Γ!1")
                  (("8" (grind :polarity? t) nil nil)) nil))
                nil)
               ("9" (skosimp* :preds? t)
                (("9" (inst - "Γ!1")
                  (("9" (grind :polarity? t) nil nil)) nil))
                nil))
              nil))
            nil)
           ((int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (IFF const-decl "[bool, bool -> bool]" booleans nil)
            (map? const-decl "[semantic -> bool]" language nil)
            (map type-eq-decl nil language nil)
            (uniques? def-decl "bool" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (ord type-decl nil language nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (disjoint? const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (context_induction formula-decl nil inductions nil)
            (empty? const-decl "bool" sets nil)
            (intersection const-decl "set" sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols_concat formula-decl nil context nil)
            (add const-decl "(nonempty?)" sets nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil))
           shostak))
         (length_TCC1 0
          (length_TCC1-1 nil 3583183232 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (length_TCC2 0
          (length_TCC2-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (context formula-decl nil language nil))
           nil))
         (length_TCC3 0
          (length_TCC3-1 nil 3583183232
           ("" (termination-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (weight def-decl "nat" language nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (context formula-decl nil language nil))
           nil))
         (length_concat 0
          (length_concat-1 nil 3583238861
           ("" (induct "Δ" :name "context_induction")
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil) ("6" (grind) nil nil)
             ("7" (grind) nil nil) ("8" (grind) nil nil)
             ("9" (grind) nil nil))
            nil)
           ((pretheory? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (concat__empty formula-decl nil context nil)
            (context_induction formula-decl nil inductions nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (<= const-decl "bool" reals nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (weight def-decl "nat" language nil)
            (ord type-decl nil language nil)
            (length def-decl "nat" context nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (number nonempty-type-decl nil numbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil))
           shostak))
         (pos_TCC1 0
          (pos_TCC1-1 nil 3583183232 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (pos_TCC2 0
          (pos_TCC2-1 nil 3583183232 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (length def-decl "nat" context nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (pos_TCC3 0
          (pos_TCC3-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "dsymbols") (("" (grind) nil nil)) nil)) nil)
           ((dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (set type-eq-decl nil sets nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (add const-decl "(nonempty?)" sets nil)
            (member const-decl "bool" sets nil))
           nil))
         (pos_TCC4 0
          (pos_TCC4-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "dsymbols") (("" (grind) nil nil)) nil)) nil)
           ((dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (set type-eq-decl nil sets nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (add const-decl "(nonempty?)" sets nil))
           nil))
         (pos_TCC5 0
          (pos_TCC5-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (set type-eq-decl nil sets nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC6 0
          (pos_TCC6-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (set type-eq-decl nil sets nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (add const-decl "(nonempty?)" sets nil)
            (length def-decl "nat" context nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC7 0
          (pos_TCC7-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (set type-eq-decl nil sets nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC8 0
          (pos_TCC8-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (set type-eq-decl nil sets nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC9 0
          (pos_TCC9-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (set type-eq-decl nil sets nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (member const-decl "bool" sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC10 0
          (pos_TCC10-1 nil 3583183232
           ("" (termination-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (set type-eq-decl nil sets nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (member const-decl "bool" sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (weight def-decl "nat" language nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC11 0
          (pos_TCC11-1 nil 3583183232
           ("" (subtype-tcc)
            (("1" (rewrite "context") (("1" (grind) nil nil)) nil)
             ("2" (rewrite "context") (("2" (grind) nil nil)) nil)
             ("3" (rewrite "context")
              (("3" (rewrite "context" -) (("3" (grind) nil nil)) nil))
              nil))
            nil)
           ((length def-decl "nat" context nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (<= const-decl "bool" reals nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (weight def-decl "nat" language nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (ord type-decl nil language nil)
            (< const-decl "bool" reals nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (set type-eq-decl nil sets nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (s!1 skolem-const-decl "(dsymbols(Γ!1))" context nil)
            (Γ!1 skolem-const-decl "context" context nil)
            (rest shared-adt-accessor-decl
                  "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
                  language nil)
            (iconst? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (itype? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktheory? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kvar? adt-recognizer-decl "[semantic -> boolean]" language
             nil)
            (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (OR const-decl "[bool, bool -> bool]" booleans nil)
            (member const-decl "bool" sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (context formula-decl nil language nil))
           nil))
         (pos_concat_TCC1 0
          (pos_concat_TCC1-1 nil 3583238707 ("" (subtype-tcc) nil nil)
           ((int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (ord type-decl nil language nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (dsymbols_concat formula-decl nil context nil))
           nil))
         (pos_concat 0
          (pos_concat-1 nil 3583238763
           ("" (induct "Δ" :name "context_induction")
            (("1" (grind) nil nil)
             ("2" (skosimp* :preds? t)
              (("2" (assert) (("2" (grind) nil nil)) nil)) nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil) ("6" (grind) nil nil)
             ("7" (grind) nil nil) ("8" (grind) nil nil)
             ("9" (grind) nil nil) ("10" (grind) nil nil))
            nil)
           ((pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil)
            (ktheory? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktheory adt-constructor-decl
             "[[symbol, semantic, semantic] -> (ktheory?)]" language
             nil)
            (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_ext adt-constructor-decl
             "[[symbol, semantic, semantic] -> (kconst_ext?)]" language
             nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_def adt-constructor-decl
             "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
             language nil)
            (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_decl adt-constructor-decl
             "[[symbol, semantic, semantic] -> (kconst_decl?)]"
             language nil)
            (kvar adt-constructor-decl
             "[[semantic, semantic] -> (kvar?)]" language nil)
            (kvar? adt-recognizer-decl "[semantic -> boolean]" language
             nil)
            (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_ext adt-constructor-decl
             "[[symbol, semantic] -> (ktype_ext?)]" language nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_def adt-constructor-decl
             "[[symbol, semantic, semantic] -> (ktype_def?)]" language
             nil)
            (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_decl adt-constructor-decl
             "[[symbol, semantic] -> (ktype_decl?)]" language nil)
            (member const-decl "bool" sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (length_concat formula-decl nil context nil)
            (s!2 skolem-const-decl
             "{s | dsymbols(Γ!1 ++ ktype_decl(s!1, Δ!1))(s)}" context
             nil)
            (Δ!1 skolem-const-decl "context" context nil)
            (s!1 skolem-const-decl "symbol" context nil)
            (Γ!1 skolem-const-decl "context" context nil)
            (OR const-decl "[bool, bool -> bool]" booleans nil)
            (dsymbols_concat formula-decl nil context nil)
            (concat__empty formula-decl nil context nil)
            (context_induction formula-decl nil inductions nil)
            (IF const-decl "[boolean, T, T -> T]" if_def nil)
            (nonneg_int nonempty-type-eq-decl nil integers nil)
            (pos def-decl "below[length(Γ)]" context nil)
            (length def-decl "nat" context nil)
            (< const-decl "bool" reals nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (ord type-decl nil language nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil))
           shostak))
         (pos_TCC12 0
          (pos_TCC12-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (length def-decl "nat" context nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (pos_TCC13 0
          (pos_TCC13-1 nil 3583183232
           ("" (subtype-tcc)
            (("1" (rewrite "context") (("1" (grind) nil nil)) nil)
             ("2" (rewrite "context") (("2" (grind) nil nil)) nil)
             ("3" (rewrite "context" -) (("3" (grind) nil nil)) nil))
            nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (real_ge_is_total_order name-judgement
             "(total_order?[real])" real_props nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (pos_TCC14 0
          (pos_TCC14-1 nil 3583183232 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (< const-decl "bool" reals nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (ord type-decl nil language nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (length def-decl "nat" context nil)
            (below type-eq-decl nil nat_types nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (pos_TCC15 0
          (pos_TCC15-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context" -) (("" (grind) nil nil)) nil))
            nil)
           ((dvars def-decl "nat" syntaxic_sets nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (< const-decl "bool" reals nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (pretheory formula-decl nil language nil)
            (dvars_pretheory formula-decl nil syntaxic_sets nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC16 0
          (pos_TCC16-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context" -) (("" (grind) nil nil)) nil))
            nil)
           ((dvars def-decl "nat" syntaxic_sets nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (< const-decl "bool" reals nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (dvars_pretheory formula-decl nil syntaxic_sets nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC17 0
          (pos_TCC17-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context" -) (("" (grind) nil nil)) nil))
            nil)
           ((dvars def-decl "nat" syntaxic_sets nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (< const-decl "bool" reals nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (pretheory formula-decl nil language nil)
            (dvars_pretheory formula-decl nil syntaxic_sets nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC18 0
          (pos_TCC18-1 nil 3583183232
           ("" (termination-tcc)
            (("" (rewrite "context" -) (("" (grind) nil nil)) nil))
            nil)
           ((dvars def-decl "nat" syntaxic_sets nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (< const-decl "bool" reals nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (weight def-decl "nat" language nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (pretheory formula-decl nil language nil)
            (dvars_pretheory formula-decl nil syntaxic_sets nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC19 0
          (pos_TCC19-1 nil 3583183232
           ("" (subtype-tcc)
            (("1" (rewrite "context" -) (("1" (grind) nil nil)) nil)
             ("2" (rewrite "context" -) (("2" (grind) nil nil)) nil)
             ("3" (rewrite "context" -) (("3" (grind) nil nil)) nil))
            nil)
           ((below type-eq-decl nil nat_types nil)
            (length def-decl "nat" context nil)
            (F const-decl
             "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (<= const-decl "bool" reals nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (weight def-decl "nat" language nil)
            (ord type-decl nil language nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (< const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (x!1 skolem-const-decl "{x | x < dvars(Γ!1)}" context nil)
            (Γ!1 skolem-const-decl "context" context nil)
            (rest shared-adt-accessor-decl
                  "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
                  language nil)
            (iconst? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (itype? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktheory? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kvar? adt-recognizer-decl "[semantic -> boolean]" language
             nil)
            (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (OR const-decl "[bool, bool -> bool]" booleans nil)
            (pretheory formula-decl nil language nil)
            (dvars_pretheory formula-decl nil syntaxic_sets nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (context formula-decl nil language nil))
           nil)))

