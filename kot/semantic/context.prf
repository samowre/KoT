(context (doubleplus_TCC1 0
          (doubleplus_TCC1-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (pretheory_is_context judgement-tcc nil subtype nil)
            (pretheory formula-decl nil language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil))
           nil))
         (doubleplus_TCC2 0
          (doubleplus_TCC2-1 nil 3581870591 ("" (grind) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC3 0
          (doubleplus_TCC3-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC4 0
          (doubleplus_TCC4-1 nil 3581870591
           ("" (skosimp* :preds? t)
            (("" (assert)
              (("" (assert)
                (("" (rewrite "context" +)
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ((posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil))
           nil))
         (doubleplus_TCC5 0
          (doubleplus_TCC5-1 nil 3581870591 ("" (grind) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC6 0
          (doubleplus_TCC6-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC7 0
          (doubleplus_TCC7-1 nil 3581870591 ("" (grind) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (Δ1!1 skolem-const-decl "semantic" context nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (weight def-decl "nat" language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC8 0
          (doubleplus_TCC8-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC9 0
          (doubleplus_TCC9-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC10 0
          (doubleplus_TCC10-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (weight def-decl "nat" language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC11 0
          (doubleplus_TCC11-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC12 0
          (doubleplus_TCC12-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC13 0
          (doubleplus_TCC13-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (Δ1!1 skolem-const-decl "semantic" context nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (weight def-decl "nat" language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC14 0
          (doubleplus_TCC14-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC15 0
          (doubleplus_TCC15-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC16 0
          (doubleplus_TCC16-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (Δ1!1 skolem-const-decl "semantic" context nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (weight def-decl "nat" language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC17 0
          (doubleplus_TCC17-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC18 0
          (doubleplus_TCC18-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC19 0
          (doubleplus_TCC19-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (Δ1!1 skolem-const-decl "semantic" context nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (weight def-decl "nat" language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC20 0
          (doubleplus_TCC20-1 nil 3581870591 ("" (cases-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC21 0
          (doubleplus_TCC21-1 nil 3582048724
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC22 0
          (doubleplus_TCC22-1 nil 3582048724 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (Δ1!1 skolem-const-decl "semantic" context nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (weight def-decl "nat" language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC23 0
          (doubleplus_TCC23-1 nil 3582048724 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC24 0
          (doubleplus_TCC24-1 nil 3582048724
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (doubleplus_TCC25 0
          (doubleplus_TCC25-1 nil 3582048724 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (Δ1!1 skolem-const-decl "semantic" context nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (weight def-decl "nat" language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC26 0
          (doubleplus_TCC26-1 nil 3582048724 ("" (cases-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (dsymbols_concat 0
          (dsymbols_concat-1 nil 3583170966
           (""
            (auto-rewrite ("definition" "closed?" "definition?" "find"
                           "union" "member" "subset?" "difference"
                           "type_"))
            (("" (induct "Δ" :name "context_induction")
              (("1" (grind)
                (("1" (grind) (("1" (grind-with-ext) nil nil)) nil))
                nil)
               ("2" (grind-with-ext) nil nil)
               ("3" (grind-with-ext) nil nil)
               ("4" (grind-with-ext) nil nil)
               ("5" (grind-with-ext) nil nil)
               ("6" (grind-with-ext) nil nil)
               ("7" (grind-with-ext) nil nil)
               ("8" (grind-with-ext) nil nil)
               ("9" (grind-with-ext) nil nil))
              nil))
            nil)
           ((int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (ord type-decl nil language nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (union const-decl "set" sets nil)
            (context_induction formula-decl nil inductions nil)
            (member const-decl "bool" sets nil)
            (emptyset const-decl "set" sets nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (add const-decl "(nonempty?)" sets nil)
            (nonempty? const-decl "bool" sets nil)
            (nonempty_union2 application-judgement "(nonempty?)" sets
             nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil))
           shostak))
         (symbols_concat 0
          (symbols_concat-1 nil 3583171006
           (""
            (auto-rewrite ("definition" "closed?" "definition?" "find"
                           "union" "member" "subset?" "difference"
                           "type_")
                          "dsymbols" "symbols" "++")
            (("" (induct "Δ" :name "context_induction")
              (("1" (grind-with-ext) nil nil)
               ("2" (grind-with-ext) nil nil)
               ("3" (grind-with-ext)
                (("1" (lemma "dsymbols_concat")
                  (("1" (grind-with-ext) nil nil)) nil)
                 ("2" (grind-with-ext)
                  (("2" (lemma "dsymbols_concat")
                    (("2" (grind-with-ext) nil nil)) nil))
                  nil)
                 ("3" (lemma "dsymbols_concat")
                  (("3" (grind-with-ext) nil nil)) nil)
                 ("4" (auto-rewrite "symbols_shift")
                  (("4" (assert) nil nil)) nil)
                 ("5" (auto-rewrite "symbols_shift")
                  (("5" (assert) nil nil)) nil))
                nil)
               ("4" (lemma "dsymbols_concat")
                (("4" (grind-with-ext) nil nil)) nil)
               ("5" (lemma "dsymbols_concat")
                (("5" (grind-with-ext)
                  (("1" (auto-rewrite "symbols_shift")
                    (("1" (assert) nil nil)) nil)
                   ("2" (auto-rewrite "symbols_shift")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("6" (lemma "dsymbols_concat")
                (("6" (grind-with-ext)
                  (("1" (auto-rewrite "symbols_shift")
                    (("1" (auto-rewrite "symbols_shift")
                      (("1" (auto-rewrite "symbols_shift")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (auto-rewrite "symbols_shift")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("7" (lemma "dsymbols_concat")
                (("7" (grind-with-ext)
                  (("1" (auto-rewrite "symbols_shift")
                    (("1" (assert) nil nil)) nil)
                   ("2" (auto-rewrite "symbols_shift")
                    (("2" (assert) nil nil)) nil)
                   ("3" (auto-rewrite "symbols_shift")
                    (("3" (assert) nil nil)) nil)
                   ("4" (auto-rewrite "symbols_shift")
                    (("4" (assert) nil nil)) nil))
                  nil))
                nil)
               ("8" (lemma "dsymbols_concat")
                (("8" (grind-with-ext)
                  (("1" (auto-rewrite "symbols_shift")
                    (("1" (assert) nil nil)) nil)
                   ("2" (auto-rewrite "symbols_shift")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("9" (lemma "dsymbols_concat")
                (("9" (grind-with-ext)
                  (("1" (auto-rewrite "symbols_shift")
                    (("1" (assert) nil nil)) nil)
                   ("2" (auto-rewrite "symbols_shift")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ((int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (syntaxic? const-decl "[semantic -> bool]" language nil)
            (syntaxic type-eq-decl nil language nil)
            (symbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (ord type-decl nil language nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (union const-decl "set" sets nil)
            (difference const-decl "set" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (context_induction formula-decl nil inductions nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (member const-decl "bool" sets nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (finite_difference application-judgement "finite_set"
             finite_sets nil)
            (emptyset const-decl "set" sets nil)
            (dsymbols_concat formula-decl nil context nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil))
           shostak))
         (dvars_concat 0
          (dvars_concat-1 nil 3583171134
           (""
            (auto-rewrite ("definition" "closed?" "definition?" "find"
                           "union" "member" "subset?" "difference"
                           "type_")
                          "dsymbols" "symbols" "++")
            (("" (induct "Δ" :name "context_induction")
              (("1" (grind-with-ext) nil nil)
               ("2" (grind-with-ext) nil nil)
               ("3" (grind-with-ext) nil nil)
               ("4" (grind-with-ext) nil nil)
               ("5" (grind-with-ext) nil nil)
               ("6" (grind-with-ext) nil nil)
               ("7" (grind-with-ext) nil nil)
               ("8" (grind-with-ext) nil nil)
               ("9" (grind-with-ext) nil nil))
              nil))
            nil)
           ((int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (ord type-decl nil language nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (context_induction formula-decl nil inductions nil)
            (dvars_pretheory formula-decl nil syntaxic_sets nil)
            (pretheory_is_context judgement-tcc nil subtype nil)
            (pretheory formula-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil))
           shostak))
         (vars_concat 0
          (vars_concat-1 nil 3582908413
           (""
            (auto-rewrite ("definition" "closed?" "definition?" "find"
                           "union" "member" "subset?" "difference"
                           "type_")
                          "dsymbols" "symbols" "++" "-" "+"
                          "dvars_concat" "vars_shift" "dvars_shift")
            (("" (induct "Δ" :name "context_induction")
              (("1" (grind-with-ext) nil nil)
               ("2" (grind-with-ext) nil nil)
               ("3" (assert)
                (("3" (skosimp* :preds? t)
                  (("3" (assert)
                    (("3" (inst - "Γ!1")
                      (("3" (rewrite -4 :dont-delete? t)
                        (("3" (assert)
                          (("3" (expand "union")
                            (("3" (assert)
                              (("3"
                                (grind-with-ext :if-match nil)
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind-with-ext) nil nil)
               ("5" (skosimp* :preds? t)
                (("5" (assert)
                  (("5" (inst - "Γ!1")
                    (("5" (grind-with-ext :if-match nil)
                      (("5" (expand "-")
                        (("5" (assert)
                          (("5" (expand "union")
                            (("5" (assert)
                              (("5"
                                (decompose-equality)
                                (("5"
                                  (assert)
                                  (("5"
                                    (typepred "dvars(Γ!1)")
                                    (("5"
                                      (assert)
                                      (("5" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("6" (grind-with-ext) nil nil)
               ("7" (grind-with-ext) nil nil)
               ("8" (grind-with-ext) nil nil)
               ("9" (grind-with-ext) nil nil))
              nil))
            nil)
           ((pretheory? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (context_induction formula-decl nil inductions nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (<= const-decl "bool" reals nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (weight def-decl "nat" language nil)
            (ord type-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (number nonempty-type-decl nil numbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil))
           shostak)))

