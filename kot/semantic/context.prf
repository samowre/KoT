(context (doubleplus_TCC1 0
          (doubleplus_TCC1-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil))
           nil))
         (doubleplus_TCC2 0
          (doubleplus_TCC2-1 nil 3581870591 ("" (grind) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (doubleplus_TCC3 0
          (doubleplus_TCC3-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil))
           nil))
         (doubleplus_TCC4 0
          (doubleplus_TCC4-1 nil 3581870591
           ("" (skosimp* :preds? t)
            (("" (assert)
              (("" (assert)
                (("" (rewrite "context" +)
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ((posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (context formula-decl nil language nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil))
           nil))
         (doubleplus_TCC5 0
          (doubleplus_TCC5-1 nil 3581870591 ("" (grind) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (doubleplus_TCC6 0
          (doubleplus_TCC6-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil))
           nil))
         (doubleplus_TCC7 0
          (doubleplus_TCC7-1 nil 3581870591 ("" (grind) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC8 0
          (doubleplus_TCC8-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (doubleplus_TCC9 0
          (doubleplus_TCC9-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil))
           nil))
         (doubleplus_TCC10 0
          (doubleplus_TCC10-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC11 0
          (doubleplus_TCC11-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (doubleplus_TCC12 0
          (doubleplus_TCC12-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil))
           nil))
         (doubleplus_TCC13 0
          (doubleplus_TCC13-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC14 0
          (doubleplus_TCC14-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (doubleplus_TCC15 0
          (doubleplus_TCC15-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil))
           nil))
         (doubleplus_TCC16 0
          (doubleplus_TCC16-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC17 0
          (doubleplus_TCC17-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (doubleplus_TCC18 0
          (doubleplus_TCC18-1 nil 3581870591
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil))
           nil))
         (doubleplus_TCC19 0
          (doubleplus_TCC19-1 nil 3581870591 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC20 0
          (doubleplus_TCC20-1 nil 3581870591 ("" (cases-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (doubleplus_TCC21 0
          (doubleplus_TCC21-1 nil 3582048724
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil))
           nil))
         (doubleplus_TCC22 0
          (doubleplus_TCC22-1 nil 3582048724 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC23 0
          (doubleplus_TCC23-1 nil 3582048724 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (doubleplus_TCC24 0
          (doubleplus_TCC24-1 nil 3582048724
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil))
           nil))
         (doubleplus_TCC25 0
          (doubleplus_TCC25-1 nil 3582048724 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (doubleplus_TCC26 0
          (doubleplus_TCC26-1 nil 3582048724 ("" (cases-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (concat_is_associative 0
          (concat_is_associative-1 nil 3583239198
           ("" (induct "Θ" :name "context_induction")
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil) ("6" (grind) nil nil)
             ("7" (grind) nil nil) ("8" (grind) nil nil)
             ("9" (grind) nil nil))
            nil)
           ((pretheory? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (context_induction formula-decl nil inductions nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (<= const-decl "bool" reals nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (weight def-decl "nat" language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (ord type-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil))
           shostak))
         (concat_empty_TCC1 0
          (concat_empty_TCC1-1 nil 3583239283
           ("" (subtype-tcc) nil nil)
           ((context formula-decl nil language nil)) nil))
         (concat_empty 0
          (concat_empty-1 nil 3583239292
           ("" (induct-and-simplify "Γ" :name "context_induction") nil
            nil)
           ((int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (even_minus_odd_is_odd application-judgement "odd_int"
             integers nil)
            (mult_divides2 application-judgement "(divides(m))" divides
             nil)
            (mult_divides1 application-judgement "(divides(n))" divides
             nil)
            (even_times_int_is_even application-judgement "even_int"
             integers nil)
            (nnint_times_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (context formula-decl nil language nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (number nonempty-type-decl nil numbers nil)
            (ord type-decl nil language nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (empty? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (〈〉 adt-constructor-decl "(empty?)" language nil)
            (context_induction formula-decl nil inductions nil))
           shostak))
         (concat__empty 0
          (concat__empty-1 nil 3583239289 ("" (grind) nil nil)
           ((++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil))
           shostak))
         (dsymbols_concat 0
          (dsymbols_concat-1 nil 3583170966
           (""
            (auto-rewrite ("definition" "closed?" "definition?" "find"
                           "union" "member" "subset?" "difference"
                           "type_"))
            (("" (induct "Δ" :name "context_induction")
              (("1" (grind)
                (("1" (grind) (("1" (grind-with-ext) nil nil)) nil))
                nil)
               ("2" (grind-with-ext) nil nil)
               ("3" (grind-with-ext) nil nil)
               ("4" (grind-with-ext) nil nil)
               ("5" (grind-with-ext) nil nil)
               ("6" (grind-with-ext) nil nil)
               ("7" (grind-with-ext) nil nil)
               ("8" (grind-with-ext) nil nil)
               ("9" (grind-with-ext) nil nil))
              nil))
            nil)
           ((int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (ord type-decl nil language nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (union const-decl "set" sets nil)
            (context_induction formula-decl nil inductions nil)
            (member const-decl "bool" sets nil)
            (emptyset const-decl "set" sets nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (concat__empty formula-decl nil context nil)
            (add const-decl "(nonempty?)" sets nil)
            (nonempty? const-decl "bool" sets nil)
            (nonempty_union2 application-judgement "(nonempty?)" sets
             nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil))
           shostak))
         (symbols_concat 0
          (symbols_concat-1 nil 3583171006
           (""
            (auto-rewrite ("definition" "closed?" "definition?" "find"
                           "union" "member" "subset?" "difference"
                           "type_")
                          "dsymbols" "symbols" "++")
            (("" (induct "Δ" :name "context_induction")
              (("1" (grind-with-ext) nil nil)
               ("2" (grind-with-ext) nil nil)
               ("3" (grind-with-ext)
                (("1" (lemma "dsymbols_concat")
                  (("1" (grind-with-ext) nil nil)) nil)
                 ("2" (grind-with-ext)
                  (("2" (lemma "dsymbols_concat")
                    (("2" (grind-with-ext) nil nil)) nil))
                  nil)
                 ("3" (lemma "dsymbols_concat")
                  (("3" (grind-with-ext) nil nil)) nil)
                 ("4" (auto-rewrite "symbols_shift")
                  (("4" (assert) nil nil)) nil)
                 ("5" (auto-rewrite "symbols_shift")
                  (("5" (assert) nil nil)) nil))
                nil)
               ("4" (lemma "dsymbols_concat")
                (("4" (grind-with-ext) nil nil)) nil)
               ("5" (lemma "dsymbols_concat")
                (("5" (grind-with-ext)
                  (("1" (auto-rewrite "symbols_shift")
                    (("1" (assert) nil nil)) nil)
                   ("2" (auto-rewrite "symbols_shift")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("6" (lemma "dsymbols_concat")
                (("6" (grind-with-ext)
                  (("1" (auto-rewrite "symbols_shift")
                    (("1" (auto-rewrite "symbols_shift")
                      (("1" (auto-rewrite "symbols_shift")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (auto-rewrite "symbols_shift")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("7" (lemma "dsymbols_concat")
                (("7" (grind-with-ext)
                  (("1" (auto-rewrite "symbols_shift")
                    (("1" (assert) nil nil)) nil)
                   ("2" (auto-rewrite "symbols_shift")
                    (("2" (assert) nil nil)) nil)
                   ("3" (auto-rewrite "symbols_shift")
                    (("3" (assert) nil nil)) nil)
                   ("4" (auto-rewrite "symbols_shift")
                    (("4" (assert) nil nil)) nil))
                  nil))
                nil)
               ("8" (lemma "dsymbols_concat")
                (("8" (grind-with-ext)
                  (("1" (auto-rewrite "symbols_shift")
                    (("1" (assert) nil nil)) nil)
                   ("2" (auto-rewrite "symbols_shift")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("9" (lemma "dsymbols_concat")
                (("9" (grind-with-ext)
                  (("1" (auto-rewrite "symbols_shift")
                    (("1" (assert) nil nil)) nil)
                   ("2" (auto-rewrite "symbols_shift")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ((int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (syntaxic? const-decl "[semantic -> bool]" language nil)
            (syntaxic type-eq-decl nil language nil)
            (symbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (ord type-decl nil language nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (union const-decl "set" sets nil)
            (difference const-decl "set" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (context_induction formula-decl nil inductions nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (member const-decl "bool" sets nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (finite_difference application-judgement "finite_set"
             finite_sets nil)
            (emptyset const-decl "set" sets nil)
            (concat__empty formula-decl nil context nil)
            (dsymbols_concat formula-decl nil context nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil))
           shostak))
         (dvars_concat 0
          (dvars_concat-1 nil 3583171134
           (""
            (auto-rewrite ("definition" "closed?" "definition?" "find"
                           "union" "member" "subset?" "difference"
                           "type_")
                          "dsymbols" "symbols" "++")
            (("" (induct "Δ" :name "context_induction")
              (("1" (grind-with-ext) nil nil)
               ("2" (grind-with-ext) nil nil)
               ("3" (grind-with-ext) nil nil)
               ("4" (grind-with-ext) nil nil)
               ("5" (grind-with-ext) nil nil)
               ("6" (grind-with-ext) nil nil)
               ("7" (grind-with-ext) nil nil)
               ("8" (grind-with-ext) nil nil)
               ("9" (grind-with-ext) nil nil))
              nil))
            nil)
           ((int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (ord type-decl nil language nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (context_induction formula-decl nil inductions nil)
            (dvars_pretheory formula-decl nil syntaxic_sets nil)
            (context formula-decl nil language nil)
            (pretheory formula-decl nil language nil)
            (concat__empty formula-decl nil context nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil))
           shostak))
         (vars_concat 0
          (vars_concat-1 nil 3582908413
           ("" (auto-rewrite "dvars_concat")
            (("" (induct "Δ" :name "context_induction")
              (("1" (grind) (("1" (grind-with-ext) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (grind) (("3" (grind-with-ext) nil nil)) nil)
               ("4" (grind) nil nil)
               ("5" (grind) (("5" (grind-with-ext) nil nil)) nil)
               ("6" (grind) (("6" (grind-with-ext) nil nil)) nil)
               ("7" (grind) (("7" (grind-with-ext) nil nil)) nil)
               ("8" (grind) (("8" (grind-with-ext) nil nil)) nil)
               ("9" (grind) (("9" (grind-with-ext) nil nil)) nil))
              nil))
            nil)
           ((int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (set type-eq-decl nil sets nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (syntaxic? const-decl "[semantic -> bool]" language nil)
            (syntaxic type-eq-decl nil language nil)
            (vars def-decl "set[nat]" syntaxic_sets nil)
            (ord type-decl nil language nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (union const-decl "set" sets nil)
            (- const-decl "set[nat]" syntaxic_sets nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (context_induction formula-decl nil inductions nil)
            (emptyset const-decl "set" sets nil)
            (member const-decl "bool" sets nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (concat__empty formula-decl nil context nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (dvars_concat formula-decl nil context nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil))
           shostak))
         (closed_concat 0
          (closed_concat-1 nil 3583176480
           (""
            (auto-rewrite ("symbols_concat" "dsymbols_concat"
                           "vars_concat" "dvars_concat"))
            (("" (grind-with-ext :if-match nil)
              (("1" (grind) nil nil)
               ("2" (inst -5 "x!1 - dvars(Δ!1)")
                (("2" (grind) nil nil)) nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (grind) nil nil) ("6" (grind) nil nil)
               ("7" (grind) nil nil)
               ("8" (inst -7 "x!1 + dvars(Δ!1)")
                (("8" (grind) nil nil)) nil))
              nil))
            nil)
           ((symbols_concat formula-decl nil context nil)
            (member const-decl "bool" sets nil)
            (difference const-decl "set" sets nil)
            (union const-decl "set" sets nil)
            (subset? const-decl "bool" sets nil)
            (closed? const-decl "bool" syntaxic_sets nil)
            (dvars_concat formula-decl nil context nil)
            (dsymbols_concat formula-decl nil context nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (<= const-decl "bool" reals nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (weight def-decl "nat" language nil)
            (ord type-decl nil language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (vars def-decl "set[nat]" syntaxic_sets nil)
            (syntaxic type-eq-decl nil language nil)
            (syntaxic? const-decl "[semantic -> bool]" language nil)
            (set type-eq-decl nil sets nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (- const-decl "set[nat]" syntaxic_sets nil)
            (vars_concat formula-decl nil context nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (OR const-decl "[bool, bool -> bool]" booleans nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (real_ge_is_total_order name-judgement
             "(total_order?[real])" real_props nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil))
           shostak))
         (uniques_concat 0
          (uniques_concat-1 nil 3583176842
           ("" (auto-rewrite "dsymbols_concat" "symbols_concat")
            (("" (induct "Δ" :name "context_induction")
              (("1" (grind) nil nil)
               ("2" (skosimp* :preds? t)
                (("2" (assert)
                  (("2" (inst - "Γ!1")
                    (("2" (grind :if-match nil)
                      (("1" (grind :polarity? t) nil nil)
                       ("2" (grind :polarity? t) nil nil)
                       ("3" (grind :polarity? t) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skosimp* :preds? t)
                (("3" (inst - "Γ!1")
                  (("3" (grind :if-match nil)
                    (("1" (grind :polarity? t) nil nil)
                     ("2" (grind :polarity? t) nil nil)
                     ("3" (grind :polarity? t) nil nil)
                     ("4" (grind :polarity? t) nil nil)
                     ("5" (grind :polarity? t) nil nil))
                    nil))
                  nil))
                nil)
               ("4" (skosimp* :preds? t)
                (("4" (inst - "Γ!1")
                  (("4" (grind :if-match nil)
                    (("1" (grind :polarity? t) nil nil)
                     ("2" (grind :polarity? t) nil nil)
                     ("3" (grind :polarity? t) nil nil)
                     ("4" (grind :polarity? t) nil nil)
                     ("5" (grind :polarity? t) nil nil))
                    nil))
                  nil))
                nil)
               ("5" (skosimp* :preds? t)
                (("5" (inst - "Γ!1")
                  (("5" (grind :if-match nil) nil nil)) nil))
                nil)
               ("6" (skosimp* :preds? t)
                (("6" (inst - "Γ!1")
                  (("6" (grind :if-match nil)
                    (("1" (grind :polarity? t) nil nil)
                     ("2" (grind :polarity? t) nil nil)
                     ("3" (grind :polarity? t) nil nil)
                     ("4" (grind :polarity? t) nil nil)
                     ("5" (grind :polarity? t) nil nil))
                    nil))
                  nil))
                nil)
               ("7" (skosimp* :preds? t)
                (("7" (inst - "Γ!1")
                  (("7" (grind :if-match nil)
                    (("1" (grind :polarity? t) nil nil)
                     ("2" (grind :polarity? t) nil nil)
                     ("3" (grind :polarity? t) nil nil)
                     ("4" (grind :polarity? t) nil nil)
                     ("5" (grind :polarity? t) nil nil))
                    nil))
                  nil))
                nil)
               ("8" (skosimp* :preds? t)
                (("8" (inst - "Γ!1")
                  (("8" (grind :if-match nil)
                    (("1" (grind :polarity? t) nil nil)
                     ("2" (grind :polarity? t) nil nil)
                     ("3" (grind :polarity? t) nil nil)
                     ("4" (grind :polarity? t) nil nil)
                     ("5" (grind :polarity? t) nil nil))
                    nil))
                  nil))
                nil)
               ("9" (skosimp* :preds? t)
                (("9" (inst - "Γ!1")
                  (("9" (grind :if-match nil)
                    (("1" (grind :polarity? t) nil nil)
                     ("2" (grind :polarity? t) nil nil)
                     ("3" (grind :polarity? t) nil nil)
                     ("4" (grind :polarity? t) nil nil)
                     ("5" (grind :polarity? t) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (IFF const-decl "[bool, bool -> bool]" booleans nil)
            (map? const-decl "[semantic -> bool]" language nil)
            (map type-eq-decl nil language nil)
            (uniques? def-decl "bool" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (ord type-decl nil language nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (disjoint? const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (context_induction formula-decl nil inductions nil)
            (finite_intersection1 application-judgement "finite_set"
             finite_sets nil)
            (empty? const-decl "bool" sets nil)
            (intersection const-decl "set" sets nil)
            (emptyset const-decl "set" sets nil)
            (member const-decl "bool" sets nil)
            (concat__empty formula-decl nil context nil)
            (dsymbols_concat formula-decl nil context nil)
            (union const-decl "set" sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil))
           shostak))
         (length_TCC1 0
          (length_TCC1-1 nil 3583183232 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (length_TCC2 0
          (length_TCC2-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((context formula-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil))
           nil))
         (length_TCC3 0
          (length_TCC3-1 nil 3583183232
           ("" (termination-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((context formula-decl nil language nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil))
           nil))
         (length_concat 0
          (length_concat-1 nil 3583238861
           ("" (induct "Δ" :name "context_induction")
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil) ("6" (grind) nil nil)
             ("7" (grind) nil nil) ("8" (grind) nil nil)
             ("9" (grind) nil nil))
            nil)
           ((pretheory? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (concat__empty formula-decl nil context nil)
            (context_induction formula-decl nil inductions nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (<= const-decl "bool" reals nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (weight def-decl "nat" language nil)
            (ord type-decl nil language nil)
            (length def-decl "nat" context nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (number nonempty-type-decl nil numbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil))
           shostak))
         (length_zero 0
          (length_zero-1 nil 3583248376 ("" (grind) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (length def-decl "nat" context nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil))
           shostak))
         (pos_TCC1 0
          (pos_TCC1-1 nil 3583183232 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC2 0
          (pos_TCC2-1 nil 3583183232 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC3 0
          (pos_TCC3-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "dsymbols") (("" (grind) nil nil)) nil)) nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC4 0
          (pos_TCC4-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "dsymbols") (("" (grind) nil nil)) nil)) nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (length def-decl "nat" context nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC5 0
          (pos_TCC5-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((context formula-decl nil language nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (emptyset const-decl "set" sets nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
           nil))
         (pos_TCC6 0
          (pos_TCC6-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((context formula-decl nil language nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (emptyset const-decl "set" sets nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
           nil))
         (pos_TCC7 0
          (pos_TCC7-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((context formula-decl nil language nil)
            (emptyset const-decl "set" sets nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
           nil))
         (pos_TCC8 0
          (pos_TCC8-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((context formula-decl nil language nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (emptyset const-decl "set" sets nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (length def-decl "nat" context nil)
            (add const-decl "(nonempty?)" sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
           nil))
         (pos_TCC9 0
          (pos_TCC9-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((context formula-decl nil language nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (emptyset const-decl "set" sets nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
           nil))
         (pos_TCC10 0
          (pos_TCC10-1 nil 3583183232
           ("" (termination-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((context formula-decl nil language nil)
            (emptyset const-decl "set" sets nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
           nil))
         (pos_TCC11 0
          (pos_TCC11-1 nil 3583183232
           ("" (subtype-tcc)
            (("1" (rewrite "context") (("1" (grind) nil nil)) nil)
             ("2" (rewrite "context") (("2" (grind) nil nil)) nil)
             ("3" (rewrite "context")
              (("3" (rewrite "context" -) (("3" (grind) nil nil)) nil))
              nil))
            nil)
           ((context formula-decl nil language nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (emptyset const-decl "set" sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (member const-decl "bool" sets nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
           nil))
         (pos_TCC12 0
          (pos_TCC12-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
           ((context formula-decl nil language nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (emptyset const-decl "set" sets nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (add const-decl "(nonempty?)" sets nil)
            (member const-decl "bool" sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
           nil))
         (pos_TCC13 0
          (pos_TCC13-1 nil 3583183232
           ("" (subtype-tcc)
            (("1" (rewrite "context") (("1" (grind) nil nil)) nil)
             ("2" (rewrite "context") (("2" (grind) nil nil)) nil)
             ("3" (rewrite "context" -) (("3" (grind) nil nil)) nil))
            nil)
           ((context formula-decl nil language nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (emptyset const-decl "set" sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (member const-decl "bool" sets nil)
            (OR const-decl "[bool, bool -> bool]" booleans nil)
            (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kvar? adt-recognizer-decl "[semantic -> boolean]" language
             nil)
            (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktheory? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (itype? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (iconst? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (rest shared-adt-accessor-decl
                  "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
                  language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (length def-decl "nat" context nil))
           nil))
         (pos_concat_TCC1 0
          (pos_concat_TCC1-1 nil 3583238707 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (dsymbols_concat formula-decl nil context nil)
            (member const-decl "bool" sets nil))
           nil))
         (pos_concat_TCC2 0
          (pos_concat_TCC2-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (dsymbols_concat formula-decl nil context nil)
            (member const-decl "bool" sets nil))
           nil))
         (pos_concat_TCC3 0
          (pos_concat_TCC3-1 nil 3583244949
           ("" (subtype-tcc) (("" (grind) nil nil)) nil)
           ((union const-decl "set" sets nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (member const-decl "bool" sets nil)
            (dsymbols_concat formula-decl nil context nil))
           nil))
         (pos_concat 0
          (pos_concat-1 nil 3583238763
           ("" (induct "Δ" :name "context_induction")
            (("1" (skosimp* :preds? t)
              (("1" (grind :if-match nil) nil nil)) nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil) ("5" (grind) nil nil)
             ("6" (grind) nil nil) ("7" (grind) nil nil)
             ("8" (grind) nil nil) ("9" (grind) nil nil)
             ("10" (grind) nil nil) ("11" (grind) nil nil)
             ("12" (grind) nil nil))
            nil)
           ((pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (add const-decl "(nonempty?)" sets nil)
            (length_concat formula-decl nil context nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (emptyset const-decl "set" sets nil)
            (concat__empty formula-decl nil context nil)
            (context_induction formula-decl nil inductions nil)
            (IF const-decl "[boolean, T, T -> T]" if_def nil)
            (nonneg_int nonempty-type-eq-decl nil integers nil)
            (length def-decl "nat" context nil)
            (< const-decl "bool" reals nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (<= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (ord type-decl nil language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (number nonempty-type-decl nil numbers nil)
            (dsymbols_concat formula-decl nil context nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (union const-decl "set" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil))
           shostak))
         (pos_TCC14 0
          (pos_TCC14-1 nil 3583183232 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (pos_TCC15 0
          (pos_TCC15-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context" -) (("" (grind) nil nil)) nil))
            nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (length def-decl "nat" context nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC16 0
          (pos_TCC16-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context" -) (("" (grind) nil nil)) nil))
            nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil))
           nil))
         (pos_TCC17 0
          (pos_TCC17-1 nil 3583183232
           ("" (subtype-tcc)
            (("" (rewrite "context" -) (("" (grind) nil nil)) nil))
            nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (real_ge_is_total_order name-judgement
             "(total_order?[real])" real_props nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC18 0
          (pos_TCC18-1 nil 3583183232
           ("" (termination-tcc)
            (("" (rewrite "context" -) (("" (grind) nil nil)) nil))
            nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC19 0
          (pos_TCC19-1 nil 3583183232
           ("" (subtype-tcc)
            (("1" (rewrite "context" -) (("1" (grind) nil nil)) nil)
             ("2" (rewrite "context" -) (("2" (grind) nil nil)) nil)
             ("3" (rewrite "context" -) (("3" (grind) nil nil)) nil))
            nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (< const-decl "bool" reals nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (ord type-decl nil language nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (length def-decl "nat" context nil)
            (below type-eq-decl nil nat_types nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC20 0
          (pos_TCC20-1 nil 3583255570
           ("" (grind)
            (("" (rewrite "context" -) (("" (grind) nil nil)) nil))
            nil)
           ((context formula-decl nil language nil)
            (dvars_pretheory formula-decl nil syntaxic_sets nil)
            (pretheory formula-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (dvars def-decl "nat" syntaxic_sets nil))
           nil))
         (pos_TCC21 0
          (pos_TCC21-1 nil 3583255570
           ("" (subtype-tcc)
            (("" (rewrite "context" -) (("" (grind) nil nil)) nil))
            nil)
           ((dvars def-decl "nat" syntaxic_sets nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (< const-decl "bool" reals nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (dvars_pretheory formula-decl nil syntaxic_sets nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC22 0
          (pos_TCC22-1 nil 3583255570
           ("" (subtype-tcc)
            (("" (rewrite "context" -) (("" (grind) nil nil)) nil))
            nil)
           ((dvars def-decl "nat" syntaxic_sets nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (< const-decl "bool" reals nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (pretheory formula-decl nil language nil)
            (dvars_pretheory formula-decl nil syntaxic_sets nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC23 0
          (pos_TCC23-1 nil 3583255570
           ("" (termination-tcc)
            (("" (rewrite "context" -) (("" (grind) nil nil)) nil))
            nil)
           ((dvars def-decl "nat" syntaxic_sets nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (< const-decl "bool" reals nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (weight def-decl "nat" language nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (pretheory formula-decl nil language nil)
            (dvars_pretheory formula-decl nil syntaxic_sets nil)
            (context formula-decl nil language nil))
           nil))
         (pos_TCC24 0
          (pos_TCC24-1 nil 3583255570
           ("" (subtype-tcc)
            (("1" (rewrite "context" -) (("1" (grind) nil nil)) nil)
             ("2" (rewrite "context" -) (("2" (grind) nil nil)) nil)
             ("3" (rewrite "context" -) (("3" (grind) nil nil)) nil))
            nil)
           ((below type-eq-decl nil nat_types nil)
            (length def-decl "nat" context nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (<= const-decl "bool" reals nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (weight def-decl "nat" language nil)
            (ord type-decl nil language nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (< const-decl "bool" reals nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (rest shared-adt-accessor-decl
                  "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
                  language nil)
            (iconst? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (itype? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktheory? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kvar? adt-recognizer-decl "[semantic -> boolean]" language
             nil)
            (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (OR const-decl "[bool, bool -> bool]" booleans nil)
            (pretheory formula-decl nil language nil)
            (dvars_pretheory formula-decl nil syntaxic_sets nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (context formula-decl nil language nil))
           nil))
         (find_TCC1 0
          (find_TCC1-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
           nil))
         (find_TCC2 0
          (find_TCC2-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (context formula-decl nil language nil))
           nil))
         (find_TCC3 0
          (find_TCC3-1 nil 3583244949 ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (weight def-decl "nat" language nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil))
           nil))
         (find_TCC4 0
          (find_TCC4-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (context formula-decl nil language nil))
           nil))
         (find_concat 0
          (find_concat-1 nil 3583248651
           ("" (induct "Δ" :name "context_induction")
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil) ("6" (grind) nil nil)
             ("7" (grind) nil nil) ("8" (grind) nil nil)
             ("9" (grind) nil nil) ("10" (grind) nil nil)
             ("11" (grind) nil nil) ("12" (grind) nil nil))
            nil)
           ((pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (add const-decl "(nonempty?)" sets nil)
            (concat__empty formula-decl nil context nil)
            (emptyset const-decl "set" sets nil)
            (context_induction formula-decl nil inductions nil)
            (IF const-decl "[boolean, T, T -> T]" if_def nil)
            (find def-decl "context" context nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (<= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (ord type-decl nil language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (number nonempty-type-decl nil numbers nil)
            (dsymbols_concat formula-decl nil context nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (union const-decl "set" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil))
           shostak))
         (length_find_TCC1 0
          (length_find_TCC1-1 nil 3583252868 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (member const-decl "bool" sets nil))
           nil))
         (length_find 0
          (length_find-1 nil 3583245374
           ("" (induct "Γ" :name "context_induction")
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil) ("6" (grind) nil nil)
             ("7" (grind) nil nil) ("8" (grind) nil nil)
             ("9" (grind) nil nil) ("10" (grind) nil nil))
            nil)
           ((pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (add const-decl "(nonempty?)" sets nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (emptyset const-decl "set" sets nil)
            (context_induction formula-decl nil inductions nil)
            (< const-decl "bool" reals nil)
            (find def-decl "context" context nil)
            (length def-decl "nat" context nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (number nonempty-type-decl nil numbers nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
           shostak))
         (symbols_find 0
          (symbols_find-1 nil 3583246303
           ("" (induct "Γ" :name "context_induction")
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil) ("6" (grind) nil nil)
             ("7" (grind) nil nil) ("8" (grind) nil nil)
             ("9" (grind) nil nil) ("10" (grind) nil nil))
            nil)
           ((pretheory? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (difference const-decl "set" sets nil)
            (union const-decl "set" sets nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (add const-decl "(nonempty?)" sets nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (emptyset const-decl "set" sets nil)
            (context_induction formula-decl nil inductions nil)
            (find def-decl "context" context nil)
            (symbols def-decl "set[symbol]" syntaxic_sets nil)
            (syntaxic type-eq-decl nil language nil)
            (syntaxic? const-decl "[semantic -> bool]" language nil)
            (subset? const-decl "bool" sets nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
           shostak))
         (vars_find 0
          (vars_find-1 nil 3583246313
           ("" (induct "Γ" :name "context_induction")
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil) ("6" (grind) nil nil)
             ("7" (grind) nil nil) ("8" (grind) nil nil)
             ("9" (grind) nil nil) ("10" (grind) nil nil))
            nil)
           ((pretheory? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (- const-decl "set[nat]" syntaxic_sets nil)
            (union const-decl "set" sets nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (add const-decl "(nonempty?)" sets nil)
            (real_ge_is_total_order name-judgement
             "(total_order?[real])" real_props nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (emptyset const-decl "set" sets nil)
            (context_induction formula-decl nil inductions nil)
            (find def-decl "context" context nil)
            (vars def-decl "set[nat]" syntaxic_sets nil)
            (syntaxic type-eq-decl nil language nil)
            (syntaxic? const-decl "[semantic -> bool]" language nil)
            (subset? const-decl "bool" sets nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
           shostak))
         (extract_TCC1 0
          (extract_TCC1-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((context formula-decl nil language nil)) nil))
         (extract_TCC2 0
          (extract_TCC2-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC3 0
          (extract_TCC3-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil)
            (member const-decl "bool" sets nil))
           nil))
         (extract_TCC4 0
          (extract_TCC4-1 nil 3583244949 ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC5 0
          (extract_TCC5-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC6 0
          (extract_TCC6-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC7 0
          (extract_TCC7-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil)
            (member const-decl "bool" sets nil))
           nil))
         (extract_TCC8 0
          (extract_TCC8-1 nil 3583244949 ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC9 0
          (extract_TCC9-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((context formula-decl nil language nil)) nil))
         (extract_TCC10 0
          (extract_TCC10-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC11 0
          (extract_TCC11-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil)
            (member const-decl "bool" sets nil))
           nil))
         (extract_TCC12 0
          (extract_TCC12-1 nil 3583244949
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC13 0
          (extract_TCC13-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC14 0
          (extract_TCC14-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (context formula-decl nil language nil)
            (member const-decl "bool" sets nil))
           nil))
         (extract_TCC15 0
          (extract_TCC15-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC16 0
          (extract_TCC16-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC17 0
          (extract_TCC17-1 nil 3583244949
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC18 0
          (extract_TCC18-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil)
            (member const-decl "bool" sets nil))
           nil))
         (extract_TCC19 0
          (extract_TCC19-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC20 0
          (extract_TCC20-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC21 0
          (extract_TCC21-1 nil 3583244949
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC22 0
          (extract_TCC22-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil)
            (member const-decl "bool" sets nil))
           nil))
         (extract_TCC23 0
          (extract_TCC23-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC24 0
          (extract_TCC24-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC25 0
          (extract_TCC25-1 nil 3583244949
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC26 0
          (extract_TCC26-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil)
            (member const-decl "bool" sets nil))
           nil))
         (extract_TCC27 0
          (extract_TCC27-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC28 0
          (extract_TCC28-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC29 0
          (extract_TCC29-1 nil 3583244949
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC30 0
          (extract_TCC30-1 nil 3583244949 ("" (cases-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil)
            (member const-decl "bool" sets nil))
           nil))
         (extract_TCC31 0
          (extract_TCC31-1 nil 3583255570
           ("" (termination-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (extract_TCC32 0
          (extract_TCC32-1 nil 3583255570 ("" (cases-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (context formula-decl nil language nil)
            (emptyset const-decl "set" sets nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil))
           nil))
         (extract_concat_TCC1 0
          (extract_concat_TCC1-1 nil 3583248760
           ("" (subtype-tcc)
            (("" (rewrite "context" -) (("" (grind) nil nil)) nil))
            nil)
           ((context formula-decl nil language nil)
            (union const-decl "set" sets nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (member const-decl "bool" sets nil)
            (dsymbols_concat formula-decl nil context nil))
           nil))
         (extract_concat 0
          (extract_concat-1 nil 3583248760
           ("" (induct "Δ" :name "context_induction")
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil) ("6" (grind) nil nil)
             ("7" (grind) nil nil) ("8" (grind) nil nil)
             ("9" (grind) nil nil) ("10" (grind) nil nil))
            nil)
           ((pretheory? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (add const-decl "(nonempty?)" sets nil)
            (concat__empty formula-decl nil context nil)
            (emptyset const-decl "set" sets nil)
            (context_induction formula-decl nil inductions nil)
            (IF const-decl "[boolean, T, T -> T]" if_def nil)
            (extract def-decl "context" context nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (<= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (ord type-decl nil language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (number nonempty-type-decl nil numbers nil)
            (dsymbols_concat formula-decl nil context nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (union const-decl "set" sets nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil))
           shostak))
         (length_extract 0
          (length_extract-1 nil 3583245400
           ("" (induct-and-simplify "Γ" :name "context_induction") nil
            nil)
           ((semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (length def-decl "nat" context nil)
            (extract def-decl "context" context nil)
            (context_induction formula-decl nil inductions nil)
            (emptyset const-decl "set" sets nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (add const-decl "(nonempty?)" sets nil))
           shostak))
         (dsymbols_extract 0
          (dsymbols_extract-1 nil 3583245408
           ("" (induct-and-simplify "Γ" :name "context_induction")
            (("1" (grind) (("1" (grind-with-ext) nil nil)) nil)
             ("2" (grind-with-ext) nil nil)
             ("3" (grind-with-ext) nil nil)
             ("4" (grind-with-ext) nil nil)
             ("5" (grind-with-ext) nil nil)
             ("6" (grind-with-ext) nil nil)
             ("7" (grind-with-ext) nil nil)
             ("8" (grind-with-ext) nil nil)
             ("9" (grind-with-ext) nil nil)
             ("10" (grind-with-ext) nil nil)
             ("11" (grind-with-ext) nil nil)
             ("12" (grind-with-ext) nil nil)
             ("13" (grind-with-ext) nil nil)
             ("14" (grind-with-ext) nil nil))
            nil)
           ((nonempty? const-decl "bool" sets nil)
            (nonempty_add_finite application-judgement
             "non_empty_finite_set" finite_sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (emptyset const-decl "set" sets nil)
            (nonempty_singleton_finite application-judgement
             "non_empty_finite_set" finite_sets nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (extract def-decl "context" context nil)
            (singleton? const-decl "bool" sets nil)
            (singleton const-decl "(singleton?)" sets nil)
            (context_induction formula-decl nil inductions nil))
           shostak))
         (dvars_extract 0
          (dvars_extract-1 nil 3583245432
           ("" (induct-and-simplify "Γ" :name "context_induction") nil
            nil)
           ((semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (extract def-decl "context" context nil)
            (context_induction formula-decl nil inductions nil)
            (emptyset const-decl "set" sets nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (add const-decl "(nonempty?)" sets nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (dvars_pretheory formula-decl nil syntaxic_sets nil))
           shostak))
         (vars_extract 0
          (vars_extract-1 nil 3583254269
           ("" (induct-and-simplify "Γ" :name "context_induction") nil
            nil)
           ((dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (set type-eq-decl nil sets nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (member const-decl "bool" sets nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (subset? const-decl "bool" sets nil)
            (- const-decl "set[nat]" syntaxic_sets nil)
            (syntaxic? const-decl "[semantic -> bool]" language nil)
            (syntaxic type-eq-decl nil language nil)
            (vars def-decl "set[nat]" syntaxic_sets nil)
            (extract def-decl "context" context nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (find def-decl "context" context nil)
            (context_induction formula-decl nil inductions nil)
            (emptyset const-decl "set" sets nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (subset_is_partial_order name-judgement
             "(partial_order?[set[T]])" sets_lemmas nil)
            (add const-decl "(nonempty?)" sets nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil)
            (dvars_pretheory formula-decl nil syntaxic_sets nil)
            (union const-decl "set" sets nil))
           shostak))
         (symbols_extract 0
          (symbols_extract-1 nil 3583254296
           ("" (induct-and-simplify "Γ" :name "context_induction") nil
            nil)
           ((dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (set type-eq-decl nil sets nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (member const-decl "bool" sets nil)
            (subset? const-decl "bool" sets nil)
            (syntaxic? const-decl "[semantic -> bool]" language nil)
            (syntaxic type-eq-decl nil language nil)
            (symbols def-decl "set[symbol]" syntaxic_sets nil)
            (extract def-decl "context" context nil)
            (union const-decl "set" sets nil)
            (find def-decl "context" context nil)
            (context_induction formula-decl nil inductions nil)
            (emptyset const-decl "set" sets nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (subset_is_partial_order name-judgement
             "(partial_order?[set[T]])" sets_lemmas nil)
            (add const-decl "(nonempty?)" sets nil)
            (difference const-decl "set" sets nil))
           shostak))
         (rest_extract_TCC1 0
          (rest_extract_TCC1-1 nil 3583264999
           ("" (subtype-tcc) nil nil) nil nil))
         (rest_extract 0
          (rest_extract-1 nil 3583264999
           ("" (induct "Γ" :name "context_induction")
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil) ("6" (grind) nil nil)
             ("7" (grind) nil nil) ("8" (grind) nil nil)
             ("9" (grind) nil nil)
             ("10" (delete 2)
              (("10" (skosimp* :preds? t)
                (("10" (invoke (typepred "%1") (~ "extract(%,%)"))
                  (("10" (rewrite context -1)
                    (("10" (grind)
                      (("10" (use length_extract)
                        (("10" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((iconst? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (itype? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktheory? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kvar? adt-recognizer-decl "[semantic -> boolean]" language
             nil)
            (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (extract def-decl "context" context nil)
            (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (OR const-decl "[bool, bool -> bool]" booleans nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (member const-decl "bool" sets nil)
            (set type-eq-decl nil sets nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (rest shared-adt-accessor-decl
                  "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
                  language nil)
            (empty? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (〈〉 adt-constructor-decl "(empty?)" language nil)
            (context_induction formula-decl nil inductions nil)
            (emptyset const-decl "set" sets nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (add const-decl "(nonempty?)" sets nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil)
            (context formula-decl nil language nil)
            (length_extract formula-decl nil context nil)
            (length def-decl "nat" context nil))
           shostak))
         (s_extract_TCC1 0
          (s_extract_TCC1-1 nil 3583265571 ("" (subtype-tcc) nil nil)
           nil nil))
         (s_extract 0
          (s_extract-1 nil 3583265572
           ("" (induct "Γ" :name "context_induction")
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil) ("6" (grind) nil nil)
             ("7" (grind) nil nil) ("8" (grind) nil nil)
             ("9" (grind) nil nil)
             ("10" (grind)
              (("10" (invoke (typepred "%1") (~ "extract(%,%)"))
                (("10" (rewrite context -1)
                  (("10" (grind)
                    (("1" (use length_extract) (("1" (grind) nil nil))
                      nil)
                     ("2" (use dsymbols_extract)
                      (("2" (assert)
                        (("2" (rewrite rest_extract)
                          (("2" (assert)
                            (("2" (decompose-equality -1)
                              (("2"
                                (inst - s1!1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((context formula-decl nil language nil)
            (dsymbols_extract formula-decl nil context nil)
            (rest_extract formula-decl nil context nil)
            (singleton? const-decl "bool" sets nil)
            (singleton const-decl "(singleton?)" sets nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (nonempty_singleton_finite application-judgement
             "non_empty_finite_set" finite_sets nil)
            (length_extract formula-decl nil context nil)
            (length def-decl "nat" context nil)
            (pretheory? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (add const-decl "(nonempty?)" sets nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (emptyset const-decl "set" sets nil)
            (context_induction formula-decl nil inductions nil)
            (s shared-adt-accessor-decl
             "[{x: semantic |     symbol?(x) OR dot?(x) OR ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   symbol]" language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (OR const-decl "[bool, bool -> bool]" booleans nil)
            (symbol? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (extract def-decl "context" context nil)
            (dot? adt-recognizer-decl "[semantic -> boolean]" language
             nil)
            (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktheory? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (itype? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (iconst? adt-recognizer-decl "[semantic -> boolean]"
             language nil))
           shostak))
         (after_TCC1 0
          (after_TCC1-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((context formula-decl nil language nil)) nil))
         (after_TCC2 0
          (after_TCC2-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (after_TCC3 0
          (after_TCC3-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((context formula-decl nil language nil)) nil))
         (after_TCC4 0
          (after_TCC4-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (context formula-decl nil language nil))
           nil))
         (after_TCC5 0
          (after_TCC5-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (after_TCC6 0
          (after_TCC6-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (after_TCC7 0
          (after_TCC7-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (after_TCC8 0
          (after_TCC8-1 nil 3583244949 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (ord type-decl nil language nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (add const-decl "(nonempty?)" sets nil)
            (context formula-decl nil language nil))
           nil))
         (after_concat 0
          (after_concat-1 nil 3583248779
           ("" (induct "Δ" :name "context_induction")
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil) ("6" (grind) nil nil)
             ("7" (grind) nil nil) ("8" (grind) nil nil)
             ("9" (grind) nil nil) ("10" (grind) nil nil))
            nil)
           ((pretheory? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (add const-decl "(nonempty?)" sets nil)
            (concat__empty formula-decl nil context nil)
            (emptyset const-decl "set" sets nil)
            (context_induction formula-decl nil inductions nil)
            (IF const-decl "[boolean, T, T -> T]" if_def nil)
            (after def-decl "context" context nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (<= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (ord type-decl nil language nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (number nonempty-type-decl nil numbers nil)
            (dsymbols_concat formula-decl nil context nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (union const-decl "set" sets nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil))
           shostak))
         (dsymbols_after_TCC1 0
          (dsymbols_after_TCC1-1 nil 3583244949
           ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (member const-decl "bool" sets nil))
           nil))
         (dsymbols_after 0
          (dsymbols_after-1 nil 3583245445
           ("" (induct "Γ" :name "context_induction")
            (("1" (grind) nil nil)
             ("2" (grind :if-match nil)
              (("1" (grind-with-ext) nil nil)
               ("2" (grind)
                (("2" (decompose-equality)
                  (("2" (decompose-equality 2)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (grind)
              (("1" (decompose-equality)
                (("1" (decompose-equality)
                  (("1" (decompose-equality)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (grind) (("2" (grind-with-ext) nil nil)) nil))
                nil)
               ("2" (grind-with-ext) nil nil)
               ("3" (rotate++) (("3" (grind-with-ext) nil nil)) nil))
              nil)
             ("4" (grind)
              (("1" (grind-with-ext) nil nil)
               ("2" (grind-with-ext) nil nil)
               ("3" (rotate++) (("3" (grind-with-ext) nil nil)) nil))
              nil)
             ("5" (grind) nil nil)
             ("6" (grind)
              (("1" (grind-with-ext) nil nil)
               ("2" (grind-with-ext) nil nil)
               ("3" (rotate++) (("3" (grind-with-ext) nil nil)) nil))
              nil)
             ("7" (grind)
              (("1" (grind-with-ext) nil nil)
               ("2" (rotate++) (("2" (grind-with-ext) nil nil)) nil)
               ("3" (rotate++) (("3" (grind-with-ext) nil nil)) nil))
              nil)
             ("8" (grind)
              (("1" (grind-with-ext) nil nil)
               ("2" (rotate++) (("2" (grind-with-ext) nil nil)) nil)
               ("3" (rotate++) (("3" (grind-with-ext) nil nil)) nil))
              nil)
             ("9" (grind)
              (("1" (grind-with-ext) nil nil)
               ("2" (rotate++) (("2" (grind-with-ext) nil nil)) nil)
               ("3" (rotate++) (("3" (grind-with-ext) nil nil)) nil))
              nil)
             ("10" (grind) nil nil) ("11" (grind) nil nil))
            nil)
           ((pretheory? const-decl "[semantic -> bool]" language nil)
            (pretheory type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (IFF const-decl "[bool, bool -> bool]" booleans nil)
            (add const-decl "(nonempty?)" sets nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (real_gt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (IF const-decl "[boolean, T, T -> T]" if_def nil)
            (OR const-decl "[bool, bool -> bool]" booleans nil)
            (nonempty? const-decl "bool" sets nil)
            (emptyset const-decl "set" sets nil)
            (context_induction formula-decl nil inductions nil)
            (length def-decl "nat" context nil)
            (< const-decl "bool" reals nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (> const-decl "bool" reals nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (after def-decl "context" context nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
           shostak))
         (find_extract_after 0
          (find_extract_after-1 nil 3583245640
           ("" (auto-rewrite "find" "after" "extract")
            (("" (induct "Γ" :name "context_induction")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (skosimp* :preds? t)
                (("3" (grind :if-match nil) (("3" (grind) nil nil))
                  nil))
                nil)
               ("4" (grind) nil nil) ("5" (grind) nil nil)
               ("6" (grind) nil nil) ("7" (grind) nil nil)
               ("8" (grind) nil nil) ("9" (grind) nil nil)
               ("10" (grind) nil nil))
              nil))
            nil)
           ((pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (add const-decl "(nonempty?)" sets nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (concat__empty formula-decl nil context nil)
            (context formula-decl nil language nil)
            (emptyset const-decl "set" sets nil)
            (context_induction formula-decl nil inductions nil)
            (after def-decl "context" context nil)
            (extract def-decl "context" context nil)
            (find def-decl "context" context nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (<= const-decl "bool" reals nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (weight def-decl "nat" language nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (ord type-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (set type-eq-decl nil sets nil)
            (member const-decl "bool" sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil))
           shostak))
         (length_after 0
          (length_after-1 nil 3583254325
           ("" (skosimp* :preds? t)
            (("" (use "find_extract_after")
              (("" (assert)
                (("" (name-extract "af" (~ + "after(%, %)"))
                  (("" (rewrite -2 :target-fnums 1)
                    (("" (assert)
                      (("" (assert)
                        (("" (lemma "length_find")
                          (("" (inst?) (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((find_extract_after formula-decl nil context nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (after def-decl "context" context nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (member const-decl "bool" sets nil)
            (set type-eq-decl nil sets nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (length_find formula-decl nil context nil)
            (length_extract formula-decl nil context nil)
            (length_concat formula-decl nil context nil)
            (dsymbols_extract formula-decl nil context nil)
            (dsymbols_concat formula-decl nil context nil)
            (nonempty_singleton_finite application-judgement
             "non_empty_finite_set" finite_sets nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil))
           shostak))
         (dsymbols_find 0
          (dsymbols_find-1 nil 3583246264
           ("" (skosimp* :preds? t)
            (("" (grind :if-match nil)
              (("" (use "find_extract_after")
                (("" (assert)
                  (("" (assert)
                    (("" (rewrite -1)
                      (("" (assert) (("" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((subset? const-decl "bool" sets nil)
            (member const-decl "bool" sets nil)
            (subset_is_partial_order name-judgement
             "(partial_order?[set[T]])" sets_lemmas nil)
            (singleton const-decl "(singleton?)" sets nil)
            (union const-decl "set" sets nil)
            (extract_concat formula-decl nil context nil)
            (after_concat formula-decl nil context nil)
            (concat_is_associative formula-decl nil context nil)
            (find_concat formula-decl nil context nil)
            (dsymbols_after formula-decl nil context nil)
            (dsymbols_concat formula-decl nil context nil)
            (dsymbols_extract formula-decl nil context nil)
            (nonempty_singleton_finite application-judgement
             "non_empty_finite_set" finite_sets nil)
            (nonempty_union1 application-judgement "(nonempty?)" sets
             nil)
            (nonempty_union2 application-judgement "(nonempty?)" sets
             nil)
            (real_gt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (find_extract_after formula-decl nil context nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil))
           shostak))
         (dsymbols_find_before 0
          (dsymbols_find_before-1 nil 3583254460
           ("" (induct-and-simplify "Γ" :name "context_induction") nil
            nil)
           ((dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (set type-eq-decl nil sets nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (length def-decl "nat" context nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (< const-decl "bool" reals nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (member const-decl "bool" sets nil)
            (find def-decl "context" context nil)
            (context_induction formula-decl nil inductions nil)
            (emptyset const-decl "set" sets nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (add const-decl "(nonempty?)" sets nil))
           shostak))
         (dsymbols_find_when_uniques 0
          (dsymbols_find_when_uniques-1 nil 3583247785
           ("" (skosimp* :preds? t)
            (("" (assert)
              (("" (use "find_extract_after")
                (("" (assert)
                  (("" (rewrite -1)
                    (("" (expand* "member" "union" "singleton")
                      (("" (assert)
                        (("" (expand* "member" "union" "singleton")
                          (("" (expand* "member" "union" "singleton")
                            (("" (assert)
                              ((""
                                (flatten)
                                ((""
                                  (assert)
                                  ((""
                                    (expand*
                                     "member"
                                     "union"
                                     "singleton"
                                     "disjoint?")
                                    ((""
                                      (assert)
                                      ((""
                                        (expand*
                                         "member"
                                         "union"
                                         "singleton"
                                         "disjoint?"
                                         "empty?"
                                         "intersection")
                                        ((""
                                          (expand*
                                           "member"
                                           "union"
                                           "singleton"
                                           "disjoint?"
                                           "empty?"
                                           "intersection")
                                          ((""
                                            (assert)
                                            ((""
                                              (lemma
                                               "find_extract_after")
                                              ((""
                                                (inst - "s!1" "Γ!1")
                                                ((""
                                                  (rewrite -1 :dir rl)
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (decompose-equality
                                                       +)
                                                      (("1"
                                                        (iff)
                                                        (("1"
                                                          (bddsimp)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -6
                                                               "x!1")
                                                              (("1"
                                                                (inst
                                                                 -7
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     "dsymbols_find")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand*
                                                                         "member"
                                                                         "union"
                                                                         "singleton"
                                                                         "disjoint?"
                                                                         "empty?"
                                                                         "intersection"
                                                                         "subset?")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "x!1")
                                                                            (("1"
                                                                              (expand*
                                                                               "member"
                                                                               "union"
                                                                               "singleton"
                                                                               "disjoint?"
                                                                               "empty?"
                                                                               "intersection"
                                                                               "subset?")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "FORALL Γ: FORALL (s, t : (dsymbols(Γ))): pos(Γ, s) = pos(Γ, t) IMPLIES s = t")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "Γ!1")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "x!1"
                                                                                       "s!1")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (induct
                                                                                       "Γ"
                                                                                       :name
                                                                                       "context_induction")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*
                                                                                         :preds?
                                                                                         t)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand*
                                                                                                     "member"
                                                                                                     "union"
                                                                                                     "singleton"
                                                                                                     "disjoint?"
                                                                                                     "empty?"
                                                                                                     "intersection"
                                                                                                     "subset?"
                                                                                                     "add")
                                                                                                    (("2"
                                                                                                      (expand*
                                                                                                       "member"
                                                                                                       "union"
                                                                                                       "singleton"
                                                                                                       "disjoint?"
                                                                                                       "empty?"
                                                                                                       "intersection"
                                                                                                       "subset?"
                                                                                                       "add")
                                                                                                      (("2"
                                                                                                        (bddsimp)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("4"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("5"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("6"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("7"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("8"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("9"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("10"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("11"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("12"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "s!3"
                                                                                                           "t!1")
                                                                                                          (("12"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (grind
                                                                                         :if-match
                                                                                         nil)
                                                                                        (("3"
                                                                                          (inst
                                                                                           -
                                                                                           "s!3"
                                                                                           "t!1")
                                                                                          (("3"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (grind
                                                                                         :if-match
                                                                                         nil)
                                                                                        (("4"
                                                                                          (inst
                                                                                           -
                                                                                           "s!3"
                                                                                           "t!1")
                                                                                          (("4"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("5"
                                                                                        (grind
                                                                                         :if-match
                                                                                         nil)
                                                                                        (("5"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("6"
                                                                                        (grind
                                                                                         :if-match
                                                                                         nil)
                                                                                        (("6"
                                                                                          (inst
                                                                                           -
                                                                                           "s!3"
                                                                                           "t!1")
                                                                                          (("6"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("7"
                                                                                        (grind
                                                                                         :if-match
                                                                                         nil)
                                                                                        (("7"
                                                                                          (inst
                                                                                           -
                                                                                           "s!3"
                                                                                           "t!1")
                                                                                          (("7"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("8"
                                                                                        (grind
                                                                                         :if-match
                                                                                         nil)
                                                                                        (("8"
                                                                                          (inst
                                                                                           -
                                                                                           "s!3"
                                                                                           "t!1")
                                                                                          (("8"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("9"
                                                                                        (grind
                                                                                         :if-match
                                                                                         nil)
                                                                                        (("9"
                                                                                          (inst
                                                                                           -
                                                                                           "s!3"
                                                                                           "t!1")
                                                                                          (("9"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -
                                                             "x!1")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (inst
                                                             -
                                                             "x!1")
                                                            (("3"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp*
                                                         :preds?
                                                         t)
                                                        (("2"
                                                          (inst
                                                           -
                                                           "t!1")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "t!1")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((member const-decl "bool" sets nil)
            (union const-decl "set" sets nil)
            (singleton const-decl "(singleton?)" sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (real_gt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (length def-decl "nat" context nil)
            (< const-decl "bool" reals nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (> const-decl "bool" reals nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (find def-decl "context" context nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (set type-eq-decl nil sets nil)
            (OR const-decl "[bool, bool -> bool]" booleans nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (context_induction formula-decl nil inductions nil)
            (〈〉 adt-constructor-decl "(empty?)" language nil)
            (empty? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (emptyset const-decl "set" sets nil)
            (add const-decl "(nonempty?)" sets nil)
            (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_decl adt-constructor-decl
             "[[symbol, semantic] -> (ktype_decl?)]" language nil)
            (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_def adt-constructor-decl
             "[[symbol, semantic, semantic] -> (ktype_def?)]" language
             nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (pretype type-eq-decl nil language nil)
            (ktype_ext adt-constructor-decl
             "[[symbol, semantic] -> (ktype_ext?)]" language nil)
            (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kvar adt-constructor-decl
             "[[semantic, semantic] -> (kvar?)]" language nil)
            (kvar? adt-recognizer-decl "[semantic -> boolean]" language
             nil)
            (kconst_decl adt-constructor-decl
             "[[symbol, semantic, semantic] -> (kconst_decl?)]"
             language nil)
            (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_def adt-constructor-decl
             "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
             language nil)
            (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (kconst_ext adt-constructor-decl
             "[[symbol, semantic, semantic] -> (kconst_ext?)]" language
             nil)
            (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktheory adt-constructor-decl
             "[[symbol, semantic, semantic] -> (ktheory?)]" language
             nil)
            (ktheory? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil)
            (subset? const-decl "bool" sets nil)
            (dsymbols_find formula-decl nil context nil)
            (find_concat formula-decl nil context nil)
            (empty? const-decl "bool" sets nil)
            (intersection const-decl "set" sets nil)
            (disjoint? const-decl "bool" sets nil)
            (uniques_concat formula-decl nil context nil)
            (dsymbols_after formula-decl nil context nil)
            (dsymbols_concat formula-decl nil context nil)
            (dsymbols_extract formula-decl nil context nil)
            (nonempty_singleton_finite application-judgement
             "non_empty_finite_set" finite_sets nil)
            (nonempty_union2 application-judgement "(nonempty?)" sets
             nil)
            (nonempty_union1 application-judgement "(nonempty?)" sets
             nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (find_extract_after formula-decl nil context nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil))
           shostak))
         (symbols_after 0
          (symbols_after-1 nil 3583254409
           ("" (skosimp* :preds? t)
            (("" (use "find_extract_after")
              (("" (name-extract "af" (~ + "after(%, %)"))
                (("" (assert)
                  (("" (rewrite -2 :target-fnums 1)
                    (("" (rewrite -1 :dir rl :dont-delete? t)
                      (("" (assert)
                        (("" (assert) (("" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (after def-decl "context" context nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (member const-decl "bool" sets nil)
            (set type-eq-decl nil sets nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (symbols_concat formula-decl nil context nil)
            (dsymbols_extract formula-decl nil context nil)
            (dsymbols_concat formula-decl nil context nil)
            (dsymbols_after formula-decl nil context nil)
            (real_gt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (singleton const-decl "(singleton?)" sets nil)
            (union const-decl "set" sets nil)
            (find_concat formula-decl nil context nil)
            (difference const-decl "set" sets nil)
            (subset? const-decl "bool" sets nil)
            (nonempty_union1 application-judgement "(nonempty?)" sets
             nil)
            (subset_is_partial_order name-judgement
             "(partial_order?[set[T]])" sets_lemmas nil)
            (nonempty_union2 application-judgement "(nonempty?)" sets
             nil)
            (nonempty_singleton_finite application-judgement
             "non_empty_finite_set" finite_sets nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (find_extract_after formula-decl nil context nil))
           shostak))
         (pos_find_before_TCC1 0
          (pos_find_before_TCC1-1 nil 3583252868
           ("" (lemma "dsymbols_find_before") (("" (grind) nil nil))
            nil)
           ((dsymbols_find_before formula-decl nil context nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (member const-decl "bool" sets nil))
           nil))
         (pos_find_before 0
          (pos_find_before-1 nil 3583254631
           ("" (induct-and-simplify "Γ" :name "context_induction")
            (("" (use "dsymbols_find_before") (("" (grind) nil nil))
              nil))
            nil)
           ((context_induction formula-decl nil inductions nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (member const-decl "bool" sets nil)
            (find def-decl "context" context nil)
            (number nonempty-type-decl nil numbers nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (< const-decl "bool" reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (length def-decl "nat" context nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (add const-decl "(nonempty?)" sets nil)
            (emptyset const-decl "set" sets nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (dsymbols_find_before formula-decl nil context nil))
           shostak))
         (pos_find_when_uniques_TCC1 0
          (pos_find_when_uniques_TCC1-1 nil 3583252868
           ("" (subtype-tcc) nil nil)
           ((member const-decl "bool" sets nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil))
           nil))
         (pos_find_when_uniques_TCC2 0
          (pos_find_when_uniques_TCC2-1 nil 3583252868
           ("" (subtype-tcc) nil nil)
           ((member const-decl "bool" sets nil)
            (dsymbols_find_when_uniques formula-decl nil context nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil))
           nil))
         (pos_find_when_uniques 0
          (pos_find_when_uniques-1 nil 3583254755
           ("" (skosimp* :preds? t)
            (("" (use "find_extract_after")
              (("" (assert)
                (("" (name-extract "fi" (~ + "find(%)(%)"))
                  (("" (rewrite -2 :target-fnums 1)
                    (("" (assert)
                      (("" (assert)
                        (("" (rewrite -1 :dir rl :dont-delete? t)
                          (("" (assert)
                            (("" (use "pos_concat")
                              ((""
                                (assert)
                                ((""
                                  (assert)
                                  ((""
                                    (split -)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite -1)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (use "pos_concat")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite -1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (bddsimp)
                                                        (("1"
                                                          (expand*
                                                           "member")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand*
                                                           "member")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (dsymbols_find_when_uniques formula-decl nil context nil)
            (nonempty_union2 application-judgement "(nonempty?)" sets
             nil)
            (nonempty_union1 application-judgement "(nonempty?)" sets
             nil)
            (length_find formula-decl nil context nil)
            (length_extract formula-decl nil context nil)
            (length_concat formula-decl nil context nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (real_gt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (singleton const-decl "(singleton?)" sets nil)
            (union const-decl "set" sets nil)
            (number nonempty-type-decl nil numbers nil)
            (ord type-decl nil language nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (member const-decl "bool" sets nil)
            (extract def-decl "context" context nil)
            (after def-decl "context" context nil)
            (pos_concat formula-decl nil context nil)
            (dsymbols_after formula-decl nil context nil)
            (dsymbols_concat formula-decl nil context nil)
            (dsymbols_extract formula-decl nil context nil)
            (nonempty_singleton_finite application-judgement
             "non_empty_finite_set" finite_sets nil)
            (find def-decl "context" context nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (set type-eq-decl nil sets nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (find_extract_after formula-decl nil context nil))
           shostak))
         (find_find_before 0
          (find_find_before-1 nil 3583254998
           ("" (skosimp* :preds? t)
            (("" (lemma "find_extract_after")
              (("" (inst - "s!1" "Γ!1")
                (("" (name-extract "fi" (~ + "find(%)(%)"))
                  (("" (assert)
                    (("" (rewrite -2 :target-fnums 1)
                      (("" (assert)
                        (("" (rewrite "find_concat" +)
                          (("1" (lift-if)
                            (("1" (rewrite "find_concat" +)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nonempty_singleton_finite application-judgement
             "non_empty_finite_set" finite_sets nil)
            (dsymbols_extract formula-decl nil context nil)
            (dsymbols_concat formula-decl nil context nil)
            (dsymbols_after formula-decl nil context nil)
            (union const-decl "set" sets nil)
            (real_gt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (singleton const-decl "(singleton?)" sets nil)
            (nonempty_union1 application-judgement "(nonempty?)" sets
             nil)
            (nonempty_union2 application-judgement "(nonempty?)" sets
             nil)
            (after def-decl "context" context nil)
            (extract def-decl "context" context nil)
            (member const-decl "bool" sets nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (<= const-decl "bool" reals nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (weight def-decl "nat" language nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (ord type-decl nil language nil)
            (number nonempty-type-decl nil numbers nil)
            (find_concat formula-decl nil context nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (set type-eq-decl nil sets nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (find def-decl "context" context nil)
            (find_extract_after formula-decl nil context nil))
           shostak))
         (find_find_when_uniques 0
          (find_find_when_uniques-1 nil 3583255088
           ("" (skosimp* :preds? t)
            (("" (use "find_extract_after")
              (("" (name-extract "fi" (~ + "find(%)(%)"))
                (("" (assert)
                  (("" (rewrite -2 :target-fnums 1)
                    (("" (assert)
                      (("" (rewrite "find_concat" +)
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (rewrite "find_concat" +)
                              (("1"
                                (lift-if)
                                (("1"
                                  (expand* "member")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use "find_find_before")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (find def-decl "context" context nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (set type-eq-decl nil sets nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (find_concat formula-decl nil context nil)
            (number nonempty-type-decl nil numbers nil)
            (ord type-decl nil language nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (member const-decl "bool" sets nil)
            (extract def-decl "context" context nil)
            (after def-decl "context" context nil)
            (nonempty_union2 application-judgement "(nonempty?)" sets
             nil)
            (nonempty_union1 application-judgement "(nonempty?)" sets
             nil)
            (union const-decl "set" sets nil)
            (singleton const-decl "(singleton?)" sets nil)
            (real_gt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (find_find_before formula-decl nil context nil)
            (dsymbols_after formula-decl nil context nil)
            (dsymbols_concat formula-decl nil context nil)
            (dsymbols_extract formula-decl nil context nil)
            (nonempty_singleton_finite application-judgement
             "non_empty_finite_set" finite_sets nil)
            (dsymbols_find_when_uniques formula-decl nil context nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (find_extract_after formula-decl nil context nil))
           shostak))
         (extract_find_before_TCC1 0
          (extract_find_before_TCC1-1 nil 3583252868
           ("" (subtype-tcc)
            (("" (use "dsymbols_find_before") (("" (grind) nil nil))
              nil))
            nil)
           ((member const-decl "bool" sets nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (dsymbols_find_before formula-decl nil context nil))
           nil))
         (extract_find_before 0
          (extract_find_before-1 nil 3583255300
           ("" (skosimp* :preds? t)
            (("" (use "find_extract_after" ("Γ" "Γ!1"))
              (("" (assert)
                (("" (name-extract "fi" (~ + "find(%)(%)"))
                  (("" (rewrite -2 :target-fnums 1)
                    (("" (assert)
                      (("" (rewrite "extract_concat")
                        (("1" (rewrite "extract_concat")
                          (("1" (expand* "member")
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (extract_concat formula-decl nil context nil)
            (number nonempty-type-decl nil numbers nil)
            (ord type-decl nil language nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (member const-decl "bool" sets nil)
            (extract def-decl "context" context nil)
            (after def-decl "context" context nil)
            (nonempty_union2 application-judgement "(nonempty?)" sets
             nil)
            (nonempty_union1 application-judgement "(nonempty?)" sets
             nil)
            (real_gt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (union const-decl "set" sets nil)
            (find_concat formula-decl nil context nil)
            (singleton const-decl "(singleton?)" sets nil)
            (dsymbols_after formula-decl nil context nil)
            (dsymbols_concat formula-decl nil context nil)
            (dsymbols_extract formula-decl nil context nil)
            (nonempty_singleton_finite application-judgement
             "non_empty_finite_set" finite_sets nil)
            (find def-decl "context" context nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (set type-eq-decl nil sets nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (find_extract_after formula-decl nil context nil))
           shostak))
         (extract_find_when_uniques_TCC1 0
          (extract_find_when_uniques_TCC1-1 nil 3583252868
           ("" (subtype-tcc) nil nil)
           ((member const-decl "bool" sets nil)
            (dsymbols_find_when_uniques formula-decl nil context nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil))
           nil))
         (extract_find_when_uniques 0
          (extract_find_when_uniques-1 nil 3583255621
           ("" (skosimp* :preds? t)
            (("" (name-extract "fi" (~ + "find(%)(%)"))
              (("" (use "find_extract_after" ("Γ" "Γ!1"))
                (("" (assert)
                  (("" (rewrite -1 :target-fnums 1)
                    (("" (rewrite "extract_concat")
                      (("1" (rewrite "extract_concat")
                        (("1" (assert)
                          (("1" (expand* "member")
                            (("1" (lift-if)
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite -2 :dont-delete? t)
                                  (("1"
                                    (rewrite -2 :dont-delete? t)
                                    (("1"
                                      (rewrite -2 :dont-delete? t)
                                      (("1"
                                        (rewrite -2 :dont-delete? t)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite -2 :dir rl)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (lift-if)
                            (("2" (expand* "member")
                              (("2"
                                (assert)
                                (("2"
                                  (rewrite "extract_concat")
                                  (("1"
                                    (expand* "member")
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand* "union")
                                          (("1"
                                            (expand* "member")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (bddsimp)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         -3
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (use
                                                           "dsymbols_find_when_uniques")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand* "member" "union")
                                    (("2"
                                      (expand* "member" "union")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (rewrite
                                               "extract_concat")
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand*
                                                     "member"
                                                     "union")
                                                    (("1"
                                                      (bddsimp)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (use
                                                           "dsymbols_find_when_uniques")
                                                          (("1"
                                                            (rewrite
                                                             -4
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "extract_concat")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (expand*
                                                     "member"
                                                     "union")
                                                    (("1"
                                                      (expand*
                                                       "member"
                                                       "union")
                                                      (("1"
                                                        (use
                                                         "dsymbols_find_when_uniques")
                                                        (("1"
                                                          (rewrite
                                                           -3
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand*
                                                   "member"
                                                   "union")
                                                  (("2"
                                                    (expand*
                                                     "member"
                                                     "union")
                                                    (("2"
                                                      (bddsimp)
                                                      (("1"
                                                        (use
                                                         "dsymbols_find_when_uniques")
                                                        (("1"
                                                          (rewrite
                                                           -4
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "dsymbols_find_when_uniques")
                                                        (("2"
                                                          (rewrite
                                                           -3
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (use
                                                         "dsymbols_find_when_uniques")
                                                        (("3"
                                                          (rewrite
                                                           -3
                                                           :dir
                                                           rl)
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand* "member" "union")
                        (("2" (expand* "member" "union")
                          (("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (rewrite -2 :dir rl)
                                (("2"
                                  (assert)
                                  (("2"
                                    (use "dsymbols_find_when_uniques")
                                    (("2"
                                      (assert)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((find def-decl "context" context nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (set type-eq-decl nil sets nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (extract_concat formula-decl nil context nil)
            (number nonempty-type-decl nil numbers nil)
            (ord type-decl nil language nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (real nonempty-type-from-decl nil reals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (int nonempty-type-eq-decl nil integers nil)
            (>= const-decl "bool" reals nil)
            (weight def-decl "nat" language nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (<= const-decl "bool" reals nil)
            (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
            (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_symbol adt-constructor-decl "(ord_symbol?)" language
             nil)
            (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (+ const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
             language nil)
            (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_itype adt-constructor-decl "(ord_itype?)" language
             nil)
            (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
             language nil)
            (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
             language nil)
            (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_iconst adt-constructor-decl "(ord_iconst?)" language
             nil)
            (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
             language nil)
            (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
             language nil)
            (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
             language nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (ord_empty? adt-recognizer-decl "[ord -> boolean]" language
             nil)
            (ord_empty adt-constructor-decl "(ord_empty?)" language
             nil)
            (++ def-decl
             "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
             context nil)
            (member const-decl "bool" sets nil)
            (extract def-decl "context" context nil)
            (after def-decl "context" context nil)
            (nonempty_union2 application-judgement "(nonempty?)" sets
             nil)
            (nonempty_union1 application-judgement "(nonempty?)" sets
             nil)
            (nonempty_singleton_finite application-judgement
             "non_empty_finite_set" finite_sets nil)
            (dsymbols_find_when_uniques formula-decl nil context nil)
            (dsymbols_extract formula-decl nil context nil)
            (dsymbols_concat formula-decl nil context nil)
            (dsymbols_after formula-decl nil context nil)
            (union const-decl "set" sets nil)
            (real_gt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (singleton const-decl "(singleton?)" sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (find_extract_after formula-decl nil context nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil))
           shostak))
         (find_is_closed_TCC1 0
          (find_is_closed_TCC1-1 nil 3583246693
           ("" (subtype-tcc) nil nil)
           ((closed? const-decl "bool" syntaxic_sets nil)
            (subset? const-decl "bool" sets nil)
            (member const-decl "bool" sets nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil))
           nil))
         (find_is_closed 0
          (find_is_closed-1 nil 3583246693
           ("" (lemma "vars_find")
            (("" (lemma "symbols_find") (("" (grind) nil nil)) nil))
            nil)
           ((symbols_find formula-decl nil context nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil)
            (find def-decl "context" context nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (syntaxic? const-decl "[semantic -> bool]" language nil)
            (syntaxic type-eq-decl nil language nil)
            (set type-eq-decl nil sets nil)
            (vars def-decl "set[nat]" syntaxic_sets nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (subset? const-decl "bool" sets nil)
            (closed? const-decl "bool" syntaxic_sets nil)
            (member const-decl "bool" sets nil)
            (vars_find formula-decl nil context nil))
           shostak))
         (extract_is_closed 0
          (extract_is_closed-1 nil 3583255992
           ("" (lemma "vars_extract")
            (("" (lemma "symbols_extract")
              (("" (lemma "dsymbols_find")
                (("" (skosimp* :preds? t)
                  (("" (inst - "s!1" "Δ!1")
                    (("" (inst - "s!1" "Δ!1")
                      (("" (inst - "s!1" "Δ!1")
                        (("" (assert)
                          (("" (assert)
                            (("" (grind :if-match nil)
                              (("1"
                                (inst -4 "x!1")
                                (("1"
                                  (simplify)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst -7 "x!1")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -6 "x!1 - dvars(find(Δ!1)(s!1))")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -7
                                     "x!1 - dvars(find(Δ!1)(s!1))")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((symbols_extract formula-decl nil context nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (subset_is_partial_order name-judgement
             "(partial_order?[set[T]])" sets_lemmas nil)
            (closed? const-decl "bool" syntaxic_sets nil)
            (dvars_concat formula-decl nil context nil)
            (dsymbols_concat formula-decl nil context nil)
            (- const-decl "set[nat]" syntaxic_sets nil)
            (union const-decl "set" sets nil)
            (subset? const-decl "bool" sets nil)
            (member const-decl "bool" sets nil)
            (extract def-decl "context" context nil)
            (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
            (vars def-decl "set[nat]" syntaxic_sets nil)
            (syntaxic type-eq-decl nil language nil)
            (syntaxic? const-decl "[semantic -> bool]" language nil)
            (set type-eq-decl nil sets nil)
            (>= const-decl "bool" reals nil)
            (int nonempty-type-eq-decl nil integers nil)
            (integer_pred const-decl "[rational -> boolean]" integers
                          nil)
            (rational nonempty-type-from-decl nil rationals nil)
            (rational_pred const-decl "[real -> boolean]" rationals
                           nil)
            (real nonempty-type-from-decl nil reals nil)
            (real_pred const-decl "[number_field -> boolean]" reals
                       nil)
            (number_field nonempty-type-from-decl nil number_fields
             nil)
            (number_field_pred const-decl "[number -> boolean]"
             number_fields nil)
            (number nonempty-type-decl nil numbers nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (int_plus_int_is_int application-judgement "int" integers
             nil)
            (find def-decl "context" context nil)
            (dvars def-decl "nat" syntaxic_sets nil)
            (- const-decl "[numfield, numfield -> numfield]"
               number_fields nil)
            (numfield nonempty-type-eq-decl nil number_fields nil)
            (real_ge_is_total_order name-judgement
             "(total_order?[real])" real_props nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (char type-eq-decl nil strings nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (character type-decl nil character_adt nil)
            (below type-eq-decl nil nat_types nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (dsymbols_find formula-decl nil context nil)
            (vars_extract formula-decl nil context nil))
           shostak))
         (find_is_uniques 0
          (find_is_uniques-1 nil 3583244949
           ("" (skosimp* :preds? t)
            (("" (use "find_extract_after" ("Γ" "Γ!1"))
              (("" (assert)
                (("" (rewrite -1 :target-fnums -3)
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ((find_extract_after formula-decl nil context nil)
            (int_minus_int_is_int application-judgement "int" integers
             nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (nat nonempty-type-eq-decl nil naturalnumbers nil)
            (below type-eq-decl nil nat_types nil)
            (character type-decl nil character_adt nil)
            (char? adt-recognizer-decl "[character -> boolean]"
             character_adt nil)
            (char type-eq-decl nil strings nil)
            (symbol nonempty-type-eq-decl nil language nil)
            (nonempty_singleton_finite application-judgement
             "non_empty_finite_set" finite_sets nil)
            (dsymbols_after formula-decl nil context nil)
            (dsymbols_concat formula-decl nil context nil)
            (uniques_concat formula-decl nil context nil)
            (dsymbols_extract formula-decl nil context nil)
            (dsymbols_find_when_uniques formula-decl nil context nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil))
           nil)))

