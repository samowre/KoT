(definitions
 (ordinal_of_nat_TCC1 0
  (ordinal_of_nat_TCC1-1 nil 3582466159 ("" (grind) nil nil)
   ((ordinal? def-decl "bool" ordinals nil)) nil))
 (ordinal_of_nat_TCC2 0
  (ordinal_of_nat_TCC2-1 nil 3582466159 ("" (grind) nil nil)
   ((ordinal? def-decl "bool" ordinals nil)) nil))
 (plus_TCC1 0
  (plus_TCC1-1 nil 3582466159 ("" (subtype-tcc) nil nil)
   ((ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (plus_TCC2 0
  (plus_TCC2-1 nil 3582466159
   ("" (skosimp* :preds? t)
    (("" (expand "ordinal?" -2)
      (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (plus_TCC3 0
  (plus_TCC3-1 nil 3582466159 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (plus_TCC4 0
  (plus_TCC4-1 nil 3582466159 ("" (termination-tcc) nil nil)
   ((> const-decl "bool" ordinals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (plus_TCC5 0
  (plus_TCC5-1 nil 3582466159 ("" (subtype-tcc) nil nil)
   ((> const-decl "bool" ordinals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (plus_TCC6 0
  (plus_TCC6-1 nil 3582466159
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((> const-decl "bool" ordinals nil)
    (size const-decl "[ordstruct -> nat]" ordinals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (reduce adt-def-decl "[ordstruct -> range]"
      ordstruct_adt_reduce nil))
   nil))
 (plus_TCC7 0
  (plus_TCC7-1 nil 3582466159
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (auto-rewrite "ordinal?")
        (("" (assert)
          (("" (flatten)
            (("" (assert)
              (("" (split 1)
                (("1" (assert)
                  (("1" (rewrite -10) (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (assert)
                  (("2" (inst?)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (case "v!1 = zero")
                          (("1" (assert)
                            (("1" (rewrite -9)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (rewrite -12)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (smash)
                                (("1"
                                  (rewrite -1)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (rewrite -1)
                                  (("2" (grind) nil nil))
                                  nil)
                                 ("3"
                                  (rewrite -1)
                                  (("3" (grind) nil nil))
                                  nil)
                                 ("4"
                                  (rewrite -1)
                                  (("4" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (rewrite -10) (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" ordinals nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (v!1 skolem-const-decl "ordstruct" definitions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size const-decl "[ordstruct -> nat]" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil))
 (plus_TCC8 0
  (plus_TCC8-1 nil 3582466159 ("" (termination-tcc) nil nil)
   ((> const-decl "bool" ordinals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (plus_TCC9 0
  (plus_TCC9-1 nil 3582466159
   ("" (subtype-tcc)
    (("" (auto-rewrite "ordinal?") (("" (assert) nil nil)) nil)) nil)
   ((> const-decl "bool" ordinals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (plus_TCC10 0
  (plus_TCC10-1 nil 3582466159
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((> const-decl "bool" ordinals nil)
    (size const-decl "[ordstruct -> nat]" ordinals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (reduce adt-def-decl "[ordstruct -> range]"
      ordstruct_adt_reduce nil))
   nil))
 (plus_TCC11 0
  (plus_TCC11-1 nil 3582466159
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (auto-rewrite "ordinal?")
        (("" (assert)
          (("" (split 2)
            (("1" (assert)
              (("1" (rewrite -6)
                (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (propax) nil nil)
             ("3" (flatten)
              (("3" (assert)
                (("3" (inst?)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (case "v!1 = zero")
                        (("1" (assert)
                          (("1" (rewrite -9) (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "w!1 = zero")
                            (("1" (assert)
                              (("1"
                                (rewrite -10)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (split -10)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite -1)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite -1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) (("2" (grind) nil nil)) nil)
                   ("3" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("4" (flatten)
              (("4" (rewrite -10) (("4" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (v!1 skolem-const-decl "ordstruct" definitions nil)
    (w!1 skolem-const-decl "ordstruct" definitions nil)
    (> const-decl "bool" ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size const-decl "[ordstruct -> nat]" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil))
 (plus_TCC12 0
  (plus_TCC12-1 nil 3582466159 ("" (termination-tcc) nil nil)
   ((ordinal? def-decl "bool" ordinals nil)
    (> const-decl "bool" ordinals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (plus_TCC13 0
  (plus_TCC13-1 nil 3582466159
   ("" (subtype-tcc)
    (("" (auto-rewrite "ordinal?") (("" (assert) nil nil)) nil)) nil)
   ((> const-decl "bool" ordinals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (plus_TCC14 0
  (plus_TCC14-1 nil 3582466506
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((> const-decl "bool" ordinals nil)
    (size const-decl "[ordstruct -> nat]" ordinals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (reduce adt-def-decl "[ordstruct -> range]"
      ordstruct_adt_reduce nil))
   nil))
 (plus_TCC15 0
  (plus_TCC15-1 nil 3582466506
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (auto-rewrite "ordinal?")
        (("" (assert)
          (("" (flatten)
            (("" (inst?)
              (("1" (flatten)
                (("1" (rewrite -14)
                  (("1" (rewrite -14)
                    (("1" (assert)
                      (("1" (case "NOT u!1 < z!1")
                        (("1" (assert)
                          (("1" (lemma "ordinal_trichotomy")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil) ("3" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (w!1 skolem-const-decl "ordstruct" definitions nil)
    (y!1 skolem-const-decl "ordinal" definitions nil)
    (x!1 skolem-const-decl "ordinal" definitions nil)
    (v!1 skolem-const-decl "ordstruct" definitions nil)
    (u!1 skolem-const-decl "ordstruct" definitions nil)
    (i!1 skolem-const-decl "posnat" definitions nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (> const-decl "bool" ordinals nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (reduce adt-def-decl "[ordstruct -> range]"
      ordstruct_adt_reduce nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size const-decl "[ordstruct -> nat]" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil))
 (context_size_TCC1 0
  (context_size_TCC1-1 nil 3582466159 ("" (cases-tcc) nil nil) nil
   nil))
 (well_formed?_TCC1 0
  (well_formed?_TCC1-1 nil 3582405069
   ("" (skosimp* :preds? t)
    (("" (rewrite "∈")
      (("" (assert)
        (("" (assert)
          (("" (bddsimp)
            (("1" (assert)
              (("1" (rewrite "context_as_nonempty")
                (("1" (use "nonempty_context_is_nonempty") nil nil))
                nil))
              nil)
             ("2" (rewrite "context_as_nonempty")
              (("2" (split)
                (("1" (use "nonempty_context_is_nonempty") nil nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((symbol nonempty-type-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (nonempty_context? const-decl "[semantic -> bool]" language nil)
    (nonempty_context type-eq-decl nil language nil)
    (nonempty_context_is_nonempty judgement-tcc nil subtype nil)
    (context_as_nonempty formula-decl nil subtype nil)
    (expr formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC2 0
  (well_formed?_TCC2-1 nil 3582405069
   ("" (skosimp* :preds? t)
    (("" (rewrite "∈")
      (("" (assert)
        (("" (bddsimp)
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (assert)
            (("3" (rewrite "context_as_nonempty")
              (("3" (use "nonempty_context_is_nonempty") nil nil))
              nil))
            nil)
           ("4" (rewrite "context_as_nonempty")
            (("4" (use "nonempty_context_is_nonempty")
              (("4" (split -1)
                (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
              nil))
            nil)
           ("5" (rewrite "context_as_nonempty")
            (("5" (use "nonempty_context_is_nonempty")
              (("5" (split)
                (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
              nil))
            nil)
           ("6" (use "nonempty_context_is_nonempty")
            (("6" (use "nonempty_context_is_nonempty")
              (("6" (rewrite "context_as_nonempty")
                (("6" (split)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((symbol nonempty-type-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (interp formula-decl nil language nil)
    (context_as_nonempty formula-decl nil subtype nil)
    (nonempty_context_is_nonempty judgement-tcc nil subtype nil)
    (nonempty_context type-eq-decl nil language nil)
    (nonempty_context? const-decl "[semantic -> bool]" language nil)
    (preterm formula-decl nil language nil)
    (expr formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC3 0
  (well_formed?_TCC3-1 nil 3582405069
   ("" (skosimp* :preds? t)
    (("" (assert) (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)
   ((kind_nonempty application-judgement "kind" decl nil)
    (expr formula-decl nil language nil)
    (kind_theory formula-decl nil decl nil)
    (definition? const-decl "bool" decl nil)
    (theory_kind? const-decl "bool" decl nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC4 0
  (well_formed?_TCC4-1 nil 3582405069
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (assert)
        (("" (grind)
          (("" (typepred "app_symbol(Γ!1)(m!1)")
            (("" (assert)
              (("" (assert)
                (("" (flatten)
                  (("" (hide-all-but (-2 +))
                    (("" (use "pretheory_is_context")
                      (("" (use "context_is_map")
                        (("" (use "context_is_map" :if-match all) nil
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((kind_nonempty application-judgement "kind" decl nil)
    (expr formula-decl nil language nil)
    (kind_theory formula-decl nil decl nil)
    (definition const-decl
                "{x: semantic | (type_kind?(S) IMPLIES pretype?(x)) AND (const_kind?(S) IMPLIES preterm?(x)) AND (theory_kind?(S) IMPLIES pretheory?(x)) AND weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}"
                decl nil)
    (theory_kind? const-decl "bool" decl nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (nonempty formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (pretheory type-eq-decl nil language nil)
    (dtheory adt-accessor-decl "[(ktheory?) -> semantic]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (context_is_map judgement-tcc nil subtype nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (symbol nonempty-type-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
        (F(ord_bot) = 0) AND (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (app_symbol def-decl
     "{T: nonempty | (interp?(S) => interp?(T)) AND (context?(S) => context?(T)) AND (pretheory?(S) => pretheory?(T)) AND weight(F)(T) <= weight(F)(S)}"
     apply nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC5 0
  (well_formed?_TCC5-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (kind_theory formula-decl nil decl nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC6 0
  (well_formed?_TCC6-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (definition const-decl
                "{x: semantic | (type_kind?(S) IMPLIES pretype?(x)) AND (const_kind?(S) IMPLIES preterm?(x)) AND (theory_kind?(S) IMPLIES pretheory?(x)) AND weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}"
                decl nil)
    (kind const-decl "{r: ε(kind?) | nonempty?(S) IFF r ≠ ⊥}" decl
          nil))
   nil))
 (well_formed?_TCC7 0
  (well_formed?_TCC7-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC8 0
  (well_formed?_TCC8-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC9 0
  (well_formed?_TCC9-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC10 0
  (well_formed?_TCC10-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC11 0
  (well_formed?_TCC11-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC12 0
  (well_formed?_TCC12-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC13 0
  (well_formed?_TCC13-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC14 0
  (well_formed?_TCC14-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC15 0
  (well_formed?_TCC15-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC16 0
  (well_formed?_TCC16-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC17 0
  (well_formed?_TCC17-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC18 0
  (well_formed?_TCC18-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC19 0
  (well_formed?_TCC19-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC20 0
  (well_formed?_TCC20-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC21 0
  (well_formed?_TCC21-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC22 0
  (well_formed?_TCC22-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC23 0
  (well_formed?_TCC23-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC24 0
  (well_formed?_TCC24-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC25 0
  (well_formed?_TCC25-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC26 0
  (well_formed?_TCC26-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC27 0
  (well_formed?_TCC27-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC28 0
  (well_formed?_TCC28-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC29 0
  (well_formed?_TCC29-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC30 0
  (well_formed?_TCC30-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC31 0
  (well_formed?_TCC31-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC32 0
  (well_formed?_TCC32-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC33 0
  (well_formed?_TCC33-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC34 0
  (well_formed?_TCC34-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC35 0
  (well_formed?_TCC35-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC36 0
  (well_formed?_TCC36-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC37 0
  (well_formed?_TCC37-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC38 0
  (well_formed?_TCC38-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC39 0
  (well_formed?_TCC39-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC40 0
  (well_formed?_TCC40-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC41 0
  (well_formed?_TCC41-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (well_formed?_TCC42 0
  (well_formed?_TCC42-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (well_formed?_TCC43 0
  (well_formed?_TCC43-1 nil 3582405069 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (length_TCC1 0
  (length_TCC1-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (length_TCC2 0
  (length_TCC2-1 nil 3582405937
   ("" (skosimp* :preds? t)
    (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil))
   nil))
 (length_TCC3 0
  (length_TCC3-1 nil 3582405937
   ("" (skosimp* :preds? t)
    (("" (grind) (("" (rewrite "context") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil))
   nil))
 (length_TCC4 0
  (length_TCC4-1 nil 3582406842 ("" (subtype-tcc) nil nil) nil nil))
 (length_TCC5 0
  (length_TCC5-1 nil 3582406842 ("" (termination-tcc) nil nil) nil
   nil))
 (length_TCC6 0
  (length_TCC6-1 nil 3582406842 ("" (subtype-tcc) nil nil) nil nil))
 (length_TCC7 0
  (length_TCC7-1 nil 3582406842 ("" (subtype-tcc) nil nil) nil nil))
 (length_TCC8 0
  (length_TCC8-1 nil 3582406842 ("" (termination-tcc) nil nil) nil
   nil))
 (length_TCC9 0
  (length_TCC9-1 nil 3582406842 ("" (cond-disjoint-tcc) nil nil) nil
   nil))
 (pos_TCC1 0
  (pos_TCC1-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil))
   nil))
 (pos_TCC2 0
  (pos_TCC2-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (pos_TCC3 0
  (pos_TCC3-1 nil 3582405937 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (pos_TCC4 0
  (pos_TCC4-1 nil 3582405937 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (pos_TCC5 0
  (pos_TCC5-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil))
   nil))
 (pos_TCC6 0
  (pos_TCC6-1 nil 3582405937 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (definition const-decl
                "{x: semantic | (type_kind?(S) IMPLIES pretype?(x)) AND (const_kind?(S) IMPLIES preterm?(x)) AND (theory_kind?(S) IMPLIES pretheory?(x)) AND weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}"
                decl nil)
    (kind const-decl "{r: ε(kind?) | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (kind_nonempty application-judgement "kind" decl nil)
    (expr formula-decl nil language nil))
   nil))
 (pos_TCC7 0
  (pos_TCC7-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (pos_TCC8 0
  (pos_TCC8-1 nil 3582405937
   ("" (skosimp* :preds? t)
    (("" (rewrite -4) (("" (assert) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((kind_nonempty application-judgement "kind" decl nil)
    (definition const-decl
                "{x: semantic | (type_kind?(S) IMPLIES pretype?(x)) AND (const_kind?(S) IMPLIES preterm?(x)) AND (theory_kind?(S) IMPLIES pretheory?(x)) AND weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}"
                decl nil)
    (kind const-decl "{r: ε(kind?) | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil))
   nil))
 (pos_TCC9 0
  (pos_TCC9-1 nil 3582405937
   ("" (skosimp* :preds? t)
    (("" (grind)
      (("" (rewrite -7)
        (("" (grind)
          (("" (rewrite "∈")
            (("" (grind)
              (("" (rewrite "context") (("" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (definition const-decl
                "{x: semantic | (type_kind?(S) IMPLIES pretype?(x)) AND (const_kind?(S) IMPLIES preterm?(x)) AND (theory_kind?(S) IMPLIES pretheory?(x)) AND weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}"
                decl nil)
    (kind const-decl "{r: ε(kind?) | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (kind_nonempty application-judgement "kind" decl nil)
    (nonempty formula-decl nil language nil)
    (app_symbol def-decl
     "{T: nonempty | (interp?(S) => interp?(T)) AND (context?(S) => context?(T)) AND (pretheory?(S) => pretheory?(T)) AND weight(F)(T) <= weight(F)(S)}"
     apply nil)
    (context formula-decl nil language nil)
    (symbol nonempty-type-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil))
   nil))
 (pos_TCC10 0
  (pos_TCC10-1 nil 3582405937
   ("" (skosimp* :preds? t) (("" (grind) nil nil)) nil)
   ((expr formula-decl nil language nil)
    (definition? const-decl "bool" decl nil)
    (kind_nonempty application-judgement "kind" decl nil)
    (kind const-decl "{r: ε(kind?) | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (definition const-decl
                "{x: semantic | (type_kind?(S) IMPLIES pretype?(x)) AND (const_kind?(S) IMPLIES preterm?(x)) AND (theory_kind?(S) IMPLIES pretheory?(x)) AND weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}"
                decl nil)
    (interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil))
   nil))
 (pos_TCC11 0
  (pos_TCC11-1 nil 3582405937
   ("" (skosimp* :preds? t)
    (("" (grind)
      (("" (rewrite -7)
        (("" (grind)
          (("" (typepred "app_symbol(Γ!1)(m!1)")
            (("" (assert)
              (("" (flatten)
                (("" (hide-all-but (-2 3))
                  (("" (grind)
                    (("" (use "pretheory_is_context") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((definition const-decl
                "{x: semantic | (type_kind?(S) IMPLIES pretype?(x)) AND (const_kind?(S) IMPLIES preterm?(x)) AND (theory_kind?(S) IMPLIES pretheory?(x)) AND weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}"
                decl nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (kind const-decl "{r: ε(kind?) | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (kind_nonempty application-judgement "kind" decl nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (nonempty formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretheory type-eq-decl nil language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dtheory adt-accessor-decl "[(ktheory?) -> semantic]" language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (symbol nonempty-type-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
        (F(ord_bot) = 0) AND (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (app_symbol def-decl
     "{T: nonempty | (interp?(S) => interp?(T)) AND (context?(S) => context?(T)) AND (pretheory?(S) => pretheory?(T)) AND weight(F)(T) <= weight(F)(S)}"
     apply nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil))
   nil))
 (pos_TCC12 0
  (pos_TCC12-1 nil 3582405937 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (pos_TCC13 0
  (pos_TCC13-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (pos_TCC14 0
  (pos_TCC14-1 nil 3582405937 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (pos_TCC15 0
  (pos_TCC15-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (pos_TCC16 0
  (pos_TCC16-1 nil 3582405937 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (pos_TCC17 0
  (pos_TCC17-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (pos_TCC18 0
  (pos_TCC18-1 nil 3582405937 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (pos_TCC19 0
  (pos_TCC19-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (pos_TCC20 0
  (pos_TCC20-1 nil 3582405937 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (pos_TCC21 0
  (pos_TCC21-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (pos_TCC22 0
  (pos_TCC22-1 nil 3582405937 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (pos_TCC23 0
  (pos_TCC23-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (pos_TCC24 0
  (pos_TCC24-1 nil 3582405937 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (pos_TCC25 0
  (pos_TCC25-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (pos_TCC26 0
  (pos_TCC26-1 nil 3582405937 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (pos_TCC27 0
  (pos_TCC27-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (pos_TCC28 0
  (pos_TCC28-1 nil 3582405937 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (pos_TCC29 0
  (pos_TCC29-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (pos_TCC30 0
  (pos_TCC30-1 nil 3582405937 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (pos_TCC31 0
  (pos_TCC31-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (pos_TCC32 0
  (pos_TCC32-1 nil 3582405937 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (pos_TCC33 0
  (pos_TCC33-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (pos_TCC34 0
  (pos_TCC34-1 nil 3582405937 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (pos_TCC35 0
  (pos_TCC35-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (pos_TCC36 0
  (pos_TCC36-1 nil 3582405937 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (well_formed type-eq-decl nil definitions nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC1 0
  (η_TCC1-1 nil 3582061831
   ("" (skosimp* :preds? t)
    (("" (use "member_nonempty") (("" (assert) nil nil)) nil)) nil)
   ((member_nonempty formula-decl nil apply nil)
    (symbol nonempty-type-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (expr formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil))
   nil))
 (η_TCC2 0
  (η_TCC2-1 nil 3582061831
   ("" (skosimp* :preds? t)
    (("" (rewrite -4)
      (("" (assert)
        (("" (typepred "app_symbol(σ!1)")
          (("" (inst?)
            (("" (flatten)
              (("" (use "interp_as_nonempty")
                (("" (assert)
                  (("" (split -1)
                    (("1" (use "nonempty_interp_is_definition") nil
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((app_symbol def-decl
     "{T: nonempty | (interp?(S) => interp?(T)) AND (context?(S) => context?(T)) AND (pretheory?(S) => pretheory?(T)) AND weight(F)(T) <= weight(F)(S)}"
     apply nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
        (F(ord_bot) = 0) AND (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (symbol nonempty-type-decl nil language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonempty formula-decl nil language nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonempty_interp? const-decl "[semantic -> bool]" language nil)
    (nonempty_interp type-eq-decl nil language nil)
    (nonempty_interp_is_definition judgement-tcc nil decl nil)
    (interp_as_nonempty formula-decl nil subtype nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil))
   nil))
 (η_TCC3 0
  (η_TCC3-1 nil 3582061831 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC4 0
  (η_TCC4-1 nil 3582061831 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC5 0
  (η_TCC5-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC6 0
  (η_TCC6-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC7 0
  (η_TCC7-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC8 0
  (η_TCC8-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC9 0
  (η_TCC9-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC10 0
  (η_TCC10-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC11 0
  (η_TCC11-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC12 0
  (η_TCC12-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC13 0
  (η_TCC13-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC14 0
  (η_TCC14-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC15 0
  (η_TCC15-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC16 0
  (η_TCC16-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC17 0
  (η_TCC17-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC18 0
  (η_TCC18-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC19 0
  (η_TCC19-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC20 0
  (η_TCC20-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC21 0
  (η_TCC21-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC22 0
  (η_TCC22-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC23 0
  (η_TCC23-1 nil 3582405069 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC24 0
  (η_TCC24-1 nil 3582405069 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (pos_symbol_lt_length 0
  (pos_symbol_lt_length-1 nil 3582406630
   ("" (induct-and-simplify "Γ") nil nil)
   ((semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (symbol nonempty-type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (context type-eq-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" definitions nil)
    (semantic_induction formula-decl nil language nil)
    (context formula-decl nil language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (pos_lt_length 0
  (pos_lt_length-1 nil 3582406693
   ("" (induct-and-simplify "e")
    (("1" (use "pos_symbol_lt_length") nil nil)
     ("2" (rewrite "max")
      (("2" (lift-if)
        (("2" (bddsimp)
          (("2" (assert) (("2" (grind) (("2" (postpone) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (postpone) nil nil) ("4" (postpone) nil nil)
     ("5" (postpone) nil nil) ("6" (postpone) nil nil)
     ("7" (postpone) nil nil) ("8" (postpone) nil nil)
     ("9" (postpone) nil nil) ("10" (postpone) nil nil)
     ("11" (postpone) nil nil) ("12" (postpone) nil nil))
    nil)
   nil shostak))
 (pos_ktype_def_TCC1 0
  (pos_ktype_def_TCC1-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (pos_ktype_def_TCC2 0
  (pos_ktype_def_TCC2-1 nil 3582405937
   ("" (skosimp* :preds? t) (("" (grind) nil nil)) nil)
   ((kind_nonempty application-judgement "kind" decl nil)
    (well_formed? def-decl "bool" definitions nil)
    (kind const-decl "{r: ε(kind?) | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (app_symbol def-decl
     "{T: nonempty | (interp?(S) => interp?(T)) AND (context?(S) => context?(T)) AND (pretheory?(S) => pretheory?(T)) AND weight(F)(T) <= weight(F)(S)}"
     apply nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil))
   nil))
 (pos_ktype_def 0
  (pos_ktype_def-1 nil 3582406559
   ("" (skosimp* :preds? t)
    (("" (grind) (("" (postpone) nil nil)) nil)) nil)
   nil shostak))
 (pos_kconst_def_TCC1 0
  (pos_kconst_def_TCC1-1 nil 3582405937 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (pos_kconst_def_TCC2 0
  (pos_kconst_def_TCC2-1 nil 3582405937 ("" (subtype-tcc) nil nil) nil
   nil)))

