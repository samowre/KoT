(definitions
 (well_formed?_TCC1 0
  (well_formed?_TCC1-1 nil 3582754779
   ("" (grind) (("" (use member_nonempty) (("" (grind) nil nil)) nil))
    nil)
   ((member_nonempty formula-decl nil apply nil)
    (symbol nonempty-type-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC2 0
  (well_formed?_TCC2-1 nil 3582754779
   ("" (grind) (("" (use member_nonempty) (("" (grind) nil nil)) nil))
    nil)
   ((member_nonempty formula-decl nil apply nil)
    (symbol nonempty-type-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC3 0
  (well_formed?_TCC3-1 nil 3582754779 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (kind const-decl "{r: keyword | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (definition? const-decl "bool" decl nil))
   nil))
 (well_formed?_TCC4 0
  (well_formed?_TCC4-1 nil 3582754779
   ("" (grind)
    (("" (typepred app_symbol)
      (("" (inst?)
        (("" (flatten)
          (("" (bddsimp -2)
            (("1" (rewrite context -1)
              (("1" (lemma pretheory_is_context)
                (("1" (inst - "dtheory(app_symbol(Γ!1)(m!1))")
                  (("1" (lemma context_is_map)
                    (("1" (inst - "dtheory(app_symbol(Γ!1)(m!1))") nil
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((app_symbol def-decl "{T: nonempty |
         (interp?(S) => interp?(T)) AND
          (context?(S) => context?(T)) AND
           (pretheory?(S) => pretheory?(T)) AND
            weight(F)(T) <= weight(F)(S)}" apply nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (∈ def-decl "bool" apply nil) (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (symbol nonempty-type-decl nil language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dtheory adt-accessor-decl "[(ktheory?) -> semantic]" language nil)
    (Γ!1 skolem-const-decl "context" definitions nil)
    (m!1 skolem-const-decl "symbol" definitions nil)
    (pretheory type-eq-decl nil language nil)
    (context_is_map judgement-tcc nil subtype nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (definition const-decl "{x: semantic |
         (type_kind?(S) IMPLIES pretype?(x)) AND
          (const_kind?(S) IMPLIES preterm?(x)) AND
           (theory_kind?(S) IMPLIES pretheory?(x)) AND
            weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}" decl
                nil)
    (kind const-decl "{r: keyword | nonempty?(S) IFF r ≠ ⊥}" decl nil))
   nil))
 (well_formed?_TCC5 0
  (well_formed?_TCC5-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (kind_theory formula-decl nil decl nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC6 0
  (well_formed?_TCC6-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (definition const-decl "{x: semantic |
         (type_kind?(S) IMPLIES pretype?(x)) AND
          (const_kind?(S) IMPLIES preterm?(x)) AND
           (theory_kind?(S) IMPLIES pretheory?(x)) AND
            weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}" decl
                nil)
    (kind const-decl "{r: keyword | nonempty?(S) IFF r ≠ ⊥}" decl nil))
   nil))
 (well_formed?_TCC7 0
  (well_formed?_TCC7-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC8 0
  (well_formed?_TCC8-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC9 0
  (well_formed?_TCC9-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (well_formed?_TCC10 0
  (well_formed?_TCC10-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC11 0
  (well_formed?_TCC11-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC12 0
  (well_formed?_TCC12-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC13 0
  (well_formed?_TCC13-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC14 0
  (well_formed?_TCC14-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (well_formed?_TCC15 0
  (well_formed?_TCC15-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC16 0
  (well_formed?_TCC16-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC17 0
  (well_formed?_TCC17-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC18 0
  (well_formed?_TCC18-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC19 0
  (well_formed?_TCC19-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (well_formed?_TCC20 0
  (well_formed?_TCC20-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC21 0
  (well_formed?_TCC21-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC22 0
  (well_formed?_TCC22-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC23 0
  (well_formed?_TCC23-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC24 0
  (well_formed?_TCC24-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC25 0
  (well_formed?_TCC25-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC26 0
  (well_formed?_TCC26-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC27 0
  (well_formed?_TCC27-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC28 0
  (well_formed?_TCC28-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC29 0
  (well_formed?_TCC29-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC30 0
  (well_formed?_TCC30-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC31 0
  (well_formed?_TCC31-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC32 0
  (well_formed?_TCC32-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC33 0
  (well_formed?_TCC33-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC34 0
  (well_formed?_TCC34-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC35 0
  (well_formed?_TCC35-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC36 0
  (well_formed?_TCC36-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC37 0
  (well_formed?_TCC37-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC38 0
  (well_formed?_TCC38-1 nil 3582754779
   ("" (grind)
    (("1" (use context_is_map) nil nil)
     ("2" (use pretheory_is_context)
      (("2" (use context_is_map) nil nil)) nil))
    nil)
   ((pretheory_is_context judgement-tcc nil subtype nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (Θ!1 skolem-const-decl "semantic" definitions nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (context_is_map judgement-tcc nil subtype nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC39 0
  (well_formed?_TCC39-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC40 0
  (well_formed?_TCC40-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC41 0
  (well_formed?_TCC41-1 nil 3582754779
   ("" (grind)
    (("1" (use context_is_map) nil nil)
     ("2" (lemma pretheory_is_context)
      (("2" (inst - Θ!1) (("2" (use context_is_map) nil nil)) nil))
      nil))
    nil)
   ((pretheory_is_context judgement-tcc nil subtype nil)
    (Θ!1 skolem-const-decl "semantic" definitions nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (context_is_map judgement-tcc nil subtype nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC42 0
  (well_formed?_TCC42-1 nil 3582754779
   ("" (grind)
    (("" (lemma pretheory_is_context) (("" (inst - Θ!1) nil nil)) nil))
    nil)
   ((pretheory_is_context judgement-tcc nil subtype nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC43 0
  (well_formed?_TCC43-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC44 0
  (well_formed?_TCC44-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC45 0
  (well_formed?_TCC45-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC46 0
  (well_formed?_TCC46-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC47 0
  (well_formed?_TCC47-1 nil 3582754779
   ("" (grind)
    (("1" (use context_is_map) nil nil)
     ("2" (use pretheory_is_context)
      (("2" (use context_is_map) nil nil)) nil))
    nil)
   ((pretheory_is_context judgement-tcc nil subtype nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (Θ!1 skolem-const-decl "semantic" definitions nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (context_is_map judgement-tcc nil subtype nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC48 0
  (well_formed?_TCC48-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC49 0
  (well_formed?_TCC49-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC50 0
  (well_formed?_TCC50-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC51 0
  (well_formed?_TCC51-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC52 0
  (well_formed?_TCC52-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC53 0
  (well_formed?_TCC53-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC54 0
  (well_formed?_TCC54-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC55 0
  (well_formed?_TCC55-1 nil 3582754779
   ("" (grind)
    (("1" (use context_is_map) nil nil)
     ("2" (lemma pretheory_is_context)
      (("2" (inst - Θ!1) (("2" (use context_is_map) nil nil)) nil))
      nil))
    nil)
   ((pretheory_is_context judgement-tcc nil subtype nil)
    (Θ!1 skolem-const-decl "semantic" definitions nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (context_is_map judgement-tcc nil subtype nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC56 0
  (well_formed?_TCC56-1 nil 3582754779
   ("" (grind)
    (("" (lemma pretheory_is_context) (("" (inst - Θ!1) nil nil)) nil))
    nil)
   ((pretheory_is_context judgement-tcc nil subtype nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC57 0
  (well_formed?_TCC57-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC58 0
  (well_formed?_TCC58-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC59 0
  (well_formed?_TCC59-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC60 0
  (well_formed?_TCC60-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC61 0
  (well_formed?_TCC61-1 nil 3582754779
   ("" (grind)
    (("1" (use context_is_map) nil nil)
     ("2" (lemma pretheory_is_context)
      (("2" (inst - Θ!1) (("2" (use context_is_map) nil nil)) nil))
      nil))
    nil)
   ((pretheory_is_context judgement-tcc nil subtype nil)
    (Θ!1 skolem-const-decl "semantic" definitions nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (context_is_map judgement-tcc nil subtype nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC62 0
  (well_formed?_TCC62-1 nil 3582754779
   ("" (grind)
    (("" (lemma pretheory_is_context) (("" (inst - Θ!1) nil nil)) nil))
    nil)
   ((pretheory_is_context judgement-tcc nil subtype nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC63 0
  (well_formed?_TCC63-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC64 0
  (well_formed?_TCC64-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC65 0
  (well_formed?_TCC65-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC66 0
  (well_formed?_TCC66-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC67 0
  (well_formed?_TCC67-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC68 0
  (well_formed?_TCC68-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC69 0
  (well_formed?_TCC69-1 nil 3582754779
   ("" (grind)
    (("1" (use context_is_map) nil nil)
     ("2" (lemma pretheory_is_context)
      (("2" (inst - Θ!1) (("2" (use context_is_map) nil nil)) nil))
      nil))
    nil)
   ((pretheory_is_context judgement-tcc nil subtype nil)
    (Θ!1 skolem-const-decl "semantic" definitions nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (context_is_map judgement-tcc nil subtype nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC70 0
  (well_formed?_TCC70-1 nil 3582754779
   ("" (grind)
    (("" (lemma pretheory_is_context) (("" (inst - Θ!1) nil nil)) nil))
    nil)
   ((pretheory_is_context judgement-tcc nil subtype nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC71 0
  (well_formed?_TCC71-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC72 0
  (well_formed?_TCC72-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC73 0
  (well_formed?_TCC73-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC74 0
  (well_formed?_TCC74-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC75 0
  (well_formed?_TCC75-1 nil 3582754779
   ("" (grind) (("" (use context_is_map) nil nil)) nil)
   ((context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (context_is_map judgement-tcc nil subtype nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC76 0
  (well_formed?_TCC76-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC77 0
  (well_formed?_TCC77-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC78 0
  (well_formed?_TCC78-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC79 0
  (well_formed?_TCC79-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC80 0
  (well_formed?_TCC80-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC81 0
  (well_formed?_TCC81-1 nil 3582754779
   ("" (grind) (("" (use interp_is_map) nil nil)) nil)
   ((interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (interp_is_map judgement-tcc nil subtype nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC82 0
  (well_formed?_TCC82-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC83 0
  (well_formed?_TCC83-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC84 0
  (well_formed?_TCC84-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC85 0
  (well_formed?_TCC85-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC86 0
  (well_formed?_TCC86-1 nil 3582754779
   ("" (grind) (("" (use interp_is_map) nil nil)) nil)
   ((interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (interp_is_map judgement-tcc nil subtype nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil))
   nil))
 (well_formed?_TCC87 0
  (well_formed?_TCC87-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC88 0
  (well_formed?_TCC88-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed?_TCC89 0
  (well_formed?_TCC89-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (well_formed?_TCC90 0
  (well_formed?_TCC90-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (well_formed_app_symbol_TCC1 0
  (well_formed_app_symbol_TCC1-1 nil 3582754779
   ("" (grind) (("" (use member_nonempty) (("" (grind) nil nil)) nil))
    nil)
   ((member_nonempty formula-decl nil apply nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (symbol nonempty-type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil))
   nil))
 (well_formed_app_symbol 0
  (well_formed_app_symbol-1 nil 3582755985
   ("" (induct-and-simplify Θ)
    (("1" (use member_nonempty) (("1" (grind) nil nil)) nil)
     ("2" (lemma context_is_map) (("2" (inst?) nil nil)) nil))
    nil)
   ((context_is_map judgement-tcc nil subtype nil)
    (member_nonempty formula-decl nil apply nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (++ def-decl
     "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
     contexts nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (context formula-decl nil language nil)
    (name? const-decl "[semantic -> bool]" language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (well_formed? def-decl "bool" definitions nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (∈ def-decl "bool" apply nil) (map type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (symbol nonempty-type-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (nonempty type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (app_symbol def-decl "{T: nonempty |
         (interp?(S) => interp?(T)) AND
          (context?(S) => context?(T)) AND
           (pretheory?(S) => pretheory?(T)) AND
            weight(F)(T) <= weight(F)(S)}" apply nil)
    (semantic_induction formula-decl nil language nil))
   shostak))
 (well_formed_app_var 0
  (well_formed_app_var-1 nil 3582756042
   ("" (induct Θ :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "nat" definitions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (context_induction formula-decl nil language nil)
    (app_var def-decl
     "{Δ | kvar?(Δ) AND nonempty?(Δ) AND weight(F)(Δ) <= weight(F)(Γ)}"
     apply nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (∈ def-decl "bool" apply nil)
    (well_formed? def-decl "bool" definitions nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   shostak))
 (subword_symbol_kind_TCC1 0
  (subword_symbol_kind_TCC1-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (subword_symbol_kind_TCC2 0
  (subword_symbol_kind_TCC2-1 nil 3582754779
   ("" (grind) (("" (use member_nonempty) (("" (grind) nil nil)) nil))
    nil)
   ((member_nonempty formula-decl nil apply nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (symbol nonempty-type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil))
   nil))
 (subword_symbol_kind_TCC3 0
  (subword_symbol_kind_TCC3-1 nil 3582754779
   ("" (grind)
    (("" (lemma member_symbol_when_subword)
      (("" (inst - s!1 Γ!1 Δ!1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((member_symbol_when_subword formula-decl nil contexts nil)
    (symbol nonempty-type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil))
   nil))
 (subword_symbol_kind_TCC4 0
  (subword_symbol_kind_TCC4-1 nil 3582754779
   ("" (grind)
    (("" (lemma member_symbol_when_subword)
      (("" (inst - s!1 Γ!1 Δ!1)
        (("" (prop)
          (("" (use member_nonempty) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((member_symbol_when_subword formula-decl nil contexts nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (member_nonempty formula-decl nil apply nil)
    (symbol nonempty-type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil))
   nil))
 (subword_symbol_kind 0
  (subword_symbol_kind-1 nil 3582756290
   ("" (induct Γ :name "context_induction")
    (("1" (grind) nil nil)
     ("2" (skosimp* :preds? t)
      (("2" (expand app_symbol 1 2)
        (("2" (lift-if)
          (("2" (bddsimp 1)
            (("1"
              (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
               (~ "^Δ!2 ≺ %"))
              (("1" (grind) nil nil)
               ("2"
                (invoke
                 (then (expand well_formed $1n)
                  (lemma member_symbol_when_subword)
                  (inst - s!2 Δ!1 Δ!2))
                 (~ "^well_formed?(%)(%)"))
                (("2" (grind) nil nil)) nil)
               ("3"
                (invoke
                 (then (expand well_formed $1n)
                  (lemma member_symbol_when_subword)
                  (inst - s!2 Δ!1 Δ!2) (grind))
                 (~ "^well_formed?(%)(%)"))
                nil nil))
              nil)
             ("2"
              (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
               (~ "^Δ!2 ≺ %"))
              (("1" (inst - s!2 "rest(Δ!2)") (("1" (grind) nil nil))
                nil)
               ("2" (inst - s!2 Δ!2) (("2" (grind) nil nil)) nil)
               ("3" (inst - s!2 Δ!2) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp* :preds? t)
      (("3" (expand app_symbol 1 2)
        (("3" (lift-if)
          (("3" (bddsimp 1)
            (("1"
              (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
               (~ "^Δ!2 ≺ %"))
              (("1" (grind) nil nil)
               ("2"
                (invoke
                 (then (expand well_formed $1n)
                  (lemma member_symbol_when_subword)
                  (inst - s!2 Δ!1 Δ!2) (grind))
                 (~ "^well_formed?(%)(%)"))
                nil nil)
               ("3"
                (invoke
                 (then (expand well_formed $1n)
                  (lemma member_symbol_when_subword)
                  (inst - s!2 Δ!1 Δ!2) (grind))
                 (~ "^well_formed?(%)(%)"))
                nil nil))
              nil)
             ("2"
              (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
               (~ "^Δ!2 ≺ %"))
              (("1" (inst - s!2 "rest(Δ!2)") (("1" (grind) nil nil))
                nil)
               ("2" (inst - s!2 Δ!2) (("2" (grind) nil nil)) nil)
               ("3" (inst - s!2 Δ!2) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp* :preds? t)
      (("4" (expand app_symbol 1 2)
        (("4" (lift-if)
          (("4" (bddsimp 1)
            (("1"
              (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
               (~ "^Δ!2 ≺ %"))
              (("1" (grind) nil nil)
               ("2"
                (invoke
                 (then (expand well_formed $1n)
                  (lemma member_symbol_when_subword)
                  (inst - s!2 Δ!1 Δ!2) (grind))
                 (~ "^well_formed?(%)(%)"))
                nil nil)
               ("3"
                (invoke
                 (then (expand well_formed $1n)
                  (lemma member_symbol_when_subword)
                  (inst - s!2 Δ!1 Δ!2) (grind))
                 (~ "^well_formed?(%)(%)"))
                nil nil))
              nil)
             ("2"
              (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
               (~ "^Δ!2 ≺ %"))
              (("1" (inst - s!2 "rest(Δ!2)") (("1" (grind) nil nil))
                nil)
               ("2" (inst - s!2 Δ!2) (("2" (grind) nil nil)) nil)
               ("3" (inst - s!2 Δ!2) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp* :preds? t)
      (("5" (expand app_symbol 1 2)
        (("5" (expand ≺ -6)
          (("5" (lift-if)
            (("5" (bddsimp -6)
              (("5" (inst - s!1 "rest(Δ!2)") (("5" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t)
      (("6" (expand app_symbol 1 2)
        (("6" (lift-if)
          (("6" (bddsimp 1)
            (("1"
              (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
               (~ "^Δ!2 ≺ %"))
              (("1" (grind) nil nil)
               ("2"
                (invoke
                 (then (expand well_formed $1n)
                  (lemma member_symbol_when_subword)
                  (inst - s!2 Δ!1 Δ!2) (grind))
                 (~ "^well_formed?(%)(%)"))
                nil nil)
               ("3"
                (invoke
                 (then (expand well_formed $1n)
                  (lemma member_symbol_when_subword)
                  (inst - s!2 Δ!1 Δ!2) (grind))
                 (~ "^well_formed?(%)(%)"))
                nil nil))
              nil)
             ("2"
              (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
               (~ "^Δ!2 ≺ %"))
              (("1" (inst - s!2 "rest(Δ!2)") (("1" (grind) nil nil))
                nil)
               ("2" (inst - s!2 Δ!2) (("2" (grind) nil nil)) nil)
               ("3" (inst - s!2 Δ!2) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skosimp* :preds? t)
      (("7" (expand app_symbol 1 2)
        (("7" (lift-if)
          (("7" (bddsimp 1)
            (("1"
              (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
               (~ "^Δ!2 ≺ %"))
              (("1" (grind) nil nil)
               ("2"
                (invoke
                 (then (expand well_formed $1n)
                  (lemma member_symbol_when_subword)
                  (inst - s!2 Δ!1 Δ!2) (grind))
                 (~ "^well_formed?(%)(%)"))
                nil nil)
               ("3"
                (invoke
                 (then (expand well_formed $1n)
                  (lemma member_symbol_when_subword)
                  (inst - s!2 Δ!1 Δ!2) (grind))
                 (~ "^well_formed?(%)(%)"))
                nil nil))
              nil)
             ("2"
              (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
               (~ "^Δ!2 ≺ %"))
              (("1" (inst - s!2 "rest(Δ!2)") (("1" (grind) nil nil))
                nil)
               ("2" (inst - s!2 Δ!2) (("2" (grind) nil nil)) nil)
               ("3" (inst - s!2 Δ!2) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (skosimp* :preds? t)
      (("8" (expand app_symbol 1 2)
        (("8" (lift-if)
          (("8" (bddsimp 1)
            (("1"
              (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
               (~ "^Δ!2 ≺ %"))
              (("1" (grind) nil nil)
               ("2"
                (invoke
                 (then (expand well_formed $1n)
                  (lemma member_symbol_when_subword)
                  (inst - s!2 Δ!1 Δ!2) (grind))
                 (~ "^well_formed?(%)(%)"))
                nil nil)
               ("3"
                (invoke
                 (then (expand well_formed $1n)
                  (lemma member_symbol_when_subword)
                  (inst - s!2 Δ!1 Δ!2) (grind))
                 (~ "^well_formed?(%)(%)"))
                nil nil))
              nil)
             ("2"
              (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
               (~ "^Δ!2 ≺ %"))
              (("1" (inst - s!2 "rest(Δ!2)") (("1" (grind) nil nil))
                nil)
               ("2" (inst - s!2 Δ!2) (("2" (grind) nil nil)) nil)
               ("3" (inst - s!2 Δ!2) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (skosimp* :preds? t)
      (("9" (expand app_symbol 1 2)
        (("9" (lift-if)
          (("9" (bddsimp 1)
            (("1"
              (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
               (~ "^Δ!2 ≺ %"))
              (("1" (grind) nil nil)
               ("2"
                (invoke
                 (then (expand well_formed $1n)
                  (lemma member_symbol_when_subword)
                  (inst - s!2 Δ!1 Δ!2) (grind))
                 (~ "^well_formed?(%)(%)"))
                nil nil)
               ("3"
                (invoke
                 (then (expand well_formed $1n)
                  (lemma member_symbol_when_subword)
                  (inst - s!2 Δ!1 Δ!2) (grind))
                 (~ "^well_formed?(%)(%)"))
                nil nil))
              nil)
             ("2"
              (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
               (~ "^Δ!2 ≺ %"))
              (("1" (inst - s!2 "rest(Δ!2)") (("1" (grind) nil nil))
                nil)
               ("2" (inst - s!2 Δ!2) (("2" (grind) nil nil)) nil)
               ("3" (inst - s!2 Δ!2) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (skosimp* :preds? t)
      (("10" (lemma member_symbol_when_subword)
        (("10" (inst - s!1 Γ!2 Δ!1)
          (("10" (prop)
            (("10" (use member_nonempty) (("10" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (skosimp* :preds? t)
      (("11" (lemma member_symbol_when_subword)
        (("11" (inst - s!1 Γ!2 Δ!1) (("11" (grind) nil nil)) nil))
        nil))
      nil)
     ("12" (skosimp* :preds? t)
      (("12" (use member_nonempty) (("12" (grind) nil nil)) nil)) nil))
    nil)
   ((member_nonempty formula-decl nil apply nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (kind_nonempty application-judgement "kind" decl nil)
    (member_symbol_when_subword formula-decl nil contexts nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (context_induction formula-decl nil language nil)
    (app_symbol def-decl "{T: nonempty |
         (interp?(S) => interp?(T)) AND
          (context?(S) => context?(T)) AND
           (pretheory?(S) => pretheory?(T)) AND
            weight(F)(T) <= weight(F)(S)}" apply nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (kind const-decl "{r: keyword | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (≠ const-decl "[T, T -> bool]" notequal nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (keyword type-decl nil language nil)
    (context formula-decl nil language nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (symbol nonempty-type-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (≺ def-decl "bool" contexts nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil) (∈ def-decl "bool" apply nil)
    (nonempty? const-decl "[semantic -> bool]" language nil))
   shostak))
 (subword_symbol_definition_TCC1 0
  (subword_symbol_definition_TCC1-1 nil 3582754779
   ("" (induct Γ :name "context_induction")
    (("1" (grind) nil nil)
     ("2" (skosimp* :preds? t)
      (("2"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1" (grind) nil nil)
         ("2"
          (invoke
           (then (expand well_formed $1n)
            (lemma member_symbol_when_subword) (inst - s!2 Δ!1 Δ!2)
            (grind))
           (~ "^well_formed?(%)(%)"))
          nil nil)
         ("3"
          (invoke
           (then (expand well_formed $1n)
            (lemma member_symbol_when_subword) (inst - s!2 Δ!1 Δ!2)
            (grind))
           (~ "^well_formed?(%)(%)"))
          nil nil))
        nil))
      nil)
     ("3" (skosimp* :preds? t)
      (("3"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1" (grind) nil nil)
         ("2"
          (invoke
           (then (expand well_formed $1n)
            (lemma member_symbol_when_subword) (inst - s!2 Δ!1 Δ!2)
            (grind))
           (~ "^well_formed?(%)(%)"))
          nil nil)
         ("3"
          (invoke
           (then (expand well_formed $1n)
            (lemma member_symbol_when_subword) (inst - s!2 Δ!1 Δ!2)
            (grind))
           (~ "^well_formed?(%)(%)"))
          nil nil))
        nil))
      nil)
     ("4" (skosimp* :preds? t)
      (("4"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1" (grind) nil nil)
         ("2"
          (invoke
           (then (expand well_formed $1n)
            (lemma member_symbol_when_subword) (inst - s!2 Δ!1 Δ!2)
            (grind))
           (~ "^well_formed?(%)(%)"))
          nil nil)
         ("3"
          (invoke
           (then (expand well_formed $1n)
            (lemma member_symbol_when_subword) (inst - s!2 Δ!1 Δ!2)
            (grind))
           (~ "^well_formed?(%)(%)"))
          nil nil))
        nil))
      nil)
     ("5" (skosimp* :preds? t)
      (("5" (expand app_symbol +)
        (("5" (expand ≺ -7)
          (("5" (lift-if)
            (("5" (bddsimp -7)
              (("5" (inst - s!1 "rest(Δ!2)") (("5" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t)
      (("6"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1" (grind) nil nil)
         ("2"
          (invoke
           (then (expand well_formed $1n)
            (lemma member_symbol_when_subword) (inst - s!2 Δ!1 Δ!2)
            (grind))
           (~ "^well_formed?(%)(%)"))
          nil nil)
         ("3"
          (invoke
           (then (expand well_formed $1n)
            (lemma member_symbol_when_subword) (inst - s!2 Δ!1 Δ!2)
            (grind))
           (~ "^well_formed?(%)(%)"))
          nil nil))
        nil))
      nil)
     ("7" (skosimp* :preds? t)
      (("7"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1" (grind) nil nil)
         ("2"
          (invoke
           (then (expand well_formed $1n)
            (lemma member_symbol_when_subword) (inst - s!2 Δ!1 Δ!2)
            (grind))
           (~ "^well_formed?(%)(%)"))
          nil nil)
         ("3"
          (invoke
           (then (expand well_formed $1n)
            (lemma member_symbol_when_subword) (inst - s!2 Δ!1 Δ!2)
            (grind))
           (~ "^well_formed?(%)(%)"))
          nil nil))
        nil))
      nil)
     ("8" (skosimp* :preds? t)
      (("8"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1" (grind) nil nil)
         ("2"
          (invoke
           (then (expand well_formed $1n)
            (lemma member_symbol_when_subword) (inst - s!2 Δ!1 Δ!2)
            (grind))
           (~ "^well_formed?(%)(%)"))
          nil nil)
         ("3"
          (invoke
           (then (expand well_formed $1n)
            (lemma member_symbol_when_subword) (inst - s!2 Δ!1 Δ!2)
            (grind))
           (~ "^well_formed?(%)(%)"))
          nil nil))
        nil))
      nil)
     ("9" (skosimp* :preds? t)
      (("9"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1" (grind) nil nil)
         ("2"
          (invoke
           (then (expand well_formed $1n)
            (lemma member_symbol_when_subword) (inst - s!2 Δ!1 Δ!2)
            (grind))
           (~ "^well_formed?(%)(%)"))
          nil nil)
         ("3"
          (invoke
           (then (expand well_formed $1n)
            (lemma member_symbol_when_subword) (inst - s!2 Δ!1 Δ!2)
            (grind))
           (~ "^well_formed?(%)(%)"))
          nil nil))
        nil))
      nil)
     ("10" (skosimp* :preds? t)
      (("10" (lemma member_symbol_when_subword)
        (("10" (inst - s!1 Γ!2 Δ!1)
          (("10" (prop)
            (("10" (use member_nonempty) (("10" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (skosimp* :preds? t)
      (("11" (lemma member_symbol_when_subword)
        (("11" (inst - s!1 Γ!2 Δ!1) (("11" (grind) nil nil)) nil))
        nil))
      nil)
     ("12" (postpone) nil nil) ("13" (postpone) nil nil))
    nil)
   nil nil))
 (subword_symbol_type_TCC1 0
  (subword_symbol_type_TCC1-1 nil 3582754779
   ("" (grind)
    (("" (typepred app_symbol)
      (("" (inst?)
        (("" (rewrite nonempty_context_as_context)
          (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((app_symbol def-decl "{T: nonempty |
         (interp?(S) => interp?(T)) AND
          (context?(S) => context?(T)) AND
           (pretheory?(S) => pretheory?(T)) AND
            weight(F)(T) <= weight(F)(S)}" apply nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (∈ def-decl "bool" apply nil) (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (symbol nonempty-type-decl nil language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty_context_as_context formula-decl nil subtype nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonempty formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (interp formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil))
   nil))
 (subword_symbol_type_TCC2 0
  (subword_symbol_type_TCC2-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   nil nil))
 (subword_symbol_type 0
  (subword_symbol_type-1 nil 3582809561
   ("" (induct Γ :name "context_induction")
    (("1" (postpone) nil nil) ("2" (postpone) nil nil)
     ("3" (postpone) nil nil) ("4" (postpone) nil nil)
     ("5" (postpone) nil nil) ("6" (postpone) nil nil)
     ("7" (postpone) nil nil) ("8" (postpone) nil nil)
     ("9" (postpone) nil nil) ("10" (postpone) nil nil)
     ("11" (postpone) nil nil) ("12" (postpone) nil nil)
     ("13" (postpone) nil nil) ("14" (postpone) nil nil)
     ("15" (postpone) nil nil) ("16" (postpone) nil nil))
    nil)
   nil shostak))
 (subword_var_kind_TCC1 0
  (subword_var_kind_TCC1-1 nil 3582754688
   ("" (grind)
    (("" (lemma member_var_when_subword)
      (("" (inst - x!1 Γ!1 Δ!1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((member_var_when_subword formula-decl nil contexts nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil))
   shostak))
 (subword_var_kind 0
  (subword_var_kind-1 nil 3582757884
   ("" (induct Γ :name "context_induction")
    (("1" (grind) nil nil)
     ("2" (skosimp* :preds? t)
      (("2" (expand app_var 1 2)
        (("2"
          (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
           (~ "^Δ!2 ≺ %"))
          (("1" (grind) nil nil)
           ("2" (lemma member_var_when_subword)
            (("2" (inst - x!1 Δ!1 Δ!2) (("2" (grind) nil nil)) nil))
            nil)
           ("3" (lemma member_var_when_subword)
            (("3" (inst - x!1 Δ!1 Δ!2) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp* :preds? t)
      (("3" (expand app_var 1 2)
        (("3"
          (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
           (~ "^Δ!2 ≺ %"))
          (("1" (grind) nil nil)
           ("2" (lemma member_var_when_subword)
            (("2" (inst - x!1 Δ!1 Δ!2) (("2" (grind) nil nil)) nil))
            nil)
           ("3" (lemma member_var_when_subword)
            (("3" (inst - x!1 Δ!1 Δ!2) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp* :preds? t)
      (("4" (expand app_var 1 2)
        (("4"
          (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
           (~ "^Δ!2 ≺ %"))
          (("1" (grind) nil nil)
           ("2" (lemma member_var_when_subword)
            (("2" (inst - x!1 Δ!1 Δ!2) (("2" (grind) nil nil)) nil))
            nil)
           ("3" (lemma member_var_when_subword)
            (("3" (inst - x!1 Δ!1 Δ!2) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp* :preds? t)
      (("5" (expand app_var +)
        (("5" (lift-if)
          (("5" (bddsimp 1)
            (("1" (expand ≺ -8)
              (("1" (lift-if)
                (("1" (bddsimp -8) (("1" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t)
      (("6" (expand app_var 1 2)
        (("6"
          (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
           (~ "^Δ!2 ≺ %"))
          (("1" (grind) nil nil)
           ("2" (lemma member_var_when_subword)
            (("2" (inst - x!1 Δ!1 Δ!2) (("2" (grind) nil nil)) nil))
            nil)
           ("3" (lemma member_var_when_subword)
            (("3" (inst - x!1 Δ!1 Δ!2) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skosimp* :preds? t)
      (("7" (expand app_var 1 2)
        (("7"
          (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
           (~ "^Δ!2 ≺ %"))
          (("1" (grind) nil nil)
           ("2" (lemma member_var_when_subword)
            (("2" (inst - x!1 Δ!1 Δ!2) (("2" (grind) nil nil)) nil))
            nil)
           ("3" (lemma member_var_when_subword)
            (("3" (inst - x!1 Δ!1 Δ!2) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (skosimp* :preds? t)
      (("8" (expand app_var 1 2)
        (("8"
          (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
           (~ "^Δ!2 ≺ %"))
          (("1" (lemma member_var_when_subword)
            (("1" (inst - x!1 Δ!1 Δ!2) (("1" (grind) nil nil)) nil))
            nil)
           ("2" (lemma member_var_when_subword)
            (("2" (inst - x!1 Δ!1 Δ!2) (("2" (grind) nil nil)) nil))
            nil)
           ("3" (lemma member_var_when_subword)
            (("3" (inst - x!1 Δ!1 Δ!2) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (skosimp* :preds? t)
      (("9" (expand app_var 1 2)
        (("9"
          (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
           (~ "^Δ!2 ≺ %"))
          (("1" (grind) nil nil)
           ("2" (lemma member_var_when_subword)
            (("2" (inst - x!1 Δ!1 Δ!2) (("2" (grind) nil nil)) nil))
            nil)
           ("3" (lemma member_var_when_subword)
            (("3" (inst - x!1 Δ!1 Δ!2) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (skosimp* :preds? t)
      (("10" (lemma member_var_when_subword)
        (("10" (inst - x!1 Γ!2 Δ!1) (("10" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (context formula-decl nil language nil)
    (kind_nonempty application-judgement "kind" decl nil)
    (member_var_when_subword formula-decl nil contexts nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (context_induction formula-decl nil language nil)
    (app_var def-decl
     "{Δ | kvar?(Δ) AND nonempty?(Δ) AND weight(F)(Δ) <= weight(F)(Γ)}"
     apply nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kind const-decl "{r: keyword | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (≠ const-decl "[T, T -> bool]" notequal nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (keyword type-decl nil language nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (≺ def-decl "bool" contexts nil) (∈ def-decl "bool" apply nil))
   shostak))
 (subword_var_type_TCC1 0
  (subword_var_type_TCC1-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonempty_context formula-decl nil language nil)
    (typed? const-decl "bool" decl nil))
   nil))
 (subword_var_type_TCC2 0
  (subword_var_type_TCC2-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonempty_context formula-decl nil language nil)
    (typed? const-decl "bool" decl nil))
   nil))
 (subword_var_type 0
  (subword_var_type-1 nil 3582758361
   ("" (induct Γ :name "context_induction")
    (("1" (grind) nil nil)
     ("2" (skosimp* :preds? t)
      (("2" (expand app_var 1 2)
        (("2"
          (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
           (~ "^Δ!2 ≺ %"))
          (("1" (grind) nil nil)
           ("2" (lemma member_var_when_subword)
            (("2" (inst - x!1 Δ!1 Δ!2) (("2" (grind) nil nil)) nil))
            nil)
           ("3" (lemma member_var_when_subword)
            (("3" (inst - x!1 Δ!1 Δ!2) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp* :preds? t)
      (("3" (expand app_var 1 2)
        (("3"
          (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
           (~ "^Δ!2 ≺ %"))
          (("1" (grind) nil nil)
           ("2" (lemma member_var_when_subword)
            (("2" (inst - x!1 Δ!1 Δ!2) (("2" (grind) nil nil)) nil))
            nil)
           ("3" (lemma member_var_when_subword)
            (("3" (inst - x!1 Δ!1 Δ!2) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp* :preds? t)
      (("4" (expand app_var 1 2)
        (("4"
          (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
           (~ "^Δ!2 ≺ %"))
          (("1" (grind) nil nil)
           ("2" (lemma member_var_when_subword)
            (("2" (inst - x!1 Δ!1 Δ!2) (("2" (grind) nil nil)) nil))
            nil)
           ("3" (lemma member_var_when_subword)
            (("3" (inst - x!1 Δ!1 Δ!2) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp* :preds? t)
      (("5" (expand app_var +)
        (("5" (lift-if)
          (("5" (bddsimp 1)
            (("1" (expand ≺ -8)
              (("1" (lift-if)
                (("1" (bddsimp -8) (("1" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t)
      (("6" (expand app_var 1 2)
        (("6"
          (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
           (~ "^Δ!2 ≺ %"))
          (("1" (grind) nil nil)
           ("2" (lemma member_var_when_subword)
            (("2" (inst - x!1 Δ!1 Δ!2) (("2" (grind) nil nil)) nil))
            nil)
           ("3" (lemma member_var_when_subword)
            (("3" (inst - x!1 Δ!1 Δ!2) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skosimp* :preds? t)
      (("7" (expand app_var 1 2)
        (("7"
          (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
           (~ "^Δ!2 ≺ %"))
          (("1" (grind) nil nil)
           ("2" (lemma member_var_when_subword)
            (("2" (inst - x!1 Δ!1 Δ!2) (("2" (grind) nil nil)) nil))
            nil)
           ("3" (lemma member_var_when_subword)
            (("3" (inst - x!1 Δ!1 Δ!2) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (skosimp* :preds? t)
      (("8" (expand app_var 1 2)
        (("8"
          (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
           (~ "^Δ!2 ≺ %"))
          (("1" (lemma member_var_when_subword)
            (("1" (inst - x!1 Δ!1 Δ!2) (("1" (grind) nil nil)) nil))
            nil)
           ("2" (lemma member_var_when_subword)
            (("2" (inst - x!1 Δ!1 Δ!2) (("2" (grind) nil nil)) nil))
            nil)
           ("3" (lemma member_var_when_subword)
            (("3" (inst - x!1 Δ!1 Δ!2) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (skosimp* :preds? t)
      (("9" (expand app_var 1 2)
        (("9"
          (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
           (~ "^Δ!2 ≺ %"))
          (("1" (grind) nil nil)
           ("2" (lemma member_var_when_subword)
            (("2" (inst - x!1 Δ!1 Δ!2) (("2" (grind) nil nil)) nil))
            nil)
           ("3" (lemma member_var_when_subword)
            (("3" (inst - x!1 Δ!1 Δ!2) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (skosimp* :preds? t)
      (("10" (lemma member_var_when_subword)
        (("10" (inst - x!1 Γ!2 Δ!1) (("10" (grind) nil nil)) nil))
        nil))
      nil)
     ("11" (skosimp* :preds? t)
      (("11" (lemma member_var_when_subword)
        (("11" (inst - x!1 Γ!2 Δ!1) (("11" (grind) nil nil)) nil))
        nil))
      nil)
     ("12" (skosimp* :preds? t)
      (("12" (split 1)
        (("1" (typepred app_var)
          (("1" (inst?)
            (("1" (flatten)
              (("1" (rewrite nonempty_context_as_context)
                (("1" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (typepred app_var)
          (("2" (inst?) (("2" (flatten) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((typed? const-decl "bool" decl nil)
    (nonempty_context type-eq-decl nil language nil)
    (app_var def-decl
     "{Δ | kvar?(Δ) AND nonempty?(Δ) AND weight(F)(Δ) <= weight(F)(Γ)}"
     apply nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (nonempty_context? const-decl "[semantic -> bool]" language nil)
    (∈ def-decl "bool" apply nil) (≺ def-decl "bool" contexts nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (typed type-eq-decl nil decl nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (type_ const-decl
     "{T | weight(F)(T) + weight(F)(rest(Γ)) < weight(F)(Γ)}" decl nil)
    (context_induction formula-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member_var_when_subword formula-decl nil contexts nil)
    (context formula-decl nil language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (nonempty_context formula-decl nil language nil)
    (nonempty_context_as_context formula-decl nil subtype nil)
    (nonempty formula-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (well_formed_subword 0
  (well_formed_subword-1 nil 3582810365
   ("" (induct "e" :name "expr_induction")
    (("1" (skosimp* :preds? t)
      (("1" (expand well_formed? -5)
        (("1" (expand well_formed? 1)
          (("1" (split 1)
            (("1" (use member_symbol_when_subword)
              (("1" (assert) nil nil)) nil)
             ("2" (lemma subword_symbol_kind)
              (("2" (inst - s!1 Γ!1 Δ!1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp* :preds? t)
      (("2" (expand well_formed? 1)
        (("2" (expand well_formed? -7)
          (("2" (split 1)
            (("1" (use member_symbol_when_subword)
              (("1" (assert) nil nil)) nil)
             ("2" (lemma subword_symbol_kind)
              (("2" (inst - m!1 Γ!1 Δ!1) (("2" (grind) nil nil)) nil))
              nil)
             ("3" (lemma subword_symbol_definition)
              (("3" (inst - m!1 Γ!1 Δ!1) (("3" (grind) nil nil)) nil))
              nil)
             ("4" (inst - Γ!1 Δ!1) (("4" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind)
      (("3" (lemma member_var_when_subword)
        (("3" (inst - i!1 Γ!1 Δ!1) (("3" (assert) nil nil)) nil)) nil))
      nil)
     ("4" (skosimp* :preds? t)
      (("4" (expand well_formed? -9)
        (("4" (expand well_formed? 1)
          (("4" (inst - Γ!1 Δ!1)
            (("4" (inst - Γ!1 Δ!1) (("4" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("5" (skosimp* :preds? t)
      (("5" (expand well_formed? -9)
        (("5" (expand well_formed? 1)
          (("5" (inst - Γ!1 Δ!1)
            (("5" (inst - Γ!1 Δ!1) (("5" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t)
      (("6" (expand well_formed? -9)
        (("6" (expand well_formed? 1)
          (("6" (inst - Γ!1 Δ!1)
            (("6" (inst - Γ!1 Δ!1) (("6" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("7" (skosimp* :preds? t)
      (("7" (expand well_formed? -7)
        (("7" (expand well_formed? 1)
          (("7" (inst - Γ!1 Δ!1) (("7" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("8" (skosimp* :preds? t)
      (("8" (inst - Γ!1 Δ!1) (("8" (grind) nil nil)) nil)) nil)
     ("9" (skosimp* :preds? t)
      (("9" (inst - Γ!1 Δ!1)
        (("9" (inst - "kvar(A!1, Γ!1)" "kvar(A!1, Δ!1)")
          (("9" (grind) (("9" (rewrite doubleplus_empty) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (skosimp* :preds? t)
      (("10" (inst - Γ!1 Δ!1)
        (("10" (inst - "kvar(A!1, Γ!1)" "kvar(A!1, Δ!1)")
          (("10" (grind) (("10" (rewrite doubleplus_empty) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (skosimp* :preds? t)
      (("11" (inst - Γ!1 Δ!1)
        (("11" (inst - "kvar(T!1, Γ!1)" "kvar(T!1, Δ!1)")
          (("11" (grind) (("11" (rewrite doubleplus_empty) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (skosimp* :preds? t) (("12" (grind) nil nil)) nil)
     ("13" (skosimp* :preds? t)
      (("13" (inst - Γ!1 Δ!1)
        (("13" (inst - Γ!1 Δ!1) (("13" (grind) nil nil)) nil)) nil))
      nil)
     ("14" (skosimp* :preds? t)
      (("14" (inst - Γ!1 Δ!1)
        (("14" (inst - Γ!1 Δ!1) (("14" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (doubleplus_empty formula-decl nil contexts nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member_var_when_subword formula-decl nil contexts nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (subword_symbol_definition formula-decl nil definitions nil)
    (definition? const-decl "bool" decl nil)
    (definition const-decl "{x: semantic |
         (type_kind?(S) IMPLIES pretype?(x)) AND
          (const_kind?(S) IMPLIES preterm?(x)) AND
           (theory_kind?(S) IMPLIES pretheory?(x)) AND
            weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}" decl
                nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subword_symbol_kind formula-decl nil definitions nil)
    (kind const-decl "{r: keyword | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (kind_nonempty application-judgement "kind" decl nil)
    (member_symbol_when_subword formula-decl nil contexts nil)
    (symbol nonempty-type-decl nil language nil)
    (kind_theory formula-decl nil decl nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (expr_induction formula-decl nil language nil)
    (≺ def-decl "bool" contexts nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" definitions nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (context formula-decl nil language nil))
   shostak))
 (η_TCC1 0
  (η_TCC1-1 nil 3582754779
   ("" (grind) (("" (use member_nonempty) (("" (grind) nil nil)) nil))
    nil)
   ((member_nonempty formula-decl nil apply nil)
    (symbol nonempty-type-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil))
   nil))
 (η_TCC2 0
  (η_TCC2-1 nil 3582754779
   ("" (skosimp* :preds? t)
    (("" (typepred app_symbol)
      (("" (inst?)
        (("" (flatten)
          (("" (bddsimp -1)
            (("1" (expand definition? +)
              (("1" (rewrite interp -1)
                (("1" (assert)
                  (("1" (lift-if)
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((app_symbol def-decl "{T: nonempty |
         (interp?(S) => interp?(T)) AND
          (context?(S) => context?(T)) AND
           (pretheory?(S) => pretheory?(T)) AND
            weight(F)(T) <= weight(F)(S)}" apply nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (∈ def-decl "bool" apply nil) (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (symbol nonempty-type-decl nil language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (definition? const-decl "bool" decl nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expr formula-decl nil language nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (nonempty formula-decl nil language nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil))
   nil))
 (η_TCC3 0
  (η_TCC3-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC4 0
  (η_TCC4-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC5 0
  (η_TCC5-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC6 0
  (η_TCC6-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC7 0
  (η_TCC7-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC8 0
  (η_TCC8-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC9 0
  (η_TCC9-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC10 0
  (η_TCC10-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC11 0
  (η_TCC11-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC12 0
  (η_TCC12-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC13 0
  (η_TCC13-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC14 0
  (η_TCC14-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC15 0
  (η_TCC15-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC16 0
  (η_TCC16-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC17 0
  (η_TCC17-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC18 0
  (η_TCC18-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC19 0
  (η_TCC19-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC20 0
  (η_TCC20-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC21 0
  (η_TCC21-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC22 0
  (η_TCC22-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC23 0
  (η_TCC23-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC24 0
  (η_TCC24-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC25 0
  (η_TCC25-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC26 0
  (η_TCC26-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC27 0
  (η_TCC27-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC28 0
  (η_TCC28-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC29 0
  (η_TCC29-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC30 0
  (η_TCC30-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC31 0
  (η_TCC31-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC32 0
  (η_TCC32-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC33 0
  (η_TCC33-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC34 0
  (η_TCC34-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC35 0
  (η_TCC35-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC36 0
  (η_TCC36-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC37 0
  (η_TCC37-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC38 0
  (η_TCC38-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC39 0
  (η_TCC39-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (η_TCC40 0
  (η_TCC40-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (η_TCC41 0
  (η_TCC41-1 nil 3582754779 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (δ_TCC1 0
  (δ_TCC1-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC2 0
  (δ_TCC2-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC3 0
  (δ_TCC3-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (definition? const-decl "bool" decl nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC4 0
  (δ_TCC4-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC5 0
  (δ_TCC5-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC6 0
  (δ_TCC6-1 nil 3582754779 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC7 0
  (δ_TCC7-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC8 0
  (δ_TCC8-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC9 0
  (δ_TCC9-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC10 0
  (δ_TCC10-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC11 0
  (δ_TCC11-1 nil 3582754779 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC12 0
  (δ_TCC12-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC13 0
  (δ_TCC13-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC14 0
  (δ_TCC14-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC15 0
  (δ_TCC15-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pretype formula-decl nil language nil)
    (definition? const-decl "bool" decl nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (theory_kind? const-decl "bool" decl nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (const_kind? const-decl "bool" decl nil)
    (app_symbol def-decl "{T: nonempty |
         (interp?(S) => interp?(T)) AND
          (context?(S) => context?(T)) AND
           (pretheory?(S) => pretheory?(T)) AND
            weight(F)(T) <= weight(F)(S)}" apply nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (∈ def-decl "bool" apply nil)
    (symbol nonempty-type-decl nil language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (type_kind? const-decl "bool" decl nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (δ_TCC16 0
  (δ_TCC16-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC17 0
  (δ_TCC17-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (theory_kind? const-decl "bool" decl nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (const_kind? const-decl "bool" decl nil)
    (app_symbol def-decl "{T: nonempty |
         (interp?(S) => interp?(T)) AND
          (context?(S) => context?(T)) AND
           (pretheory?(S) => pretheory?(T)) AND
            weight(F)(T) <= weight(F)(S)}" apply nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (∈ def-decl "bool" apply nil)
    (symbol nonempty-type-decl nil language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (type_kind? const-decl "bool" decl nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (δ_TCC18 0
  (δ_TCC18-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC19 0
  (δ_TCC19-1 nil 3582754779 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC20 0
  (δ_TCC20-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC21 0
  (δ_TCC21-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (kind_nonempty application-judgement "kind" decl nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (kind const-decl "{r: keyword | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (pretype formula-decl nil language nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (theory_kind? const-decl "bool" decl nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (const_kind? const-decl "bool" decl nil)
    (app_symbol def-decl "{T: nonempty |
         (interp?(S) => interp?(T)) AND
          (context?(S) => context?(T)) AND
           (pretheory?(S) => pretheory?(T)) AND
            weight(F)(T) <= weight(F)(S)}" apply nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (∈ def-decl "bool" apply nil)
    (symbol nonempty-type-decl nil language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (type_kind? const-decl "bool" decl nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (external? const-decl "bool" definitions nil)
    (definition? const-decl "bool" decl nil)
    (definition const-decl "{x: semantic |
         (type_kind?(S) IMPLIES pretype?(x)) AND
          (const_kind?(S) IMPLIES preterm?(x)) AND
           (theory_kind?(S) IMPLIES pretheory?(x)) AND
            weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}" decl
                nil))
   nil))
 (δ_TCC22 0
  (δ_TCC22-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC23 0
  (δ_TCC23-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC24 0
  (δ_TCC24-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC25 0
  (δ_TCC25-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC26 0
  (δ_TCC26-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC27 0
  (δ_TCC27-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC28 0
  (δ_TCC28-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC29 0
  (δ_TCC29-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC30 0
  (δ_TCC30-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC31 0
  (δ_TCC31-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC32 0
  (δ_TCC32-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC33 0
  (δ_TCC33-1 nil 3582754779 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC34 0
  (δ_TCC34-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC35 0
  (δ_TCC35-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC36 0
  (δ_TCC36-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC37 0
  (δ_TCC37-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC38 0
  (δ_TCC38-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC39 0
  (δ_TCC39-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC40 0
  (δ_TCC40-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC41 0
  (δ_TCC41-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC42 0
  (δ_TCC42-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC43 0
  (δ_TCC43-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC44 0
  (δ_TCC44-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC45 0
  (δ_TCC45-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC46 0
  (δ_TCC46-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC47 0
  (δ_TCC47-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC48 0
  (δ_TCC48-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC49 0
  (δ_TCC49-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC50 0
  (δ_TCC50-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC51 0
  (δ_TCC51-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC52 0
  (δ_TCC52-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC53 0
  (δ_TCC53-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC54 0
  (δ_TCC54-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC55 0
  (δ_TCC55-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC56 0
  (δ_TCC56-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC57 0
  (δ_TCC57-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC58 0
  (δ_TCC58-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC59 0
  (δ_TCC59-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC60 0
  (δ_TCC60-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC61 0
  (δ_TCC61-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC62 0
  (δ_TCC62-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC63 0
  (δ_TCC63-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC64 0
  (δ_TCC64-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC65 0
  (δ_TCC65-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC66 0
  (δ_TCC66-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC67 0
  (δ_TCC67-1 nil 3582754779 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC68 0
  (δ_TCC68-1 nil 3582754779 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil))
 (δ_TCC69 0
  (δ_TCC69-1 nil 3582754779 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" definitions nil)
    (pretype formula-decl nil language nil))
   nil)))

