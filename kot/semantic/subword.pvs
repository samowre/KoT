subword: THEORY
BEGIN
  IMPORTING well_formed

  S: VAR syntaxic
  Γ, Δ, Θ: VAR well_formed_context
  A, B, T: VAR pretype
  r, s: VAR symbol
  n, m: VAR name
  x, y: VAR nat
  a, b, f, g: VAR preterm
  σ, τ: VAR interp
  e: VAR expr



  % Is Δ a subword of Γ?
  ;≺(Δ, Γ): RECURSIVE bool =
    CASES Γ OF
      〈〉: empty?(Δ)
    , ktype_decl(s, Θ):
      CASES Δ OF
        ktype_decl(t, rest): IF t = s THEN rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , ktype_def(s, T, Θ):
      CASES Δ OF
        ktype_def(t, A, rest): IF t = s THEN T = A AND rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , ktype_ext(s, Θ):
      CASES Δ OF
        ktype_ext(t, rest): IF t = s THEN rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , kvar(T, Θ):
      CASES Δ OF
        kvar(A, rest): T = A AND rest ≺ Θ
	ELSE FALSE
      ENDCASES
    , kconst_decl(s, T, Θ):
      CASES Δ OF
        kconst_decl(t, A, rest): IF t = s THEN A = T AND rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , kconst_def(s, T, a, Θ):
      CASES Δ OF
        kconst_def(t, A, b, rest): IF t = s THEN A = T AND b = a AND rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , kconst_ext(s, T, Θ):
      CASES Δ OF
        kconst_ext(t, A, rest): IF t = s THEN A = T AND rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , ktheory(s, Th, Θ):
      CASES Δ OF
        ktheory(t, Uh, rest): IF t = s THEN Uh = Th AND rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    ENDCASES
  MEASURE w(Γ)
  AUTO_REWRITE ≺


  member_symbol_when_subword: THEOREM
    Δ ≺ Γ AND s ∈ Δ IMPLIES s ∈ Γ
  member_var_when_subword: THEOREM
    Δ ≺ Γ IMPLIES (x ∈ Δ IFF x ∈ Γ)

  length_subword: THEOREM
    Δ ≺ Γ IMPLIES length(Δ) <= length(Γ)
  pos_symbol_subword: THEOREM
    Δ ≺ Γ AND s ∈ Δ IMPLIES pos(Δ, s) <= pos(Γ, s)
  pos_var_subword: THEOREM
    Δ ≺ Γ AND x ∈ Δ IMPLIES pos(Δ, x) <= pos(Γ, x)
  
  subword_is_reflexive: JUDGEMENT ≺ HAS_TYPE (reflexive?[well_formed_context])
  subword_rest: LEMMA nonempty?(Γ) AND NOT kvar?(Γ) IMPLIES rest(Γ) ≺ Γ
  %subword_is_transitive: JUDGEMENT ≺ HAS_TYPE (transitive?[well_formed_context])
  %subword_is_antisymmetric: JUDGEMENT ≺ HAS_TYPE (antisymmetric?[well_formed_context])
  %st_subword_is_well_founded: JUDGEMENT st_subword HAS_TYPE (well_founded?[well_formed_context])


  subword_app_symbol: THEOREM
    s ∈ Γ IMPLIES Γ(s) ≺ Γ

 
  % We would have liked to say that 
  %  Δ ≺ Γ AND s ∈ Δ IMPLIES Δ(s) = Γ(s), 
  % but because of the way we represent Δ(s) (as a context, not just the car)
  % it is false. We instead give these equivalent theorems :
  %  Δ ≺ Γ AND s ∈ Δ IMPLIES Δ(s) and Γ(s) have same
  % kind, definition and type. 

  % We first need to write these two lemmas,
  % because PVS swaps the terms of the conjunction
  % in the TCC generated, making the expression not
  % typecheckable.
  subword_symbol_definition?: LEMMA 
    well_formed?(〈〉)(Γ) AND Δ ≺ Γ AND
    s ∈ Δ AND definition?(Δ(s))
    IMPLIES definition?(Γ(s))
  subword_symbol_typed?: LEMMA
    well_formed?(〈〉)(Γ) AND Δ ≺ Γ AND
    s ∈ Δ AND typed?(Δ(s)) 
    IMPLIES typed?(Γ(s))


  subword_symbol_kind: THEOREM 
    well_formed?(〈〉)(Γ) AND Δ ≺ Γ AND
    s ∈ Δ 
    IMPLIES kind(Δ(s)) = kind(Γ(s))
  subword_symbol_definition: THEOREM
    well_formed?(〈〉)(Γ) AND Δ ≺ Γ AND
    s ∈ Δ AND definition?(Δ(s))
    IMPLIES definition(Δ(s)) = definition(Γ(s))
  subword_symbol_type: THEOREM 
    well_formed?(〈〉)(Γ) AND Δ ≺ Γ AND
    s ∈ Δ AND typed?(Δ(s)) 
    IMPLIES type_(Δ(s)) = type_(Γ(s))

  % Same for variables
  subword_var_kind: THEOREM
    Δ ≺ Γ AND x ∈ Δ IMPLIES kind(Δ(x)) = kind(Γ(x))
  subword_var_type: THEOREM
    Δ ≺ Γ AND x ∈ Δ IMPLIES type_(Δ(x)) = type_(Γ(x))
  
  % I don't remember why and where we need it, but we do 
  % (probably for τ's tccs)
  well_formed_subword: THEOREM 
    well_formed?(〈〉)(Γ) AND Δ ≺ Γ AND 
    well_formed?(Δ)(e) IMPLIES well_formed?(Γ)(e)
END subword
