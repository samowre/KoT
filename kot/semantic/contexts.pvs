contexts: THEORY
BEGIN
  IMPORTING apply

  S: VAR syntaxic
  Γ, Δ, Θ: VAR context
  A, B, T: VAR pretype
  r, s: VAR symbol
  n, m: VAR name
  x, y: VAR nat
  a, b, f, g: VAR preterm
  σ, τ: VAR interp

  % Γ ++ Δ = Γ; Δ
  ;++(Γ, Δ): RECURSIVE
    { Θ | w(Θ) = w(Γ) + w(Δ) - F(ord_empty) - 1 } =
    CASES Δ OF
      % Γ; {} = Γ
      〈〉: Γ,
      % Γ; (Δ, s: TYPE) = (Γ; Δ), s: TYPE
      ktype_decl(s, Δ): ktype_decl(s, Γ ++ Δ),
      ktype_def(s, T, Δ): ktype_def(s, T, Γ ++ Δ),
      ktype_ext(s, Δ): ktype_ext(s, Γ ++ Δ),
      kvar(T, Δ): kvar(T, Γ ++ Δ),
      kconst_decl(s, T, Δ): kconst_decl(s, T, Γ ++ Δ),
      kconst_def(s, T, a, Δ): kconst_def(s, T, a, Γ ++ Δ),
      kconst_ext(s, T, Δ): kconst_ext(s, T, Γ ++ Δ),
      ktheory(s, Θ, Δ): ktheory(s, Θ, Γ ++ Δ)
    ENDCASES
  MEASURE w(Δ)
  AUTO_REWRITE+ ++
  doubleplus_theory: RECURSIVE JUDGEMENT
    ++(Γ, Δ: pretheory) HAS_TYPE pretheory


  % ++ props
  doubleplus_empty: LEMMA 〈〉 ++ Γ = Γ

  % Is Γ a prefix of Δ
  prefix?(Γ)(Δ): RECURSIVE bool = 
    Γ = Δ OR
    CASES Δ OF
      〈〉: empty?(Γ),
      ktype_decl(s, Θ): prefix?(Γ)(Θ),
      ktype_def(s, T, Θ): prefix?(Γ)(Θ),
      ktype_ext(s, Θ): prefix?(Γ)(Θ),
      kvar(T, Θ): prefix?(Γ)(Θ),
      kconst_decl(s, T, Θ): prefix?(Γ)(Θ),
      kconst_def(s, T, a, Θ): prefix?(Γ)(Θ),
      kconst_ext(s, T, Θ): prefix?(Γ)(Θ),
      ktheory(s, Th, Θ): prefix?(Γ)(Θ)
    ENDCASES 
  MEASURE Δ BY <<

  member_when_prefix: THEOREM 
    prefix?(Γ)(Θ) AND s ∈ Γ IMPLIES s ∈ Θ
        
END contexts
