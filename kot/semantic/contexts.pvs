contexts: THEORY
BEGIN
  IMPORTING apply

  S: VAR syntaxic
  Γ, Δ, Θ: VAR context
  A, B, T: VAR pretype
  r, s: VAR symbol
  n, m: VAR name
  x, y: VAR nat
  a, b, f, g: VAR preterm
  σ, τ: VAR interp

  % Γ ++ Δ = Γ; Δ
  ;++(Γ, Δ): RECURSIVE
    { Θ | w(Θ) = w(Γ) + w(Δ) - F(ord_empty) - 1 } =
    CASES Δ OF
      % Γ; {} = Γ
      〈〉: Γ,
      % Γ; (Δ, s: TYPE) = (Γ; Δ), s: TYPE
      ktype_decl(s, Δ): ktype_decl(s, Γ ++ Δ),
      ktype_def(s, T, Δ): ktype_def(s, T, Γ ++ Δ),
      ktype_ext(s, Δ): ktype_ext(s, Γ ++ Δ),
      kvar(T, Δ): kvar(T, Γ ++ Δ),
      kconst_decl(s, T, Δ): kconst_decl(s, T, Γ ++ Δ),
      kconst_def(s, T, a, Δ): kconst_def(s, T, a, Γ ++ Δ),
      kconst_ext(s, T, Δ): kconst_ext(s, T, Γ ++ Δ),
      ktheory(s, Θ, Δ): ktheory(s, Θ, Γ ++ Δ)
    ENDCASES
  MEASURE w(Δ)
  AUTO_REWRITE+ ++
  doubleplus_theory: RECURSIVE JUDGEMENT
    ++(Γ, Δ: pretheory) HAS_TYPE pretheory

  % Is Δ a subword of Γ?
  ;≺(Δ, Γ): RECURSIVE bool =
    CASES Γ OF
      〈〉: empty?(Δ)
    , ktype_decl(s, Θ):
      CASES Δ OF
        ktype_decl(t, rest): IF t = s THEN rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , ktype_def(s, T, Θ):
      CASES Δ OF
        ktype_def(t, A, rest): IF t = s THEN T = A AND rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , ktype_ext(s, Θ):
      CASES Δ OF
        ktype_ext(t, rest): IF t = s THEN rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , kvar(T, Θ):
      CASES Δ OF
        kvar(A, rest): T = A AND rest ≺ Θ
	ELSE FALSE
      ENDCASES
    , kconst_decl(s, T, Θ):
      CASES Δ OF
        kconst_decl(t, A, rest): IF t = s THEN A = T AND rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , kconst_def(s, T, a, Θ):
      CASES Δ OF
        kconst_def(t, A, b, rest): IF t = s THEN A = T AND b = a AND rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , kconst_ext(s, T, Θ):
      CASES Δ OF
        kconst_ext(t, A, rest): IF t = s THEN A = T AND rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , ktheory(s, Th, Θ):
      CASES Δ OF
        ktheory(t, Uh, rest): IF t = s THEN Uh = Th AND rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    ENDCASES
  MEASURE w(Γ)
  member_symbol_when_subword: THEOREM
    Δ ≺ Γ AND s ∈ Δ IMPLIES s ∈ Γ
  apply_symbol_when_subword: THEOREM
    Δ ≺ Γ AND s ∈ Δ IMPLIES Δ(s) = Γ(s)
  member_var_when_subword: THEOREM
    Δ ≺ Γ IMPLIES x ∈ Δ IFF x ∈ Γ
  apply_var_when_subword: THEOREM
    Δ ≺ Γ AND x ∈ Δ IMPLIES Δ(x) = Γ(x)
END contexts
