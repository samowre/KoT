contexts: THEORY
BEGIN
  IMPORTING map

  S: VAR syntaxic
  Γ, Δ, Θ: VAR context
  A, B, T: VAR pretype
  r, s: VAR symbol
  n, m: VAR name
  x, y: VAR nat
  a, b, f, g: VAR preterm
  σ, τ: VAR interp



  % Is Δ a subword of Γ?
  ;≺(Δ, Γ): RECURSIVE bool =
    CASES Γ OF
      〈〉: empty?(Δ)
    , ktype_decl(s, Θ):
      CASES Δ OF
        ktype_decl(t, rest): IF t = s THEN rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , ktype_def(s, T, Θ):
      CASES Δ OF
        ktype_def(t, A, rest): IF t = s THEN T = A AND rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , ktype_ext(s, Θ):
      CASES Δ OF
        ktype_ext(t, rest): IF t = s THEN rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , kvar(T, Θ):
      CASES Δ OF
        kvar(A, rest): T = A AND rest ≺ Θ
	ELSE FALSE
      ENDCASES
    , kconst_decl(s, T, Θ):
      CASES Δ OF
        kconst_decl(t, A, rest): IF t = s THEN A = T AND rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , kconst_def(s, T, a, Θ):
      CASES Δ OF
        kconst_def(t, A, b, rest): IF t = s THEN A = T AND b = a AND rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , kconst_ext(s, T, Θ):
      CASES Δ OF
        kconst_ext(t, A, rest): IF t = s THEN A = T AND rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    , ktheory(s, Th, Θ):
      CASES Δ OF
        ktheory(t, Uh, rest): IF t = s THEN Uh = Th AND rest ≺ Θ ELSE Δ ≺ Θ ENDIF
        ELSE Δ ≺ Θ
      ENDCASES
    ENDCASES
  MEASURE w(Γ)

  
  subword_is_reflexive: JUDGEMENT ≺ HAS_TYPE (reflexive?[context])
  % Transitivity of subword is FALSE. I don't think we need it so it's not a big deal
  % But we feel like transitivity should hold, and it does if we replace the case
  % (= if then else) by a OR. It also holds if we had the assumption that the contexts
  % are well_formed.
  % Maybe we should write well_formed in language, and define ≺ over well_formed
  % contexts only. To discuss 
  %transitivity_lemma: LEMMA nonempty?(Γ) IMPLIES rest(Γ) ≺ Γ
  %subword_is_transitive: JUDGEMENT ≺ HAS_TYPE (transitive?[context])
  %subword_is_antisymmetric: JUDGEMENT ≺ HAS_TYPE (antisymmetric?[context])
  %subword_is_well_founded: JUDGEMENT ≺ HAS_TYPE (well_founded?[context])

  member_symbol_when_subword: THEOREM
    Δ ≺ Γ AND s ∈ Δ IMPLIES s ∈ Γ

  member_var_when_subword: THEOREM
    Δ ≺ Γ IMPLIES (x ∈ Δ IFF x ∈ Γ)

  
  subword_app_symbol: THEOREM
    s ∈ Γ IMPLIES Γ(s) ≺ Γ

  % This theorem is indeed false as you told me, but very handy isnt it ?
  % A valid version can be found in definition.pvs
  %apply_symbol_when_subword: THEOREM
  %  Δ ≺ Γ AND s ∈ Δ IMPLIES Δ(s) = Γ(s)
  % same comment for this one
  %apply_var_when_subword: THEOREM
  %  Δ ≺ Γ AND x ∈ Δ IMPLIES Δ(x) = Γ(x)
END contexts
