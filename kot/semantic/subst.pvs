subst: THEORY
BEGIN
  IMPORTING syntaxic_sets

  e, f: VAR expr
  T, A, B: VAR pretype
  i, j, n: VAR nat
  Θ: VAR pretheory
  Γ: VAR context
  S: VAR syntaxic
  s: VAR symbol
  
  size(T): RECURSIVE nat =
    CASES T OF
      fun(A, B): size(A) + size(B) + 1,
      prod(A, B): size(A) + size(B) + 1,
      subtype(T, a): size(T),
      symbol(s): 1,
      dot(m, σ, s): 1
    ENDCASES
  MEASURE w(T)
  AUTO_REWRITE+ size

  
  % Shift: classical shift operator for De Bruijn indices
  ;↑(e, (nb: [nat, nat])): RECURSIVE
    { f | (pretype?(e) => pretype?(f)) AND
          (preterm?(e) => preterm?(f)) AND
	  (interp?(e)  => interp?(f)) AND
	  (pretheory?(e) => pretheory?(f)) AND
	  w(f) = w(e) } =
    CASES e OF
      % Names
      symbol(s): symbol(s),
      dot(m, σ, s): dot(m, σ ↑ nb, s),

      % Types
      subtype(T, a): subtype(T ↑ nb, a ↑ (nb`1, nb`2 + 1)),
      fun(A, B): fun(A ↑ nb, B ↑ (nb`1, nb`2 + 1)),
      prod(A, B): prod(A ↑ nb, B ↑ (nb`1, nb`2 + 1)),

      % Terms
      v(i): IF i < nb`2 THEN v(i) ELSE v(i + nb`1) ENDIF,
      app(f, a): app(f ↑ nb, a ↑ nb),
      lam(T, a): lam(T ↑ nb, a ↑ (nb`1, nb`2 + 1)),
      pair(a, b): pair(a ↑ nb, b ↑ nb),
      lproj(a): lproj(a ↑ nb),
      rproj(a): rproj(a ↑ nb),

      % Pretheory
      〈〉: 〈〉,
      ktype_decl(s, Γ): ktype_decl(s, Γ ↑ nb),
      ktype_def(s, T, Γ): ktype_def(s, T ↑ (nb`1, nb`2 + dvars(Γ)), Γ ↑ nb),
      ktype_ext(s, Γ): ktype_ext(s, Γ ↑ nb),
      kconst_decl(s, T, Γ): kconst_decl(s, T ↑ (nb`1, nb`2 + dvars(Γ)), Γ ↑ nb),
      kconst_def(s, T, a, Γ): kconst_def(s, T ↑ (nb`1, nb`2 + dvars(Γ)), a ↑ (nb`1, nb`2 + dvars(Γ)), Γ ↑ nb),
      kconst_ext(s, T, Γ): kconst_ext(s, T ↑ (nb`1, nb`2 + dvars(Γ)), Γ ↑ nb),

      % Interpretations
      nil: nil,
      itype(s, T, σ): itype(s, T ↑ nb, σ ↑ nb),
      iconst(s, a, σ): iconst(s, a ↑ nb, σ ↑ nb)
    ENDCASES
  MEASURE w(e)
  AUTO_REWRITE+ ↑
  dsymbols_shift: THEOREM
    dsymbols(Θ ↑ (i, j)) = dsymbols(Θ)
  symbols_shift: THEOREM
    symbols(e ↑ (i, j)) = symbols(e)
  dvars_shift: THEOREM
      dvars(Θ ↑ (i, j)) = dvars(Θ)
  vars_shift: THEOREM
      vars(e ↑ (i, j)) =
        { k: nat | k < j AND k ∈ vars(e) OR k >= i + j AND (k - i) ∈ vars(e) }
  uniques_shift: THEOREM
    uniques?(Θ ↑ (i, j)) IFF uniques?(Θ)
  shift_size: JUDGEMENT
    ↑(A, (nb: [nat, nat])) HAS_TYPE { B | size(B) = size(A) }
  shift_zero: THEOREM
    e ↑ (0, n) = e
  AUTO_REWRITE+ shift_zero

  ;↑(e, (n: nat)): MACRO semantic =
    (e ↑ (n, 0))
  shift_plus: THEOREM
    (e ↑ (i, n)) ↑ (j, n) = e ↑ (i + j, n)
  AUTO_REWRITE+ shift_plus

  % This is a "true" substitution - this really removes the bound variable.
  % Outer variables see their index decreased.
  % Definition 2.15, 4.3, modified for the De Bruijn index
  subst(e, (x: nat), (t: preterm)): RECURSIVE
    { f | (pretype?(e) => pretype?(f)) AND
          (preterm?(e) => preterm?(f)) AND
	  (interp?(e)  => interp?(f)) AND
	  (pretheory?(e) => pretheory?(f)) } =
    CASES e OF
      symbol(s): symbol(s),
      dot(m, σ,s): dot(m, subst(σ, x, t), s),

      % { y:  T | a } ↦      { y:   T[ x ← t]    |   a[   x  ←   t ] }
      %                        λ——————————————————————\___________/
      subtype(T,  a): subtype(subst(T, x,  t), subst(a, x + 1, t ↑ 1)),
      % [i: A → B] ↦ [ i:   A[ x ← t] →      B[   x  ←   t  ]]
      %                λ——————————————————————\_____________/
      fun(  A,  B):  ⌈subst(A, x,  t), subst(B, x + 1, t ↑ 1)⌉,
      % [i: A, B] ↦ [i:    A[ x ← t],       B[   x  ←   t  ]]
      %              λ———————————————————————\_____________/
      prod( A, B):  ⌈subst(A, x,  t), subst(B, x + 1, t ↑ 1)⌉,

      % n ↦ t
      % x ↦ x where the λ-binder for n has been removed
      v(i): IF i > x THEN v(i - 1) ELSIF i = x THEN t ELSE v(i) ENDIF,
      %   f  a ↦           f[ x ← t]        a[ x ← t]
      app(f, a): app(subst(f, x,  t), subst(a, x,  t)),
      % λ(y: T): a ↦ λ(y:      T[ x ← t]):      a[   x  ←   t  ]
      %                λ————————————————————————–\_____________/
      lam(   T,  a): lam(subst(T, x,  t), subst(a, x + 1, t ↑ 1)),
      %   (a, b) ↦ (       a[ x ← t],       b[ x ← t] )
      pair(a, b):  〈 subst(a, x,  t), subst(b, x,  t) 〉,
      %  p₁ a ↦ p₁          a[ x ← t]
      lproj(a): lproj(subst(a, x,  t)),
      %  p₂ a ↦ p₂          a[ x ← t]
      rproj(a): rproj(subst(a, x,  t)),

      % Pretheory
      〈〉: 〈〉,
      ktype_decl(s, Γ): ktype_decl(s, subst(Γ, x, t)),
      ktype_def(s, T, Γ): ktype_def(s, subst(T, x, t), subst(Γ, x, t)),
      ktype_ext(s, Γ): ktype_ext(s, subst(Γ, x, t)),
      kconst_decl(s, T, Γ): kconst_decl(s, subst(T, x, t), subst(Γ, x, t)),
      kconst_def(s, T, a, Γ): kconst_def(s, subst(T, x, t), subst(a, x, t), subst(Γ, x, t)),
      kconst_ext(s, T, Γ): kconst_ext(s, subst(T, x, t), subst(Γ, x, t)),

      % Interpretations
      nil: nil,
      itype(s, T, σ): itype(s, subst(T, x, t), subst(σ, x, t)),
      iconst(s, a, σ): iconst(s, subst(a, x, t), subst(σ, x, t))
    ENDCASES
  MEASURE w(e)
  subst_size: JUDGEMENT
    subst(T, (x: nat), (t: preterm)) HAS_TYPE { A: pretype | size(A) = size(T) }

END subst
