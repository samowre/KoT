(contexts
 (μ₀_TCC1 0
  (μ₀_TCC1-1 nil 3581870591 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype? const-decl "bool" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype formula-decl nil language nil))
   nil))
 (μ₀_TCC2 0
  (μ₀_TCC2-1 nil 3581870591 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype? const-decl "bool" language nil)
    (pretype type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (pretype formula-decl nil language nil))
   nil))
 (μ₀_TCC3 0
  (μ₀_TCC3-1 nil 3581870591 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype? const-decl "bool" language nil)
    (pretype type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pretype formula-decl nil language nil))
   nil))
 (μ₀_TCC4 0
  (μ₀_TCC4-1 nil 3581870591 ("" (subtype-tcc) nil nil) nil nil))
 (doubleplus_TCC1 0
  (doubleplus_TCC1-1 nil 3581870591 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (doubleplus_TCC2 0
  (doubleplus_TCC2-1 nil 3581870591 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (doubleplus_TCC3 0
  (doubleplus_TCC3-1 nil 3581870591 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (doubleplus_TCC4 0
  (doubleplus_TCC4-1 nil 3581870591
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (assert)
        (("" (rewrite "context" +)
          (("1" (assert) (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (context formula-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil))
   nil))
 (doubleplus_TCC5 0
  (doubleplus_TCC5-1 nil 3581870591 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (doubleplus_TCC6 0
  (doubleplus_TCC6-1 nil 3581870591 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (doubleplus_TCC7 0
  (doubleplus_TCC7-1 nil 3581870591
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -4) (("" (assert) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (context formula-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil))
   nil))
 (doubleplus_TCC8 0
  (doubleplus_TCC8-1 nil 3581870591 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (doubleplus_TCC9 0
  (doubleplus_TCC9-1 nil 3581870591 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (doubleplus_TCC10 0
  (doubleplus_TCC10-1 nil 3581870591 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (Δ1!1 skolem-const-decl "semantic" contexts nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (doubleplus_TCC11 0
  (doubleplus_TCC11-1 nil 3581870591 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (doubleplus_TCC12 0
  (doubleplus_TCC12-1 nil 3581870591 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (doubleplus_TCC13 0
  (doubleplus_TCC13-1 nil 3581870591 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (Δ1!1 skolem-const-decl "semantic" contexts nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (doubleplus_TCC14 0
  (doubleplus_TCC14-1 nil 3581870591 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (doubleplus_TCC15 0
  (doubleplus_TCC15-1 nil 3581870591 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (doubleplus_TCC16 0
  (doubleplus_TCC16-1 nil 3581870591 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (Δ1!1 skolem-const-decl "semantic" contexts nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (doubleplus_TCC17 0
  (doubleplus_TCC17-1 nil 3581870591 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (doubleplus_TCC18 0
  (doubleplus_TCC18-1 nil 3581870591 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (doubleplus_TCC19 0
  (doubleplus_TCC19-1 nil 3581870591 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (Δ1!1 skolem-const-decl "semantic" contexts nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (doubleplus_TCC20 0
  (doubleplus_TCC20-1 nil 3581870591 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (doubleplus_theory 0
  (doubleplus_theory-1 nil 3581870591
   ("" (induct "Δ")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil) ("11" (grind) nil nil)
     ("12" (grind) nil nil) ("13" (grind) nil nil)
     ("14" (grind) nil nil) ("15" (grind) nil nil)
     ("16" (grind) nil nil) ("17" (grind) nil nil)
     ("18" (grind) nil nil) ("19" (grind) nil nil)
     ("20" (skosimp* :preds? t)
      (("20" (assert) (("20" (inst?) nil nil)) nil)) nil)
     ("21" (skosimp* :preds? t)
      (("21" (assert)
        (("21" (flatten) (("21" (assert) (("21" (inst?) nil nil)) nil))
          nil))
        nil))
      nil)
     ("22" (skosimp* :preds? t) (("22" (assert) nil nil)) nil)
     ("23" (skosimp* :preds? t)
      (("23" (assert)
        (("23" (flatten) (("23" (assert) (("23" (inst?) nil nil)) nil))
          nil))
        nil))
      nil)
     ("24" (skosimp* :preds? t)
      (("24" (assert)
        (("24" (flatten) (("24" (assert) (("24" (inst?) nil nil)) nil))
          nil))
        nil))
      nil)
     ("25" (skosimp* :preds? t) (("25" (assert) nil nil)) nil)
     ("26" (skosimp* :preds? t) (("26" (assert) nil nil)) nil)
     ("27" (skosimp* :preds? t) (("27" (assert) nil nil)) nil)
     ("28" (skeep)
      (("28" (use "pretheory_is_context" :if-match all)
        (("28" (grind) nil nil)) nil))
      nil))
    nil)
   ((Δ skolem-const-decl "semantic" contexts nil)
    (pretheory_is_context judgement-tcc nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pretheory formula-decl nil language nil)
    (semantic_induction formula-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (++ def-decl
     "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
     contexts nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (ord type-decl nil language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (context type-eq-decl nil language nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "bool" language nil)
    (pretheory type-eq-decl nil language nil)
    (context? const-decl "bool" language nil))
   nil))
 (in_TCC1 0
  (in_TCC1-1 nil 3581870591 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil))
   nil))
 (in_TCC2 0
  (in_TCC2-1 nil 3581870591 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (in_TCC3 0
  (in_TCC3-1 nil 3581870591 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (in_TCC4 0
  (in_TCC4-1 nil 3581870591 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (in_TCC5 0
  (in_TCC5-1 nil 3581870591 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (interp formula-decl nil language nil)
    (context formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (keyword formula-decl nil language nil))
   nil))
 (in_TCC6 0
  (in_TCC6-1 nil 3581870591
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (split -1)
        (("1" (assert) nil nil) ("2" (assert) nil nil)
         ("3" (assert) nil nil) ("4" (assert) nil nil)
         ("5" (assert) nil nil)
         ("6" (assert)
          (("6" (bddsimp (-1 -2))
            (("1" (grind)
              (("1" (rewrite "preterm")
                (("1" (rewrite "context")
                  (("1" (lift-if)
                    (("1" (bddsimp -)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil) ("6" (propax) nil nil)
                       ("7" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "preterm")
              (("2" (rewrite "interp")
                (("2" (lift-if)
                  (("2" (bddsimp -)
                    (("1" (propax) nil nil) ("2" (assert) nil nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("7" (assert)
          (("7" (grind)
            (("1" (rewrite "pretype")
              (("1" (rewrite "context")
                (("1" (lift-if)
                  (("1" (bddsimp -)
                    (("1" (propax) nil nil) ("2" (propax) nil nil)
                     ("3" (propax) nil nil) ("4" (propax) nil nil)
                     ("5" (propax) nil nil) ("6" (propax) nil nil)
                     ("7" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "pretype")
              (("2" (rewrite "interp")
                (("2" (lift-if)
                  (("2" (bddsimp -)
                    (("1" (propax) nil nil) ("2" (propax) nil nil)
                     ("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("8" (assert)
          (("8" (rewrite "context")
            (("8" (rewrite "interp")
              (("1" (lift-if)
                (("1" (bddsimp -)
                  (("1" (propax) nil nil) ("2" (assert) nil nil)
                   ("3" (assert) nil nil) ("4" (propax) nil nil)
                   ("5" (assert) nil nil) ("6" (assert) nil nil)
                   ("7" (assert) nil nil))
                  nil))
                nil)
               ("2" (lift-if)
                (("2" (assert)
                  (("2" (bddsimp -)
                    (("1" (assert) nil nil) ("2" (assert) nil nil)
                     ("3" (assert) nil nil) ("4" (assert) nil nil)
                     ("5" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("9" (assert)
          (("9" (rewrite "pretheory")
            (("9" (rewrite "context")
              (("9" (rewrite "interp")
                (("9" (lift-if)
                  (("9" (bddsimp -)
                    (("1" (propax) nil nil) ("2" (assert) nil nil)
                     ("3" (assert) nil nil) ("4" (assert) nil nil)
                     ("5" (assert) nil nil) ("6" (assert) nil nil)
                     ("7" (assert) nil nil) ("8" (assert) nil nil)
                     ("9" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("10" (assert)
          (("10" (grind)
            (("10" (rewrite "interp")
              (("10" (lift-if)
                (("10" (bddsimp -)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("11" (rewrite "name")
          (("11" (rewrite "context")
            (("11" (rewrite "interp")
              (("11" (bddsimp -)
                (("1" (lift-if) (("1" (bddsimp -) nil nil)) nil)
                 ("2" (lift-if) (("2" (bddsimp -) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR kvar?(x) OR kconst_decl?(x)
           OR kconst_def?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil))
   nil))
 (in_TCC7 0
  (in_TCC7-1 nil 3581870591
   ("" (skosimp* :preds? t)
    (("" (rewrite "syntaxic")
      (("" (assert)
        (("" (bddsimp -)
          (("1" (assert)
            (("1" (grind)
              (("1" (grind)
                (("1" (rewrite "context")
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (bddsimp -)
                        (("1" (assert) nil nil) ("2" (assert) nil nil)
                         ("3" (assert) nil nil) ("4" (assert) nil nil)
                         ("5" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (rewrite "interp")
              (("2" (lift-if)
                (("2" (bddsimp -)
                  (("1" (propax) nil nil) ("2" (assert) nil nil)
                   ("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((syntaxic formula-decl nil language nil)
    (keyword formula-decl nil language nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (interp formula-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil))
   nil))
 (in_TCC8 0
  (in_TCC8-1 nil 3581870591 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (in_TCC9 0
  (in_TCC9-1 nil 3581889602 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (in_TCC10 0
  (in_TCC10-1 nil 3581889602 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil))
   nil))
 (in_TCC11 0
  (in_TCC11-1 nil 3581889602 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (context formula-decl nil language nil))
   nil))
 (in_TCC12 0
  (in_TCC12-1 nil 3581889602 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (in_TCC13 0
  (in_TCC13-1 nil 3581889602 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (in_TCC14 0
  (in_TCC14-1 nil 3581889602
   ("" (skosimp* :preds? t)
    (("" (rewrite "context")
      (("" (lift-if)
        (("" (bddsimp -)
          (("1" (propax) nil nil) ("2" (propax) nil nil)
           ("3" (propax) nil nil) ("4" (propax) nil nil)
           ("5" (propax) nil nil) ("6" (propax) nil nil)
           ("7" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil))
   nil))
 (in_TCC15 0
  (in_TCC15-1 nil 3581889602
   ("" (grind)
    (("" (rewrite "context")
      (("" (lift-if)
        (("" (bddsimp -)
          (("1" (propax) nil nil) ("2" (assert) nil nil)
           ("3" (assert) nil nil) ("4" (propax) nil nil)
           ("5" (assert) nil nil) ("6" (assert) nil nil)
           ("7" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((context formula-decl nil language nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil))
   nil))
 (in_TCC16 0
  (in_TCC16-1 nil 3581889602 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil))
   nil))
 (app_symbol_TCC1 0
  (app_symbol_TCC1-1 nil 3581870591 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (interp formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (keyword formula-decl nil language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (app_symbol_TCC2 0
  (app_symbol_TCC2-1 nil 3581870591
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite "context")
        (("" (lift-if)
          (("" (assert)
            (("" (split -1)
              (("1" (assert) nil nil) ("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((∈ def-decl "bool" contexts nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (interp? const-decl "bool" language nil)
    (context? const-decl "bool" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (app_symbol_TCC3 0
  (app_symbol_TCC3-1 nil 3581870591
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite "∈")
        (("" (split -2)
          (("1" (propax) nil nil)
           ("2" (assert)
            (("2" (rewrite "context")
              (("2" (rewrite "knamed?")
                (("2" (lift-if)
                  (("2" (assert)
                    (("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_TCC4 0
  (app_symbol_TCC4-1 nil 3581870591
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite "context")
        (("" (assert)
          (("" (lift-if)
            (("" (assert)
              (("" (split -1)
                (("1" (assert) nil nil) ("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((∈ def-decl "bool" contexts nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (interp? const-decl "bool" language nil)
    (context? const-decl "bool" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (app_symbol_TCC5 0
  (app_symbol_TCC5-1 nil 3581870591
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite "context")
        (("" (lift-if)
          (("" (assert)
            (("" (split -1)
              (("1" (assert) nil nil) ("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_TCC6 0
  (app_symbol_TCC6-1 nil 3581870591
   ("" (skosimp* :preds? t)
    (("" (rewrite "context")
      (("" (lift-if)
        (("" (bddsimp)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (assert) nil nil) ("6" (assert) nil nil)
           ("7" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((context formula-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (keyword formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_TCC7 0
  (app_symbol_TCC7-1 nil 3581870591
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite "context")
        (("" (lift-if)
          (("" (bddsimp)
            (("1" (assert) nil nil) ("2" (assert) nil nil)
             ("3" (assert) nil nil) ("4" (assert) nil nil)
             ("5" (assert) nil nil) ("6" (assert) nil nil)
             ("7" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_TCC8 0
  (app_symbol_TCC8-1 nil 3581870591
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (inst?)
        (("1" (assert) (("1" (assert) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (assert) nil nil) ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (s!1 skolem-const-decl "{s | s ∈ S!1}" contexts nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (S!1 skolem-const-decl "{S | context?(S) OR interp?(S)}" contexts
     nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR kvar?(x) OR kconst_decl?(x)
           OR kconst_def?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (<= const-decl "bool" reals nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (s shared-adt-accessor-decl "[{x: semantic |
              symbol?(x) OR dot?(x) OR ktype_decl?(x) OR ktype_def?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR ktheory?(x) OR itype?(x)
           OR iconst?(x)} ->
   symbol]" language nil))
   nil))
 (app_symbol_TCC9 0
  (app_symbol_TCC9-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_TCC10 0
  (app_symbol_TCC10-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (syntaxic formula-decl nil language nil)
    (keyword formula-decl nil language nil))
   nil))
 (app_symbol_TCC11 0
  (app_symbol_TCC11-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_TCC12 0
  (app_symbol_TCC12-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (app_symbol_TCC13 0
  (app_symbol_TCC13-1 nil 3581871762 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (app_symbol_TCC14 0
  (app_symbol_TCC14-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (name formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (app_symbol_TCC15 0
  (app_symbol_TCC15-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (<= const-decl "bool" reals nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (s shared-adt-accessor-decl "[{x: semantic |
              symbol?(x) OR dot?(x) OR ktype_decl?(x) OR ktype_def?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR ktheory?(x) OR itype?(x)
           OR iconst?(x)} ->
   symbol]" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype formula-decl nil language nil)
    (name formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR kvar?(x) OR kconst_decl?(x)
           OR kconst_def?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil))
   nil))
 (app_symbol_TCC16 0
  (app_symbol_TCC16-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_TCC17 0
  (app_symbol_TCC17-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (syntaxic formula-decl nil language nil)
    (keyword formula-decl nil language nil))
   nil))
 (app_symbol_TCC18 0
  (app_symbol_TCC18-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_TCC19 0
  (app_symbol_TCC19-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (app_symbol_TCC20 0
  (app_symbol_TCC20-1 nil 3581871762 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (app_symbol_TCC21 0
  (app_symbol_TCC21-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (name formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (app_symbol_TCC22 0
  (app_symbol_TCC22-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (<= const-decl "bool" reals nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (s shared-adt-accessor-decl "[{x: semantic |
              symbol?(x) OR dot?(x) OR ktype_decl?(x) OR ktype_def?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR ktheory?(x) OR itype?(x)
           OR iconst?(x)} ->
   symbol]" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype formula-decl nil language nil)
    (name formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR kvar?(x) OR kconst_decl?(x)
           OR kconst_def?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil))
   nil))
 (app_symbol_TCC23 0
  (app_symbol_TCC23-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_TCC24 0
  (app_symbol_TCC24-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (syntaxic formula-decl nil language nil)
    (keyword formula-decl nil language nil))
   nil))
 (app_symbol_TCC25 0
  (app_symbol_TCC25-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_TCC26 0
  (app_symbol_TCC26-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (app_symbol_TCC27 0
  (app_symbol_TCC27-1 nil 3581871762 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (app_symbol_TCC28 0
  (app_symbol_TCC28-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (name formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (app_symbol_TCC29 0
  (app_symbol_TCC29-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (<= const-decl "bool" reals nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (s shared-adt-accessor-decl "[{x: semantic |
              symbol?(x) OR dot?(x) OR ktype_decl?(x) OR ktype_def?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR ktheory?(x) OR itype?(x)
           OR iconst?(x)} ->
   symbol]" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype formula-decl nil language nil)
    (name formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR kvar?(x) OR kconst_decl?(x)
           OR kconst_def?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil))
   nil))
 (app_symbol_TCC30 0
  (app_symbol_TCC30-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_TCC31 0
  (app_symbol_TCC31-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (syntaxic formula-decl nil language nil)
    (keyword formula-decl nil language nil))
   nil))
 (app_symbol_TCC32 0
  (app_symbol_TCC32-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_TCC33 0
  (app_symbol_TCC33-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (app_symbol_TCC34 0
  (app_symbol_TCC34-1 nil 3581871762 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (app_symbol_TCC35 0
  (app_symbol_TCC35-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (name formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (app_symbol_TCC36 0
  (app_symbol_TCC36-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (<= const-decl "bool" reals nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (s shared-adt-accessor-decl "[{x: semantic |
              symbol?(x) OR dot?(x) OR ktype_decl?(x) OR ktype_def?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR ktheory?(x) OR itype?(x)
           OR iconst?(x)} ->
   symbol]" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype formula-decl nil language nil)
    (name formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR kvar?(x) OR kconst_decl?(x)
           OR kconst_def?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil))
   nil))
 (app_symbol_TCC37 0
  (app_symbol_TCC37-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_TCC38 0
  (app_symbol_TCC38-1 nil 3581871762 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (app_symbol_TCC39 0
  (app_symbol_TCC39-1 nil 3581871762 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_TCC40 0
  (app_symbol_TCC40-1 nil 3581871762
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (name formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_TCC41 0
  (app_symbol_TCC41-1 nil 3581889602 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (app_symbol_TCC42 0
  (app_symbol_TCC42-1 nil 3581889602 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (name formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (app_symbol_TCC43 0
  (app_symbol_TCC43-1 nil 3581889602 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (<= const-decl "bool" reals nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (s shared-adt-accessor-decl "[{x: semantic |
              symbol?(x) OR dot?(x) OR ktype_decl?(x) OR ktype_def?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR ktheory?(x) OR itype?(x)
           OR iconst?(x)} ->
   symbol]" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (name formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR kvar?(x) OR kconst_decl?(x)
           OR kconst_def?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil))
   nil))
 (app_symbol_TCC44 0
  (app_symbol_TCC44-1 nil 3581889602 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_TCC45 0
  (app_symbol_TCC45-1 nil 3581889602 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (app_symbol_TCC46 0
  (app_symbol_TCC46-1 nil 3581889602 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_TCC47 0
  (app_symbol_TCC47-1 nil 3581889602 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (app_symbol_TCC48 0
  (app_symbol_TCC48-1 nil 3581889602 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (app_symbol_TCC49 0
  (app_symbol_TCC49-1 nil 3581889602 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (name formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (app_symbol_TCC50 0
  (app_symbol_TCC50-1 nil 3581889602 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (<= const-decl "bool" reals nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (s shared-adt-accessor-decl "[{x: semantic |
              symbol?(x) OR dot?(x) OR ktype_decl?(x) OR ktype_def?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR ktheory?(x) OR itype?(x)
           OR iconst?(x)} ->
   symbol]" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (name formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR kvar?(x) OR kconst_decl?(x)
           OR kconst_def?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil))
   nil))
 (app_symbol_TCC51 0
  (app_symbol_TCC51-1 nil 3581889602 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (name formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (app_symbol_TCC52 0
  (app_symbol_TCC52-1 nil 3581889602 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (<= const-decl "bool" reals nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (s shared-adt-accessor-decl "[{x: semantic |
              symbol?(x) OR dot?(x) OR ktype_decl?(x) OR ktype_def?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR ktheory?(x) OR itype?(x)
           OR iconst?(x)} ->
   symbol]" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (keyword formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype formula-decl nil language nil)
    (name formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR kvar?(x) OR kconst_decl?(x)
           OR kconst_def?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil))
   nil))
 (app_symbol_TCC53 0
  (app_symbol_TCC53-1 nil 3581889602 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (syntaxic formula-decl nil language nil)
    (keyword formula-decl nil language nil))
   nil))
 (app_symbol_TCC54 0
  (app_symbol_TCC54-1 nil 3581889602
   ("" (skosimp* :preds? t)
    (("" (split -2)
      (("1" (assert)
        (("1" (rewrite "context")
          (("1" (lift-if) (("1" (grind) nil nil)) nil)) nil))
        nil)
       ("2" (rewrite "interp")
        (("2" (lift-if) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((context formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (keyword formula-decl nil language nil)
    (name formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (syntaxic type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_symbol_context 0
  (app_symbol_context-1 nil 3581889602
   ("" (induct "Γ")
    (("1" (skosimp* :preds? t) (("1" (assert) nil nil)) nil)
     ("2" (skosimp* :preds? t) (("2" (assert) nil nil)) nil)
     ("3" (skosimp* :preds? t) (("3" (assert) nil nil)) nil)
     ("4" (skosimp* :preds? t) (("4" (assert) nil nil)) nil)
     ("5" (skosimp* :preds? t) (("5" (assert) nil nil)) nil)
     ("6" (skosimp* :preds? t) (("6" (assert) nil nil)) nil)
     ("7" (skosimp* :preds? t) (("7" (assert) nil nil)) nil)
     ("8" (skosimp* :preds? t) (("8" (assert) nil nil)) nil)
     ("9" (skosimp* :preds? t) (("9" (assert) nil nil)) nil)
     ("10" (skosimp* :preds? t) (("10" (assert) nil nil)) nil)
     ("11" (skosimp* :preds? t) (("11" (assert) nil nil)) nil)
     ("12" (skosimp* :preds? t) (("12" (assert) nil nil)) nil)
     ("13" (skosimp* :preds? t) (("13" (assert) nil nil)) nil)
     ("14" (skosimp* :preds? t) (("14" (assert) nil nil)) nil)
     ("15" (skosimp* :preds? t) (("15" (assert) nil nil)) nil)
     ("16" (skosimp* :preds? t) (("16" (assert) nil nil)) nil)
     ("17" (skosimp* :preds? t) (("17" (assert) nil nil)) nil)
     ("18" (skosimp* :preds? t) (("18" (assert) nil nil)) nil)
     ("19" (skosimp* :preds? t) (("19" (assert) nil nil)) nil)
     ("20" (skosimp* :preds? t)
      (("20" (assert)
        (("20" (assert)
          (("20" (inst?)
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("21" (skosimp* :preds? t)
      (("21" (assert)
        (("21" (flatten)
          (("21" (assert)
            (("21" (inst?)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("22" (skosimp* :preds? t)
      (("22" (assert)
        (("22" (flatten) (("22" (assert) (("22" (inst?) nil nil)) nil))
          nil))
        nil))
      nil)
     ("23" (skosimp* :preds? t)
      (("23" (assert)
        (("23" (flatten)
          (("23" (assert)
            (("23" (inst?)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("24" (skosimp* :preds? t)
      (("24" (assert)
        (("24" (flatten)
          (("24" (assert)
            (("24" (inst?)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("25" (skosimp* :preds? t)
      (("25" (assert)
        (("25" (flatten)
          (("25" (assert)
            (("25" (inst?)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("26" (skosimp* :preds? t) (("26" (assert) nil nil)) nil)
     ("27" (skosimp* :preds? t) (("27" (assert) nil nil)) nil)
     ("28" (skosimp* :preds? t) (("28" (assert) nil nil)) nil)
     ("29" (skosimp* :preds? t) (("29" (assert) nil nil)) nil))
    nil)
   ((name? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (pretheory? const-decl "bool" language nil)
    (pretype? const-decl "bool" language nil)
    (preterm? const-decl "bool" language nil)
    (KCONTEXT? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (KTHEORY? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (KVAR? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (KCONST? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (context? const-decl "bool" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (syntaxic formula-decl nil language nil)
    (keyword formula-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (s shared-adt-accessor-decl "[{x: semantic |
              symbol?(x) OR dot?(x) OR ktype_decl?(x) OR ktype_def?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR ktheory?(x) OR itype?(x)
           OR iconst?(x)} ->
   symbol]" language nil)
    (app_symbol def-decl "{Δ: semantic |
         NOT empty?(Δ) AND
          weight(F)(Δ) <= weight(F)(S) AND
           (    interp?(Δ) OR ktype_def?(Δ) OR ktype_decl?(Δ)
             OR kconst_def?(Δ) OR kconst_decl?(Δ) OR ktheory?(Δ))
            AND s(Δ) = s}" contexts nil)
    (semantic_induction formula-decl nil language nil)
    (context type-eq-decl nil language nil)
    (context formula-decl nil language nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (undefined? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (KTYPE adt-constructor-decl "(KTYPE?)" language nil)
    (KCONST adt-constructor-decl "(KCONST?)" language nil)
    (KVAR adt-constructor-decl "(KVAR?)" language nil)
    (KTHEORY adt-constructor-decl "(KTHEORY?)" language nil)
    (KCONTEXT adt-constructor-decl "(KCONTEXT?)" language nil)
    (symbol adt-constructor-decl "[symbol -> (symbol?)]" language nil)
    (dot adt-constructor-decl "[[symbol, semantic, symbol] -> (dot?)]"
     language nil)
    (fun adt-constructor-decl "[[semantic, semantic] -> (fun?)]"
     language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod adt-constructor-decl "[[semantic, semantic] -> (prod?)]"
     language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype adt-constructor-decl
             "[[semantic, semantic] -> (subtype?)]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (v adt-constructor-decl "[nat -> (var?)]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app adt-constructor-decl "[[semantic, semantic] -> (app?)]"
     language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam adt-constructor-decl "[[semantic, semantic] -> (lam?)]"
         language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair adt-constructor-decl "[[semantic, semantic] -> (pair?)]"
     language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj adt-constructor-decl "[semantic -> (lproj?)]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj adt-constructor-decl "[semantic -> (rproj?)]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (s!1 skolem-const-decl
     "{s | s ∈ ktype_decl(ktype_decl1_var!1, ktype_decl2_var!1)}"
     contexts nil)
    (ktype_decl2_var!1 skolem-const-decl "semantic" contexts nil)
    (ktype_decl1_var!1 skolem-const-decl "symbol" contexts nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (ktype_def1_var!1 skolem-const-decl "symbol" contexts nil)
    (ktype_def2_var!1 skolem-const-decl "semantic" contexts nil)
    (ktype_def3_var!1 skolem-const-decl "semantic" contexts nil)
    (s!1 skolem-const-decl
     "{s | s ∈ ktype_def(ktype_def1_var!1, ktype_def2_var!1, ktype_def3_var!1)}"
     contexts nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl1_var!1 skolem-const-decl "symbol" contexts nil)
    (kconst_decl2_var!1 skolem-const-decl "semantic" contexts nil)
    (kconst_decl3_var!1 skolem-const-decl "semantic" contexts nil)
    (s!1 skolem-const-decl "{s |
         s ∈
          kconst_decl(kconst_decl1_var!1, kconst_decl2_var!1,
                      kconst_decl3_var!1)}" contexts nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kconst_def1_var!1 skolem-const-decl "symbol" contexts nil)
    (kconst_def2_var!1 skolem-const-decl "semantic" contexts nil)
    (kconst_def3_var!1 skolem-const-decl "semantic" contexts nil)
    (kconst_def4_var!1 skolem-const-decl "semantic" contexts nil)
    (s!1 skolem-const-decl "{s |
         s ∈
          kconst_def(kconst_def1_var!1, kconst_def2_var!1,
                     kconst_def3_var!1, kconst_def4_var!1)}" contexts
     nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (ktheory1_var!1 skolem-const-decl "symbol" contexts nil)
    (ktheory2_var!1 skolem-const-decl "semantic" contexts nil)
    (ktheory3_var!1 skolem-const-decl "semantic" contexts nil)
    (s!1 skolem-const-decl
     "{s | s ∈ ktheory(ktheory1_var!1, ktheory2_var!1, ktheory3_var!1)}"
     contexts nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (itype adt-constructor-decl
     "[[symbol, semantic, semantic] -> (itype?)]" language nil)
    (iconst adt-constructor-decl
     "[[symbol, semantic, semantic] -> (iconst?)]" language nil))
   nil))
 (app_symbol_theory 0
  (app_symbol_theory-1 nil 3581870591
   ("" (induct "Γ")
    (("1" (skosimp* :preds? t) (("1" (assert) nil nil)) nil)
     ("2" (skosimp* :preds? t) (("2" (assert) nil nil)) nil)
     ("3" (skosimp* :preds? t) (("3" (assert) nil nil)) nil)
     ("4" (skosimp* :preds? t) (("4" (assert) nil nil)) nil)
     ("5" (skosimp* :preds? t) (("5" (assert) nil nil)) nil)
     ("6" (skosimp* :preds? t) (("6" (assert) nil nil)) nil)
     ("7" (skosimp* :preds? t) (("7" (assert) nil nil)) nil)
     ("8" (skosimp* :preds? t) (("8" (assert) nil nil)) nil)
     ("9" (skosimp* :preds? t) (("9" (assert) nil nil)) nil)
     ("10" (skosimp* :preds? t) (("10" (assert) nil nil)) nil)
     ("11" (skosimp* :preds? t) (("11" (assert) nil nil)) nil)
     ("12" (skosimp* :preds? t) (("12" (assert) nil nil)) nil)
     ("13" (skosimp* :preds? t) (("13" (assert) nil nil)) nil)
     ("14" (skosimp* :preds? t) (("14" (assert) nil nil)) nil)
     ("15" (skosimp* :preds? t) (("15" (assert) nil nil)) nil)
     ("16" (skosimp* :preds? t) (("16" (assert) nil nil)) nil)
     ("17" (skosimp* :preds? t) (("17" (assert) nil nil)) nil)
     ("18" (skosimp* :preds? t) (("18" (assert) nil nil)) nil)
     ("19" (skosimp* :preds? t) (("19" (assert) nil nil)) nil)
     ("20" (skosimp* :preds? t)
      (("20" (assert)
        (("20" (assert)
          (("20" (inst?)
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("21" (skosimp* :preds? t)
      (("21" (assert)
        (("21" (flatten)
          (("21" (assert)
            (("21" (inst?)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("22" (skosimp* :preds? t) (("22" (assert) nil nil)) nil)
     ("23" (skosimp* :preds? t)
      (("23" (assert)
        (("23" (flatten)
          (("23" (assert)
            (("23" (inst?)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("24" (skosimp* :preds? t)
      (("24" (assert)
        (("24" (flatten)
          (("24" (assert)
            (("24" (inst?)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("25" (skosimp* :preds? t) (("25" (assert) nil nil)) nil)
     ("26" (skosimp* :preds? t) (("26" (assert) nil nil)) nil)
     ("27" (skosimp* :preds? t) (("27" (assert) nil nil)) nil)
     ("28" (skosimp* :preds? t)
      (("28" (assert)
        (("28" (flatten)
          (("28" (assert)
            (("28" (use "pretheory_is_context" :if-match all) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("29" (skosimp* :preds? t)
      (("29" (assert)
        (("29" (flatten)
          (("29" (assert)
            (("29" (use "pretheory_is_context" :if-match all) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((name? const-decl "bool" language nil)
    (interp? const-decl "bool" language nil)
    (context? const-decl "bool" language nil)
    (pretype? const-decl "bool" language nil)
    (preterm? const-decl "bool" language nil)
    (KCONTEXT? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (KTHEORY? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (KVAR? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (KCONST? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretheory? const-decl "bool" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (syntaxic formula-decl nil language nil)
    (keyword formula-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (s shared-adt-accessor-decl "[{x: semantic |
              symbol?(x) OR dot?(x) OR ktype_decl?(x) OR ktype_def?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR ktheory?(x) OR itype?(x)
           OR iconst?(x)} ->
   symbol]" language nil)
    (app_symbol def-decl "{Δ: semantic |
         NOT empty?(Δ) AND
          weight(F)(Δ) <= weight(F)(S) AND
           (    interp?(Δ) OR ktype_def?(Δ) OR ktype_decl?(Δ)
             OR kconst_def?(Δ) OR kconst_decl?(Δ) OR ktheory?(Δ))
            AND s(Δ) = s}" contexts nil)
    (semantic_induction formula-decl nil language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (undefined? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (KTYPE adt-constructor-decl "(KTYPE?)" language nil)
    (KCONST adt-constructor-decl "(KCONST?)" language nil)
    (KVAR adt-constructor-decl "(KVAR?)" language nil)
    (KTHEORY adt-constructor-decl "(KTHEORY?)" language nil)
    (KCONTEXT adt-constructor-decl "(KCONTEXT?)" language nil)
    (symbol adt-constructor-decl "[symbol -> (symbol?)]" language nil)
    (dot adt-constructor-decl "[[symbol, semantic, symbol] -> (dot?)]"
     language nil)
    (fun adt-constructor-decl "[[semantic, semantic] -> (fun?)]"
     language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod adt-constructor-decl "[[semantic, semantic] -> (prod?)]"
     language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype adt-constructor-decl
             "[[semantic, semantic] -> (subtype?)]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (v adt-constructor-decl "[nat -> (var?)]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app adt-constructor-decl "[[semantic, semantic] -> (app?)]"
     language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam adt-constructor-decl "[[semantic, semantic] -> (lam?)]"
         language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair adt-constructor-decl "[[semantic, semantic] -> (pair?)]"
     language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj adt-constructor-decl "[semantic -> (lproj?)]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj adt-constructor-decl "[semantic -> (rproj?)]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (s!1 skolem-const-decl
     "{s | s ∈ ktype_decl(ktype_decl1_var!1, ktype_decl2_var!1)}"
     contexts nil)
    (ktype_decl2_var!1 skolem-const-decl "semantic" contexts nil)
    (ktype_decl1_var!1 skolem-const-decl "symbol" contexts nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (ktype_def1_var!1 skolem-const-decl "symbol" contexts nil)
    (ktype_def2_var!1 skolem-const-decl "semantic" contexts nil)
    (ktype_def3_var!1 skolem-const-decl "semantic" contexts nil)
    (s!1 skolem-const-decl
     "{s | s ∈ ktype_def(ktype_def1_var!1, ktype_def2_var!1, ktype_def3_var!1)}"
     contexts nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl1_var!1 skolem-const-decl "symbol" contexts nil)
    (kconst_decl2_var!1 skolem-const-decl "semantic" contexts nil)
    (kconst_decl3_var!1 skolem-const-decl "semantic" contexts nil)
    (s!1 skolem-const-decl "{s |
         s ∈
          kconst_decl(kconst_decl1_var!1, kconst_decl2_var!1,
                      kconst_decl3_var!1)}" contexts nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kconst_def1_var!1 skolem-const-decl "symbol" contexts nil)
    (kconst_def2_var!1 skolem-const-decl "semantic" contexts nil)
    (kconst_def3_var!1 skolem-const-decl "semantic" contexts nil)
    (kconst_def4_var!1 skolem-const-decl "semantic" contexts nil)
    (s!1 skolem-const-decl "{s |
         s ∈
          kconst_def(kconst_def1_var!1, kconst_def2_var!1,
                     kconst_def3_var!1, kconst_def4_var!1)}" contexts
     nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (itype adt-constructor-decl
     "[[symbol, semantic, semantic] -> (itype?)]" language nil)
    (iconst adt-constructor-decl
     "[[symbol, semantic, semantic] -> (iconst?)]" language nil)
    (pretheory_is_context judgement-tcc nil language nil)
    (app_symbol_context application-judgement "context" contexts nil))
   nil))
 (app_symbol_interp 0
  (app_symbol_interp-1 nil 3581889602
   ("" (induct "σ")
    (("1" (skosimp* :preds? t) (("1" (assert) nil nil)) nil)
     ("2" (skosimp* :preds? t) (("2" (assert) nil nil)) nil)
     ("3" (skosimp* :preds? t) (("3" (assert) nil nil)) nil)
     ("4" (skosimp* :preds? t) (("4" (assert) nil nil)) nil)
     ("5" (skosimp* :preds? t) (("5" (assert) nil nil)) nil)
     ("6" (skosimp* :preds? t) (("6" (assert) nil nil)) nil)
     ("7" (skosimp* :preds? t) (("7" (assert) nil nil)) nil)
     ("8" (skosimp* :preds? t) (("8" (assert) nil nil)) nil)
     ("9" (skosimp* :preds? t) (("9" (assert) nil nil)) nil)
     ("10" (skosimp* :preds? t) (("10" (assert) nil nil)) nil)
     ("11" (skosimp* :preds? t) (("11" (assert) nil nil)) nil)
     ("12" (skosimp* :preds? t) (("12" (assert) nil nil)) nil)
     ("13" (skosimp* :preds? t) (("13" (assert) nil nil)) nil)
     ("14" (skosimp* :preds? t) (("14" (assert) nil nil)) nil)
     ("15" (skosimp* :preds? t) (("15" (assert) nil nil)) nil)
     ("16" (skosimp* :preds? t) (("16" (assert) nil nil)) nil)
     ("17" (skosimp* :preds? t) (("17" (assert) nil nil)) nil)
     ("18" (skosimp* :preds? t) (("18" (assert) nil nil)) nil)
     ("19" (skosimp* :preds? t) (("19" (assert) nil nil)) nil)
     ("20" (skosimp* :preds? t) (("20" (assert) nil nil)) nil)
     ("21" (skosimp* :preds? t) (("21" (assert) nil nil)) nil)
     ("22" (skosimp* :preds? t) (("22" (assert) nil nil)) nil)
     ("23" (skosimp* :preds? t) (("23" (assert) nil nil)) nil)
     ("24" (skosimp* :preds? t) (("24" (assert) nil nil)) nil)
     ("25" (skosimp* :preds? t) (("25" (assert) nil nil)) nil)
     ("26" (skosimp* :preds? t)
      (("26" (assert)
        (("26" (flatten)
          (("26" (assert)
            (("26" (inst?)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("27" (skosimp* :preds? t)
      (("27" (assert)
        (("27" (flatten)
          (("27" (assert)
            (("27" (inst?)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("28" (skosimp* :preds? t) (("28" (assert) nil nil)) nil)
     ("29" (skosimp* :preds? t) (("29" (assert) nil nil)) nil))
    nil)
   ((name? const-decl "bool" language nil)
    (pretheory? const-decl "bool" language nil)
    (context? const-decl "bool" language nil)
    (pretype? const-decl "bool" language nil)
    (preterm? const-decl "bool" language nil)
    (KCONTEXT? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (KTHEORY? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (KVAR? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (KCONST? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (KTYPE? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (interp? const-decl "bool" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (∈ def-decl "bool" contexts nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "bool" language nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (syntaxic formula-decl nil language nil)
    (keyword formula-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (s shared-adt-accessor-decl "[{x: semantic |
              symbol?(x) OR dot?(x) OR ktype_decl?(x) OR ktype_def?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR ktheory?(x) OR itype?(x)
           OR iconst?(x)} ->
   symbol]" language nil)
    (app_symbol def-decl "{Δ: semantic |
         NOT empty?(Δ) AND
          weight(F)(Δ) <= weight(F)(S) AND
           (    interp?(Δ) OR ktype_def?(Δ) OR ktype_decl?(Δ)
             OR kconst_def?(Δ) OR kconst_decl?(Δ) OR ktheory?(Δ))
            AND s(Δ) = s}" contexts nil)
    (semantic_induction formula-decl nil language nil)
    (interp type-eq-decl nil language nil)
    (interp formula-decl nil language nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (undefined? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (KTYPE adt-constructor-decl "(KTYPE?)" language nil)
    (KCONST adt-constructor-decl "(KCONST?)" language nil)
    (KVAR adt-constructor-decl "(KVAR?)" language nil)
    (KTHEORY adt-constructor-decl "(KTHEORY?)" language nil)
    (KCONTEXT adt-constructor-decl "(KCONTEXT?)" language nil)
    (symbol adt-constructor-decl "[symbol -> (symbol?)]" language nil)
    (dot adt-constructor-decl "[[symbol, semantic, symbol] -> (dot?)]"
     language nil)
    (fun adt-constructor-decl "[[semantic, semantic] -> (fun?)]"
     language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod adt-constructor-decl "[[semantic, semantic] -> (prod?)]"
     language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype adt-constructor-decl
             "[[semantic, semantic] -> (subtype?)]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (v adt-constructor-decl "[nat -> (var?)]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app adt-constructor-decl "[[semantic, semantic] -> (app?)]"
     language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam adt-constructor-decl "[[semantic, semantic] -> (lam?)]"
         language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair adt-constructor-decl "[[semantic, semantic] -> (pair?)]"
     language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj adt-constructor-decl "[semantic -> (lproj?)]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj adt-constructor-decl "[semantic -> (rproj?)]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (itype1_var!1 skolem-const-decl "symbol" contexts nil)
    (itype2_var!1 skolem-const-decl "semantic" contexts nil)
    (itype3_var!1 skolem-const-decl "semantic" contexts nil)
    (s!1 skolem-const-decl
     "{s | s ∈ itype(itype1_var!1, itype2_var!1, itype3_var!1)}"
     contexts nil)
    (itype adt-constructor-decl
     "[[symbol, semantic, semantic] -> (itype?)]" language nil)
    (iconst1_var!1 skolem-const-decl "symbol" contexts nil)
    (iconst2_var!1 skolem-const-decl "semantic" contexts nil)
    (iconst3_var!1 skolem-const-decl "semantic" contexts nil)
    (s!1 skolem-const-decl
     "{s | s ∈ iconst(iconst1_var!1, iconst2_var!1, iconst3_var!1)}"
     contexts nil)
    (iconst adt-constructor-decl
     "[[symbol, semantic, semantic] -> (iconst?)]" language nil))
   nil))
 (app_var_TCC1 0
  (app_var_TCC1-1 nil 3581889602 ("" (subtype-tcc) nil nil) nil nil))
 (app_var_TCC2 0
  (app_var_TCC2-1 nil 3581889602 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (∈ def-decl "bool" contexts nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (context formula-decl nil language nil))
   nil))
 (app_var_TCC3 0
  (app_var_TCC3-1 nil 3581889602 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (∈ def-decl "bool" contexts nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (app_var_TCC4 0
  (app_var_TCC4-1 nil 3581889602
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite "context")
        (("" (lift-if)
          (("" (assert)
            (("" (split -1)
              (("1" (assert) nil nil) ("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_var_TCC5 0
  (app_var_TCC5-1 nil 3581889602
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite "context")
        (("" (lift-if)
          (("" (assert)
            (("" (split -1)
              (("1" (assert) nil nil) ("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_var_TCC6 0
  (app_var_TCC6-1 nil 3581889602
   ("" (skosimp* :preds? t)
    (("" (rewrite "context")
      (("" (lift-if)
        (("" (assert)
          (("" (bddsimp -)
            (("1" (assert) nil nil) ("2" (assert) nil nil)
             ("3" (assert) nil nil) ("4" (assert) nil nil)
             ("5" (assert) nil nil) ("6" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((context formula-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_var_TCC7 0
  (app_var_TCC7-1 nil 3581889602
   ("" (skosimp* :preds? t)
    (("" (rewrite "context")
      (("" (lift-if)
        (("" (assert)
          (("" (bddsimp -)
            (("1" (assert) nil nil) ("2" (assert) nil nil)
             ("3" (assert) nil nil) ("4" (assert) nil nil)
             ("5" (assert) nil nil) ("6" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (∈ def-decl "bool" contexts nil))
   nil))
 (app_var_TCC8 0
  (app_var_TCC8-1 nil 3581889602
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (inst?)
        (("" (assert)
          (("" (rewrite "context")
            (("" (lift-if)
              (("" (assert)
                (("" (bddsimp -)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)
                   ("3" (assert) nil nil) ("4" (assert) nil nil)
                   ("5" (assert) nil nil) ("6" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (context formula-decl nil language nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR kvar?(x) OR kconst_decl?(x)
           OR kconst_def?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "bool" language nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
    (F const-decl "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0))"
     language nil)
    (∈ def-decl "bool" contexts nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil))
   nil)))

