context: THEORY
BEGIN
  IMPORTING map

  S: VAR syntaxic
  Γ, Δ, Θ: VAR context
  A, B, T: VAR pretype
  r, s: VAR symbol
  n, m: VAR name
  x, y: VAR nat
  a, b, f, g: VAR preterm
  σ, τ: VAR interp
  i: VAR nat

  % Γ ++ Δ = Γ; Δ
  ;++(Γ, Δ): RECURSIVE
    { Θ | w(Θ) = w(Γ) + w(Δ) - F(ord_empty) - 1 } =
    CASES Δ OF
      % Γ; {} = Γ
      〈〉: Γ,
      % Γ; (Δ, s: TYPE) = (Γ; Δ), s: TYPE
      ktype_decl(s, Δ): ktype_decl(s, Γ ++ Δ),
      ktype_def(s, T, Δ): ktype_def(s, T, Γ ++ Δ),
      ktype_ext(s, Δ): ktype_ext(s, Γ ++ Δ),
      kvar(T, Δ): kvar(T, Γ ++ Δ),
      kconst_decl(s, T, Δ): kconst_decl(s, T, Γ ++ Δ),
      kconst_def(s, T, a, Δ): kconst_def(s, T, a, Γ ++ Δ),
      kconst_ext(s, T, Δ): kconst_ext(s, T, Γ ++ Δ),
      ktheory(s, Θ, Δ): ktheory(s, Θ, Γ ++ Δ)
    ENDCASES
  MEASURE w(Δ)
  AUTO_REWRITE+ ++
  doubleplus_theory: RECURSIVE JUDGEMENT
    ++(Γ, Δ: pretheory) HAS_TYPE pretheory
  doubleplus_empty: LEMMA 
    〈〉 ++ Θ = Θ

  length(Γ: context): RECURSIVE nat =
    COND
      empty?(Γ) -> 0,
      ktheory?(Γ) -> 1 + length(dtheory(Γ)) + length(rest(Γ)),
      ELSE -> 1 + length(rest(Γ))
    ENDCOND
  MEASURE w(Γ)

  pos(Γ, (s | s ∈ Γ)): RECURSIVE below[length(Γ)] =
    COND
      kvar?(Γ) -> pos(rest(Γ), s),
      ELSE -> IF s = s(Γ) THEN length(rest(Γ)) ELSE pos(rest(Γ), s) ENDIF
    ENDCOND
  MEASURE w(Γ)

  pos(Γ, (x | x ∈ Γ)): RECURSIVE below[length(Γ)] =
    COND
      kvar?(Γ) -> IF x = 0 THEN length(rest(Γ)) ELSE pos(rest(Γ), x - 1) ENDIF,
      ELSE -> IF TRUE THEN pos(rest(Γ), x) ELSE 0 ENDIF % PVS bug
    ENDCOND
  MEASURE w(Γ)
  pos_var_lt: THEOREM
    i <= j IMPLIES pos(Γ, j) <= pos(Γ, i)
END context
