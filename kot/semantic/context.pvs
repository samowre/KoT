context: THEORY
BEGIN
  IMPORTING subst

  S: VAR syntaxic
  Γ, Δ, Θ: VAR context
  A, B, T: VAR pretype
  r, s: VAR symbol
  n, m: VAR name
  x, y: VAR nat
  a, b, f, g: VAR preterm
  σ, τ: VAR interp
  i: VAR nat

  % Γ ++ Δ = Γ; Δ
  ;++(Γ, Δ): RECURSIVE
    { Θ | w(Θ) = w(Γ) + w(Δ) - F(ord_empty) - 1 } =
    CASES Δ OF
      % Γ; {} = Γ
      〈〉: Γ
      % Γ; (Δ, s: TYPE) = (Γ; Δ), s: TYPE
    , ktype_decl(s, Δ): ktype_decl(s, Γ ++ Δ)
    , ktype_def(s, T, Δ): ktype_def(s, T, Γ ++ Δ)
    , ktype_ext(s, Δ): ktype_ext(s, Γ ++ Δ)
    , kvar(T, Δ): kvar(T, Γ ++ Δ)
    , kconst_decl(s, T, Δ): kconst_decl(s, T, Γ ++ Δ)
    , kconst_def(s, T, a, Δ): kconst_def(s, T, a, Γ ++ Δ)
    , kconst_ext(s, T, Δ): kconst_ext(s, T, Γ ++ Δ)
    , ktheory(s, Θ, Δ): ktheory(s, Θ, Γ ++ Δ)
    ENDCASES
  MEASURE w(Δ)
  AUTO_REWRITE+ ++
  dsymbols_concat: THEOREM
    dsymbols(Γ ++ Δ) = dsymbols(Γ) ∪ dsymbols(Δ)
  symbols_concat: THEOREM
    symbols(Γ ++ Δ) = symbols(Γ) ∪ (symbols(Δ) - dsymbols(Γ))
  dvars_concat: THEOREM
    dvars(Γ ++ Δ) = dvars(Γ) + dvars(Δ)
  vars_concat: THEOREM
    vars(Γ ++ Δ) = vars(Γ) ∪ (vars(Δ) - dvars(Γ))
  closed_concat: THEOREM
    closed?(Γ)(Δ) AND closed?(Γ ++ Δ)(Θ) IFF closed?(Γ)(Δ ++ Θ)
  uniques_concat: THEOREM
    uniques?(Γ ++ Δ) IFF uniques?(Γ) AND uniques?(Δ) AND disjoint?(dsymbols(Γ), dsymbols(Δ))
END context
