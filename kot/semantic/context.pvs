context: THEORY
BEGIN
  IMPORTING syntaxic_sets

  S: VAR syntaxic
  Γ, Δ, Θ: VAR context
  A, B, T: VAR pretype
  r, s, t: VAR symbol
  n, m: VAR name
  x, y: VAR nat
  a, b, f, g: VAR preterm
  σ, τ: VAR interp
  i: VAR nat

  % Γ ++ Δ = Γ; Δ
  % This should be the *base* operation on contexts
  ;++(Γ, Δ): RECURSIVE
    { Θ | w(Θ) = w(Γ) + w(Δ) - F(ord_empty) - 1 } =
    CASES Δ OF
      % Γ; {} = Γ
      〈〉: Γ
      % Γ; (Δ, s: TYPE) = (Γ; Δ), s: TYPE
    , ktype_decl(s, Δ): ktype_decl(s, Γ ++ Δ)
    , ktype_def(s, T, Δ): ktype_def(s, T, Γ ++ Δ)
    , ktype_ext(s, Δ): ktype_ext(s, Γ ++ Δ)
    , kvar(T, Δ): kvar(T, Γ ++ Δ)
    , kconst_decl(s, T, Δ): kconst_decl(s, T, Γ ++ Δ)
    , kconst_def(s, T, a, Δ): kconst_def(s, T, a, Γ ++ Δ)
    , kconst_ext(s, T, Δ): kconst_ext(s, T, Γ ++ Δ)
    , ktheory(s, Θ, Δ): ktheory(s, Θ, Γ ++ Δ)
    ENDCASES
  MEASURE w(Δ)
  AUTO_REWRITE+ ++

  concat_is_associative: THEOREM
    Γ ++ (Δ ++ Θ) = (Γ ++ Δ) ++ Θ
  concat_empty: THEOREM
    〈〉 ++ Γ = Γ
  concat__empty: THEOREM
    Γ ++ 〈〉 = Γ
  AUTO_REWRITE+ concat_is_associative, concat_empty, concat__empty

  dsymbols_concat: THEOREM
    dsymbols(Γ ++ Δ) = dsymbols(Γ) ∪ dsymbols(Δ)
  symbols_concat: THEOREM
    symbols(Γ ++ Δ) = symbols(Γ) ∪ (symbols(Δ) - dsymbols(Γ))
  dvars_concat: THEOREM
    dvars(Γ ++ Δ) = dvars(Γ) + dvars(Δ)
  vars_concat: THEOREM
    vars(Γ ++ Δ) = vars(Γ) ∪ (vars(Δ) - dvars(Γ))
  closed_concat: THEOREM
    closed?(Γ)(Δ ++ Θ) IFF closed?(Γ)(Δ) AND closed?(Γ ++ Δ)(Θ)
  uniques_concat: THEOREM
    uniques?(Γ ++ Δ) IFF uniques?(Γ) AND uniques?(Δ) AND disjoint?(dsymbols(Γ), dsymbols(Δ))
  AUTO_REWRITE+ dsymbols_concat, symbols_concat, dvars_concat, vars_concat, closed_concat, uniques_concat

  % Length of a context (as a list)
  length(Γ): RECURSIVE nat =
    CASES Γ OF
      〈〉: 0
      ELSE 1 + length(rest(Γ))
    ENDCASES
  MEASURE w(Γ)
  AUTO_REWRITE length

  length_concat: THEOREM
    length(Γ ++ Δ) = length(Γ) + length(Δ)
  length_zero: THEOREM
    length(Γ) = 0 IMPLIES Γ = 〈〉
  AUTO_REWRITE length_concat

  nsymbols(Γ): RECURSIVE upto[length(Γ)] =
    CASES Γ OF
      〈〉: 0
    , kvar(T, Δ): nsymbols(Δ)
      ELSE 1 + nsymbols(rest(Γ))
    ENDCASES
  MEASURE w(Γ)
  AUTO_REWRITE nsymbols
  nsymbols_concat: THEOREM
    nsymbols(Γ ++ Δ) = nsymbols(Γ) + nsymbols(Δ)
  AUTO_REWRITE nsymbols_concat

  % pos(Γ)(s) returns the position of s in Γ 
  % where contexts are seen as reversed lists
  % ie pos(Γ, s: ...)(s) = length(Γ)
  % and nth(s: ..., Γ)(s) = 0
  pos(Γ, (s: (dsymbols(Γ)))): RECURSIVE below[nsymbols(Γ)] =
    CASES Γ OF
      kvar(T, Δ): pos(Δ, s)
      ELSE IF s = s(Γ) THEN nsymbols(rest(Γ)) ELSE pos(rest(Γ), s) ENDIF
    ENDCASES
  MEASURE w(Γ)
  AUTO_REWRITE pos

  pos_concat: THEOREM s ∈ dsymbols(Γ ++ Δ) IMPLIES
    pos(Γ ++ Δ, s) = IF s ∈ dsymbols(Δ) THEN nsymbols(Γ) + pos(Δ, s)
                     ELSE pos(Γ, s) ENDIF
  AUTO_REWRITE pos_concat

  % Returns the position of a variable in a context
  pos(Γ, (x | x < dvars(Γ))): RECURSIVE below[length(Γ)] =
    CASES Γ OF
      kvar(T, Δ): IF x = 0 THEN length(Δ) ELSE pos(Δ, x - 1) ENDIF
      ELSE pos(rest(Γ), x)
    ENDCASES
  MEASURE w(Γ)

  % find(Γ, s: ..., Δ)(s) = Γ
  % It is the context in which s is declared
  % (hence in which defintion(s) and type(s) are defined)
  find(Γ)(s: (dsymbols(Γ))): RECURSIVE context =
    COND
      kvar?(Γ) -> find(rest(Γ))(s)
    , ELSE -> IF s = s(Γ) THEN rest(Γ) ELSE find(rest(Γ))(s) ENDIF
    ENDCOND
  MEASURE w(Γ)
  AUTO_REWRITE find

  find_concat: THEOREM s ∈ dsymbols(Γ ++ Δ) IMPLIES
    find(Γ ++ Δ)(s) = IF s ∈ dsymbols(Δ) THEN Γ ++ find(Δ)(s)
                      ELSE find(Γ)(s) ENDIF
  nsymbols_find: THEOREM s ∈ dsymbols(Γ) IMPLIES
    nsymbols(find(Γ)(s)) = pos(Γ, s)
  symbols_find: THEOREM s ∈ dsymbols(Γ) IMPLIES
    symbols(find(Γ)(s)) ⊂ symbols(Γ)
  vars_find: THEOREM s ∈ dsymbols(Γ) IMPLIES
    vars(find(Γ)(s)) ⊂ vars(Γ)
  AUTO_REWRITE find_concat, nsymbols_find

  extract(Γ, (s | s ∈ dsymbols(Γ))): RECURSIVE context =
    CASES Γ OF
      ktype_decl(t, Δ): IF t = s THEN ktype_decl(t, 〈〉) ELSE extract(Δ, s) ENDIF
    , ktype_def(t, T, Δ): IF t = s THEN ktype_def(t, T, 〈〉) ELSE extract(Δ, s) ENDIF
    , ktype_ext(t, Δ): IF t = s THEN ktype_ext(t, 〈〉) ELSE extract(Δ, s) ENDIF
    , kvar(T, Δ): extract(Δ, s)
    , kconst_decl(t, T, Δ): IF t = s THEN kconst_decl(t, T, 〈〉) ELSE extract(Δ, s) ENDIF
    , kconst_def(t, T, a, Δ): IF t = s THEN kconst_def(t, T, a, 〈〉) ELSE extract(Δ, s) ENDIF
    , kconst_ext(t, T, Δ): IF t = s THEN kconst_ext(t, T, 〈〉) ELSE extract(Δ, s) ENDIF
    , ktheory(t, Θ, Δ): IF t = s THEN ktheory(t, Θ, 〈〉) ELSE extract(Δ, s) ENDIF
    ENDCASES
  MEASURE w(Γ)
  AUTO_REWRITE extract

  extract_concat: THEOREM s ∈ dsymbols(Γ ++ Δ) IMPLIES
    extract(Γ ++ Δ, s) = IF s ∈ dsymbols(Δ) THEN extract(Δ, s)
                         ELSE extract(Γ, s) ENDIF
  length_extract: THEOREM s ∈ dsymbols(Γ) IMPLIES
    length(extract(Γ, s)) = 1
  nsymbols_extract: THEOREM s ∈ dsymbols(Γ) IMPLIES
    nsymbols(extract(Γ, s)) = 1
  dvars_extract: THEOREM s ∈ dsymbols(Γ) IMPLIES
    dvars(extract(Γ, s)) = 0
  dsymbols_extract: THEOREM s ∈ dsymbols(Γ) IMPLIES
    dsymbols(extract(Γ, s)) = singleton(s)
  vars_extract: THEOREM s ∈ dsymbols(Γ) IMPLIES
    vars(extract(Γ, s)) - dvars(find(Γ)(s)) ⊂ vars(Γ)
  symbols_extract: THEOREM s ∈ dsymbols(Γ) IMPLIES
    symbols(extract(Γ, s)) ⊂ symbols(Γ) ∪ dsymbols(find(Γ)(s))
  rest_extract: THEOREM s ∈ dsymbols(Γ) IMPLIES rest(extract(Γ, s)) = 〈〉
  s_extract: THEOREM s ∈ dsymbols(Γ) IMPLIES s(extract(Γ, s)) = s
  AUTO_REWRITE+ extract_concat, length_extract, dsymbols_extract, dvars_extract
  AUTO_REWRITE+ rest_extract, s_extract

  after(Γ, (s | s ∈ dsymbols(Γ))): RECURSIVE context =
    CASES Γ OF
      ktype_decl(t, Δ): IF t = s THEN 〈〉 ELSE ktype_decl(t, after(Δ, s)) ENDIF
    , ktype_def(t, T, Δ): IF t = s THEN 〈〉 ELSE ktype_def(t, T, after(Δ, s)) ENDIF
    , ktype_ext(t, Δ): IF t = s THEN 〈〉 ELSE ktype_ext(t, after(Δ, s)) ENDIF
    , kvar(T, Δ): kvar(T, after(Δ, s))
    , kconst_decl(t, T, Δ): IF t = s THEN 〈〉 ELSE kconst_decl(t, T, after(Δ, s)) ENDIF
    , kconst_def(t, T, a, Δ): IF t = s THEN 〈〉 ELSE kconst_def(t, T, a, after(Δ, s)) ENDIF
    , kconst_ext(t, T, Δ): IF t = s THEN 〈〉 ELSE kconst_ext(t, T, after(Δ, s)) ENDIF
    , ktheory(t, Θ, Δ): IF t = s THEN 〈〉 ELSE ktheory(t, Θ, after(Δ, s)) ENDIF
    ENDCASES
  MEASURE w(Γ)
  AUTO_REWRITE after

  after_concat: THEOREM s ∈ dsymbols(Γ ++ Δ) IMPLIES
    after(Γ ++ Δ, s) = IF s ∈ dsymbols(Δ) THEN after(Δ, s)
                       ELSE after(Γ, s) ++ Δ ENDIF
  dsymbols_after: THEOREM s ∈ dsymbols(Γ) IMPLIES
    dsymbols(after(Γ, s)) = { t | t ∈ dsymbols(Γ) AND pos(Γ, t) > pos(Γ, s) }
  AUTO_REWRITE after_concat, dsymbols_after

  find_extract_after: THEOREM s ∈ dsymbols(Γ) IMPLIES
    Γ = find(Γ)(s) ++ extract(Γ, s) ++ after(Γ, s)

  % Deducible stuff with find_extract_after
  nsymbols_after: THEOREM s ∈ dsymbols(Γ) IMPLIES
    nsymbols(after(Γ, s)) = nsymbols(Γ) - pos(Γ, s) - 1
  dsymbols_find: THEOREM s ∈ dsymbols(Γ) IMPLIES
    dsymbols(find(Γ)(s)) ⊂ dsymbols(Γ)
  dsymbols_find_before: THEOREM s ∈ dsymbols(Γ) AND t ∈ dsymbols(Γ) IMPLIES
    pos(Γ, t) < pos(Γ, s) IMPLIES t ∈ dsymbols(find(Γ)(s))
  dsymbols_find_when_uniques: THEOREM uniques?(Γ) AND s ∈ dsymbols(Γ) IMPLIES
    dsymbols(find(Γ)(s)) = { t | t ∈ dsymbols(Γ) AND pos(Γ, t) < pos(Γ, s) }
  symbols_after: THEOREM s ∈ dsymbols(Γ) IMPLIES
    symbols(after(Γ, s)) ⊂ symbols(Γ) ∪ dsymbols(find(Γ)(s)) ∪ singleton(s)
  AUTO_REWRITE nsymbols_after, dsymbols_find_when_uniques

  pos_find_before: THEOREM s ∈ dsymbols(Γ) AND t ∈ dsymbols(Γ) IMPLIES
    pos(Γ, t) < pos(Γ, s) IMPLIES pos(find(Γ)(s), t) = pos(Γ, t)
  pos_find_when_uniques: THEOREM uniques?(Γ) AND s ∈ dsymbols(Γ) AND t ∈ dsymbols(find(Γ)(s)) IMPLIES
    pos(find(Γ)(s), t) = pos(Γ, t)
  AUTO_REWRITE pos_find_before, pos_find_when_uniques
  find_find_before: THEOREM s ∈ dsymbols(Γ) AND t ∈ dsymbols(Γ) IMPLIES
    pos(Γ, t) < pos(Γ, s) IMPLIES find(find(Γ)(s))(t) = find(Γ)(t)
  find_find_when_uniques: THEOREM uniques?(Γ) AND s ∈ dsymbols(Γ) AND t ∈ dsymbols(find(Γ)(s)) IMPLIES
    find(find(Γ)(s))(t) = find(Γ)(t)
  AUTO_REWRITE find_find_before, find_find_when_uniques
  extract_find_before: THEOREM s ∈ dsymbols(Γ) AND t ∈ dsymbols(Γ) IMPLIES
    pos(Γ, t) < pos(Γ, s) IMPLIES extract(find(Γ)(s), t) = extract(Γ, t)
  extract_find_when_uniques: THEOREM uniques?(Γ) AND s ∈ dsymbols(Γ) AND t ∈ dsymbols(find(Γ)(s)) IMPLIES
    extract(find(Γ)(s), t) = extract(Γ, t)
  AUTO_REWRITE extract_find_before, extract_find_when_uniques

  find_is_closed: THEOREM closed?(Γ)(Δ) AND s ∈ dsymbols(Δ) IMPLIES
    closed?(Γ)(find(Δ)(s))
  extract_is_closed: THEOREM closed?(Γ)(Δ) AND s ∈ dsymbols(Δ) IMPLIES
    closed?(Γ ++ find(Δ)(s))(extract(Δ, s))
  AUTO_REWRITE find_is_closed, extract_is_closed

  find_is_uniques: THEOREM uniques?(Γ) AND s ∈ dsymbols(Γ) IMPLIES
    uniques?(find(Γ)(s))
  AUTO_REWRITE find_is_uniques
END context
