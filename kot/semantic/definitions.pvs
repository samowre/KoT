definitions: THEORY
BEGIN
  IMPORTING weight
  
  e: VAR expr
  Γ, Δ, Θ: VAR context
  A, B, T: VAR pretype
  r, s, m: VAR symbol
  n: VAR name
  x, y: VAR nat
  a, b, f, g: VAR preterm
  σ, τ: VAR interp
  S: VAR syntaxic

  % η function, as informally defined just before definition 5.5
  % + some modification for the theory interpretations extension
  η(Γ, (m | m ∈ dsymbols(Γ) AND KTHEORY?(kind(Γ)(m))), σ)(e): RECURSIVE semantic =
    CASES e OF
      symbol(s):
        IF s ∈ isymbols(σ) THEN idefinition(σ)(s)
	ELSIF s ∈ dsymbols(definition(Γ)(m)) THEN  dot(m, σ, s)
	ELSE symbol(s) ENDIF,
      dot(m_, τ, s_): dot(m_, η(Γ, m, σ)(τ), s_),

      fun(A, B): fun(η(Γ, m, σ)(A), η(kvar(A, Γ), m, σ)(B)),
      prod(A, B): prod(η(Γ, m, σ)(A), η(kvar(A, Γ), m, σ)(B)),
      subtype(T, a): subtype(η(Γ, m, σ)(T), η(kvar(T, Γ), m, σ)(a)),

      v(i): v(i),
      app(f, a): app(η(Γ, m, σ)(f), η(Γ, m, σ)(a)),
      lam(T, a): lam(η(Γ, m, σ)(T), η(kvar(T, Γ), m, σ)(a)),
      pair(a, b): pair(η(Γ, m, σ)(a), η(Γ, m, σ)(b)),
      lproj(a): lproj(η(Γ, m, σ)(a)),
      rproj(a): rproj(η(Γ, m, σ)(a)),

      〈〉: 〈〉,
      ktype_decl(s, Δ): ktype_decl(s, η(Γ, m, σ)(Δ)),
      ktype_def(s, T, Δ): ktype_def(s, η(Γ, m, σ)(T), η(Γ, m, σ)(Δ)),
      ktype_ext(s, Δ): ktype_ext(s, η(Γ, m, σ)(Δ)),
      kconst_decl(s, T, Δ): kconst_decl(s, η(Γ, m, σ)(T), η(Γ, m, σ)(Δ)),
      kconst_def(s, T, a, Δ): kconst_def(s, η(Γ, m, σ)(T), η(Γ, m, σ)(a), η(Γ, m, σ)(Δ)),
      kconst_ext(s, T, Δ): kconst_ext(s, η(Γ, m, σ)(T), η(Γ, m, σ)(Δ)),

      nil: nil,
      itype(s, T, τ): itype(s, η(Γ, m, σ)(T), η(Γ, m, σ)(τ)),
      iconst(s, a, τ): iconst(s, η(Γ, m, σ)(a), η(Γ, m, σ)(τ))
    ENDCASES
  MEASURE w(e)


  %eta_pretype: JUDGEMENT η(Γ, m, σ)(e: pretype?(T)) HAS_TYPE pretype
  %eta_pretype: JUDGEMENT η(Γ, m, σ)(e: preterm?(T)) HAS_TYPE preterm 
  %eta_pretype: JUDGEMENT η(Γ, m, σ)(e: interp?(T)) HAS_TYPE interp

  % Expanded Type : 2.16, 3.9, 5.5, 5.16
  % + some modification for the theory interpretations extension
  δ(Γ)(T): RECURSIVE semantic =
    CASES T OF
      symbol(s):
        IF definition?(Γ)(s) THEN
	  δ(Γ)(definition(Γ)(s))
  	ELSE symbol(s) ENDIF,
      dot(m, σ, s):
        IF s ∈ isymbols(σ) THEN
  	  δ(Γ)(definition(σ)(s))
  	ELSE
  	  LET Δ = definition(Γ)(m) IN
  	  IF definition?(Δ)(s) THEN
  	    δ(Γ)(η(Γ, m, σ)(definition(Δ)(s)))
   	  ELSE dot(m, δ(Γ)(σ), s) ENDIF
  	ENDIF,
      fun(A, B): fun(δ(Γ)(A), δ(Γ)(B)),
      prod(A, B): prod(δ(Γ)(A), δ(Γ)(B)),
      subtype(T, a): subtype(δ(Γ)(T), a),
      〈〉: 〈〉,
      ktype_decl(s, Δ): ktype_decl(s, δ(Γ)(Δ)),
      ktype_def(s, T, Δ): ktype_def(s, δ(Γ ++ δ(Γ)(Δ))(T), δ(Γ)(Δ)),
      ktype_ext(s, Δ): ktype_ext(s, δ(Γ)(Δ)),
      kconst_decl(s, T, Δ): kconst_decl(s, δ(Γ ++ δ(Γ)(Δ))(T), δ(Γ)(Δ)),
      kconst_def(s, T, a, Δ):
        kconst_def(s, δ(Γ ++ δ(Γ)(Δ))(T), δ(Γ ++ δ(Γ)(Δ))(a), δ(Γ)(Δ)),
      kconst_ext(s, T, Δ):
        kconst_ext(s, δ(Γ ++ δ(Γ)(Δ))(T), δ(Γ)(Δ)),
      nil: nil,
      itype(s, T, σ): itype(s, δ(Γ)(T), δ(Γ)(σ)),
      iconst(s, a, σ): iconst(s, δ(Γ)(a), δ(Γ)(σ))
    ENDCASES
  MEASURE w(Γ) + w(T)

  %delta_pretype: JUDGEMENT δ(Γ)(T | well_formed?(Γ)(T) AND pretype?(T)) HAS_TYPE pretype
  %delta_pretheory: JUDGEMENT δ(Γ)(T | well_formed?(Γ)(T) AND pretheory?(T)) HAS_TYPE pretheory
  %delta_precontext: JUDGEMENT δ(Γ)(T | well_formed?(Γ)(T) AND context?(T)) HAS_TYPE context
  %delta_interp: JUDGEMENT δ(Γ)(T | well_formed?(Γ)(T) AND interp?(T)) HAS_TYPE interp
        
END definitions
