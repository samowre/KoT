definitions: THEORY
BEGIN
  IMPORTING contexts
  
  e: VAR expr
  Γ, Δ, Θ: VAR context
  A, B, T: VAR pretype
  r, s: VAR symbol
  n, m: VAR name
  x, y: VAR nat
  a, b, f, g: VAR preterm
  σ, τ: VAR interp
  S: VAR syntaxic


    well_formed?(Γ)(S): RECURSIVE bool =
    CASES S OF
      symbol(s): s ∈ Γ AND kind(Γ(s)) /= KTHEORY,
      dot(m, σ, s):
        m ∈ Γ AND kind(Γ(m)) = KTHEORY AND s ∈ definition(Γ(m)) AND
  	well_formed?(Γ)(σ), % AND interp_for?(definition(Γ(m)))(σ),

      fun(A, B): well_formed?(Γ)(A) AND well_formed?(Γ)(B),
      prod(A, B): well_formed?(Γ)(A) AND well_formed?(Γ)(B),
      subtype(T, a): well_formed?(Γ)(T) AND well_formed?(Γ)(a),

      v(i): i ∈ Γ,
      app(f, a): well_formed?(Γ)(f) AND well_formed?(Γ)(a),
      lam(T, a): well_formed?(Γ)(T) AND well_formed?(Γ)(a),
      pair(a, b): well_formed?(Γ)(a) AND well_formed?(Γ)(b),
      lproj(a): well_formed?(Γ)(a),
      rproj(a): well_formed?(Γ)(a),

      〈〉: TRUE,
      ktype_decl(s, Θ): 
        s ∉ Θ AND s ∉ Γ AND
      	well_formed?(Γ)(Θ),
      ktype_def(s, T, Θ): 
        s ∉ Θ AND s ∉ Γ AND
	well_formed?(Γ ++ Θ)(T) AND 
	well_formed?(Γ)(Θ),
      ktype_ext(s, Θ): 
        s ∉ Θ AND s ∉ Γ AND
	well_formed?(Γ)(Θ),
      kvar(T, Θ): 
        well_formed?(Γ ++ Θ)(T) AND 
	well_formed?(Γ)(Θ),
      kconst_decl(s, T, Θ): 
        s ∉ Θ AND s ∉ Γ AND
	 well_formed?(Γ ++ Θ)(T) AND 
	 well_formed?(Γ)(Θ),
      kconst_def(s, T, a, Θ): 
        s ∉ Θ AND s ∉ Γ AND
	well_formed?(Γ ++ Θ)(T) AND 
      	well_formed?(Γ ++ Θ)(a) AND 
	well_formed?(Γ)(Θ),
      kconst_ext(s, T, Θ): 
        s ∉ Θ AND s ∉ Γ AND
	 well_formed?(Γ ++ Θ)(T) AND 
	 well_formed?(Γ)(Θ),
      ktheory(s, Th, Θ): 
        s ∉ Θ AND s ∉ Γ AND
	well_formed?(Γ ++ Θ)(Th) AND 
	well_formed?(Γ)(Θ),

      nil: TRUE,
      itype(s, T, σ): 
        s ∉ σ AND 
	well_formed?(Γ)(T) AND 
	well_formed?(Γ)(σ),
      iconst(s, a, σ): 
        s ∉ σ AND 
	well_formed?(Γ)(a) AND 
	well_formed?(Γ)(σ)
    ENDCASES
  MEASURE w(S)
  well_formed(Γ): TYPE = (well_formed?(Γ))

  % η function, as informally defined just before definition 5.5
  % + some modification for the theory interpretations extension
  η(Γ, (m: symbol), σ)(e): RECURSIVE semantic =
    CASES e OF
      symbol(s):
        IF s ∈ σ THEN definition(σ(s))
	ELSIF s ∈ Γ THEN  dot(m, σ, s)
	ELSE symbol(s) ENDIF,
      dot(m_, τ, s_): dot(m_, η(Γ, m, σ)(τ), s_),
      fun(A, B): fun(η(Γ, m, σ)(A), η(Γ, m, σ)(B)),
      prod(A, B): prod(η(Γ, m, σ)(A), η(Γ, m, σ)(B)),
      subtype(T, a): subtype(η(Γ, m, σ)(T), η(Γ, m, σ)(a)),
      v(i): v(i),
      app(f, a): app(η(Γ, m, σ)(f), η(Γ, m, σ)(a)),
      lam(T, a): lam(η(Γ, m, σ)(T), η(Γ, m, σ)(a)),
      pair(a, b): pair(η(Γ, m, σ)(a), η(Γ, m, σ)(b)),
      lproj(a): lproj(η(Γ, m, σ)(a)),
      rproj(a): rproj(η(Γ, m, σ)(a)),
      nil: nil,
      itype(s, T, τ): itype(s, η(Γ, m, σ)(T), η(Γ, m, σ)(τ)),
      iconst(s, a, τ): iconst(s, η(Γ, m, σ)(a), η(Γ, m, σ)(τ))
    ENDCASES
  MEASURE w(e)

  external?(Γ): bool = ktype_ext?(Γ) OR kconst_ext?(Γ)

  % Expanded Type : 2.16, 3.9, 5.5, 5.16
  % + some modification for the theory interpretations extension
  δ(Γ)(T | well_formed?(Γ)(T)): RECURSIVE semantic =
    CASES T OF
      symbol(s):
        IF definition?(Γ(s)) THEN
          δ(rest(Γ(s)))(definition(Γ(s)))
  	ELSE symbol(s) ENDIF,
      dot(m, σ, s):
        IF s ∈ σ THEN
  	  δ(Γ)(definition(σ(s)))
  	ELSE
  	  LET Δ = definition(Γ(m)) IN
  	  IF definition?(Δ(s)) THEN
  	    δ(Γ)(η(rest(Δ(s)), m, σ)(definition(Δ(s))))
  	  ELSIF external?(Δ(s)) THEN
  	    dot(m, nil, s)
  	  ELSE dot(m, δ(Γ)(σ), s) ENDIF
  	ENDIF,
      fun(A, B): fun(δ(Γ)(A), δ(Γ)(B)),
      prod(A, B): prod(δ(Γ)(A), δ(Γ)(B)),
      subtype(T, a): subtype(δ(Γ)(T), a),
      〈〉: 〈〉,
      ktype_decl(s, Δ): ktype_decl(s, δ(Γ)(Δ)),
      ktype_def(s, T, Δ): ktype_def(s, δ(Γ ++ δ(Γ)(Δ))(T), δ(Γ)(Δ)),
      ktype_ext(s, Δ): ktype_ext(s, δ(Γ)(Δ)),
      kconst_decl(s, T, Δ): kconst_decl(s, δ(Γ ++ δ(Γ)(Δ))(T), δ(Γ)(Δ)),
      kconst_def(s, T, a, Δ):
        kconst_def(s, δ(Γ ++ δ(Γ)(Δ))(T), δ(Γ ++ δ(Γ)(Δ))(a), δ(Γ)(Δ)),
      kconst_ext(s, T, Δ):
        kconst_ext(s, δ(Γ ++ δ(Γ)(Δ))(T), δ(Γ)(Δ)),
      nil: nil,
      itype(s, T, σ): itype(s, δ(Γ)(T), δ(Γ)(σ)),
      iconst(s, a, σ): iconst(s, δ(Γ)(a), δ(Γ)(σ))
    ENDCASES
  MEASURE w(Γ) + w(T)
        
END definitions
