(subst
   (size_TCC1 0
    (size_TCC1-1 nil 3582059764 ("" (subtype-tcc) nil nil)
     ((boolean nonempty-type-decl nil booleans nil)
      (bool nonempty-type-eq-decl nil booleans nil)
      (NOT const-decl "[bool -> bool]" booleans nil)
      (semantic type-decl nil language nil)
      (pretype? const-decl "[semantic -> bool]" language nil)
      (pretype type-eq-decl nil language nil)
      (pretype formula-decl nil language nil))
     nil))
   (size_TCC2 0
    (size_TCC2-1 nil 3582059764 ("" (termination-tcc) nil nil)
     ((boolean nonempty-type-decl nil booleans nil)
      (bool nonempty-type-eq-decl nil booleans nil)
      (NOT const-decl "[bool -> bool]" booleans nil)
      (semantic type-decl nil language nil)
      (pretype? const-decl "[semantic -> bool]" language nil)
      (pretype type-eq-decl nil language nil)
      (real_lt_is_strict_total_order name-judgement
       "(strict_total_order?[real])" real_props nil)
      (nnint_plus_posint_is_posint application-judgement "posint"
       integers nil)
      (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
       integers nil)
      (posint_plus_nnint_is_posint application-judgement "posint"
       integers nil)
      (weight def-decl "nat" language nil)
      (pretype formula-decl nil language nil))
     nil))
   (size_TCC3 0
    (size_TCC3-1 nil 3582059764 ("" (subtype-tcc) nil nil)
     ((boolean nonempty-type-decl nil booleans nil)
      (bool nonempty-type-eq-decl nil booleans nil)
      (NOT const-decl "[bool -> bool]" booleans nil)
      (semantic type-decl nil language nil)
      (pretype? const-decl "[semantic -> bool]" language nil)
      (pretype type-eq-decl nil language nil)
      (pretype formula-decl nil language nil))
     nil))
  (size_TCC4 0
   (size_TCC4-1 nil 3582059764 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (pretype type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (pretype formula-decl nil language nil))
    nil)) (size_TCC5 0
           (size_TCC5-1 nil 3582059764 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (pretype type-eq-decl nil language nil)
             (pretype formula-decl nil language nil))
            nil))
  (size_TCC6 0
   (size_TCC6-1 nil 3582060475 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (pretype type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (pretype formula-decl nil language nil))
    nil)) (size_TCC7 0
           (size_TCC7-1 nil 3582060475 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (pretype type-eq-decl nil language nil)
             (pretype formula-decl nil language nil))
            nil))
  (size_TCC8 0
   (size_TCC8-1 nil 3582060475 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (pretype type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (pretype formula-decl nil language nil))
    nil)) (size_TCC9 0
           (size_TCC9-1 nil 3582060475 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (pretype type-eq-decl nil language nil)
             (pretype formula-decl nil language nil))
            nil))
  (size_TCC10 0
   (size_TCC10-1 nil 3582060475 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (pretype type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (pretype formula-decl nil language nil))
    nil)) (size_TCC11 0
           (size_TCC11-1 nil 3582060475 ("" (cases-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (pretype type-eq-decl nil language nil)
             (pretype formula-decl nil language nil))
            nil))
  (uparrow_TCC1 0
   (uparrow_TCC1-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (expr formula-decl nil language nil)
     (weight def-decl "nat" language nil))
    nil)) (uparrow_TCC2 0
           (uparrow_TCC2-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC3 0
   (uparrow_TCC3-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC4 0
           (uparrow_TCC4-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (σ!1 skolem-const-decl "semantic" subst nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (weight def-decl "nat" language nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC5 0
   (uparrow_TCC5-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC6 0
           (uparrow_TCC6-1 nil 3582052479
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC7 0
   (uparrow_TCC7-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC8 0
           (uparrow_TCC8-1 nil 3582052479
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC9 0
   (uparrow_TCC9-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (T!1 skolem-const-decl "semantic" subst nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (a!1 skolem-const-decl "semantic" subst nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (weight def-decl "nat" language nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC10 0
           (uparrow_TCC10-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC11 0
   (uparrow_TCC11-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC12 0
           (uparrow_TCC12-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC13 0
   (uparrow_TCC13-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC14 0
           (uparrow_TCC14-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (A!1 skolem-const-decl "semantic" subst nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (B!1 skolem-const-decl "semantic" subst nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (weight def-decl "nat" language nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC15 0
   (uparrow_TCC15-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC16 0
           (uparrow_TCC16-1 nil 3582052479
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC17 0
   (uparrow_TCC17-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC18 0
           (uparrow_TCC18-1 nil 3582052479
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC19 0
   (uparrow_TCC19-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (A!1 skolem-const-decl "semantic" subst nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (B!1 skolem-const-decl "semantic" subst nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (weight def-decl "nat" language nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC20 0
           (uparrow_TCC20-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (expr formula-decl nil language nil)
             (weight def-decl "nat" language nil))
            nil))
  (uparrow_TCC21 0
   (uparrow_TCC21-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (expr formula-decl nil language nil)
     (weight def-decl "nat" language nil))
    nil)) (uparrow_TCC22 0
           (uparrow_TCC22-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC23 0
   (uparrow_TCC23-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC24 0
           (uparrow_TCC24-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC25 0
   (uparrow_TCC25-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC26 0
           (uparrow_TCC26-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (a!1 skolem-const-decl "semantic" subst nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (f!1 skolem-const-decl "semantic" subst nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (weight def-decl "nat" language nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC27 0
   (uparrow_TCC27-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC28 0
           (uparrow_TCC28-1 nil 3582052479
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC29 0
   (uparrow_TCC29-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC30 0
           (uparrow_TCC30-1 nil 3582052479
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC31 0
   (uparrow_TCC31-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (T!1 skolem-const-decl "semantic" subst nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (a!1 skolem-const-decl "semantic" subst nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (weight def-decl "nat" language nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC32 0
           (uparrow_TCC32-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC33 0
   (uparrow_TCC33-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC34 0
           (uparrow_TCC34-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC35 0
   (uparrow_TCC35-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC36 0
           (uparrow_TCC36-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (a!1 skolem-const-decl "semantic" subst nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (b!1 skolem-const-decl "semantic" subst nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (weight def-decl "nat" language nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC37 0
   (uparrow_TCC37-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC38 0
           (uparrow_TCC38-1 nil 3582052479
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC39 0
   (uparrow_TCC39-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (weight def-decl "nat" language nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC40 0
           (uparrow_TCC40-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC41 0
   (uparrow_TCC41-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC42 0
           (uparrow_TCC42-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (weight def-decl "nat" language nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC43 0
   (uparrow_TCC43-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (expr formula-decl nil language nil)
     (weight def-decl "nat" language nil))
    nil)) (uparrow_TCC44 0
           (uparrow_TCC44-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC45 0
   (uparrow_TCC45-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC46 0
           (uparrow_TCC46-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (weight def-decl "nat" language nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC47 0
   (uparrow_TCC47-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC48 0
           (uparrow_TCC48-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC49 0
   (uparrow_TCC49-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC50 0
           (uparrow_TCC50-1 nil 3582060475
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC51 0
   (uparrow_TCC51-1 nil 3582060475 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (T!1 skolem-const-decl "semantic" subst nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (Γ!1 skolem-const-decl "semantic" subst nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (weight def-decl "nat" language nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC52 0
           (uparrow_TCC52-1 nil 3582060475
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC53 0
   (uparrow_TCC53-1 nil 3582060475 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC54 0
           (uparrow_TCC54-1 nil 3582060475 ("" (cases-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (weight def-decl "nat" language nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC55 0
   (uparrow_TCC55-1 nil 3583007946 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC56 0
           (uparrow_TCC56-1 nil 3583007946
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC57 0
   (uparrow_TCC57-1 nil 3583007946 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC58 0
           (uparrow_TCC58-1 nil 3583007946
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC59 0
   (uparrow_TCC59-1 nil 3583007946 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (T!1 skolem-const-decl "semantic" subst nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (Γ!1 skolem-const-decl "semantic" subst nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (weight def-decl "nat" language nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC60 0
           (uparrow_TCC60-1 nil 3583007946 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC61 0
   (uparrow_TCC61-1 nil 3583007946 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC62 0
           (uparrow_TCC62-1 nil 3583007946 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC63 0
   (uparrow_TCC63-1 nil 3583007946 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC64 0
           (uparrow_TCC64-1 nil 3583007946 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC65 0
   (uparrow_TCC65-1 nil 3583007946 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC66 0
           (uparrow_TCC66-1 nil 3583007946 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (T!1 skolem-const-decl "semantic" subst nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (Γ!1 skolem-const-decl "semantic" subst nil)
             (a!1 skolem-const-decl "semantic" subst nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (weight def-decl "nat" language nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC67 0
   (uparrow_TCC67-1 nil 3583007946 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC68 0
           (uparrow_TCC68-1 nil 3583007946
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC69 0
   (uparrow_TCC69-1 nil 3583007946 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC70 0
           (uparrow_TCC70-1 nil 3583007946
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC71 0
   (uparrow_TCC71-1 nil 3583007946 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (T!1 skolem-const-decl "semantic" subst nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (Γ!1 skolem-const-decl "semantic" subst nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (weight def-decl "nat" language nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC72 0
           (uparrow_TCC72-1 nil 3583007946 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (expr formula-decl nil language nil)
             (weight def-decl "nat" language nil))
            nil))
  (uparrow_TCC73 0
   (uparrow_TCC73-1 nil 3583007946 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC74 0
           (uparrow_TCC74-1 nil 3583007946
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC75 0
   (uparrow_TCC75-1 nil 3583007946 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC76 0
           (uparrow_TCC76-1 nil 3583007946
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC77 0
   (uparrow_TCC77-1 nil 3583007946 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (T!1 skolem-const-decl "semantic" subst nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (σ!1 skolem-const-decl "semantic" subst nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (weight def-decl "nat" language nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (expr formula-decl nil language nil))
    nil)) (uparrow_TCC78 0
           (uparrow_TCC78-1 nil 3583007946 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC79 0
   (uparrow_TCC79-1 nil 3583007946 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC80 0
           (uparrow_TCC80-1 nil 3583007946 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC81 0
   (uparrow_TCC81-1 nil 3583007946 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC82 0
           (uparrow_TCC82-1 nil 3583007946 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (a!1 skolem-const-decl "semantic" subst nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (σ!1 skolem-const-decl "semantic" subst nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (weight def-decl "nat" language nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (expr formula-decl nil language nil))
            nil))
  (uparrow_TCC83 0
   (uparrow_TCC83-1 nil 3583007946 ("" (cases-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (shift_size 0
           (shift_size-1 nil 3582060475
            ("" (auto-rewrite "↑")
             (("" (induct-and-simplify "A")
               (("" (typepred "↑")
                 (("" (inst?) (("" (assert) nil nil)) nil)) nil))
               nil))
             nil)
            ((NOT const-decl "[bool -> bool]" booleans nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (pretype formula-decl nil language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (boolean nonempty-type-decl nil booleans nil)
             (semantic type-decl nil language nil)
             (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (<= const-decl "bool" reals nil)
             (weight def-decl "nat" language nil)
             (ord type-decl nil language nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (expr type-eq-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (>= const-decl "bool" reals nil)
             (int nonempty-type-eq-decl nil integers nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (real nonempty-type-from-decl nil reals nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number nonempty-type-decl nil numbers nil)
             (expr formula-decl nil language nil)
             (pretype type-eq-decl nil language nil)
             (size def-decl "nat" subst nil)
             (semantic_induction formula-decl nil language nil))
            nil))
  (uparrow_TCC84 0
   (uparrow_TCC84-1 nil 3583007946 ("" (subtype-tcc) nil nil) nil nil)) (uparrow_TCC85
                                                                         0
                                                                         (uparrow_TCC85-1
                                                                          nil
                                                                          3583007946
                                                                          (""
                                                                           (subtype-tcc)
                                                                           nil
                                                                           nil)
                                                                          nil
                                                                          nil))
  (uparrow_TCC86 0
   (uparrow_TCC86-1 nil 3583007946 ("" (subtype-tcc) nil nil) nil nil)) (subst_TCC1
                                                                         0
                                                                         (subst_TCC1-1
                                                                          nil
                                                                          3582052479
                                                                          (""
                                                                           (subtype-tcc)
                                                                           nil
                                                                           nil)
                                                                          ((boolean
                                                                            nonempty-type-decl
                                                                            nil
                                                                            booleans
                                                                            nil)
                                                                           (bool
                                                                            nonempty-type-eq-decl
                                                                            nil
                                                                            booleans
                                                                            nil)
                                                                           (NOT
                                                                            const-decl
                                                                            "[bool -> bool]"
                                                                            booleans
                                                                            nil)
                                                                           (semantic
                                                                            type-decl
                                                                            nil
                                                                            language
                                                                            nil)
                                                                           (expr?
                                                                            const-decl
                                                                            "[semantic -> bool]"
                                                                            language
                                                                            nil)
                                                                           (expr
                                                                            type-eq-decl
                                                                            nil
                                                                            language
                                                                            nil)
                                                                           (interp
                                                                            formula-decl
                                                                            nil
                                                                            language
                                                                            nil)
                                                                           (preterm
                                                                            formula-decl
                                                                            nil
                                                                            language
                                                                            nil)
                                                                           (pretype
                                                                            formula-decl
                                                                            nil
                                                                            language
                                                                            nil)
                                                                           (pretheory
                                                                            formula-decl
                                                                            nil
                                                                            language
                                                                            nil)
                                                                           (expr
                                                                            formula-decl
                                                                            nil
                                                                            language
                                                                            nil))
                                                                          nil))
  (subst_TCC2 0
   (subst_TCC2-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (σ!1 skolem-const-decl "semantic" subst nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (subst_TCC3 0
           (subst_TCC3-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (preterm type-eq-decl nil language nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (subst_TCC4 0
   (subst_TCC4-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
     (a!1 skolem-const-decl "semantic" subst nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (T!1 skolem-const-decl "semantic" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (subst_TCC5 0
           (subst_TCC5-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (A!1 skolem-const-decl "semantic" subst nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (expr formula-decl nil language nil))
            nil))
  (subst_TCC6 0
   (subst_TCC6-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (preterm type-eq-decl nil language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (subst_TCC7 0
           (subst_TCC7-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
             (B!1 skolem-const-decl "semantic" subst nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (expr formula-decl nil language nil))
            nil))
  (subst_TCC8 0
   (subst_TCC8-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
     (B!1 skolem-const-decl "semantic" subst nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (A!1 skolem-const-decl "semantic" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (⌈⌉ macro-decl "pretype" language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (subst_TCC9 0
           (subst_TCC9-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (A!1 skolem-const-decl "semantic" subst nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (expr formula-decl nil language nil))
            nil))
  (subst_TCC10 0
   (subst_TCC10-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (preterm type-eq-decl nil language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (subst_TCC11 0
           (subst_TCC11-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
             (B!1 skolem-const-decl "semantic" subst nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (expr formula-decl nil language nil))
            nil))
  (subst_TCC12 0
   (subst_TCC12-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
     (B!1 skolem-const-decl "semantic" subst nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (A!1 skolem-const-decl "semantic" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (⌈⌉ macro-decl "pretype" language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (subst_TCC13 0
           (subst_TCC13-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (real_gt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (int_minus_int_is_int application-judgement "int" integers
              nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (subst_TCC14 0
   (subst_TCC14-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (real_gt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (subst_TCC15 0
           (subst_TCC15-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (preterm type-eq-decl nil language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (real_gt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (expr formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (subst_TCC16 0
   (subst_TCC16-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (real_gt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (subst_TCC17 0
           (subst_TCC17-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (a!1 skolem-const-decl "semantic" subst nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (f!1 skolem-const-decl "semantic" subst nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (subst_TCC18 0
   (subst_TCC18-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (preterm type-eq-decl nil language nil)
     (expr formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (subst_TCC19 0
           (subst_TCC19-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
             (a!1 skolem-const-decl "semantic" subst nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (T!1 skolem-const-decl "semantic" subst nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (subst_TCC20 0
   (subst_TCC20-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (a!1 skolem-const-decl "semantic" subst nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (pretheory formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (expr formula-decl nil language nil))
    nil)) (subst_TCC21 0
           (subst_TCC21-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (b!1 skolem-const-decl "semantic" subst nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (pretheory formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (expr formula-decl nil language nil))
            nil))
  (subst_TCC22 0
   (subst_TCC22-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (b!1 skolem-const-decl "semantic" subst nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (a!1 skolem-const-decl "semantic" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (〈〉 macro-decl "preterm" language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (subst_TCC23 0
           (subst_TCC23-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (subst_TCC24 0
   (subst_TCC24-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (subst_TCC25 0
           (subst_TCC25-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (subst_TCC26 0
   (subst_TCC26-1 nil 3582304241 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (subst_TCC27 0
           (subst_TCC27-1 nil 3582304241 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (Γ!1 skolem-const-decl "semantic" subst nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (T!1 skolem-const-decl "semantic" subst nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (subst_TCC28 0
   (subst_TCC28-1 nil 3582570446 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (subst_TCC29 0
           (subst_TCC29-1 nil 3582570446 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (Γ!1 skolem-const-decl "semantic" subst nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (T!1 skolem-const-decl "semantic" subst nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (subst_TCC30 0
   (subst_TCC30-1 nil 3582570446 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (Γ!1 skolem-const-decl "semantic" subst nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (a!1 skolem-const-decl "semantic" subst nil)
     (T!1 skolem-const-decl "semantic" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (subst_TCC31 0
           (subst_TCC31-1 nil 3582570446 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (Γ!1 skolem-const-decl "semantic" subst nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (T!1 skolem-const-decl "semantic" subst nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (subst_TCC32 0
   (subst_TCC32-1 nil 3583007946 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (subst_TCC33 0
           (subst_TCC33-1 nil 3583007946 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<= const-decl "bool" reals nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil)
             (σ!1 skolem-const-decl "semantic" subst nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (T!1 skolem-const-decl "semantic" subst nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (pretheory formula-decl nil language nil)
             (expr formula-decl nil language nil))
            nil))
  (subst_TCC34 0
   (subst_TCC34-1 nil 3583007946 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (expr? const-decl "[semantic -> bool]" language nil)
     (expr type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm? const-decl "[semantic -> bool]" language nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<= const-decl "bool" reals nil)
     (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
     (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
     (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (pretype? const-decl "[semantic -> bool]" language nil)
     (interp? const-decl "[semantic -> bool]" language nil)
     (pretheory? const-decl "[semantic -> bool]" language nil)
     (σ!1 skolem-const-decl "semantic" subst nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (a!1 skolem-const-decl "semantic" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (pretheory formula-decl nil language nil)
     (expr formula-decl nil language nil))
    nil)) (subst_size 0
           (subst_size-1 nil 3582060163
            ("" (induct "T")
             (("1" (grind) nil nil) ("2" (grind) nil nil)
              ("3" (grind) nil nil) ("4" (grind) nil nil)
              ("5" (grind) nil nil) ("6" (grind) nil nil)
              ("7" (grind) nil nil) ("8" (grind) nil nil)
              ("9" (grind) nil nil) ("10" (grind) nil nil)
              ("11" (grind) nil nil) ("12" (grind) nil nil)
              ("13" (grind) nil nil) ("14" (grind) nil nil)
              ("15" (grind) nil nil) ("16" (grind) nil nil)
              ("17" (grind) nil nil) ("18" (grind) nil nil)
              ("19" (grind) nil nil) ("20" (grind) nil nil)
              ("21" (grind) nil nil) ("22" (grind) nil nil)
              ("23" (grind) nil nil) ("24" (grind) nil nil)
              ("25" (grind)
               (("25" (typepred "subst") (("25" (grind) nil nil)) nil))
               nil)
              ("26" (skosimp* :preds? t) nil nil))
             nil)
            ((posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (↑ def-decl "{f |
              (pretype?(e) => pretype?(f)) AND (preterm?(e) => preterm?(f))
          AND (interp?(e) => interp?(f))
          AND (pretheory?(e) => pretheory?(f))
          AND weight(F)(f) = weight(F)(e)}" subst nil)
             (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
             (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_symbol adt-constructor-decl "(ord_symbol?)" language
              nil)
             (ord_symbol? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
             (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (<= const-decl "bool" reals nil)
             (weight def-decl "nat" language nil)
             (ord type-decl nil language nil)
             (pretype formula-decl nil language nil)
             (semantic_induction formula-decl nil language nil)
             (size def-decl "nat" subst nil)
             (pretype type-eq-decl nil language nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (expr formula-decl nil language nil)
             (preterm type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (expr? const-decl "[semantic -> bool]" language nil)
             (expr type-eq-decl nil language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (subst def-decl "{f |
         (pretype?(e) => pretype?(f)) AND
          (preterm?(e) => preterm?(f)) AND
           (interp?(e) => interp?(f)) AND (pretheory?(e) => pretheory?(f))}"
                    subst
               nil)
             (semantic type-decl nil language nil)
             (boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (pretype? const-decl "[semantic -> bool]" language nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (interp? const-decl "[semantic -> bool]" language nil)
             (preterm? const-decl "[semantic -> bool]" language nil)
             (pretheory? const-decl "[semantic -> bool]" language nil))
            nil)))

