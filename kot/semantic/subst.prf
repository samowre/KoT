(subst
   (uparrow_TCC1 0
    (uparrow_TCC1-1 nil 3582052479 ("" (subtype-tcc) nil nil)
     ((boolean nonempty-type-decl nil booleans nil)
      (bool nonempty-type-eq-decl nil booleans nil)
      (NOT const-decl "[bool -> bool]" booleans nil)
      (OR const-decl "[bool, bool -> bool]" booleans nil)
      (semantic type-decl nil language nil)
      (pretype? const-decl "bool" language nil)
      (preterm? const-decl "bool" language nil)
      (interp? const-decl "bool" language nil)
      (name formula-decl nil language nil)
      (pretype formula-decl nil language nil)
      (preterm formula-decl nil language nil)
      (interp formula-decl nil language nil))
     nil))
   (uparrow_TCC2 0
    (uparrow_TCC2-1 nil 3582052479 ("" (subtype-tcc) nil nil)
     ((boolean nonempty-type-decl nil booleans nil)
      (bool nonempty-type-eq-decl nil booleans nil)
      (NOT const-decl "[bool -> bool]" booleans nil)
      (OR const-decl "[bool, bool -> bool]" booleans nil)
      (semantic type-decl nil language nil)
      (pretype? const-decl "bool" language nil)
      (preterm? const-decl "bool" language nil)
      (interp? const-decl "bool" language nil)
      (interp formula-decl nil language nil)
      (preterm formula-decl nil language nil)
      (pretype formula-decl nil language nil)
      (name formula-decl nil language nil))
     nil))
   (uparrow_TCC3 0
    (uparrow_TCC3-1 nil 3582052479 ("" (termination-tcc) nil nil)
     ((boolean nonempty-type-decl nil booleans nil)
      (bool nonempty-type-eq-decl nil booleans nil)
      (NOT const-decl "[bool -> bool]" booleans nil)
      (OR const-decl "[bool, bool -> bool]" booleans nil)
      (semantic type-decl nil language nil)
      (pretype? const-decl "bool" language nil)
      (preterm? const-decl "bool" language nil)
      (interp? const-decl "bool" language nil)
      (real_lt_is_strict_total_order name-judgement
       "(strict_total_order?[real])" real_props nil)
      (nnint_plus_posint_is_posint application-judgement "posint"
       integers nil)
      (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
       integers nil)
      (posint_plus_nnint_is_posint application-judgement "posint"
       integers nil)
      (weight def-decl "nat" language nil))
     nil))
  (uparrow_TCC4 0
   (uparrow_TCC4-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
     (<= const-decl "bool" reals nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl
      "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (Ïƒ!1 skolem-const-decl "semantic" subst nil)
     (name formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC5 0
           (uparrow_TCC5-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil))
            nil))
  (uparrow_TCC6 0
   (uparrow_TCC6-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (uparrow_TCC7 0
           (uparrow_TCC7-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil))
            nil))
  (uparrow_TCC8 0
   (uparrow_TCC8-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (uparrow_TCC9 0
           (uparrow_TCC9-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
             (<= const-decl "bool" reals nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl
              "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (a!1 skolem-const-decl "semantic" subst nil)
             (T!1 skolem-const-decl "semantic" subst nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (pretype formula-decl nil language nil)
             (name formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC10 0
   (uparrow_TCC10-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (name formula-decl nil language nil)
     (pretype formula-decl nil language nil))
    nil)) (uparrow_TCC11 0
           (uparrow_TCC11-1 nil 3582052479
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil))
            nil))
  (uparrow_TCC12 0
   (uparrow_TCC12-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (name formula-decl nil language nil)
     (pretype formula-decl nil language nil))
    nil)) (uparrow_TCC13 0
           (uparrow_TCC13-1 nil 3582052479
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil))
            nil))
  (uparrow_TCC14 0
   (uparrow_TCC14-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
     (<= const-decl "bool" reals nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl
      "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (B!1 skolem-const-decl "semantic" subst nil)
     (A!1 skolem-const-decl "semantic" subst nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC15 0
           (uparrow_TCC15-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil))
            nil))
  (uparrow_TCC16 0
   (uparrow_TCC16-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (uparrow_TCC17 0
           (uparrow_TCC17-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil))
            nil))
  (uparrow_TCC18 0
   (uparrow_TCC18-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (uparrow_TCC19 0
           (uparrow_TCC19-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
             (<= const-decl "bool" reals nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl
              "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (B!1 skolem-const-decl "semantic" subst nil)
             (A!1 skolem-const-decl "semantic" subst nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (pretype formula-decl nil language nil)
             (name formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC20 0
   (uparrow_TCC20-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (name formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC21 0
           (uparrow_TCC21-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC22 0
   (uparrow_TCC22-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil))
    nil)) (uparrow_TCC23 0
           (uparrow_TCC23-1 nil 3582052479
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil))
            nil))
  (uparrow_TCC24 0
   (uparrow_TCC24-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil))
    nil)) (uparrow_TCC25 0
           (uparrow_TCC25-1 nil 3582052479
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil))
            nil))
  (uparrow_TCC26 0
   (uparrow_TCC26-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
     (<= const-decl "bool" reals nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl
      "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (a!1 skolem-const-decl "semantic" subst nil)
     (f!1 skolem-const-decl "semantic" subst nil)
     (name formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC27 0
           (uparrow_TCC27-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (name formula-decl nil language nil))
            nil))
  (uparrow_TCC28 0
   (uparrow_TCC28-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (uparrow_TCC29 0
           (uparrow_TCC29-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (name formula-decl nil language nil))
            nil))
  (uparrow_TCC30 0
   (uparrow_TCC30-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (uparrow_TCC31 0
           (uparrow_TCC31-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
             (<= const-decl "bool" reals nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl
              "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (a!1 skolem-const-decl "semantic" subst nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (T!1 skolem-const-decl "semantic" subst nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC32 0
   (uparrow_TCC32-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil))
    nil)) (uparrow_TCC33 0
           (uparrow_TCC33-1 nil 3582052479
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil))
            nil))
  (uparrow_TCC34 0
   (uparrow_TCC34-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil))
    nil)) (uparrow_TCC35 0
           (uparrow_TCC35-1 nil 3582052479
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil))
            nil))
  (uparrow_TCC36 0
   (uparrow_TCC36-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
     (<= const-decl "bool" reals nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl
      "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (b!1 skolem-const-decl "semantic" subst nil)
     (a!1 skolem-const-decl "semantic" subst nil)
     (name formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC37 0
           (uparrow_TCC37-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (name formula-decl nil language nil))
            nil))
  (uparrow_TCC38 0
   (uparrow_TCC38-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (uparrow_TCC39 0
           (uparrow_TCC39-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
             (<= const-decl "bool" reals nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl
              "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC40 0
   (uparrow_TCC40-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil))
    nil)) (uparrow_TCC41 0
           (uparrow_TCC41-1 nil 3582052479
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil))
            nil))
  (uparrow_TCC42 0
   (uparrow_TCC42-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
     (<= const-decl "bool" reals nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl
      "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (name formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC43 0
           (uparrow_TCC43-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC44 0
   (uparrow_TCC44-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil))
    nil)) (uparrow_TCC45 0
           (uparrow_TCC45-1 nil 3582052479
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil))
            nil))
  (uparrow_TCC46 0
   (uparrow_TCC46-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil))
    nil)) (uparrow_TCC47 0
           (uparrow_TCC47-1 nil 3582052479
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil))
            nil))
  (uparrow_TCC48 0
   (uparrow_TCC48-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
     (<= const-decl "bool" reals nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl
      "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (Ïƒ!1 skolem-const-decl "semantic" subst nil)
     (T!1 skolem-const-decl "semantic" subst nil)
     (name formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (uparrow_TCC49 0
           (uparrow_TCC49-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (name formula-decl nil language nil))
            nil))
  (uparrow_TCC50 0
   (uparrow_TCC50-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (uparrow_TCC51 0
           (uparrow_TCC51-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (name formula-decl nil language nil))
            nil))
  (uparrow_TCC52 0
   (uparrow_TCC52-1 nil 3582052479 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (uparrow_TCC53 0
           (uparrow_TCC53-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
             (<= const-decl "bool" reals nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl
              "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (Ïƒ!1 skolem-const-decl "semantic" subst nil)
             (a!1 skolem-const-decl "semantic" subst nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (uparrow_TCC54 0
   (uparrow_TCC54-1 nil 3582052479 ("" (cases-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil))
    nil)) (subst_TCC1 0
           (subst_TCC1-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (subst_TCC2 0
   (subst_TCC2-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil))
    nil)) (subst_TCC3 0
           (subst_TCC3-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil))
            nil))
  (subst_TCC4 0
   (subst_TCC4-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
     (<= const-decl "bool" reals nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl
      "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (Ïƒ!1 skolem-const-decl "semantic" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (name formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (subst_TCC5 0
           (subst_TCC5-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil))
            nil))
  (subst_TCC6 0
   (subst_TCC6-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (subst_TCC7 0
           (subst_TCC7-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil))
            nil))
  (subst_TCC8 0
   (subst_TCC8-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (preterm type-eq-decl nil language nil))
    nil)) (subst_TCC9 0
           (subst_TCC9-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil))
            nil))
  (subst_TCC10 0
   (subst_TCC10-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
     (<= const-decl "bool" reals nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl
      "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (â†‘ def-decl
      "{T: semantic | (pretype?(S) IMPLIES pretype?(T)) AND (preterm?(S) IMPLIES preterm?(T)) AND (interp?(S) IMPLIES interp?(T))}"
      subst nil)
     (a!1 skolem-const-decl "semantic" subst nil)
     (T!1 skolem-const-decl "semantic" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (subst_TCC11 0
           (subst_TCC11-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil))
            nil))
  (subst_TCC12 0
   (subst_TCC12-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (subst_TCC13 0
           (subst_TCC13-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
             (<= const-decl "bool" reals nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl
              "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (A!1 skolem-const-decl "semantic" subst nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil))
            nil))
  (subst_TCC14 0
   (subst_TCC14-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (name formula-decl nil language nil)
     (pretype formula-decl nil language nil))
    nil)) (subst_TCC15 0
           (subst_TCC15-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (preterm type-eq-decl nil language nil))
            nil))
  (subst_TCC16 0
   (subst_TCC16-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (subst_TCC17 0
           (subst_TCC17-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
             (<= const-decl "bool" reals nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl
              "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (â†‘ def-decl
              "{T: semantic | (pretype?(S) IMPLIES pretype?(T)) AND (preterm?(S) IMPLIES preterm?(T)) AND (interp?(S) IMPLIES interp?(T))}"
              subst nil)
             (B!1 skolem-const-decl "semantic" subst nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil))
            nil))
  (subst_TCC18 0
   (subst_TCC18-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
     (<= const-decl "bool" reals nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl
      "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (â†‘ def-decl
      "{T: semantic | (pretype?(S) IMPLIES pretype?(T)) AND (preterm?(S) IMPLIES preterm?(T)) AND (interp?(S) IMPLIES interp?(T))}"
      subst nil)
     (B!1 skolem-const-decl "semantic" subst nil)
     (A!1 skolem-const-decl "semantic" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (âŒˆâŒ‰ macro-decl "pretype" language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (subst_TCC19 0
           (subst_TCC19-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil))
            nil))
  (subst_TCC20 0
   (subst_TCC20-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (subst_TCC21 0
           (subst_TCC21-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
             (<= const-decl "bool" reals nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl
              "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (A!1 skolem-const-decl "semantic" subst nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil))
            nil))
  (subst_TCC22 0
   (subst_TCC22-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (name formula-decl nil language nil)
     (pretype formula-decl nil language nil))
    nil)) (subst_TCC23 0
           (subst_TCC23-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (preterm type-eq-decl nil language nil))
            nil))
  (subst_TCC24 0
   (subst_TCC24-1 nil 3582052479 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (subst_TCC25 0
           (subst_TCC25-1 nil 3582052479 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
             (<= const-decl "bool" reals nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl
              "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (â†‘ def-decl
              "{T: semantic | (pretype?(S) IMPLIES pretype?(T)) AND (preterm?(S) IMPLIES preterm?(T)) AND (interp?(S) IMPLIES interp?(T))}"
              subst nil)
             (B!1 skolem-const-decl "semantic" subst nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil))
            nil))
  (subst_TCC26 0
   (subst_TCC26-1 nil 3582054498 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
     (<= const-decl "bool" reals nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl
      "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (â†‘ def-decl
      "{T: semantic | (pretype?(S) IMPLIES pretype?(T)) AND (preterm?(S) IMPLIES preterm?(T)) AND (interp?(S) IMPLIES interp?(T))}"
      subst nil)
     (B!1 skolem-const-decl "semantic" subst nil)
     (A!1 skolem-const-decl "semantic" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (âŒˆâŒ‰ macro-decl "pretype" language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (subst_TCC27 0
           (subst_TCC27-1 nil 3582054498 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (real_gt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (int_minus_int_is_int application-judgement "int" integers
              nil))
            nil))
  (subst_TCC28 0
   (subst_TCC28-1 nil 3582054498 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (real_gt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (name formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (subst_TCC29 0
           (subst_TCC29-1 nil 3582054498 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm type-eq-decl nil language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (real_gt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (name formula-decl nil language nil))
            nil))
  (subst_TCC30 0
   (subst_TCC30-1 nil 3582054498 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (real_gt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (name formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (subst_TCC31 0
           (subst_TCC31-1 nil 3582054498 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (name formula-decl nil language nil))
            nil))
  (subst_TCC32 0
   (subst_TCC32-1 nil 3582054498 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (subst_TCC33 0
           (subst_TCC33-1 nil 3582054498 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (name formula-decl nil language nil))
            nil))
  (subst_TCC34 0
   (subst_TCC34-1 nil 3582054498 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (subst_TCC35 0
           (subst_TCC35-1 nil 3582054498 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
             (<= const-decl "bool" reals nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl
              "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (a!1 skolem-const-decl "semantic" subst nil)
             (f!1 skolem-const-decl "semantic" subst nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (subst_TCC36 0
   (subst_TCC36-1 nil 3582054498 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil))
    nil)) (subst_TCC37 0
           (subst_TCC37-1 nil 3582054498 ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil))
            nil))
  (subst_TCC38 0
   (subst_TCC38-1 nil 3582054498 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil))
    nil)) (subst_TCC39 0
           (subst_TCC39-1 nil 3582054498 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (preterm type-eq-decl nil language nil))
            nil))
  (subst_TCC40 0
   (subst_TCC40-1 nil 3582054498 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (subst_TCC41 0
           (subst_TCC41-1 nil 3582054498 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
             (<= const-decl "bool" reals nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl
              "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (â†‘ def-decl
              "{T: semantic | (pretype?(S) IMPLIES pretype?(T)) AND (preterm?(S) IMPLIES preterm?(T)) AND (interp?(S) IMPLIES interp?(T))}"
              subst nil)
             (a!1 skolem-const-decl "semantic" subst nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (T!1 skolem-const-decl "semantic" subst nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (subst_TCC42 0
   (subst_TCC42-1 nil 3582054498 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil))
    nil)) (subst_TCC43 0
           (subst_TCC43-1 nil 3582054498 ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil))
            nil))
  (subst_TCC44 0
   (subst_TCC44-1 nil 3582054498 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
     (<= const-decl "bool" reals nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl
      "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (a!1 skolem-const-decl "semantic" subst nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil))
    nil)) (subst_TCC45 0
           (subst_TCC45-1 nil 3582054498 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (name formula-decl nil language nil))
            nil))
  (subst_TCC46 0
   (subst_TCC46-1 nil 3582054498 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (subst_TCC47 0
           (subst_TCC47-1 nil 3582054498 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
             (<= const-decl "bool" reals nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl
              "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (b!1 skolem-const-decl "semantic" subst nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (name formula-decl nil language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil))
            nil))
  (subst_TCC48 0
   (subst_TCC48-1 nil 3582054498 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
     (<= const-decl "bool" reals nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl
      "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (b!1 skolem-const-decl "semantic" subst nil)
     (a!1 skolem-const-decl "semantic" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (âŒ©âŒª macro-decl "preterm" language nil)
     (name formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (subst_TCC49 0
           (subst_TCC49-1 nil 3582054498 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (name formula-decl nil language nil))
            nil))
  (subst_TCC50 0
   (subst_TCC50-1 nil 3582054498 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (subst_TCC51 0
           (subst_TCC51-1 nil 3582054498 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
             (<= const-decl "bool" reals nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl
              "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (subst_TCC52 0
   (subst_TCC52-1 nil 3582054498 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil))
    nil)) (subst_TCC53 0
           (subst_TCC53-1 nil 3582054498 ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil))
            nil))
  (subst_TCC54 0
   (subst_TCC54-1 nil 3582054498 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
     (<= const-decl "bool" reals nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl
      "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (name formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (subst_TCC55 0
           (subst_TCC55-1 nil 3582054498 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (subst_TCC56 0
   (subst_TCC56-1 nil 3582054498 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil))
    nil)) (subst_TCC57 0
           (subst_TCC57-1 nil 3582054498 ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil))
            nil))
  (subst_TCC58 0
   (subst_TCC58-1 nil 3582054498 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil))
    nil)) (subst_TCC59 0
           (subst_TCC59-1 nil 3582054498 ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (nnint_plus_posint_is_posint application-judgement
              "posint" integers nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (weight def-decl "nat" language nil))
            nil))
  (subst_TCC60 0
   (subst_TCC60-1 nil 3582054498 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (preterm type-eq-decl nil language nil)
     (< const-decl "bool" reals nil) (ord type-decl nil language nil)
     (weight def-decl "nat" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (ord_bot? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
     (<= const-decl "bool" reals nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
      nil)
     (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
     (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
      nil)
     (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
      nil)
     (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
     (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
     (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
      nil)
     (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
      language nil)
     (F const-decl
      "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
      language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (Ïƒ!1 skolem-const-decl "semantic" subst nil)
     (T!1 skolem-const-decl "semantic" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (name formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (interp formula-decl nil language nil))
    nil)) (subst_TCC61 0
           (subst_TCC61-1 nil 3582054498 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (name formula-decl nil language nil))
            nil))
  (subst_TCC62 0
   (subst_TCC62-1 nil 3582054498 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (subst_TCC63 0
           (subst_TCC63-1 nil 3582054498 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (interp formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (name formula-decl nil language nil))
            nil))
  (subst_TCC64 0
   (subst_TCC64-1 nil 3582054498 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (weight def-decl "nat" language nil))
    nil)) (subst_TCC65 0
           (subst_TCC65-1 nil 3582054498 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (OR const-decl "[bool, bool -> bool]" booleans nil)
             (semantic type-decl nil language nil)
             (pretype? const-decl "bool" language nil)
             (preterm? const-decl "bool" language nil)
             (interp? const-decl "bool" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (preterm type-eq-decl nil language nil)
             (< const-decl "bool" reals nil)
             (ord type-decl nil language nil)
             (weight def-decl "nat" language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
              nil)
             (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
             (<= const-decl "bool" reals nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
              language nil)
             (ord_itype? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_itype adt-constructor-decl "(ord_itype?)" language
              nil)
             (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
              language nil)
             (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
              language nil)
             (ord_iconst? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_iconst adt-constructor-decl "(ord_iconst?)" language
              nil)
             (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
              language nil)
             (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
              language nil)
             (F const-decl
              "(LAMBDA (F: [ord -> nat]): (F(ord_bot) = 0) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (Ïƒ!1 skolem-const-decl "semantic" subst nil)
             (a!1 skolem-const-decl "semantic" subst nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (name formula-decl nil language nil)
             (pretype formula-decl nil language nil)
             (preterm formula-decl nil language nil)
             (interp formula-decl nil language nil))
            nil))
  (subst_TCC66 0
   (subst_TCC66-1 nil 3582054498 ("" (cases-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-decl nil language nil)
     (pretype? const-decl "bool" language nil)
     (preterm? const-decl "bool" language nil)
     (interp? const-decl "bool" language nil)
     (interp formula-decl nil language nil)
     (preterm formula-decl nil language nil)
     (pretype formula-decl nil language nil)
     (name formula-decl nil language nil))
    nil)))

