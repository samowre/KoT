decl: THEORY
BEGIN
  IMPORTING language, subtype, inductions
  IMPORTING subst

  Γ, Δ, Θ: VAR context
  A, B, T: VAR pretype
  r, s, t: VAR symbol
  n, m: VAR name
  x, y: VAR nat
  a, b, f, g: VAR preterm
  σ, τ: VAR interp
  S: VAR syntaxic
  M: VAR map

  % Function kind as informally defined at the begining of chapter 2.
  % Returns the kind of the symbol s
  % among CONSTANT, TYPE, THEORY
  kind(Γ)(s: (dsymbols(Γ))): RECURSIVE kind =
    COND
      (ktype_decl?(Γ) OR ktype_def?(Γ) OR ktype_ext?(Γ)) AND s(Γ) = s -> KTYPE
    , (kconst_decl?(Γ) OR kconst_def?(Γ) OR kconst_ext?(Γ)) AND s(Γ) = s -> KCONST
    , pretheory?(Γ) AND s(Γ) = s -> KTHEORY
    , ELSE -> kind(rest(Γ))(s)
    ENDCOND
  MEASURE w(Γ)



  % Checks that s has a definition in Γ
  % (such as s: TYPE = def_type, or s: T = def_term)
  definition?(Γ)(s: (dsymbols(Γ))): RECURSIVE bool =
    COND
      kvar?(Γ) -> definition?(rest(Γ))(s)
    , ELSE -> IF s = s(Γ) THEN (ktype_def?(Γ) OR kconst_def?(Γ) OR ktheory?(Γ))
              ELSE definition?(rest(Γ))(s) ENDIF
    ENDCOND
  MEASURE w(Γ)

  % dtheory?(Γ, s: THEORY ..., Δ)(s) = TRUE
  dtheory?(Γ)(s: (dsymbols(Γ))): RECURSIVE bool =
    COND
      kvar?(Γ) -> dtheory?(rest(Γ))(s)
    , ELSE -> IF s = s(Γ) THEN ktheory?(Γ)
              ELSE dtheory?(rest(Γ))(s) ENDIF
    ENDCOND
  MEASURE w(Γ)
  dtheory_is_definition: THEOREM FORALL (s: (dsymbols(Γ))):
    dtheory?(Γ)(s) IMPLIES definition?(Γ)(s)

  % dtype?(Γ, s: TYPE = ..., Δ)(s) = TRUE
  dtype?(Γ)(s: (dsymbols(Γ))): RECURSIVE bool =
    COND
      kvar?(Γ) -> dtype?(rest(Γ))(s)
    , ELSE -> IF s = s(Γ) THEN ktype_def?(Γ)
              ELSE dtype?(rest(Γ))(s) ENDIF
    ENDCOND
  MEASURE w(Γ)
  dtype_is_definition: THEOREM FORALL (s: (dsymbols(Γ))):
    dtype?(Γ)(s) IMPLIES definition?(Γ)(s)

  % dconst?(Γ, s: T = ..., Δ)(s) = TRUE
  dconst?(Γ)(s: (dsymbols(Γ))): RECURSIVE bool =
    COND
      kvar?(Γ) -> dconst?(rest(Γ))(s)
    , ELSE -> IF s = s(Γ) THEN kconst_def?(Γ)
              ELSE dconst?(rest(Γ))(s) ENDIF
    ENDCOND
  MEASURE w(Γ)
  dconst_is_definition: THEOREM FORALL (s: (dsymbols(Γ))):
    dconst?(Γ)(s) IMPLIES definition?(Γ)(s)


  AUTO_REWRITE definition?, dtheory?, dtype?, dconst?
  AUTO_REWRITE dtheory_is_definition, dtype_is_definition, dconst_is_definition
%  AUTO_REWRITE+ kind

  % Function definition as informally defined at the begining of section 2.5
  % definition(Γ, s: TYPE = T, Δ)(s) = T
  % definition(Γ, s: T = a, Δ)(s) = a
  % definition(Γ, s: THEORY BEGIN Θ END, Δ)(s) = Θ
  definition(Γ)(s: (definition?(Γ))): RECURSIVE expr =
    CASES Γ OF
      ktype_def(t, T, Δ): IF t = s THEN T ELSE definition(Δ)(s) ENDIF
    , kconst_def(t, T, a, Δ): IF t = s THEN a ELSE definition(Δ)(s) ENDIF
    , ktheory(t, Θ, Δ): IF t = s THEN Θ ELSE definition(Δ)(s) ENDIF
      ELSE definition(rest(Γ))(s)
    ENDCASES
  MEASURE w(Γ)
  AUTO_REWRITE definition
  definition_dtype: RECURSIVE JUDGEMENT
    definition(Γ)(s: (dtype?(Γ))) HAS_TYPE pretype
  definition_dconst: RECURSIVE JUDGEMENT
    definition(Γ)(s: (dconst?(Γ))) HAS_TYPE preterm
  definition_dtheory: RECURSIVE JUDGEMENT
    definition(Γ)(s: (dtheory?(Γ))) HAS_TYPE pretheory

  % If Γ is closed (ie uses only symbols declared in Γ) then
  % definition(Γ)(s) only uses symbols that have been previously
  % declared in Γ
  symbols_definition: THEOREM FORALL ((Δ | closed?(Γ)(Δ)), s: (definition?(Δ))):
    symbols(definition(Δ)(s)) ⊂ dsymbols(find(Δ)(s)) ∪ dsymbols(Γ)
  % Same for vars
  vars_definition: THEOREM FORALL ((Δ | closed?(Γ)(Δ)), s: (definition?(Δ))):
    vars(definition(Δ)(s)) ⊂ { x | x < dvars(find(Δ)(s)) + dvars(Γ) }
  % closed_definition = symbols_definition AND vars_definition
  closed_definition: THEOREM FORALL ((Δ | closed?(Γ)(Δ)), s: (definition?(Δ))):
    closed?(Γ ++ find(Δ)(s))(definition(Δ)(s))
    
  % A theory does not define variables
  dvars_definition: THEOREM FORALL (s: (dtheory?(Γ))):
    dvars(definition(Γ)(s)) = 0
  uniques_definition: THEOREM FORALL (s: (dtheory?(Γ))):
    uniques?(Γ) IMPLIES uniques?(definition(Γ)(s))

  % Checks that s is a preterm in Γ,
  % i.e appears of the form s: T or s: T = a
  typed?(Γ)(s: (dsymbols(Γ))): RECURSIVE bool =
    COND
      kvar?(Γ) -> typed?(rest(Γ))(s)
    , ELSE -> IF s = s(Γ) THEN (kconst_def?(Γ) OR kconst_decl?(Γ) OR kconst_ext?(Γ))
              ELSE typed?(rest(Γ))(s) ENDIF
    ENDCOND
  MEASURE w(Γ)
  AUTO_REWRITE typed?

  % Function type as informally defined at the begining of chapter 2.
  % type(Γ, s: T, Δ) = T
  % type(Γ, s: T = a, Δ) = T
  type_(Γ)(s: (typed?(Γ))): RECURSIVE pretype =
    CASES Γ OF
      kconst_def(t, T, a, Δ): IF t = s THEN T ELSE type_(Δ)(s) ENDIF
    , kconst_decl(t, T, Δ): IF t = s THEN T ELSE type_(Δ)(s) ENDIF
    , kconst_ext(t, T, Δ): IF t = s THEN T ELSE type_(Δ)(s) ENDIF
      ELSE type_(rest(Γ))(s)
    ENDCASES
  MEASURE w(Γ)
  AUTO_REWRITE type_

  % If Γ is closed, then type(Γ)(s) only uses symbols
  % that have been previously declared in Γ
  symbols_type: THEOREM FORALL (Δ | closed?(Γ)(Δ), s: (typed?(Δ))):
    symbols(type_(Δ)(s)) ⊂ dsymbols(find(Δ)(s)) ∪ dsymbols(Γ)
  % same for vars
  vars_type: THEOREM FORALL (Δ | closed?(Γ)(Δ), s: (typed?(Δ))):
    vars(type_(Δ)(s)) ⊂ { x | x < dvars(find(Δ)(s)) + dvars(Γ) }
  % closed_type = symbols_type AND vars_type
  closed_type: THEOREM FORALL (Δ | closed?(Γ)(Δ), s: (typed?(Δ))):
    closed?(Γ ++ find(Δ)(s))(type_(Δ)(s))


  % If the symbol t is used in the definition of symbol s
  % then t is defined before s, 
  % hence pos(Γ)(t) < pos(Γ)(s)
  pos_definition: THEOREM FORALL (Δ | (closed?(Γ)(Δ)), s: (definition?(Δ))):
    FORALL (t: (symbols(definition(Δ)(s)))):
      t ∈ dsymbols(find(Δ)(s)) IMPLIES pos(find(Δ)(s), t) < pos(Δ, s)  
  % Same in the type of symbol s
  pos_type: THEOREM FORALL (Δ | (closed?(Γ)(Δ)), s: (typed?(Δ))):
    FORALL (t: (symbols(type_(Δ)(s)))):
      t ∈ dsymbols(find(Δ)(s)) IMPLIES pos(find(Δ)(s), t) < pos(Δ, s)
END decl
