decl: THEORY
BEGIN
  IMPORTING language, subtype, inductions
  IMPORTING subst

  Γ, Δ, Θ: VAR context
  A, B, T: VAR pretype
  r, s, t: VAR symbol
  n, m: VAR name
  x, y: VAR nat
  a, b, f, g: VAR preterm
  σ, τ: VAR interp
  S: VAR syntaxic
  M: VAR map

  % Function kind as informally defined at the begining of chapter 2.
  % Returns the kind of the symbol s
  % among CONSTANT, TYPE, THEORY
  kind(Γ)(s: (dsymbols(Γ))): RECURSIVE kind =
    CASES Γ OF
      ktype_decl(r, Δ): IF s = r THEN KTYPE ELSE kind(Δ)(s) ENDIF
   ,  ktype_def(r, T, Δ): IF s = r THEN KTYPE ELSE kind(Δ)(s) ENDIF
   ,  ktype_ext(r, Δ): IF s = r THEN KTYPE ELSE kind(Δ)(s) ENDIF
   ,  kconst_decl(r, T, Δ): IF s = r THEN KCONST ELSE kind(Δ)(s) ENDIF
   ,  kconst_def(r, T, a, Δ): IF s = r THEN KCONST ELSE kind(Δ)(s) ENDIF
   ,  kconst_ext(r, T, Δ): IF s = r THEN KCONST ELSE kind(Δ)(s) ENDIF
   ,  ktheory(r, Θ, Δ): IF s = r THEN KTHEORY ELSE kind(Δ)(s) ENDIF
   ,  kvar(T, Δ): kind(Δ)(s)
    ENDCASES
  MEASURE w(Γ)
  AUTO_REWRITE kind
  kind_concat: THEOREM s ∈ dsymbols(Γ ++ Δ) IMPLIES
    kind(Γ ++ Δ)(s) = IF s ∈ dsymbols(Δ) THEN kind(Δ)(s)
    	      	      ELSE kind(Γ)(s) ENDIF
  AUTO_REWRITE kind_concat
  kind_extract: THEOREM s ∈ dsymbols(Γ) IMPLIES
   kind(Γ)(s) = kind(extract(Γ, s))(s)

  % Same for interpretations
  ikind(σ)(s: (isymbols(σ))): RECURSIVE kind = 
    CASES σ OF
      itype(r, T, τ): IF s = r THEN KTYPE ELSE ikind(τ)(s) ENDIF
    ,  iconst(r, a, τ): IF s = r THEN KCONST ELSE ikind(τ)(s) ENDIF
    ENDCASES
  MEASURE w(σ)
  AUTO_REWRITE ikind
  % TODO : see if ikind_concat and ikind_extract are needed
  % PS : extract does not even exist for interp 


  % Checks that s has a definition in Γ
  % (such as s: TYPE = def_type, or s: T = def_term)
  definition?(Γ)(s: (dsymbols(Γ))): RECURSIVE bool =
    COND
      kvar?(Γ) -> definition?(rest(Γ))(s)
    , ELSE -> IF s = s(Γ) THEN (ktype_def?(Γ) OR kconst_def?(Γ) OR ktheory?(Γ))
              ELSE definition?(rest(Γ))(s) ENDIF
    ENDCOND
  MEASURE w(Γ)
  definition?_concat: THEOREM
    s ∈ dsymbols(Γ ++ Δ) IMPLIES
    definition?(Γ ++ Δ)(s) = IF s ∈ dsymbols(Δ) THEN definition?(Δ)(s)
    		     	     ELSE definition?(Γ)(s) ENDIF
  AUTO_REWRITE definition?_concat
    

  % dtheory?(Γ, s: THEORY ..., Δ)(s) = TRUE
  dtheory?(Γ)(s: (dsymbols(Γ))): RECURSIVE bool =
    COND
      kvar?(Γ) -> dtheory?(rest(Γ))(s)
    , ELSE -> IF s = s(Γ) THEN ktheory?(Γ)
              ELSE dtheory?(rest(Γ))(s) ENDIF
    ENDCOND
  MEASURE w(Γ)
  dtheory_is_definition: THEOREM FORALL (s: (dsymbols(Γ))):
    dtheory?(Γ)(s) IFF definition?(Γ)(s) AND KTHEORY?(kind(Γ)(s))

  % dtype?(Γ, s: TYPE = ..., Δ)(s) = TRUE
  dtype?(Γ)(s: (dsymbols(Γ))): RECURSIVE bool =
    COND
      kvar?(Γ) -> dtype?(rest(Γ))(s)
    , ELSE -> IF s = s(Γ) THEN ktype_def?(Γ)
              ELSE dtype?(rest(Γ))(s) ENDIF
    ENDCOND
  MEASURE w(Γ)
  dtype_is_definition: THEOREM FORALL (s: (dsymbols(Γ))):
    dtype?(Γ)(s) IFF definition?(Γ)(s) AND KTYPE?(kind(Γ)(s))

  % dconst?(Γ, s: T = ..., Δ)(s) = TRUE
  dconst?(Γ)(s: (dsymbols(Γ))): RECURSIVE bool =
    COND
      kvar?(Γ) -> dconst?(rest(Γ))(s)
    , ELSE -> IF s = s(Γ) THEN kconst_def?(Γ)
              ELSE dconst?(rest(Γ))(s) ENDIF
    ENDCOND
  MEASURE w(Γ)
  dconst_is_definition: THEOREM FORALL (s: (dsymbols(Γ))):
    dconst?(Γ)(s) IFF definition?(Γ)(s) AND KCONST?(kind(Γ)(s))


  AUTO_REWRITE definition?, dtheory?, dtype?, dconst?
  AUTO_REWRITE dtheory_is_definition, dtype_is_definition, dconst_is_definition


  % Function definition as informally defined at the begining of section 2.5
  % definition(Γ, s: TYPE = T, Δ)(s) = T
  % definition(Γ, s: T = a, Δ)(s) = a
  % definition(Γ, s: THEORY BEGIN Θ END, Δ)(s) = Θ
  definition(Γ)(s: (definition?(Γ))): RECURSIVE expr =
    CASES Γ OF
      ktype_def(t, T, Δ): IF t = s THEN T ELSE definition(Δ)(s) ENDIF
    , kconst_def(t, T, a, Δ): IF t = s THEN a ELSE definition(Δ)(s) ENDIF
    , ktheory(t, Θ, Δ): IF t = s THEN Θ ELSE definition(Δ)(s) ENDIF
      ELSE definition(rest(Γ))(s)
    ENDCASES
  MEASURE w(Γ)
  AUTO_REWRITE definition
  definition_dtype: RECURSIVE JUDGEMENT
    definition(Γ)(s: (dtype?(Γ))) HAS_TYPE pretype
  definition_dconst: RECURSIVE JUDGEMENT
    definition(Γ)(s: (dconst?(Γ))) HAS_TYPE preterm
  definition_dtheory: RECURSIVE JUDGEMENT
    definition(Γ)(s: (dtheory?(Γ))) HAS_TYPE pretheory

  % The same for interpretations
  idefinition(σ)(s: (isymbols(σ))): RECURSIVE expr = 
    CASES σ OF
      itype(r, T, τ): IF s = r THEN T ELSE idefinition(τ)(s) ENDIF
    , iconst(r, a, τ): IF s = r THEN a ELSE idefinition(τ)(s) ENDIF
    ENDCASES
  MEASURE w(σ)
  AUTO_REWRITE idefinition
  % TODO : see if we need idefinition_concat

  % Checks that s is a preterm in Γ,
  % i.e appears of the form s: T or s: T = a
  typed?(Γ)(s: (dsymbols(Γ))): RECURSIVE bool =
    COND
      kvar?(Γ) -> typed?(rest(Γ))(s)
    , ELSE -> IF s = s(Γ) THEN (kconst_def?(Γ) OR kconst_decl?(Γ) OR kconst_ext?(Γ))
              ELSE typed?(rest(Γ))(s) ENDIF
    ENDCOND
  MEASURE w(Γ)
  AUTO_REWRITE typed?
  typed_concat: THEOREM
    s ∈ dsymbols(Γ ++ Δ) IMPLIES
    typed?(Γ ++ Δ)(s) = IF s ∈ dsymbols(Δ) THEN typed?(Δ)(s)
    	     	      	ELSE typed?(Γ)(s) ENDIF
    AUTO_REWRITE typed_concat

  % Function type as informally defined at the begining of chapter 2.
  % type(Γ, s: T, Δ) = T
  % type(Γ, s: T = a, Δ) = T
  type_(Γ)(s: (typed?(Γ))): RECURSIVE pretype =
    CASES Γ OF
      kconst_def(t, T, a, Δ): IF t = s THEN T ELSE type_(Δ)(s) ENDIF
    , kconst_decl(t, T, Δ): IF t = s THEN T ELSE type_(Δ)(s) ENDIF
    , kconst_ext(t, T, Δ): IF t = s THEN T ELSE type_(Δ)(s) ENDIF
      ELSE type_(rest(Γ))(s)
    ENDCASES
  MEASURE w(Γ)
  AUTO_REWRITE type_

  % Theorems on definition and type
  % extract = (〈〉, type, definition)
  symbols_definition_extract: THEOREM 
    s ∈ dsymbols(Γ) AND definition?(Γ)(s) IMPLIES
    symbols(definition(extract(Γ, s))(s)) ⊂ symbols(extract(Γ, s))  
  vars_definition_extract: THEOREM 
    s ∈ dsymbols(Γ) AND definition?(Γ)(s) IMPLIES
    vars(definition(extract(Γ, s))(s)) ⊂ vars(extract(Γ, s))
  symbols_type_extract: THEOREM
    s ∈ dsymbols(Γ) AND typed?(Γ)(s) IMPLIES
    symbols(type_(extract(Γ, s))(s)) ⊂ symbols(extract(Γ, s))
  vars_type_extract: THEOREM
    s ∈ dsymbols(Γ) AND typed?(Γ)(s) IMPLIES
    vars(type_(extract(Γ, s))(s)) ⊂ vars(extract(Γ, s))
      
  % definition and type with concat
  definition_concat: THEOREM 
    s ∈ dsymbols(Γ ++ Δ) AND definition?(Γ ++ Δ)(s) IMPLIES
    definition(Γ ++ Δ)(s) = IF s ∈ dsymbols(Δ) THEN definition(Δ)(s) 
    		    	    ELSE definition(Γ)(s) ENDIF
  AUTO_REWRITE definition_concat
  definition_extract: THEOREM 
    s ∈ dsymbols(Γ) AND definition?(Γ)(s) IMPLIES
    definition(Γ)(s) = definition(extract(Γ, s))(s)

  % If Γ is closed (ie uses only symbols/vars declared in Γ) then
  % definition(Γ)(s) only uses symbols/vars that have been previously
  % declared in Γ
  symbols_definition: THEOREM 
    s ∈ dsymbols(Δ) AND definition?(Δ)(s) IMPLIES
    symbols(definition(Δ)(s)) ⊂ symbols(Δ) ∪ dsymbols(find(Δ)(s)) 
  vars_definition: THEOREM 
    s ∈ dsymbols(Δ) AND definition?(Δ)(s) IMPLIES
    (vars(definition(Δ)(s)) - dvars(find(Δ)(s))) ⊂ vars(Δ)
  closed_definition: THEOREM FORALL ((Δ | closed?(Γ)(Δ)), s: (definition?(Δ))):
    closed?(Γ ++ find(Δ)(s))(definition(Δ)(s))
    
  % A theory does not define variables, and defines
  % symbols only once
  dvars_definition: THEOREM FORALL (s: (dtheory?(Γ))):
    dvars(definition(Γ)(s)) = 0
  uniques_definition: THEOREM FORALL (s: (dtheory?(Γ))):
    uniques?(Γ) IMPLIES uniques?(definition(Γ)(s))

  type_concat: THEOREM 
    s ∈ dsymbols(Γ ++ Δ) AND typed?(Γ ++ Δ)(s) IMPLIES
    type_(Γ ++ Δ)(s) = IF s ∈ dsymbols(Δ) THEN type_(Δ)(s)
     	       	       ELSE type_(Γ)(s) ENDIF
  type_extract: THEOREM 
    s ∈ dsymbols(Γ) AND typed?(Γ)(s) IMPLIES 
    type_(Γ)(s) = type_(extract(Γ, s))(s)

  % If Γ is closed, then type(Γ)(s) only uses symbols/vars
  % that have been previously declared in Γ
  symbols_type: THEOREM
    s ∈ dsymbols(Δ) AND typed?(Δ)(s) IMPLIES
    symbols(type_(Δ)(s)) ⊂ symbols(Δ) ∪ dsymbols(find(Δ)(s))
  vars_type: THEOREM 
    s ∈ dsymbols(Δ) AND typed?(Δ)(s) IMPLIES
    (vars(type_(Δ)(s)) - dvars(find(Δ)(s))) ⊂ vars(Δ)
  closed_type: THEOREM FORALL (Δ | closed?(Γ)(Δ), s: (typed?(Δ))):
    closed?(Γ ++ find(Δ)(s))(type_(Δ)(s))



  % If the symbol t is used in the definition/type of symbol s
  % then t is defined before s, 
  % hence pos(Γ)(t) < pos(Γ)(s)

  %pos_definition: THEOREM FORALL (Δ | (closed?(Γ)(Δ)), s: (definition?(Δ))):
  %  FORALL (t: (symbols(definition(Δ)(s)))):
  %    t ∈ dsymbols(find(Δ)(s)) IMPLIES pos(find(Δ)(s), t) < pos(Δ, s)  
  %pos_type: THEOREM FORALL (Δ | (closed?(Γ)(Δ)), s: (typed?(Δ))):
  %  FORALL (t: (symbols(type_(Δ)(s)))):
  %    t ∈ dsymbols(find(Δ)(s)) IMPLIES pos(find(Δ)(s), t) < pos(Δ, s)
END decl
