language: THEORY
BEGIN
  %% The type `symbol' represent the underlying type used to represent symbols.
  %% This will typically be strings representing the fully-qualified names of
  %% real PVS.
  %% We also define here the external symbols PVS needs to work.
  symbol: TYPE+       % string
  sbool: symbol       % "bool"
  strue: symbol       % "TRUE"
  sfalse: symbol      % "FALSE"
  sboolop: symbol     % "boolop"
  snot: symbol        % "¬"
  sor: symbol         % "∨"
  sand: symbol        % "∧"
  ssupset: symbol     % "⊃"
  sT: symbol          % "T"
  sequalities: symbol % "equalities"
  sequal: symbol      % "%"


  %% The type `semantic' is a big union type representing every element of the
  %% idealized PVS language – pretypes, preterms, contexts, etc.
  %% This datatype has no subtypes, instead they are computed by the `prekind'
  %% function defined later on, that will ensure the well-formedness of the
  %% constructors (e.g., the `supertype' accessor of `subtype' will actually
  %% be enforced to be a pretype, etc.).
  %% This approach has several advantages here:
  %%  - We can easily express that some constructors have different subtypes,
  %%    for instance 〈〉 is both a context and a context with only constant and
  %%    types declarations and definitions (i.e., a pretheory).
  %%  - The actual OR of the constructors contained in the type is almost never
  %%    appearing in the proofs, which makes it possible to use strategies like
  %%    ``bddsimp'' without blowing up PVS.
  semantic: DATATYPE
  BEGIN
    %% Names
    % s
    symbol(s: symbol): symbol?
    % m {{ interp }}.s
    dot(m: symbol, interp: semantic, s: symbol): dot?

    %% Types.
    %% Note that they all act as λ-binders for their second argument.
    % [i: dom → range]
    fun(dom: semantic, range: semantic): fun?
    % [i: left, right]
    prod(left: semantic, right: semantic): prod?
    % { x: supertype | pred }
    subtype(supertype: semantic, pred: semantic): subtype?

    %% Terms
    %% Only `lam' act as a λ-binder for its second argument.
    % i (De Bruijn variable)
    v(i: nat): var?
    % op arg
    app(op: semantic, arg: semantic): app?
    % λ(x: btype): body
    lam(btype: semantic, body: semantic): lam?
    % (left, right)
    pair(left: semantic, right: semantic): pair?
    % p₁ arg
    lproj(arg: semantic): lproj?
    % p₂ arg
    rproj(arg: semantic): rproj?

    %% Contexts
    %% They are unfortunately represented backwards w.r.t the semantic document.
    % Empty Context – flattening of the list datatype for contexts
    〈〉: empty?
    % rest, s: TYPE
    ktype_decl(s: symbol, rest: semantic): ktype_decl?
    % rest, s: TYPE = dtype
    ktype_def(s: symbol, dtype: semantic, rest: semantic): ktype_def?
    ktype_ext(s: symbol, rest: semantic): ktype_ext?
    % rest ↑ 1, 0: VAR dtype
    kvar(dtype: semantic, rest: semantic): kvar?
    % rest, s: dtype
    kconst_decl(s: symbol, dtype: semantic, rest: semantic): kconst_decl?
    % rest, s: dtype = dterm
    kconst_def(s: symbol, dtype: semantic, dterm: semantic, rest: semantic): kconst_def?
    kconst_ext(s: symbol, dtype: semantic, rest: semantic): kconst_ext?
    % rest, s: THEORY dtheory
    ktheory(s: symbol, dtheory: semantic, rest: semantic): ktheory?

    %% Interpretations
    % Empty interpretation – flattening of the list datatype for interpretations
    nil: null?
    % {{ s := dtype, rest }}
    itype(s: symbol, dtype: semantic, rest: semantic): itype?
    %% {{ s := dterm, rest }}
    iconst(s: symbol, dterm: semantic, rest: semantic): iconst?
  END semantic
  CONVERSION+ symbol

  %% TODO: This can probably be removed.
  ord: TYPE = { 
                ord_symbol, ord_dot, ord_fun, ord_prod, ord_subtype,
		ord_v, ord_app, ord_lam, ord_pair, ord_lproj,
		ord_rproj, ord_empty, ord_ktype_decl, ord_ktype_def, ord_kvar,
		ord_itype, ord_iconst, ord_nil, ord_ktype_ext, ord_kconst_ext,
		ord_kconst_decl, ord_kconst_def, ord_ktheory }

  S: VAR semantic

  weight(F: [ord -> nat])(S): RECURSIVE nat =
    CASES S OF
      symbol(s): F(ord_symbol) + 1,
      dot(s, σ, m): F(ord_dot) + weight(F)(σ) + 1,

      fun(A, B): F(ord_fun) + weight(F)(A) + weight(F)(B) + 1,
      prod(A, B): F(ord_prod) + weight(F)(A) + weight(F)(B) + 1,
      subtype(T, a): F(ord_subtype) + weight(F)(T) + weight(F)(a) + 1,

      v(i): F(ord_v) + 1,
      app(f, a): F(ord_app) + weight(F)(f) + weight(F)(a) + 1,
      lam(T, a): F(ord_lam) + weight(F)(T) + weight(F)(a) + 1,
      pair(a, b): F(ord_pair) + weight(F)(a) + weight(F)(b) + 1,
      lproj(a): F(ord_lproj) + weight(F)(a) + 1,
      rproj(a): F(ord_rproj) + weight(F)(a) + 1,

      〈〉: F(ord_empty) + 1,
      ktype_decl(s, Γ): F(ord_ktype_decl) + weight(F)(Γ) + 1,
      ktype_def(s, T, Γ): F(ord_ktype_def) + weight(F)(T) + weight(F)(Γ) + 1,
      ktype_ext(s, Γ): F(ord_ktype_ext) + weight(F)(Γ) + 1,
      kvar(T, Γ): F(ord_kvar) + weight(F)(T) + weight(F)(Γ) + 1,
      kconst_decl(s, T, Γ): F(ord_kconst_decl) + weight(F)(T) + weight(F)(Γ) + 1,
      kconst_def(s, T, a, Γ): F(ord_kconst_def) + weight(F)(T) + weight(F)(a) + weight(F)(Γ) + 1,
      kconst_ext(s, T, Γ): F(ord_kconst_ext) + weight(F)(T) + weight(F)(Γ) + 1,
      ktheory(s, Δ, Γ): F(ord_ktheory) + weight(F)(Δ) + weight(F)(Γ) + 1,

      nil: F(ord_nil) + 1,
      itype(s, T, σ): F(ord_itype) + weight(F)(T) + weight(F)(σ) + 1,
      iconst(s, a, σ): F(ord_iconst) + weight(F)(a) + weight(F)(σ) + 1
    ENDCASES
  MEASURE S BY <<
  AUTO_REWRITE+ weight

  w_fun?(F: [ord -> nat]): MACRO bool =
    (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
    (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
    (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl))

  F: (w_fun?)
  w: MACRO [semantic -> nat] = weight(F)

  %% Subtype predicates generated from the `prekind' function.
  name?, preterm?, pretype?, interp?: [semantic -> bool]
  context?, map?, pretheory?, syntaxic?, expr?: [semantic -> bool]
  nonempty?, nonempty_context?, nonempty_interp?: [semantic -> bool]
  %% Subtypes associated with the subtype predicates
  name: TYPE = (name?)
  preterm: TYPE = (preterm?)
  pretype: TYPE = (pretype?)
  interp: TYPE = (interp?)
  context: TYPE = (context?)
  map: TYPE = (map?)
  pretheory: TYPE = (pretheory?)
  syntaxic: TYPE = (syntaxic?)
  expr: TYPE = (expr?)
  nonempty: TYPE = (nonempty?)
  nonempty_context: TYPE = (nonempty_context?)
  nonempty_interp: TYPE = (nonempty_interp?)

  %% Actual definition of the subtypes predicates as we would have defined them
  %% with mutual recursion.
%  kind: AXIOM
%    kind?(S) = (KTYPE?(S) OR KCONST?(S) OR KVAR?(S) OR KTHEORY?(S))
  name: AXIOM
    name?(S) = CASES S OF
      symbol(s): TRUE,
      dot(m, σ, s): interp?(σ)
      ELSE FALSE
    ENDCASES
  preterm: AXIOM
    preterm?(S) = CASES S OF
      symbol(s): TRUE,
      dot(m, σ, s): interp?(σ),
      v(i): TRUE,
      app(f, a): preterm?(f) AND preterm?(a),
      lam(T, a): pretype?(T) AND preterm?(a),
      pair(a, b): preterm?(a) AND preterm?(b),
      lproj(a): preterm?(a),
      rproj(a): preterm?(a)
      ELSE FALSE
    ENDCASES
  pretype: AXIOM
    pretype?(S) = CASES S OF
      symbol(s): TRUE,
      dot(m, σ, s): interp?(σ),
      fun(A, B): pretype?(A) AND pretype?(B),
      prod(A, B): pretype?(A) AND pretype?(B),
      subtype(T, a): pretype?(T) AND preterm?(a)
      ELSE FALSE
    ENDCASES
  interp: AXIOM
    interp?(S) = CASES S OF
      nil: TRUE,
      itype(s, T, σ): pretype?(T) AND interp?(σ),
      iconst(s, a, σ): preterm?(a) AND interp?(σ)
      ELSE FALSE
    ENDCASES
  context: AXIOM
    context?(S) = CASES S OF
      〈〉: TRUE,
      ktype_decl(s, Δ): context?(Δ),
      ktype_def(s, T, Δ): pretype?(T) AND context?(Δ),
      ktype_ext(s, Δ): context?(Δ),
      kvar(T, Δ): pretype?(T) AND context?(Δ),
      kconst_decl(s, T, Δ): pretype?(T) AND context?(Δ),
      kconst_def(s, T, a, Δ): pretype?(T) AND preterm?(a) AND context?(Δ),
      kconst_ext(s, T, Δ): pretype?(T) AND context?(Δ),
      ktheory(s, Θ, Δ): pretheory?(Θ) AND context?(Δ)
      ELSE FALSE
    ENDCASES
  map: AXIOM
    map?(S) = CASES S OF
       〈〉: TRUE,
       ktype_decl(s, Δ): context?(Δ),
       ktype_def(s, T, Δ): pretype?(T) AND context?(Δ),
       ktype_ext(s, Δ): context?(Δ),
       kvar(T, Δ): pretype?(T) AND context?(Δ),
       kconst_decl(s, T, Δ): pretype?(T) AND context?(Δ),
       kconst_def(s, T, a, Δ): pretype?(T) AND preterm?(a) AND context?(Δ),
       kconst_ext(s, T, Δ): pretype?(T) AND context?(Δ),
       ktheory(s, Θ, Δ): pretheory?(Θ) AND context?(Δ),
       nil: TRUE,
       itype(s, T, σ): pretype?(T) AND interp?(σ),
       iconst(s, a, σ): preterm?(a) AND interp?(σ)
       ELSE FALSE
     ENDCASES
  pretheory: AXIOM
    pretheory?(S) = CASES S OF
      〈〉: TRUE,
      ktype_decl(s, Δ): pretheory?(Δ),
      ktype_def(s, T, Δ): pretype?(T) AND pretheory?(Δ),
      ktype_ext(s, Δ): pretheory?(Δ),
      kconst_decl(s, T, Δ): pretype?(T) AND pretheory?(Δ),
      kconst_def(s, T, a, Δ): pretype?(T) AND preterm?(a) AND pretheory?(Δ),
      kconst_ext(s, T, Δ): pretype?(T) AND pretheory?(Δ)
      ELSE FALSE
    ENDCASES
  syntaxic: AXIOM
    syntaxic?(S) =
      (preterm?(S) OR pretype?(S) OR context?(S) OR
       pretheory?(S) OR interp?(S) OR name?(S))
  expr: AXIOM
    expr?(S) = (interp?(S) OR preterm?(S) OR pretype?(S))
  nonempty: AXIOM
    nonempty?(S) = COND
      ktype_decl?(S) -> context?(S),
      ktype_def?(S) -> context?(S),
      ktype_ext?(S) -> context?(S),
      kvar?(S) -> context?(S),
      kconst_decl?(S) -> context?(S),
      kconst_def?(S) -> context?(S),
      kconst_ext?(S) -> context?(S),
      ktheory?(S) -> context?(S),
      itype?(S) -> interp?(S),
      iconst?(S) -> interp?(S),
      ELSE -> FALSE
    ENDCOND
  nonempty_context: AXIOM
    nonempty_context?(S) = COND
      ktype_decl?(S) -> context?(S),
      ktype_def?(S) -> context?(S),
      ktype_ext?(S) -> context?(S),
      kvar?(S) -> context?(S),
      kconst_decl?(S) -> context?(S),
      kconst_def?(S) -> context?(S),
      kconst_ext?(S) -> context?(S),
      ktheory?(S) -> context?(S),
      ELSE -> FALSE
    ENDCOND
  nonempty_interp: AXIOM
    nonempty_interp?(S) = COND
      itype?(S) -> interp?(S),
      iconst?(S) -> interp?(S),
      ELSE -> FALSE
    ENDCOND

  AUTO_REWRITE+ name, nonempty_interp, nonempty_context, pretheory
  AUTO_REWRITE+ pretype, preterm, interp, nonempty, context
  AUTO_REWRITE+ expr, map
  AUTO_REWRITE+ syntaxic

  % Variable declaration
  Γ, Δ, Θ: VAR context
  A, B, T: VAR pretype
  r, s: VAR symbol
  n, m: VAR name
  x, y: VAR nat
  a, b, f, g: VAR preterm
  σ: VAR interp

  knamed?(Γ: semantic): MACRO bool =
    ktype_def?(Γ) OR ktype_decl?(Γ) OR kconst_def?(Γ) OR
    kconst_decl?(Γ) OR ktheory?(Γ) OR ktype_ext?(Γ) OR
    kconst_ext?(Γ)

  % Readable-ish constructor definitions
  ;→(A, B): MACRO pretype = fun(A, B)
  ;⌈⌉(T: (fun?)): MACRO (fun?) = T
  ;⌈⌉(A, B): MACRO pretype = prod(A, B)
  ;Λ(T)(a): MACRO preterm = lam(T, a)
  ;〈〉(a, b): MACRO preterm = pair(a, b)
  app_preterm(a)(b): MACRO preterm = app(a, b) % TODO: is this really useful?
  CONVERSION+ app_preterm

  % Base symbols that should appear in almost every context
  bool_: MACRO pretype = sbool
  TRUE_: MACRO preterm = strue
  FALSE_: MACRO preterm = sfalse
  boolop_: MACRO pretype = sboolop
  ;¬(a): MACRO preterm = app(snot, a)
  ;∨(a, b): MACRO preterm = app(sor, 〈 a, b 〉)
  % ;⋁(l: list[preterm]): RECURSIVE preterm = % TODO: is this really useful?
  %   CASES l OF
  %     null: FALSE_,
  %     cons(x, t):
  %       IF null?(t) THEN x ELSE x ∨ ⋁(t) ENDIF
  %   ENDCASES
  % MEASURE length(l)
  ;∧(a, b): MACRO preterm = app(sand, 〈 a, b 〉)
  % ;⋀(l: list[preterm]): RECURSIVE preterm = % TODO: is this really useful?
  %   CASES l OF
  %     null: TRUE_,
  %     cons(x, t):
  %       IF null?(t) THEN x ELSE x ∧ ⋀(t) ENDIF
  %   ENDCASES
  % MEASURE length(l)
  ;⊃(a, b): MACRO preterm = app(ssupset, 〈 a, b 〉)
  ;≐(a, b)(A): MACRO preterm =
  % equalities[A].=(a, b)
    app(dot(sequalities, itype(sT, A, nil), sequal),
        〈 a, b 〉)
  forall_(T, a): MACRO preterm =
    (Λ(T)(a) ≐ Λ(T)(TRUE_))(⌈ T → bool_ ⌉)
  forall_(T, (as_: list[preterm])): MACRO list[preterm] =
    map(LAMBDA a: forall_(T, a))(as_)
  exists_(T, a): MACRO preterm =
    ¬forall_(T, ¬a)
  exists_(T, (as_: list[preterm])): MACRO list[preterm] =
    map(LAMBDA a: exists_(T, a))(as_)


  keyword: DATATYPE
  BEGIN
    % Used to represent a failure – flattening of the lift datatype
    ⊥: undefined?

    %% Keywords
    KTYPE: KTYPE?
    KCONST: KCONST?
    KVAR: KVAR?
    KTHEORY: KTHEORY?
    KCONTEXT: KCONTEXT?
    KTERM(TYPEOF: pretype): KTERM?
  END keyword
END language

%   % This allows to write
%   % 〈 Γ, KVAR ≎ T) 〉      for Γ, 0: VAR T
%   % 〈 Γ, s ≎ T 〉          for Γ, s: T
%   % 〈 Γ, s ≎ KTYPE 〉      for Γ, s: TYPE
%   % 〈 Γ, s ≎ (KTYPE, T) 〉 for Γ, s: TYPE = T
%   ;≎(kvar: (KVAR?), T)(Γ): context =
%     kvar(T, Γ)
%   ;≎(s, (typ: [(KTYPE?), pretype]))(Γ): context =
%     ktype_def(s, typ`2, Γ)
%   ;≎(s, (typ: semantic | KTYPE?(typ) OR pretype(typ)))(Γ): context =
%     IF KTYPE?(typ)
%       THEN ktype_decl(s, Γ)
%       ELSE kconst_decl(s, typ, Γ)
%     ENDIF
%   ;〈〉(Γ, (f: [context -> context])): context =
%     f(Γ)

% END language
