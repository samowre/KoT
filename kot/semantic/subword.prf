(subword
 (decls_TCC1 0
  (decls_TCC1-1 nil 3583090881 ("" (subtype-tcc) nil nil)
   ((syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (decls_TCC2 0
  (decls_TCC2-1 nil 3583090881 ("" (subtype-tcc) nil nil)
   ((syntaxic formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (decls_TCC3 0
  (decls_TCC3-1 nil 3583090881 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (decls_TCC4 0
  (decls_TCC4-1 nil 3583090881 ("" (subtype-tcc) nil nil)
   ((nonempty_context formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (decls_TCC5 0
  (decls_TCC5-1 nil 3583090881 ("" (subtype-tcc) nil nil)
   ((syntaxic formula-decl nil language nil)
    (nonempty_context formula-decl nil language nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (decls_TCC6 0
  (decls_TCC6-1 nil 3583090881
   ("" (subtype-tcc)
    (("1" (rewrite "preterm") (("1" (grind) nil nil)) nil)
     ("2" (use "nonempty_context_when_preterm")
      (("2" (rewrite "pretype") (("2" (grind) nil nil)) nil)) nil)
     ("3" (use "nonempty_context_when_pretype")
      (("3" (grind)
        (("3" (rewrite "context") (("3" (grind) nil nil)) nil)) nil))
      nil)
     ("4" (rewrite "pretheory" -) (("4" (grind) nil nil)) nil)
     ("5" (rewrite "interp") (("5" (grind) nil nil)) nil)
     ("6" (rewrite "name") (("6" (grind) nil nil)) nil))
    nil)
   ((syntaxic formula-decl nil language nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonempty_context formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (nonempty_context_when_preterm judgement-tcc nil subtype nil)
    (context formula-decl nil language nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (nonempty_context_when_pretype judgement-tcc nil subtype nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil))
   nil))
 (decls_TCC7 0
  (decls_TCC7-1 nil 3583090881
   ("" (termination-tcc)
    (("1" (grind)
      (("1" (rewrite "preterm") (("1" (grind) nil nil)) nil)) nil)
     ("2" (rewrite "nonempty_context" -) (("2" (grind) nil nil)) nil)
     ("3" (rewrite "nonempty_context" -) (("3" (grind) nil nil)) nil)
     ("4" (rewrite "nonempty_context" -) (("4" (grind) nil nil)) nil)
     ("5" (rewrite "interp") (("5" (grind) nil nil)) nil)
     ("6" (rewrite "name") (("6" (grind) nil nil)) nil))
    nil)
   ((syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (syntaxic formula-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (preterm formula-decl nil language nil)
    (nonempty_context formula-decl nil language nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil))
   nil))
 (decls_TCC8 0
  (decls_TCC8-1 nil 3583090881 ("" (cond-disjoint-tcc) nil nil)
   ((syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (prec_TCC1 0
  (prec_TCC1-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC2 0
  (prec_TCC2-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC3 0
  (prec_TCC3-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (prec_TCC4 0
  (prec_TCC4-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC5 0
  (prec_TCC5-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (prec_TCC6 0
  (prec_TCC6-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC7 0
  (prec_TCC7-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC8 0
  (prec_TCC8-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC9 0
  (prec_TCC9-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC10 0
  (prec_TCC10-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC11 0
  (prec_TCC11-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC12 0
  (prec_TCC12-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC13 0
  (prec_TCC13-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prec_TCC14 0
  (prec_TCC14-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC15 0
  (prec_TCC15-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC16 0
  (prec_TCC16-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC17 0
  (prec_TCC17-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (prec_TCC18 0
  (prec_TCC18-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC19 0
  (prec_TCC19-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (prec_TCC20 0
  (prec_TCC20-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC21 0
  (prec_TCC21-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC22 0
  (prec_TCC22-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC23 0
  (prec_TCC23-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC24 0
  (prec_TCC24-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC25 0
  (prec_TCC25-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC26 0
  (prec_TCC26-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC27 0
  (prec_TCC27-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC28 0
  (prec_TCC28-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC29 0
  (prec_TCC29-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC30 0
  (prec_TCC30-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prec_TCC31 0
  (prec_TCC31-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC32 0
  (prec_TCC32-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC33 0
  (prec_TCC33-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC34 0
  (prec_TCC34-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC35 0
  (prec_TCC35-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC36 0
  (prec_TCC36-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC37 0
  (prec_TCC37-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prec_TCC38 0
  (prec_TCC38-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC39 0
  (prec_TCC39-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC40 0
  (prec_TCC40-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC41 0
  (prec_TCC41-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC42 0
  (prec_TCC42-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC43 0
  (prec_TCC43-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC44 0
  (prec_TCC44-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prec_TCC45 0
  (prec_TCC45-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC46 0
  (prec_TCC46-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC47 0
  (prec_TCC47-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC48 0
  (prec_TCC48-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC49 0
  (prec_TCC49-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC50 0
  (prec_TCC50-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC51 0
  (prec_TCC51-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prec_TCC52 0
  (prec_TCC52-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC53 0
  (prec_TCC53-1 nil 3582902491 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (member_symbol_when_subword 0
  (member_symbol_when_subword-1 nil 3582905396
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skosimp* :preds? t)
      (("3" (assert)
        (("3" (flatten)
          (("3" (assert)
            (("3" (lift-if)
              (("3" (bddsimp -)
                (("1"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("1" (assert) nil nil)) nil)
                 ("2"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("2" (assert) nil nil)) nil)
                 ("3"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp* :preds? t)
      (("4" (assert)
        (("4" (flatten)
          (("4" (assert)
            (("4" (lift-if)
              (("4" (bddsimp -)
                (("1"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("1" (assert) nil nil)) nil)
                 ("2"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("2" (assert) nil nil)) nil)
                 ("3"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp* :preds? t)
      (("5" (assert)
        (("5" (flatten)
          (("5" (assert)
            (("5" (lift-if)
              (("5" (bddsimp -)
                (("1"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("1" (assert) nil nil)) nil)
                 ("2"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("2" (assert) nil nil)) nil)
                 ("3"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t)
      (("6" (assert)
        (("6" (flatten)
          (("6" (assert)
            (("6" (lift-if)
              (("6" (bddsimp -)
                (("6"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("6" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skosimp* :preds? t)
      (("7" (assert)
        (("7" (flatten)
          (("7" (assert)
            (("7" (lift-if)
              (("7" (bddsimp -)
                (("1"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("1" (assert) nil nil)) nil)
                 ("2"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("2" (assert) nil nil)) nil)
                 ("3"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (skosimp* :preds? t)
      (("8" (assert)
        (("8" (flatten)
          (("8" (assert)
            (("8" (lift-if)
              (("8" (bddsimp -)
                (("1"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("1" (assert) nil nil)) nil)
                 ("2"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("2" (assert) nil nil)) nil)
                 ("3"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (skosimp* :preds? t)
      (("9" (assert)
        (("9" (flatten)
          (("9" (assert)
            (("9" (lift-if)
              (("9" (bddsimp -)
                (("1"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("1" (assert) nil nil)) nil)
                 ("2"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("2" (assert) nil nil)) nil)
                 ("3"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (skosimp* :preds? t)
      (("10" (assert)
        (("10" (flatten)
          (("10" (assert)
            (("10" (lift-if)
              (("10" (bddsimp -)
                (("1"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("1" (assert) nil nil)) nil)
                 ("2"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("2" (assert) nil nil)) nil)
                 ("3"
                  (invoke (inst - "%1" "%2") (~ - "^%1 ∈ %$")
                   (~ - "^%1 ≺ %$"))
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (concat_empty formula-decl nil context nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (context_induction formula-decl nil inductions nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (≺ def-decl "bool" subword nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (context formula-decl nil language nil))
   shostak))
 (member_var_when_subword 0
  (member_var_when_subword-1 nil 3582909678
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skosimp* :preds? t)
      (("3" (assert)
        (("3" (flatten)
          (("3" (assert)
            (("3" (lift-if)
              (("3" (bddsimp -)
                (("1"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("1" (assert) nil nil)) nil)
                 ("2"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("2" (assert) nil nil)) nil)
                 ("3"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp* :preds? t)
      (("4" (assert)
        (("4" (flatten)
          (("4" (assert)
            (("4" (lift-if)
              (("4" (bddsimp -)
                (("1"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("1" (assert) nil nil)) nil)
                 ("2"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("2" (assert) nil nil)) nil)
                 ("3"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp* :preds? t)
      (("5" (assert)
        (("5" (flatten)
          (("5" (assert)
            (("5" (lift-if)
              (("5" (bddsimp -)
                (("1"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("1" (assert) nil nil)) nil)
                 ("2"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("2" (assert) nil nil)) nil)
                 ("3"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t)
      (("6" (assert)
        (("6" (flatten)
          (("6" (assert)
            (("6" (lift-if)
              (("6" (bddsimp -)
                (("6" (inst - "x!1 - 1" "rest(Δ!2)")
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skosimp* :preds? t)
      (("7" (assert)
        (("7" (flatten)
          (("7" (assert)
            (("7" (lift-if)
              (("7" (bddsimp -)
                (("1"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("1" (assert) nil nil)) nil)
                 ("2"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("2" (assert) nil nil)) nil)
                 ("3"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (skosimp* :preds? t)
      (("8" (assert)
        (("8" (flatten)
          (("8" (assert)
            (("8" (lift-if)
              (("8" (bddsimp -)
                (("1"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("1" (assert) nil nil)) nil)
                 ("2"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("2" (assert) nil nil)) nil)
                 ("3"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (skosimp* :preds? t)
      (("9" (assert)
        (("9" (flatten)
          (("9" (assert)
            (("9" (lift-if)
              (("9" (bddsimp -)
                (("1"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("1" (assert) nil nil)) nil)
                 ("2"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("2" (assert) nil nil)) nil)
                 ("3"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (skosimp* :preds? t)
      (("10" (assert)
        (("10" (flatten)
          (("10" (assert)
            (("10" (lift-if)
              (("10" (bddsimp -)
                (("1"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("1" (assert) nil nil)) nil)
                 ("2"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("2" (assert) nil nil)) nil)
                 ("3"
                  (invoke (inst - "%1" "%2") (~ + "^%1 ∈ % IFF %$")
                   (~ - "^%1 ≺ %$"))
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (concat_empty formula-decl nil context nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (context_induction formula-decl nil inductions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (≺ def-decl "bool" subword nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (context formula-decl nil language nil))
   shostak))
 (length_subword 0
  (length_subword-1 nil 3582907781
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (grind)
      (("3" (reveal -1)
        (("3" (inst - "rest(Δ!2)") (("3" (assert) nil nil)) nil)) nil))
      nil)
     ("4" (grind)
      (("4" (reveal -1)
        (("4" (inst - "rest(Δ!2)") (("4" (assert) nil nil)) nil)) nil))
      nil)
     ("5" (grind)
      (("5" (reveal -1)
        (("5" (inst - "rest(Δ!2)") (("5" (assert) nil nil)) nil)) nil))
      nil)
     ("6" (grind)
      (("6" (reveal -1)
        (("6" (inst - "rest(Δ!2)") (("6" (assert) nil nil)) nil)) nil))
      nil)
     ("7" (grind)
      (("7" (reveal -1)
        (("7" (inst - "rest(Δ!2)") (("7" (assert) nil nil)) nil)) nil))
      nil)
     ("8" (grind)
      (("8" (reveal -1)
        (("8" (inst - "rest(Δ!2)") (("8" (assert) nil nil)) nil)) nil))
      nil)
     ("9" (grind)
      (("9" (reveal -1)
        (("9" (inst - "rest(Δ!2)") (("9" (assert) nil nil)) nil)) nil))
      nil)
     ("10" (grind)
      (("10" (reveal -1)
        (("10" (inst - "rest(Δ!2)") (("10" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (concat_empty formula-decl nil context nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (context_induction formula-decl nil inductions nil)
    (length def-decl "nat" context nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (≺ def-decl "bool" subword nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (context formula-decl nil language nil))
   shostak))
 (pos_symbol_subword_TCC1 0
  (pos_symbol_subword_TCC1-1 nil 3582907779
   ("" (subtype-tcc)
    (("" (use member_symbol_when_subword :polarity? t)
      (("" (assert) nil nil)) nil))
    nil)
   ((member_symbol_when_subword formula-decl nil subword nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil))
   nil))
 (pos_symbol_subword 0
  (pos_symbol_subword-1 nil 3582907952
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (grind)
      (("1" (use length_subword) (("1" (assert) nil nil)) nil)
       ("2" (reveal -1)
        (("2" (inst - s!2 "rest(Δ!2)") (("2" (assert) nil nil)) nil))
        nil))
      nil)
     ("4" (grind)
      (("1" (use length_subword) (("1" (assert) nil nil)) nil)
       ("2" (reveal -1)
        (("2" (inst - s!2 "rest(Δ!2)") (("2" (assert) nil nil)) nil))
        nil))
      nil)
     ("5" (grind)
      (("1" (use length_subword) (("1" (assert) nil nil)) nil)
       ("2" (reveal -1)
        (("2" (inst - s!2 "rest(Δ!2)") (("2" (assert) nil nil)) nil))
        nil))
      nil)
     ("6" (grind)
      (("6" (reveal -1)
        (("6" (inst - s!1 "rest(Δ!2)") (("6" (assert) nil nil)) nil))
        nil))
      nil)
     ("7" (grind)
      (("1" (use length_subword) (("1" (assert) nil nil)) nil)
       ("2" (reveal -1)
        (("2" (inst - s!2 "rest(Δ!2)") (("2" (assert) nil nil)) nil))
        nil))
      nil)
     ("8" (grind)
      (("1" (use length_subword) (("1" (assert) nil nil)) nil)
       ("2" (reveal -1)
        (("2" (inst - s!2 "rest(Δ!2)") (("2" (assert) nil nil)) nil))
        nil))
      nil)
     ("9" (grind)
      (("1" (use length_subword) (("1" (assert) nil nil)) nil)
       ("2" (reveal -1)
        (("2" (inst - s!2 "rest(Δ!2)") (("2" (assert) nil nil)) nil))
        nil))
      nil)
     ("10" (grind)
      (("1" (use length_subword) (("1" (assert) nil nil)) nil)
       ("2" (reveal -1)
        (("2" (inst - s!2 "rest(Δ!2)") (("2" (assert) nil nil)) nil))
        nil))
      nil)
     ("11" (skosimp* :preds? t)
      (("11" (use member_symbol_when_subword :polarity? t)
        (("11" (assert) nil nil)) nil))
      nil))
    nil)
   ((member_symbol_when_subword formula-decl nil subword nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (concat_empty formula-decl nil context nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (length_subword formula-decl nil subword nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (context_induction formula-decl nil inductions nil)
    (length def-decl "nat" context nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (context formula-decl nil language nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (≺ def-decl "bool" subword nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil))
   shostak))
 (pos_var_subword_TCC1 0
  (pos_var_subword_TCC1-1 nil 3582907779
   ("" (subtype-tcc)
    (("" (use member_var_when_subword :polarity? t)
      (("" (grind) nil nil)) nil))
    nil)
   ((member_var_when_subword formula-decl nil subword nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil))
   nil))
 (pos_var_subword 0
  (pos_var_subword-1 nil 3582910261
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (grind)
      (("3" (reveal -1)
        (("3" (inst - x!1 "rest(Δ!2)") (("3" (assert) nil nil)) nil))
        nil))
      nil)
     ("4" (grind)
      (("4" (reveal -1)
        (("4" (inst - x!1 "rest(Δ!2)") (("4" (assert) nil nil)) nil))
        nil))
      nil)
     ("5" (grind)
      (("5" (reveal -1)
        (("5" (inst - x!1 "rest(Δ!2)") (("5" (assert) nil nil)) nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t)
      (("6" (bddsimp -6)
        (("1" (expand ≺ -8)
          (("1" (lift-if)
            (("1" (bddsimp -8)
              (("1" (expand pos 1 2)
                (("1" (lift-if)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (split 1)
                          (("1" (use length_subword)
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (auto-rewrite pos)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst - "x!1 - 1" "rest(Δ!2)")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil)
     ("7" (grind)
      (("7" (reveal -1)
        (("7" (inst - x!1 "rest(Δ!2)") (("7" (assert) nil nil)) nil))
        nil))
      nil)
     ("8" (grind)
      (("8" (reveal -1)
        (("8" (inst - x!1 "rest(Δ!2)") (("8" (assert) nil nil)) nil))
        nil))
      nil)
     ("9" (grind)
      (("9" (reveal -1)
        (("9" (inst - x!1 "rest(Δ!2)") (("9" (assert) nil nil)) nil))
        nil))
      nil)
     ("10" (grind)
      (("10" (reveal -1)
        (("10" (inst - x!1 "rest(Δ!2)") (("10" (assert) nil nil)) nil))
        nil))
      nil)
     ("11" (grind)
      (("11" (use member_var_when_subword :polarity? t)
        (("11" (grind) nil nil)) nil))
      nil))
    nil)
   ((member_var_when_subword formula-decl nil subword nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (length_subword formula-decl nil subword nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (concat_empty formula-decl nil context nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (context_induction formula-decl nil inductions nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" context nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (context formula-decl nil language nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (≺ def-decl "bool" subword nil))
   shostak))
 (subword_is_reflexive 0
  (subword_is_reflexive-1 nil 3582902491
   ("" (expand reflexive?)
    (("" (induct-and-simplify "x" :name "context_induction") nil nil))
    nil)
   ((concat_empty formula-decl nil context nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (context_induction formula-decl nil inductions nil)
    (≺ def-decl "bool" subword nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (context formula-decl nil language nil)
    (reflexive? const-decl "bool" relations nil))
   nil))
 (subword_rest_TCC1 0
  (subword_rest_TCC1-1 nil 3583066482 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (nonempty formula-decl nil language nil))
   nil))
 (subword_rest_TCC2 0
  (subword_rest_TCC2-1 nil 3583066482
   ("" (subtype-tcc)
    (("1" (use "well_formed_rest" :polarity? t)
      (("1" (assert) nil nil)) nil)
     ("2" (use "well_formed_rest" :polarity? t)
      (("2" (grind)
        (("2" (use "nonempty_rest")
          (("2" (grind)
            (("2" (rewrite "context") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_formed_context type-eq-decl nil well_formed nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonempty_rest judgement-tcc nil subtype nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (context formula-decl nil language nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonempty formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (subword_rest 0
  (subword_rest-1 nil 3582991881
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (use subword_is_reflexive) (("3" (lazy-grind) nil nil)) nil)
     ("4" (use subword_is_reflexive) (("4" (lazy-grind) nil nil)) nil)
     ("5" (use subword_is_reflexive) (("5" (lazy-grind) nil nil)) nil)
     ("6" (use subword_is_reflexive) (("6" (lazy-grind) nil nil)) nil)
     ("7" (use subword_is_reflexive) (("7" (lazy-grind) nil nil)) nil)
     ("8" (use subword_is_reflexive) (("8" (lazy-grind) nil nil)) nil)
     ("9" (use subword_is_reflexive) (("9" (lazy-grind) nil nil)) nil)
     ("10" (use subword_is_reflexive) (("10" (lazy-grind) nil nil))
      nil)
     ("11" (skosimp* :preds? t)
      (("11" (hide 4)
        (("11" (grind)
          (("1" (expand well_formed? -3) (("1" (grind) nil nil)) nil)
           ("2" (rewrite context -1) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("12" (skosimp* :preds? t)
      (("12" (rewrite context -1) (("12" (grind) nil nil)) nil)) nil))
    nil)
   ((kind const-decl "kind" decl nil)
    (kconst_decl adt-def-decl "boolean" decl nil)
    (kvar_decl adt-def-decl "boolean" decl nil)
    (ktype_decl adt-def-decl "boolean" decl nil)
    (decl const-decl "decl" decl nil)
    (app_symbol def-decl "decl" map nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (subword_is_reflexive judgement-tcc nil subword nil)
    (subword_is_reflexive name-judgement
     "(reflexive?[well_formed_context])" subword nil)
    (reflexive? const-decl "bool" relations nil)
    (concat_empty formula-decl nil context nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (interp formula-decl nil language nil)
    (nonempty formula-decl nil language nil)
    (context_induction formula-decl nil inductions nil)
    (≺ def-decl "bool" subword nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil))
   shostak))
 (subword_symbol 0
  (subword_symbol-1 nil 3583010546
   ("" (induct Γ :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (grind)
      (("1" (reveal -1)
        (("1" (inst - s!2 "rest(Δ!2)") (("1" (assert) nil nil)) nil))
        nil)
       ("2" (use member_symbol_when_subword :polarity? t)
        (("2" (assert) nil nil)) nil)
       ("3" (use member_symbol_when_subword :polarity? t)
        (("3" (assert) nil nil)) nil))
      nil)
     ("4" (grind)
      (("1" (reveal -1)
        (("1" (inst - s!2 "rest(Δ!2)") (("1" (assert) nil nil)) nil))
        nil)
       ("2" (use member_symbol_when_subword :polarity? t)
        (("2" (assert) nil nil)) nil)
       ("3" (use member_symbol_when_subword :polarity? t)
        (("3" (assert) nil nil)) nil))
      nil)
     ("5" (grind)
      (("1" (reveal -1)
        (("1" (inst - s!2 "rest(Δ!2)") (("1" (assert) nil nil)) nil))
        nil)
       ("2" (use member_symbol_when_subword :polarity? t)
        (("2" (assert) nil nil)) nil)
       ("3" (use member_symbol_when_subword :polarity? t)
        (("3" (assert) nil nil)) nil))
      nil)
     ("6" (skosimp* :preds? t)
      (("6" (bddsimp -5)
        (("1" (expand ≺ -7)
          (("1" (lift-if)
            (("1" (bddsimp -7)
              (("1" (inst - s!1 "rest(Δ!2)") (("1" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil)
     ("7" (grind)
      (("1" (reveal -1)
        (("1" (inst - s!2 "rest(Δ!2)") (("1" (assert) nil nil)) nil))
        nil)
       ("2" (use member_symbol_when_subword :polarity? t)
        (("2" (assert) nil nil)) nil)
       ("3" (use member_symbol_when_subword :polarity? t)
        (("3" (assert) nil nil)) nil))
      nil)
     ("8" (grind)
      (("1" (reveal -1)
        (("1" (inst - s!2 "rest(Δ!2)") (("1" (assert) nil nil)) nil))
        nil)
       ("2" (use member_symbol_when_subword :polarity? t)
        (("2" (assert) nil nil)) nil)
       ("3" (use member_symbol_when_subword :polarity? t)
        (("3" (assert) nil nil)) nil))
      nil)
     ("9" (grind)
      (("1" (reveal -1)
        (("1" (inst - s!2 "rest(Δ!2)") (("1" (assert) nil nil)) nil))
        nil)
       ("2" (use member_symbol_when_subword :polarity? t)
        (("2" (assert) nil nil)) nil)
       ("3" (use member_symbol_when_subword :polarity? t)
        (("3" (assert) nil nil)) nil))
      nil)
     ("10" (grind)
      (("1" (reveal -1)
        (("1" (inst - s!2 "rest(Δ!2)") (("1" (assert) nil nil)) nil))
        nil)
       ("2" (use member_symbol_when_subword :polarity? t)
        (("2" (assert) nil nil)) nil)
       ("3" (use member_symbol_when_subword :polarity? t)
        (("3" (assert) nil nil)) nil))
      nil)
     ("11" (skosimp* :preds? t)
      (("11" (use member_symbol_when_subword :polarity? t)
        (("11" (assert) nil nil)) nil))
      nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (concat_empty formula-decl nil context nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (subword_is_reflexive name-judgement
     "(reflexive?[well_formed_context])" subword nil)
    (app_symbol_context rec-application-judgement "(kcontext?)" map
     nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member_symbol_when_subword formula-decl nil subword nil)
    (decl const-decl "decl" decl nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (context_induction formula-decl nil inductions nil)
    (app_symbol def-decl "decl" map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (decl type-decl nil decl nil)
    (context formula-decl nil language nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (≺ def-decl "bool" subword nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil))
   shostak))
 (subword_var 0
  (subword_var-1 nil 3583011056
   ("" (induct Γ :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (grind)
      (("3" (reveal -1)
        (("3" (inst - "x!1" "rest(Δ!2)") (("3" (assert) nil nil)) nil))
        nil))
      nil)
     ("4" (grind)
      (("4" (reveal -1)
        (("4" (inst - x!1 "rest(Δ!2)") (("4" (assert) nil nil)) nil))
        nil))
      nil)
     ("5" (grind)
      (("5" (reveal -1)
        (("5" (inst - x!1 "rest(Δ!2)") (("5" (assert) nil nil)) nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t)
      (("6" (expand ≺ -8)
        (("6" (lift-if)
          (("6" (bddsimp -8)
            (("6" (bddsimp -9)
              (("1" (inst - "x!1 - 1" "rest(Δ!2)")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (grind)
      (("7" (reveal -1)
        (("7" (inst - x!1 "rest(Δ!2)") (("7" (assert) nil nil)) nil))
        nil))
      nil)
     ("8" (grind)
      (("8" (reveal -1)
        (("8" (inst - x!1 "rest(Δ!2)") (("8" (assert) nil nil)) nil))
        nil))
      nil)
     ("9" (grind)
      (("9" (reveal -1)
        (("9" (inst - x!1 "rest(Δ!2)") (("9" (assert) nil nil)) nil))
        nil))
      nil)
     ("10" (grind)
      (("10" (reveal -1)
        (("10" (inst - x!1 "rest(Δ!2)") (("10" (assert) nil nil)) nil))
        nil))
      nil)
     ("11" (skosimp* :preds? t)
      (("11" (use member_var_when_subword :polarity? t)
        (("11" (grind) nil nil)) nil))
      nil))
    nil)
   ((member_var_when_subword formula-decl nil subword nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (↑ const-decl "decl" subst nil) (decl const-decl "decl" decl nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (concat_empty formula-decl nil context nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (subword_is_reflexive name-judgement
     "(reflexive?[well_formed_context])" subword nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (context_induction formula-decl nil inductions nil)
    (app_var def-decl "(dvar?)" map nil)
    (dvar? adt-recognizer-decl "[decl -> boolean]" decl nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (decl type-decl nil decl nil)
    (context formula-decl nil language nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (≺ def-decl "bool" subword nil))
   shostak))
 (subword_concat_TCC1 0
  (subword_concat_TCC1-1 nil 3583063511
   ("" (subtype-tcc)
    (("" (use "well_formed_concat" :polarity? t)
      (("" (assert)
        (("" (inst -1 "〈〉" "Θ!1" "Γ!1") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((well_formed_concat formula-decl nil well_formed nil)
    (concat_empty formula-decl nil context nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil))
   nil))
 (subword_concat 0
  (subword_concat-1 nil 3583063548
   ("" (auto-rewrite "vars")
    (("" (induct "Θ" :name "context_induction")
      (("1" (grind)
        (("1" (grind)
          (("1" (use "subword_is_reflexive" :polarity? t)
            (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (skosimp* :preds? t)
        (("2" (assert)
          (("2" (flatten)
            (("2" (assert)
              (("2" (lift-if)
                (("2" (inst - "Γ!1")
                  (("2" (assert) (("2" (smash) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skosimp* :preds? t)
        (("3" (assert)
          (("3" (flatten)
            (("3" (assert)
              (("3" (lift-if)
                (("3" (inst - "Γ!1") (("3" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skosimp* :preds? t)
        (("4" (assert)
          (("4" (flatten)
            (("4" (assert)
              (("4" (lift-if)
                (("4" (inst - "Γ!1") (("4" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skosimp* :preds? t)
        (("5" (assert) (("5" (flatten) (("5" (assert) nil nil)) nil))
          nil))
        nil)
       ("6" (skosimp* :preds? t)
        (("6" (assert)
          (("6" (flatten)
            (("6" (assert)
              (("6" (lift-if)
                (("6" (inst - "Γ!1") (("6" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skosimp* :preds? t)
        (("7" (assert)
          (("7" (flatten)
            (("7" (assert)
              (("7" (lift-if)
                (("7" (inst - "Γ!1") (("7" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (skosimp* :preds? t)
        (("8" (assert)
          (("8" (flatten)
            (("8" (assert)
              (("8" (lift-if)
                (("8" (inst - "Γ!1") (("8" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (skosimp* :preds? t)
        (("9" (assert)
          (("9" (flatten)
            (("9" (assert)
              (("9" (lift-if)
                (("9" (inst - "Γ!1") (("9" (smash) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("10" (delete 2)
        (("10" (skosimp* :preds? t)
          (("10" (use "well_formed_concat" :polarity? t)
            (("10" (assert)
              (("10" (inst - "〈〉" "Θ!2" "Γ!1")
                (("10" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_formed_concat formula-decl nil well_formed nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (concat_empty formula-decl nil context nil)
    (context formula-decl nil language nil) (∈ def-decl "bool" map nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subword_is_reflexive name-judgement
     "(reflexive?[well_formed_context])" subword nil)
    (subword_is_reflexive judgement-tcc nil subword nil)
    (reflexive? const-decl "bool" relations nil)
    (context_induction formula-decl nil inductions nil)
    (≺ def-decl "bool" subword nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vars def-decl "nat" context nil) (ord type-decl nil language nil)
    (weight def-decl "nat" language nil)
    (<= const-decl "bool" reals nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (++ def-decl
     "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
     context nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (both_sides_concat_subword_TCC1 0
  (both_sides_concat_subword_TCC1-1 nil 3583063813
   ("" (subtype-tcc)
    (("" (use "well_formed_concat" :polarity? t)
      (("" (assert)
        (("" (inst - "〈〉" "Θ!1" "Δ!1") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((well_formed_concat formula-decl nil well_formed nil)
    (concat_empty formula-decl nil context nil)
    (subword_is_reflexive name-judgement
     "(reflexive?[well_formed_context])" subword nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil))
   nil))
 (both_sides_concat_subword_TCC2 0
  (both_sides_concat_subword_TCC2-1 nil 3583063813
   ("" (subtype-tcc)
    (("" (use "well_formed_concat" :polarity? t)
      (("" (assert)
        (("" (inst - "〈〉" "Θ!1" "Γ!1") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((well_formed_concat formula-decl nil well_formed nil)
    (concat_empty formula-decl nil context nil)
    (subword_is_reflexive name-judgement
     "(reflexive?[well_formed_context])" subword nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil))
   nil))
 (both_sides_concat_subword 0
  (both_sides_concat_subword-1 nil 3583063843
   ("" (induct "Θ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (delete 2)
      (("10" (skosimp* :preds? t)
        (("10" (use "well_formed_concat" :polarity? t)
          (("10" (assert)
            (("10" (inst - "〈〉" "Θ!2" "Γ!1") (("10" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (delete 2)
      (("11" (skosimp* :preds? t)
        (("11" (use "well_formed_concat" :polarity? t)
          (("11" (assert)
            (("11" (inst - "〈〉" "Θ!2" "Δ!1") (("11" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (++ def-decl
     "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
     context nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (<= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (ord type-decl nil language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (≺ def-decl "bool" subword nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (context_induction formula-decl nil inductions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subword_is_reflexive name-judgement
     "(reflexive?[well_formed_context])" subword nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (concat_empty formula-decl nil context nil)
    (well_formed_concat formula-decl nil well_formed nil))
   shostak))
 (decls_pretype 0
  (decls_pretype-1 nil 3583092396
   ("" (grind) (("" (rewrite "pretype") (("" (grind !!) nil nil)) nil))
    nil)
   ((pretype formula-decl nil language nil)
    (nonempty_context formula-decl nil language nil)
    (decls def-decl "set[symbol]" subword nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil))
   shostak))
 (decls_preterm 0
  (decls_preterm-1 nil 3583092405
   ("" (grind !!)
    (("" (rewrite "preterm") (("" (grind !!) nil nil)) nil)) nil)
   ((preterm formula-decl nil language nil)
    (nonempty_context formula-decl nil language nil)
    (decls def-decl "set[symbol]" subword nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (emptyset const-decl "set" sets nil))
   shostak))
 (decls_interp 0
  (decls_interp-1 nil 3583092420
   ("" (grind !!)
    (("" (rewrite "interp") (("" (grind !!) nil nil)) nil)) nil)
   ((interp formula-decl nil language nil)
    (nonempty_context formula-decl nil language nil)
    (decls def-decl "set[symbol]" subword nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (emptyset const-decl "set" sets nil))
   shostak))
 (decls_context 0
  (decls_context-1 nil 3583093294
   ("" (induct "Γ" :name "context_induction")
    (("1" (assert) nil nil)
     ("2" (grind) (("2" (grind) (("2" (grind-with-ext) nil nil)) nil))
      nil)
     ("3" (grind-with-ext) nil nil) ("4" (grind-with-ext) nil nil)
     ("5" (grind-with-ext) nil nil) ("6" (grind-with-ext) nil nil)
     ("7" (grind-with-ext) nil nil) ("8" (grind-with-ext) nil nil)
     ("9" (grind-with-ext) nil nil) ("10" (grind-with-ext) nil nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (concat_empty formula-decl nil context nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty_context formula-decl nil language nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (FALSE const-decl "bool" booleans nil)
    (emptyset const-decl "set" sets nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context_induction formula-decl nil inductions nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (decls def-decl "set[symbol]" subword nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (context formula-decl nil language nil))
   shostak))
 (well_formed_subword 0
  (well_formed_subword-3 "nadine" 3583011463
   ("" (induct "e" :name "expr_induction")
    (("1" (skosimp* :preds? t)
      (("1" (assert)
        (("1" (flatten)
          (("1" (assert)
            (("1" (use "member_symbol_when_subword" :polarity? t)
              (("1" (assert)
                (("1" (use "subword_symbol" :polarity? t)
                  (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp* :preds? t)
      (("2" (assert)
        (("2" (flatten)
          (("2" (assert)
            (("2" (use "member_symbol_when_subword" :polarity? t)
              (("2" (assert)
                (("2" (use "subword_symbol" :polarity? t)
                  (("2" (assert)
                    (("2" (lemma "subword_symbol")
                      (("2" (assert)
                        (("2" (inst -1 "m!1" "Γ!1" "Δ!1")
                          (("2" (rewrite -1)
                            (("2" (assert)
                              (("2"
                                (inst - "Γ!1" "Δ!1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp* :preds? t)
      (("3" (use "subword_var")
        (("3" (assert)
          (("3" (grind)
            (("3" (use "member_var_when_subword" :polarity? t)
              (("3" (assert)
                (("3" (inst -1 "i!1") (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp* :preds? t)
      (("4" (assert)
        (("4" (flatten)
          (("4" (assert)
            (("4" (inst - "Γ!1" "Δ!1")
              (("4" (assert)
                (("4" (inst - "Γ!1" "Δ!1") (("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp* :preds? t)
      (("5" (assert)
        (("5" (inst - "Γ!1" "Δ!1")
          (("5" (inst - "kvar(T!1, Γ!1)" "kvar(T!1, Δ!1)")
            (("1" (assert)
              (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)
             ("2" (assert) nil nil) ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t)
      (("6" (assert)
        (("6" (inst - "Γ!1" "Δ!1")
          (("6" (inst - "Γ!1" "Δ!1")
            (("6" (assert) (("6" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("7" (skosimp* :preds? t)
      (("7" (assert)
        (("7" (inst - "Γ!1" "Δ!1") (("7" (assert) nil nil)) nil)) nil))
      nil)
     ("8" (skosimp* :preds? t)
      (("8" (inst - "Γ!1" "Δ!1") (("8" (grind) nil nil)) nil)) nil)
     ("9" (skosimp* :preds? t)
      (("9" (assert)
        (("9" (inst - "Γ!1" "Δ!1")
          (("9" (inst - "kvar(A!1, Γ!1)" "kvar(A!1, Δ!1)")
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (skosimp* :preds? t)
      (("10" (assert)
        (("10" (inst - "Γ!1" "Δ!1")
          (("10" (inst - "kvar(A!1, Γ!1)" "kvar(A!1, Δ!1)")
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (skosimp* :preds? t)
      (("11" (assert)
        (("11" (inst - "Γ!1" "Δ!1")
          (("11" (inst - "kvar(T!1, Γ!1)" "kvar(T!1, Δ!1)")
            (("1" (assert) (("1" (grind) nil nil)) nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (skosimp* :preds? t) (("12" (assert) nil nil)) nil)
     ("13" (skosimp* :preds? t)
      (("13" (assert)
        (("13" (inst - "Γ!1" "Δ!1")
          (("13" (assert)
            (("13" (inst - "Γ!1" "Δ!1")
              (("13" (assert) (("13" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("14" (skosimp* :preds? t)
      (("14" (assert)
        (("14" (inst - "Γ!1" "Δ!1")
          (("14" (inst - "Γ!1" "Δ!1") (("14" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("15" (grind) nil nil)
     ("16" (skosimp* :preds? t)
      (("16" (assert)
        (("16" (auto-rewrite "decls")
          (("16" (assert)
            (("16" (assert)
              (("16" (use "pretheory_is_context")
                (("16" (assert)
                  (("16" (flatten)
                    (("16" (assert)
                      (("16" (split +)
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (inst - "Γ!1" "Δ!2")
                            (("2" (assert)
                              (("2"
                                (expand "disjoint?")
                                (("2"
                                  (expand "intersection")
                                  (("2"
                                    (expand "add")
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skosimp* :preds? t)
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst -11 "x!1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("17" (skosimp* :preds? t)
      (("17" (assert)
        (("17" (flatten)
          (("17" (assert)
            (("17" (auto-rewrite "decls")
              (("17" (assert)
                (("17" (assert)
                  (("17" (use "pretheory_is_context")
                    (("17" (assert)
                      (("17" (inst - "Γ!1 ++ Δ!1" "Δ!2 ++ Δ!1")
                        (("1" (assert)
                          (("1" (lemma "both_sides_concat_subword")
                            (("1" (inst - "Γ!1" "Δ!2" "Δ!1")
                              (("1"
                                (assert)
                                (("1"
                                  (copy -10)
                                  (("1"
                                    (inst -11 "Γ!1" "Δ!2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -11)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (grind :if-match nil)
                                            (("1"
                                              (inst -15 "s!1")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (inst - "Γ!1" "Δ!2")
                                            (("2"
                                              (delete -1)
                                              (("2"
                                                (expand "disjoint?")
                                                (("2"
                                                  (expand "add")
                                                  (("2"
                                                    (expand
                                                     "intersection")
                                                    (("2"
                                                      (expand "empty?")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp*
                                                             :preds?
                                                             t)
                                                            (("2"
                                                              (inst
                                                               -15
                                                               "x!1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (lemma "well_formed_concat")
                            (("2" (inst - "〈〉" "Δ!1" "Δ!2")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (lemma "well_formed_concat")
                          (("3" (inst - "〈〉" "Δ!1" "Γ!1")
                            (("3" (assert)
                              (("3"
                                (inst -8 "Γ!1" "Δ!2")
                                (("3"
                                  (assert)
                                  (("3"
                                    (grind :if-match nil)
                                    (("3"
                                      (inst - "x!1")
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("18" (skosimp* :preds? t)
      (("18" (assert)
        (("18" (flatten)
          (("18" (assert)
            (("18" (auto-rewrite "decls")
              (("18" (assert)
                (("18" (use "pretheory_is_context")
                  (("18" (assert)
                    (("18" (assert)
                      (("18" (inst - "Γ!1" "Δ!2")
                        (("18" (assert)
                          (("18" (split -)
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (grind :if-match nil)
                                (("1"
                                  (inst - "x!1")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (inst - "x!1")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("19" (skosimp* :preds? t)
      (("19" (assert)
        (("19" (flatten)
          (("19" (assert)
            (("19" (auto-rewrite "decls")
              (("19" (assert)
                (("19" (assert)
                  (("19" (use "pretheory_is_context")
                    (("19" (assert)
                      (("19" (inst - "Γ!1 ++ Δ!1" "Δ!2 ++ Δ!1")
                        (("1" (assert)
                          (("1" (lemma "both_sides_concat_subword")
                            (("1" (inst - "Γ!1" "Δ!2" "Δ!1")
                              (("1"
                                (assert)
                                (("1"
                                  (inst -10 "Γ!1" "Δ!2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (grind :if-match nil)
                                      (("1" (inst - "s!1") nil nil)
                                       ("2"
                                        (inst - "x!1")
                                        (("2" (grind) nil nil))
                                        nil)
                                       ("3"
                                        (inst - "x!1")
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "well_formed_concat")
                          (("2" (inst - "〈〉" "Δ!1" "Δ!2")
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (lemma "well_formed_concat")
                          (("3" (inst - "〈〉" "Δ!1" "Γ!1")
                            (("3" (assert)
                              (("3"
                                (inst - "Γ!1" "Δ!2")
                                (("3"
                                  (assert)
                                  (("3"
                                    (grind :if-match nil)
                                    (("3"
                                      (inst - "x!1")
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("20" (skosimp* :preds? t)
      (("20" (assert)
        (("20" (auto-rewrite "decls")
          (("20" (assert)
            (("20" (use "pretheory_is_context")
              (("20" (assert)
                (("20" (assert)
                  (("20" (flatten)
                    (("20" (assert)
                      (("20" (inst - "Γ!1 ++ Δ!1" "Δ!2 ++ Δ!1")
                        (("1" (assert)
                          (("1" (lemma "both_sides_concat_subword")
                            (("1" (inst - "Γ!1" "Δ!2" "Δ!1")
                              (("1"
                                (assert)
                                (("1"
                                  (inst -11 "Γ!1 ++ Δ!1" "Δ!2 ++ Δ!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "both_sides_concat_subword")
                                      (("1"
                                        (inst - "Γ!1" "Δ!2" "Δ!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -13 "Γ!1" "Δ!2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (grind :if-match nil)
                                                (("1"
                                                  (inst - "s!1")
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (inst - "x!1")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (inst - "x!1")
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lemma "well_formed_concat")
                                      (("2"
                                        (inst - "〈〉" "Δ!1" "Δ!2")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (assert)
                                    (("3"
                                      (lemma "well_formed_concat")
                                      (("3"
                                        (inst - "〈〉" "Δ!1" "Γ!1")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (inst -11 "Γ!1" "Δ!2")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (grind :if-match nil)
                                                (("1"
                                                  (inst - "x!1")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst - "x!1")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "well_formed_concat")
                          (("2" (inst - "〈〉" "Δ!1" "Δ!2")
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (lemma "well_formed_concat")
                          (("3" (inst - "〈〉" "Δ!1" "Γ!1")
                            (("3" (assert)
                              (("3"
                                (inst -10 "Γ!1" "Δ!2")
                                (("3"
                                  (assert)
                                  (("3"
                                    (grind :if-match nil)
                                    (("3"
                                      (inst - "x!1")
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("21" (skosimp* :preds? t)
      (("21" (auto-rewrite "decls")
        (("21" (assert)
          (("21" (flatten)
            (("21" (assert)
              (("21" (use "pretheory_is_context")
                (("21" (assert)
                  (("21" (inst - "Γ!1 ++ Δ!1" "Δ!2 ++ Δ!1")
                    (("1" (assert)
                      (("1" (lemma "both_sides_concat_subword")
                        (("1" (inst - "Γ!1" "Δ!2" "Δ!1")
                          (("1" (assert)
                            (("1" (inst -10 "Γ!1" "Δ!2")
                              (("1"
                                (assert)
                                (("1"
                                  (grind :if-match nil)
                                  (("1" (inst - "s!1") nil nil)
                                   ("2"
                                    (inst - "x!1")
                                    (("2" (grind) nil nil))
                                    nil)
                                   ("3"
                                    (inst - "x!1")
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "well_formed_concat")
                      (("2" (inst - "〈〉" "Δ!1" "Δ!2")
                        (("2" (assert) nil nil)) nil))
                      nil)
                     ("3" (lemma "well_formed_concat")
                      (("3" (inst - "〈〉" "Δ!1" "Γ!1")
                        (("3" (assert)
                          (("3" (inst - "Γ!1" "Δ!2")
                            (("3" (assert)
                              (("3"
                                (grind :if-match nil)
                                (("3"
                                  (inst - "x!1")
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (≺ def-decl "bool" subword nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (disjoint? const-decl "bool" sets nil)
    (decls def-decl "set[symbol]" subword nil)
    (expr_induction formula-decl nil inductions nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (app_symbol_context rec-application-judgement "(kcontext?)" map
     nil)
    (subword_is_reflexive name-judgement
     "(reflexive?[well_formed_context])" subword nil)
    (ktype_decl adt-def-decl "boolean" decl nil)
    (decls_context formula-decl nil subword nil)
    (pretype formula-decl nil language nil)
    (decls_pretype formula-decl nil subword nil)
    (subword_symbol formula-decl nil subword nil)
    (member_symbol_when_subword formula-decl nil subword nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (decls_interp formula-decl nil subword nil)
    (interp type-eq-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (subword_var formula-decl nil subword nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (member_var_when_subword formula-decl nil subword nil)
    (decls_preterm formula-decl nil subword nil)
    (preterm formula-decl nil language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (Γ!1 skolem-const-decl "well_formed_context" subword nil)
    (T!1 skolem-const-decl "pretype" subword nil)
    (Δ!1 skolem-const-decl "well_formed_context" subword nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (concat_empty formula-decl nil context nil)
    (context formula-decl nil language nil) (∈ def-decl "bool" map nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (nonempty_context formula-decl nil language nil)
    (Γ!1 skolem-const-decl "well_formed_context" subword nil)
    (A!1 skolem-const-decl "pretype" subword nil)
    (Δ!1 skolem-const-decl "well_formed_context" subword nil)
    (Γ!1 skolem-const-decl "well_formed_context" subword nil)
    (A!1 skolem-const-decl "pretype" subword nil)
    (Δ!1 skolem-const-decl "well_formed_context" subword nil)
    (Γ!1 skolem-const-decl "well_formed_context" subword nil)
    (T!1 skolem-const-decl "pretype" subword nil)
    (Δ!1 skolem-const-decl "well_formed_context" subword nil)
    (interp formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (add const-decl "(nonempty?)" sets nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (Δ!1 skolem-const-decl "pretheory" subword nil)
    (Γ!1 skolem-const-decl "well_formed_context" subword nil)
    (++ def-decl
     "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
     context nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (<= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (ord type-decl nil language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Δ!2 skolem-const-decl "well_formed_context" subword nil)
    (both_sides_concat_subword formula-decl nil subword nil)
    (well_formed_concat formula-decl nil well_formed nil)
    (Δ!1 skolem-const-decl "pretheory" subword nil)
    (Γ!1 skolem-const-decl "well_formed_context" subword nil)
    (Δ!2 skolem-const-decl "well_formed_context" subword nil)
    (Δ!1 skolem-const-decl "pretheory" subword nil)
    (Γ!1 skolem-const-decl "well_formed_context" subword nil)
    (Δ!2 skolem-const-decl "well_formed_context" subword nil)
    (Δ!1 skolem-const-decl "pretheory" subword nil)
    (Γ!1 skolem-const-decl "well_formed_context" subword nil)
    (Δ!2 skolem-const-decl "well_formed_context" subword nil))
   shostak)
  (well_formed_subword-2 nil 3582993166
   ("" (induct "e" :name "expr_induction")
    (("1" (skosimp* :preds? t)
      (("1" (assert)
        (("1" (prop)
          (("1" (use member_symbol_when_subword :polarity? t)
            (("1" (assert) nil nil)) nil)
           ("2" (assert)
            (("2" (use subword_symbol_kind :polarity? t)
              (("2" (prop) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp* :preds? t)
      (("2" (assert)
        (("2" (prop)
          (("1" (use member_symbol_when_subword :polarity? t)
            (("1" (assert) nil nil)) nil)
           ("2" (use subword_symbol_kind :polarity? t)
            (("2" (grind) nil nil)) nil)
           ("3" (use subword_symbol_definition :polarity? t)
            (("3" (assert) (("3" (grind) nil nil)) nil)) nil)
           ("4" (inst? :polarity? t) (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skosimp* :preds? t)
      (("3" (assert)
        (("3" (use member_var_when_subword :polarity? t)
          (("3" (grind) nil nil)) nil))
        nil))
      nil)
     ("4" (skosimp* :preds? t)
      (("4" (assert) (("4" (grind) nil nil)) nil)) nil)
     ("5" (skosimp* :preds? t)
      (("5" (assert)
        (("5" (inst - Γ!1 Δ!1)
          (("5" (inst - "kvar(T!1, Γ!1)" "kvar(T!1, Δ!1)")
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil)
     ("9" (skosimp* :preds? t)
      (("9" (assert)
        (("9" (inst - Γ!1 Δ!1)
          (("9" (inst - "kvar(A!1, Γ!1)" "kvar(A!1, Δ!1)")
            (("1" (assert) (("1" (grind) nil nil)) nil)
             ("2" (assert) nil nil) ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (skosimp* :preds? t)
      (("10" (assert)
        (("10" (inst - Γ!1 Δ!1)
          (("10" (inst - "kvar(A!1, Γ!1)" "kvar(A!1, Δ!1)")
            (("1" (assert) (("1" (grind) nil nil)) nil)
             ("2" (assert) nil nil) ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (skosimp* :preds? t)
      (("11" (assert)
        (("11" (inst - Γ!1 Δ!1)
          (("11" (inst - "kvar(T!1, Γ!1)" "kvar(T!1, Δ!1)")
            (("1" (grind) nil nil) ("2" (assert) nil nil)
             ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (skosimp* :preds? t) (("12" (grind) nil nil)) nil)
     ("13" (skosimp* :preds? t)
      (("13" (assert) (("13" (grind) nil nil)) nil)) nil)
     ("14" (grind) nil nil))
    nil)
   ((pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (context formula-decl nil language nil)
    (concat_empty formula-decl nil context nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (member_var_when_subword formula-decl nil subword nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (definition? const-decl "bool" decl nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (member_symbol_when_subword formula-decl nil subword nil)
    (kind const-decl "kind" decl nil)
    (kvar_app_symbol formula-decl nil map nil)
    (subword_is_reflexive name-judgement
     "(reflexive?[well_formed_context])" subword nil)
    (expr_induction formula-decl nil inductions nil)
    (≺ def-decl "bool" subword nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   nil)
  (well_formed_subword-1 nil 3582989254
   ("" (induct "e" :name "expr_induction")
    (("1" (grind) nil nil)
     ("2" (skosimp* :preds? t)
      (("2" (assert)
        (("2" (prop)
          (("1" (use member_symbol_when_subword :polarity? t)
            (("1" (assert) nil nil)) nil)
           ("2" (use subword_symbol_kind :polarity? t)
            (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skosimp* :preds? t)
      (("3" (assert)
        (("3" (prop)
          (("1" (use member_symbol_when_subword :polarity? t)
            (("1" (assert) nil nil)) nil)
           ("2" (use subword_symbol_kind :polarity? t)
            (("2" (grind) nil nil)) nil)
           ("3" (use subword_symbol_definition :polarity? t)
            (("3" (assert) (("3" (grind) nil nil)) nil)) nil)
           ("4" (inst? :polarity? t) (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("4" (skosimp* :preds? t)
      (("4" (assert)
        (("4" (use member_var_when_subword :polarity? t)
          (("4" (grind) nil nil)) nil))
        nil))
      nil)
     ("5" (skosimp* :preds? t)
      (("5" (assert) (("5" (grind) nil nil)) nil)) nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil)
     ("9" (grind) nil nil)
     ("10" (skosimp* :preds? t)
      (("10" (assert)
        (("10" (inst - Γ!1 Δ!1)
          (("10" (inst - "kvar(A!1, Γ!1)" "kvar(A!1, Δ!1)")
            (("1" (assert) (("1" (grind) nil nil)) nil)
             ("2" (rewrite doubleplus_empty) (("2" (assert) nil nil))
              nil)
             ("3" (rewrite doubleplus_empty) (("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (skosimp* :preds? t)
      (("11" (assert)
        (("11" (inst - Γ!1 Δ!1)
          (("11" (inst - "kvar(A!1, Γ!1)" "kvar(A!1, Δ!1)")
            (("1" (assert) (("1" (grind) nil nil)) nil)
             ("2" (rewrite doubleplus_empty) (("2" (assert) nil nil))
              nil)
             ("3" (rewrite doubleplus_empty) (("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (skosimp* :preds? t)
      (("12" (assert)
        (("12" (inst - Γ!1 Δ!1)
          (("12" (inst - "kvar(T!1, Γ!1)" "kvar(T!1, Δ!1)")
            (("1" (grind) nil nil)
             ("2" (rewrite doubleplus_empty) (("2" (assert) nil nil))
              nil)
             ("3" (rewrite doubleplus_empty) (("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("13" (skosimp* :preds? t) (("13" (grind) nil nil)) nil)
     ("14" (skosimp* :preds? t)
      (("14" (assert) (("14" (grind) nil nil)) nil)) nil)
     ("15" (grind) nil nil))
    nil)
   ((kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ord type-decl nil language nil)
    (weight def-decl "nat" language nil)
    (<= const-decl "bool" reals nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (++ def-decl
     "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
     context nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (member_var_when_subword formula-decl nil subword nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (interp type-eq-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (definition? const-decl "bool" decl nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member_symbol_when_subword formula-decl nil subword nil)
    (kind const-decl "kind" decl nil)
    (subword_is_reflexive name-judgement
     "(reflexive?[well_formed_context])" subword nil)
    (expr_induction formula-decl nil inductions nil)
    (≺ def-decl "bool" subword nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (context formula-decl nil language nil))
   shostak)))

