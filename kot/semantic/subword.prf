(subword
 (prec_TCC1 0
  (prec_TCC1-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC2 0
  (prec_TCC2-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC3 0
  (prec_TCC3-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (prec_TCC4 0
  (prec_TCC4-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC5 0
  (prec_TCC5-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (prec_TCC6 0
  (prec_TCC6-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC7 0
  (prec_TCC7-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC8 0
  (prec_TCC8-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC9 0
  (prec_TCC9-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC10 0
  (prec_TCC10-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC11 0
  (prec_TCC11-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC12 0
  (prec_TCC12-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC13 0
  (prec_TCC13-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prec_TCC14 0
  (prec_TCC14-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC15 0
  (prec_TCC15-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC16 0
  (prec_TCC16-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC17 0
  (prec_TCC17-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (prec_TCC18 0
  (prec_TCC18-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC19 0
  (prec_TCC19-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (prec_TCC20 0
  (prec_TCC20-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC21 0
  (prec_TCC21-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC22 0
  (prec_TCC22-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC23 0
  (prec_TCC23-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC24 0
  (prec_TCC24-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC25 0
  (prec_TCC25-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC26 0
  (prec_TCC26-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC27 0
  (prec_TCC27-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC28 0
  (prec_TCC28-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC29 0
  (prec_TCC29-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC30 0
  (prec_TCC30-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prec_TCC31 0
  (prec_TCC31-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC32 0
  (prec_TCC32-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC33 0
  (prec_TCC33-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC34 0
  (prec_TCC34-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC35 0
  (prec_TCC35-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC36 0
  (prec_TCC36-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC37 0
  (prec_TCC37-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prec_TCC38 0
  (prec_TCC38-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC39 0
  (prec_TCC39-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC40 0
  (prec_TCC40-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC41 0
  (prec_TCC41-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC42 0
  (prec_TCC42-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC43 0
  (prec_TCC43-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC44 0
  (prec_TCC44-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prec_TCC45 0
  (prec_TCC45-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC46 0
  (prec_TCC46-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC47 0
  (prec_TCC47-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC48 0
  (prec_TCC48-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC49 0
  (prec_TCC49-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC50 0
  (prec_TCC50-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prec_TCC51 0
  (prec_TCC51-1 nil 3582902491 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prec_TCC52 0
  (prec_TCC52-1 nil 3582902491 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil))
   nil))
 (prec_TCC53 0
  (prec_TCC53-1 nil 3582902491 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (context formula-decl nil language nil))
   nil))
 (member_symbol_when_subword 0
  (member_symbol_when_subword-1 nil 3582905396
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skosimp* :preds? t)
      (("3" (expand ≺ -6)
        (("3" (lift-if)
          (("3" (bddsimp -6)
            (("1" (bddsimp -7)
              (("1" (inst - s!2 "rest(Δ!2)") (("1" (grind) nil nil))
                nil)
               ("2" (grind) nil nil))
              nil)
             ("2" (bddsimp -5)
              (("1" (inst - s!2 Δ!2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil)
             ("3" (bddsimp -5)
              (("1" (inst - s!2 Δ!2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp* :preds? t)
      (("4"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 "rest(Δ!2)") (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil)
         ("2"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 Δ!2) (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil)
         ("3"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 Δ!2) (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil)
     ("5" (skosimp* :preds? t)
      (("5"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 "rest(Δ!2)") (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil)
         ("2"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 Δ!2) (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil)
         ("3"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 Δ!2) (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t)
      (("6" (expand ≺ -7)
        (("6" (lift-if)
          (("6" (bddsimp -7)
            (("6" (bddsimp -8)
              (("1" (inst - s!1 "rest(Δ!2)") (("1" (grind) nil nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skosimp* :preds? t)
      (("7"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 "rest(Δ!2)") (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil)
         ("2"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 Δ!2) (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil)
         ("3"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 Δ!2) (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil)
     ("8" (skosimp* :preds? t)
      (("8"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 "rest(Δ!2)") (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil)
         ("2"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 Δ!2) (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil)
         ("3"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 Δ!2) (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil)
     ("9" (skosimp* :preds? t)
      (("9"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 "rest(Δ!2)") (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil)
         ("2"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 Δ!2) (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil)
         ("3"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 Δ!2) (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil)
     ("10" (skosimp* :preds? t)
      (("10"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 "rest(Δ!2)") (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil)
         ("2"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 Δ!2) (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil)
         ("3"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (inst - s!2 Δ!2) (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (context_induction formula-decl nil inductions nil) nil
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (≺ def-decl "bool" subword nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (symbol nonempty-type-decl nil language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (context formula-decl nil language nil))
   shostak))
 (member_var_when_subword 0
  (member_var_when_subword-1 nil 3582909678
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skosimp* :preds? t)
      (("3"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
         ("2"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
         ("3"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("4" (skosimp* :preds? t)
      (("4"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
         ("2"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
         ("3"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("5" (skosimp* :preds? t)
      (("5"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
         ("2"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
         ("3"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t)
      (("6" (expand ≺ -8)
        (("6" (lift-if)
          (("6" (bddsimp -8)
            (("6" (bddsimp -9)
              (("1" (inst - "x!1 - 1" "rest(Δ!2)")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skosimp* :preds? t)
      (("7"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
         ("2"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
         ("3"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("8" (skosimp* :preds? t)
      (("8"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
         ("2"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
         ("3"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("9" (skosimp* :preds? t)
      (("9"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
         ("2"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
         ("3"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("10" (skosimp* :preds? t)
      (("10"
        (invoke (then (expand ≺ $1n) (lift-if) (bddsimp $1n))
         (~ "^Δ!2 ≺ %"))
        (("1"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
         ("2"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
         ("3"
          (invoke (bddsimp $1n) (~ "^well_formed?(%)(Δ!1) IMPLIES %"))
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    nil
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (context_induction formula-decl nil inductions nil) nil
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (≺ def-decl "bool" subword nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (context formula-decl nil language nil))
   shostak))
 (length_subword 0
  (length_subword-1 nil 3582907781
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (grind)
      (("3" (reveal -1)
        (("3" (inst - "rest(Δ!2)") (("3" (assert) nil nil)) nil)) nil))
      nil)
     ("4" (grind)
      (("4" (reveal -1)
        (("4" (inst - "rest(Δ!2)") (("4" (assert) nil nil)) nil)) nil))
      nil)
     ("5" (grind)
      (("5" (reveal -1)
        (("5" (inst - "rest(Δ!2)") (("5" (assert) nil nil)) nil)) nil))
      nil)
     ("6" (grind)
      (("6" (reveal -1)
        (("6" (inst - "rest(Δ!2)") (("6" (assert) nil nil)) nil)) nil))
      nil)
     ("7" (grind)
      (("7" (reveal -1)
        (("7" (inst - "rest(Δ!2)") (("7" (assert) nil nil)) nil)) nil))
      nil)
     ("8" (grind)
      (("8" (reveal -1)
        (("8" (inst - "rest(Δ!2)") (("8" (assert) nil nil)) nil)) nil))
      nil)
     ("9" (grind)
      (("9" (reveal -1)
        (("9" (inst - "rest(Δ!2)") (("9" (assert) nil nil)) nil)) nil))
      nil)
     ("10" (grind)
      (("10" (reveal -1)
        (("10" (inst - "rest(Δ!2)") (("10" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((context formula-decl nil language nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (≺ def-decl "bool" subword nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" context nil)
    (context_induction formula-decl nil inductions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (∈ def-decl "bool" map nil) (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil))
   shostak))
 (pos_symbol_subword_TCC1 0
  (pos_symbol_subword_TCC1-1 nil 3582907779 ("" (subtype-tcc) nil nil)
   nil nil))
 (pos_symbol_subword 0
  (pos_symbol_subword-1 nil 3582907952
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (grind)
      (("1" (use length_subword) (("1" (assert) nil nil)) nil)
       ("2" (reveal -1)
        (("2" (inst - s!2 "rest(Δ!2)") (("2" (assert) nil nil)) nil))
        nil))
      nil)
     ("4" (grind)
      (("1" (use length_subword) (("1" (assert) nil nil)) nil)
       ("2" (reveal -1)
        (("2" (inst - s!2 "rest(Δ!2)") (("2" (assert) nil nil)) nil))
        nil))
      nil)
     ("5" (grind)
      (("1" (use length_subword) (("1" (assert) nil nil)) nil)
       ("2" (reveal -1)
        (("2" (inst - s!2 "rest(Δ!2)") (("2" (assert) nil nil)) nil))
        nil))
      nil)
     ("6" (grind)
      (("6" (reveal -1)
        (("6" (inst - s!1 "rest(Δ!2)") (("6" (assert) nil nil)) nil))
        nil))
      nil)
     ("7" (grind)
      (("1" (use length_subword) (("1" (assert) nil nil)) nil)
       ("2" (reveal -1)
        (("2" (inst - s!2 "rest(Δ!2)") (("2" (assert) nil nil)) nil))
        nil))
      nil)
     ("8" (grind)
      (("1" (use length_subword) (("1" (assert) nil nil)) nil)
       ("2" (reveal -1)
        (("2" (inst - s!2 "rest(Δ!2)") (("2" (assert) nil nil)) nil))
        nil))
      nil)
     ("9" (grind)
      (("1" (use length_subword) (("1" (assert) nil nil)) nil)
       ("2" (reveal -1)
        (("2" (inst - s!2 "rest(Δ!2)") (("2" (assert) nil nil)) nil))
        nil))
      nil)
     ("10" (grind)
      (("1" (use length_subword) (("1" (assert) nil nil)) nil)
       ("2" (reveal -1)
        (("2" (inst - s!2 "rest(Δ!2)") (("2" (assert) nil nil)) nil))
        nil))
      nil)
     ("11" (skosimp* :preds? t)
      (("11" (use member_symbol_when_subword :polarity? t)
        (("11" (assert) nil nil)) nil))
      nil))
    nil)
   ((∈ def-decl "bool" map nil) (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (≺ def-decl "bool" subword nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (symbol nonempty-type-decl nil language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (context formula-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" context nil)
    (below type-eq-decl nil nat_types nil)
    (pos def-decl "below[length(Γ)]" context nil)
    (context_induction formula-decl nil inductions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_subword formula-decl nil subword nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (member_symbol_when_subword formula-decl nil subword nil))
   shostak))
 (pos_var_subword_TCC1 0
  (pos_var_subword_TCC1-1 nil 3582907779 ("" (subtype-tcc) nil nil) nil
   nil))
 (pos_var_subword 0
  (pos_var_subword-1 nil 3582910261
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (grind)
      (("3" (reveal -1)
        (("3" (inst - x!1 "rest(Δ!2)") (("3" (assert) nil nil)) nil))
        nil))
      nil)
     ("4" (grind)
      (("4" (reveal -1)
        (("4" (inst - x!1 "rest(Δ!2)") (("4" (assert) nil nil)) nil))
        nil))
      nil)
     ("5" (grind)
      (("5" (reveal -1)
        (("5" (inst - x!1 "rest(Δ!2)") (("5" (assert) nil nil)) nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t)
      (("6" (bddsimp -6)
        (("1" (expand ≺ -8)
          (("1" (lift-if)
            (("1" (bddsimp -8)
              (("1" (expand pos 1 2)
                (("1" (lift-if)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (split 1)
                          (("1" (use length_subword)
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (auto-rewrite pos)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst - "x!1 - 1" "rest(Δ!2)")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil)
     ("7" (grind)
      (("7" (reveal -1)
        (("7" (inst - x!1 "rest(Δ!2)") (("7" (assert) nil nil)) nil))
        nil))
      nil)
     ("8" (grind)
      (("8" (reveal -1)
        (("8" (inst - x!1 "rest(Δ!2)") (("8" (assert) nil nil)) nil))
        nil))
      nil)
     ("9" (grind)
      (("9" (reveal -1)
        (("9" (inst - x!1 "rest(Δ!2)") (("9" (assert) nil nil)) nil))
        nil))
      nil)
     ("10" (grind)
      (("10" (reveal -1)
        (("10" (inst - x!1 "rest(Δ!2)") (("10" (assert) nil nil)) nil))
        nil))
      nil)
     ("11" (grind)
      (("11" (use member_var_when_subword :polarity? t)
        (("11" (grind) nil nil)) nil))
      nil))
    nil)
   ((member_var_when_subword formula-decl nil subword nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (length_subword formula-decl nil subword nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "nat" subword nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (∈ def-decl "bool" map nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (context_induction formula-decl nil inductions nil)
    (pos def-decl "below[length(Γ)]" context nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" context nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (context formula-decl nil language nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (≺ def-decl "bool" subword nil) (∈ def-decl "bool" map nil))
   shostak))
 (subword_is_reflexive 0
  (subword_is_reflexive-1 nil 3582902491
   ("" (expand reflexive?)
    (("" (induct-and-simplify "x" :name "context_induction") nil nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (context_induction formula-decl nil inductions nil)
    (≺ def-decl "bool" subword nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (context formula-decl nil language nil)
    (reflexive? const-decl "bool" relations nil))
   nil))
 (subword_app_symbol_TCC1 0
  (subword_app_symbol_TCC1-1 nil 3582902491 ("" (subtype-tcc) nil nil)
   nil nil))
 (subword_app_symbol_TCC2 0
  (subword_app_symbol_TCC2-1 nil 3582902491 ("" (subtype-tcc) nil nil)
   nil nil))
 (subword_app_symbol 0
  (subword_app_symbol-1 nil 3582909963
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (grind) (("1" (postpone) nil nil) ("2" (postpone) nil nil))
      nil)
     ("4" (postpone) nil nil) ("5" (postpone) nil nil)
     ("6" (postpone) nil nil) ("7" (postpone) nil nil)
     ("8" (postpone) nil nil) ("9" (postpone) nil nil)
     ("10" (postpone) nil nil) ("11" (postpone) nil nil)
     ("12" (postpone) nil nil))
    nil)
   nil shostak))
 (subword_symbol_kind_TCC1 0
  (subword_symbol_kind_TCC1-1 nil 3582902491 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (subword_symbol_kind_TCC2 0
  (subword_symbol_kind_TCC2-1 nil 3582902491 ("" (subtype-tcc) nil nil)
   nil nil))
 (subword_symbol_kind_TCC3 0
  (subword_symbol_kind_TCC3-1 nil 3582902491 ("" (subtype-tcc) nil nil)
   nil nil))
 (subword_symbol_definition_TCC1 0
  (subword_symbol_definition_TCC1-1 nil 3582902491
   ("" (subtype-tcc) nil nil) nil nil))
 (subword_symbol_type_TCC1 0
  (subword_symbol_type_TCC1-1 nil 3582902491 ("" (subtype-tcc) nil nil)
   nil nil))
 (subword_symbol_type_TCC2 0
  (subword_symbol_type_TCC2-1 nil 3582902491 ("" (subtype-tcc) nil nil)
   nil nil))
 (subword_var_type_TCC1 0
  (subword_var_type_TCC1-1 nil 3582902491 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (subword_is_reflexive name-judgement
     "(reflexive?[well_formed_context])" subword nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonempty_context formula-decl nil language nil)
    (typed? const-decl "bool" decl nil))
   nil))
 (subword_var_type_TCC2 0
  (subword_var_type_TCC2-1 nil 3582902491 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (subword_is_reflexive name-judgement
     "(reflexive?[well_formed_context])" subword nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonempty_context formula-decl nil language nil)
    (typed? const-decl "bool" decl nil))
   nil)))

