(map (in_TCC1 0
      (in_TCC1-1 nil 3582305991 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil)
        (context formula-decl nil language nil)
        (nonempty formula-decl nil language nil)
        (map formula-decl nil language nil))
       nil))
     (in_TCC2 0
      (in_TCC2-1 nil 3582305991 ("" (skosimp* :preds? t) nil nil)
       ((map type-eq-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (semantic type-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil))
       nil))
     (in_TCC3 0
      (in_TCC3-1 nil 3582305991 ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil)
        (weight def-decl "nat" language nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil))
       nil))
     (in_TCC4 0
      (in_TCC4-1 nil 3582305991 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil)
        (map formula-decl nil language nil))
       nil))
     (in_TCC5 0
      (in_TCC5-1 nil 3582305991
       ("" (skosimp* :preds? t)
        (("" (assert)
          (("" (rewrite "map")
            (("" (lift-if)
              (("" (assert)
                (("" (bddsimp)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)
                   ("3" (assert) nil nil) ("4" (assert) nil nil)
                   ("5" (assert) nil nil) ("6" (assert) nil nil)
                   ("7" (assert) nil nil) ("8" (assert) nil nil)
                   ("9" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((nonempty formula-decl nil language nil)
        (context formula-decl nil language nil)
        (interp formula-decl nil language nil)
        (map formula-decl nil language nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil))
       nil))
     (in_TCC6 0
      (in_TCC6-1 nil 3582305991
       ("" (skosimp* :preds? t)
        (("" (assert) (("" (rewrite "map") nil nil)) nil)) nil)
       ((map formula-decl nil language nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil))
       nil))
     (in_TCC7 0
      (in_TCC7-1 nil 3582305991
       ("" (skosimp* :preds? t)
        (("" (rewrite "map")
          (("" (lift-if)
            (("" (assert)
              (("" (bddsimp)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil) ("8" (assert) nil nil)
                 ("9" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((map formula-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (weight def-decl "nat" language nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil))
       nil))
     (in_TCC8 0
      (in_TCC8-1 nil 3582305991
       ("" (skosimp* :preds? t)
        (("" (rewrite "map") (("" (smash) nil nil)) nil)) nil)
       ((map formula-decl nil language nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil))
       nil))
     (member_nonempty 0
      (member_nonempty-1 nil 3582312165
       ("" (skosimp* :preds? t)
        (("" (smash)
          (("" (rewrite "map_as_nonempty") (("" (smash) nil nil)) nil))
          nil))
        nil)
       ((âˆˆ def-decl "bool" map nil)
        (map_as_nonempty formula-decl nil subtype nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil))
       shostak))
     (in_TCC9 0
      (in_TCC9-1 nil 3582305991 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil))
       nil))
     (in_TCC10 0
      (in_TCC10-1 nil 3582305991 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil)
        (nonempty_context formula-decl nil language nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil))
       nil))
     (in_TCC11 0
      (in_TCC11-1 nil 3582305991 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil))
       nil))
     (in_TCC12 0
      (in_TCC12-1 nil 3582305991 ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil)
        (weight def-decl "nat" language nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil))
       nil))
     (in_TCC13 0
      (in_TCC13-1 nil 3582305991
       ("" (skosimp* :preds? t)
        (("" (rewrite "context")
          (("" (assert)
            (("" (lift-if)
              (("" (bddsimp)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((context formula-decl nil language nil)
        (nonempty_context formula-decl nil language nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil))
       nil))
     (in_TCC14 0
      (in_TCC14-1 nil 3582305991
       ("" (skosimp* :preds? t)
        (("" (rewrite "context")
          (("" (lift-if)
            (("" (assert)
              (("" (bddsimp)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((context formula-decl nil language nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil))
       nil))
     (in_TCC15 0
      (in_TCC15-1 nil 3582305991
       ("" (lemma "context_rest")
        (("" (termination-tcc)
          (("" (delete +)
            ((""
              (case "FORALL (S: semantic): context?(S) IFF (empty?(S) OR nonempty_context?(S))")
              (("1" (auto-rewrite -1) (("1" (assert) nil nil)) nil)
               ("2" (assert) (("2" (induct-and-simplify "S") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((context_rest application-judgement
         "{Î“: context | weight(F)(Î“) < weight(F)(x)}" subtype nil)
        (context type-eq-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (semantic type-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (Î“!1 skolem-const-decl "context" map nil)
        (nonempty_context? const-decl "[semantic -> bool]" language
         nil)
        (nonempty_context type-eq-decl nil language nil)
        (IFF const-decl "[bool, bool -> bool]" booleans nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (empty? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (nonempty_context formula-decl nil language nil)
        (context formula-decl nil language nil)
        (semantic_induction formula-decl nil language nil)
        (context_rest judgement-tcc nil subtype nil))
       nil))
     (in_TCC16 0
      (in_TCC16-1 nil 3582305991
       ("" (skosimp* :preds? t)
        (("" (rewrite "context_as_nonempty_context")
          (("" (assert)
            (("" (use "context_rest") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil))
       nil))
     (member_var_nonempty_context 0
      (member_var_nonempty_context-1 nil 3582312179
       ("" (skosimp* :preds? t)
        (("" (rewrite "context_as_nonempty") (("" (smash) nil nil))
          nil))
        nil)
       ((context_as_nonempty formula-decl nil subtype nil)
        (âˆˆ def-decl "bool" map nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil))
       shostak))
     (member_var_lt 0
      (member_var_lt-1 nil 3582908997
       ("" (induct "Î“" :name "context_induction")
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (grind) nil nil) ("4" (grind) nil nil)
         ("5" (skosimp* :preds? t)
          (("5" (assert)
            (("5" (flatten)
              (("5" (assert)
                (("5" (inst -5 "x!1 - 1" "y!1 - 1")
                  (("5" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (grind) nil nil) ("7" (grind) nil nil)
         ("8" (grind) nil nil) ("9" (grind) nil nil))
        nil)
       ((pretheory? const-decl "[semantic -> bool]" language nil)
        (pretheory type-eq-decl nil language nil)
        (preterm? const-decl "[semantic -> bool]" language nil)
        (preterm type-eq-decl nil language nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (pretype? const-decl "[semantic -> bool]" language nil)
        (pretype type-eq-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (context_induction formula-decl nil inductions nil)
        (âˆˆ def-decl "bool" map nil) (<= const-decl "bool" reals nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (context type-eq-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (semantic type-decl nil language nil))
       shostak))
     (app_symbol_TCC1 0
      (app_symbol_TCC1-1 nil 3582305991 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (below type-eq-decl nil nat_types nil)
        (character type-decl nil character_adt nil)
        (char? adt-recognizer-decl "[character -> boolean]"
         character_adt nil)
        (char type-eq-decl nil strings nil)
        (symbol nonempty-type-eq-decl nil language nil)
        (âˆˆ def-decl "bool" map nil)
        (map formula-decl nil language nil))
       nil))
     (app_symbol_TCC2 0
      (app_symbol_TCC2-1 nil 3582305991
       ("" (skosimp* :preds? t)
        (("" (rewrite "âˆˆ")
          (("" (assert)
            (("" (rewrite "nonempty")
              (("" (smash)
                (("" (use "member_nonempty") (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((map formula-decl nil language nil)
        (nonempty formula-decl nil language nil)
        (context formula-decl nil language nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (below type-eq-decl nil nat_types nil)
        (character type-decl nil character_adt nil)
        (char? adt-recognizer-decl "[character -> boolean]"
         character_adt nil)
        (char type-eq-decl nil strings nil)
        (symbol nonempty-type-eq-decl nil language nil)
        (âˆˆ def-decl "bool" map nil))
       nil))
     (app_symbol_TCC3 0
      (app_symbol_TCC3-1 nil 3582305991 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (below type-eq-decl nil nat_types nil)
        (character type-decl nil character_adt nil)
        (char? adt-recognizer-decl "[character -> boolean]"
         character_adt nil)
        (char type-eq-decl nil strings nil)
        (symbol nonempty-type-eq-decl nil language nil)
        (âˆˆ def-decl "bool" map nil))
       nil))
     (app_symbol_TCC4 0
      (app_symbol_TCC4-1 nil 3582305991
       ("" (skosimp* :preds? t)
        (("" (assert)
          (("" (assert)
            (("" (split)
              (("1" (smash) (("1" (inst?) (("1" (smash) nil nil)) nil))
                nil)
               ("2" (inst?) (("2" (smash) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ((weight def-decl "nat" language nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (below type-eq-decl nil nat_types nil)
        (character type-decl nil character_adt nil)
        (char? adt-recognizer-decl "[character -> boolean]"
         character_adt nil)
        (char type-eq-decl nil strings nil)
        (symbol nonempty-type-eq-decl nil language nil)
        (âˆˆ def-decl "bool" map nil))
       nil))
     (app_symbol_TCC5 0
      (app_symbol_TCC5-1 nil 3583008387
       ("" (skosimp* :preds? t)
        (("" (grind) (("" (rewrite "map") (("" (grind) nil nil)) nil))
          nil))
        nil)
       ((map formula-decl nil language nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (below type-eq-decl nil nat_types nil)
        (character type-decl nil character_adt nil)
        (char? adt-recognizer-decl "[character -> boolean]"
         character_adt nil)
        (char type-eq-decl nil strings nil)
        (symbol nonempty-type-eq-decl nil language nil)
        (âˆˆ def-decl "bool" map nil))
       nil))
     (app_symbol_TCC6 0
      (app_symbol_TCC6-1 nil 3583008387
       ("" (grind)
        (("" (use "member_nonempty") (("" (assert) nil nil)) nil)) nil)
       ((member_nonempty formula-decl nil map nil)
        (s shared-adt-accessor-decl "[{x: semantic |
              symbol?(x) OR dot?(x) OR ktype_decl?(x) OR ktype_def?(x)
           OR ktype_ext?(x) OR kconst_decl?(x) OR kconst_def?(x)
           OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   symbol]" language nil)
        (iconst? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (itype? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (ktheory? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
        (symbol? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (below type-eq-decl nil nat_types nil)
        (character type-decl nil character_adt nil)
        (char? adt-recognizer-decl "[character -> boolean]"
         character_adt nil)
        (char type-eq-decl nil strings nil)
        (symbol nonempty-type-eq-decl nil language nil)
        (âˆˆ def-decl "bool" map nil))
       nil))
     (app_symbol_interp_TCC1 0
      (app_symbol_interp_TCC1-1 nil 3583008321
       ("" (recursive-judgement-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (interp? const-decl "[semantic -> bool]" language nil)
        (interp type-eq-decl nil language nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (below type-eq-decl nil nat_types nil)
        (character type-decl nil character_adt nil)
        (char? adt-recognizer-decl "[character -> boolean]"
         character_adt nil)
        (char type-eq-decl nil strings nil)
        (symbol nonempty-type-eq-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil) (âˆˆ def-decl "bool" map nil)
        (interp formula-decl nil language nil))
       nil))
     (app_symbol_interp_TCC2 0
      (app_symbol_interp_TCC2-1 nil 3583008321
       ("" (recursive-judgement-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (interp? const-decl "[semantic -> bool]" language nil)
        (interp type-eq-decl nil language nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (below type-eq-decl nil nat_types nil)
        (character type-decl nil character_adt nil)
        (char? adt-recognizer-decl "[character -> boolean]"
         character_adt nil)
        (char type-eq-decl nil strings nil)
        (symbol nonempty-type-eq-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil) (âˆˆ def-decl "bool" map nil)
        (context formula-decl nil language nil)
        (nonempty formula-decl nil language nil)
        (interp formula-decl nil language nil))
       nil))
     (app_symbol_interp_TCC3 0
      (app_symbol_interp_TCC3-1 nil 3583008321
       ("" (recursive-judgement-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (interp? const-decl "[semantic -> bool]" language nil)
        (interp type-eq-decl nil language nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (below type-eq-decl nil nat_types nil)
        (character type-decl nil character_adt nil)
        (char? adt-recognizer-decl "[character -> boolean]"
         character_adt nil)
        (char type-eq-decl nil strings nil)
        (symbol nonempty-type-eq-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil)
        (âˆˆ def-decl "bool" map nil))
       nil))
     (app_symbol_interp_TCC4 0
      (app_symbol_interp_TCC4-1 nil 3583008321
       ("" (recursive-judgement-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (interp? const-decl "[semantic -> bool]" language nil)
        (interp type-eq-decl nil language nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (below type-eq-decl nil nat_types nil)
        (character type-decl nil character_adt nil)
        (char? adt-recognizer-decl "[character -> boolean]"
         character_adt nil)
        (char type-eq-decl nil strings nil)
        (symbol nonempty-type-eq-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil) (âˆˆ def-decl "bool" map nil)
        (interp formula-decl nil language nil))
       nil))
     (app_symbol_interp_TCC5 0
      (app_symbol_interp_TCC5-1 nil 3583008321
       ("" (recursive-judgement-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (interp? const-decl "[semantic -> bool]" language nil)
        (interp type-eq-decl nil language nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (below type-eq-decl nil nat_types nil)
        (character type-decl nil character_adt nil)
        (char? adt-recognizer-decl "[character -> boolean]"
         character_adt nil)
        (char type-eq-decl nil strings nil)
        (symbol nonempty-type-eq-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil) (âˆˆ def-decl "bool" map nil)
        (decl type-decl nil decl nil)
        (definition type-eq-decl nil decl nil)
        (interp formula-decl nil language nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (kvar? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (ktheory? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (itype? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (iconst? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
        (â†‘ const-decl "decl" subst nil)
        (definition? const-decl "bool" decl nil))
       nil))
     (app_symbol_interp_TCC6 0
      (app_symbol_interp_TCC6-1 nil 3583008321
       ("" (grind) (("" (rewrite "interp") (("" (grind) nil nil)) nil))
        nil)
       ((interp formula-decl nil language nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (interp? const-decl "[semantic -> bool]" language nil)
        (interp type-eq-decl nil language nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (below type-eq-decl nil nat_types nil)
        (character type-decl nil character_adt nil)
        (char? adt-recognizer-decl "[character -> boolean]"
         character_adt nil)
        (char type-eq-decl nil strings nil)
        (symbol nonempty-type-eq-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil)
        (âˆˆ def-decl "bool" map nil))
       nil))
     (app_symbol_interp_TCC7 0
      (app_symbol_interp_TCC7-1 nil 3583008321
       ("" (grind)
        (("" (use "member_nonempty") (("" (grind) nil nil)) nil)) nil)
       ((member_nonempty formula-decl nil map nil)
        (s shared-adt-accessor-decl "[{x: semantic |
              symbol?(x) OR dot?(x) OR ktype_decl?(x) OR ktype_def?(x)
           OR ktype_ext?(x) OR kconst_decl?(x) OR kconst_def?(x)
           OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   symbol]" language nil)
        (iconst? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (itype? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (ktheory? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
        (symbol? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (interp? const-decl "[semantic -> bool]" language nil)
        (interp type-eq-decl nil language nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (below type-eq-decl nil nat_types nil)
        (character type-decl nil character_adt nil)
        (char? adt-recognizer-decl "[character -> boolean]"
         character_adt nil)
        (char type-eq-decl nil strings nil)
        (symbol nonempty-type-eq-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil)
        (âˆˆ def-decl "bool" map nil))
       nil))
     (app_symbol_interp_TCC8 0
      (app_symbol_interp_TCC8-1 nil 3583008387
       ("" (recursive-judgement-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (interp? const-decl "[semantic -> bool]" language nil)
        (interp type-eq-decl nil language nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (below type-eq-decl nil nat_types nil)
        (character type-decl nil character_adt nil)
        (char? adt-recognizer-decl "[character -> boolean]"
         character_adt nil)
        (char type-eq-decl nil strings nil)
        (symbol nonempty-type-eq-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (map type-eq-decl nil language nil) (âˆˆ def-decl "bool" map nil)
        (interp formula-decl nil language nil)
        (decl const-decl "decl" decl nil)
        (definition? const-decl "bool" decl nil))
       nil))
     (kvar_app_symbol 0
      (kvar_app_symbol-1 nil 3582991711
       ("" (induct "Î“" :name "context_induction")
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (grind) nil nil) ("4" (grind) nil nil)
         ("5" (grind) nil nil) ("6" (grind) nil nil)
         ("7" (grind) nil nil) ("8" (grind) nil nil)
         ("9" (grind) nil nil)
         ("10" (grind)
          (("10" (use member_nonempty) (("10" (assert) nil nil)) nil))
          nil))
        nil)
       ((pretheory? const-decl "[semantic -> bool]" language nil)
        (pretheory type-eq-decl nil language nil)
        (preterm? const-decl "[semantic -> bool]" language nil)
        (preterm type-eq-decl nil language nil)
        (pretype? const-decl "[semantic -> bool]" language nil)
        (pretype type-eq-decl nil language nil)
        (decl const-decl "decl" decl nil)
        (ktype_decl adt-def-decl "boolean" decl nil)
        (kvar_decl adt-def-decl "boolean" decl nil)
        (kconst_decl adt-def-decl "boolean" decl nil)
        (â†‘ const-decl "decl" subst nil)
        (context_induction formula-decl nil inductions nil)
        (app_symbol def-decl "decl" map nil)
        (kind const-decl "kind" decl nil)
        (kind type-eq-decl nil language nil)
        (kind? const-decl "bool" language nil)
        (decl type-decl nil decl nil)
        (KVAR? adt-recognizer-decl "[keyword -> boolean]" language nil)
        (keyword type-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (âˆˆ def-decl "bool" map nil) (map type-eq-decl nil language nil)
        (map? const-decl "[semantic -> bool]" language nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (symbol nonempty-type-eq-decl nil language nil)
        (char type-eq-decl nil strings nil)
        (char? adt-recognizer-decl "[character -> boolean]"
         character_adt nil)
        (character type-decl nil character_adt nil)
        (below type-eq-decl nil nat_types nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (context type-eq-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (semantic type-decl nil language nil))
       shostak))
     (app_var_TCC1 0
      (app_var_TCC1-1 nil 3582305991 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (âˆˆ def-decl "bool" map nil)
        (nonempty formula-decl nil language nil))
       nil))
     (app_var_TCC2 0
      (app_var_TCC2-1 nil 3582305991 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (âˆˆ def-decl "bool" map nil) (decl const-decl "decl" decl nil))
       nil))
     (app_var_TCC3 0
      (app_var_TCC3-1 nil 3582305991 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (âˆˆ def-decl "bool" map nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (context formula-decl nil language nil))
       nil))
     (app_var_TCC4 0
      (app_var_TCC4-1 nil 3582305991 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (âˆˆ def-decl "bool" map nil)
        (context formula-decl nil language nil))
       nil))
     (app_var_TCC5 0
      (app_var_TCC5-1 nil 3582305991 ("" (grind) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (ord type-decl nil language nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (weight def-decl "nat" language nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (<= const-decl "bool" reals nil)
        (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
        (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
        (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
         nil)
        (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
        (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
        (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
         nil)
        (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
         nil)
        (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
         nil)
        (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
        (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
         language nil)
        (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
         language nil)
        (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
         language nil)
        (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
         language nil)
        (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
         nil)
        (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
        (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
         language nil)
        (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
         language nil)
        (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
         language nil)
        (âˆˆ def-decl "bool" map nil) (decl type-decl nil decl nil)
        (dvar? adt-recognizer-decl "[decl -> boolean]" decl nil)
        (context formula-decl nil language nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
        (iconst? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (itype? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (ktheory? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (kvar? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (â†‘ const-decl "decl" subst nil))
       nil))
     (app_var_TCC6 0
      (app_var_TCC6-1 nil 3582305991
       ("" (skosimp* :preds? t)
        (("" (smash)
          (("" (rewrite "context")
            (("" (rewrite "âˆˆ") (("" (smash) nil nil)) nil)) nil))
          nil))
        nil)
       ((context formula-decl nil language nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (âˆˆ def-decl "bool" map nil))
       nil))
     (app_var_TCC7 0
      (app_var_TCC7-1 nil 3582305991
       ("" (skosimp* :preds? t)
        (("" (rewrite "âˆˆ")
          (("" (rewrite "context") (("" (smash) nil nil)) nil)) nil))
        nil)
       ((context formula-decl nil language nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (âˆˆ def-decl "bool" map nil))
       nil))
     (app_var_TCC8 0
      (app_var_TCC8-1 nil 3582305991
       ("" (grind)
        (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
       ((context formula-decl nil language nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (âˆˆ def-decl "bool" map nil))
       nil))
     (app_var_TCC9 0
      (app_var_TCC9-3 nil 3582754594
       ("" (grind)
        (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
       ((context formula-decl nil language nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (weight def-decl "nat" language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (âˆˆ def-decl "bool" map nil))
       nil)
      (app_var_TCC9-2 nil 3582754313
       ("" (skosimp* :preds? t)
        (("" (expand âˆˆ -3)
          (("" (bddsimp -3)
            (("1" (propax) nil) ("2" (propax) nil)
             ("3" (inst - "rest(Î“!1)")
              (("1" (inst - x!1)
                (("1" (flatten)
                  (("1" (split 4)
                    (("1" (propax) nil)
                     ("2"
                      (case "weight(F)(rest(Î“!1)) < weight(F)(Î“!1)")
                      (("1" (grind) nil)
                       ("2" (hide -1 -2 -3 -4 -5 2 3 4 5)
                        (("2" (grind)
                          (("2" (typepred Î“!1)
                            (("2" (grind)
                              (("2"
                                (expand weight 1 2)
                                (("2"
                                  (grind)
                                  (("2"
                                    (reveal *)
                                    (("2"
                                      (propax)
                                      nil)))))))))))))))))))))))
               ("2" (postpone) nil))))))))
        nil)
       nil nil)
      (app_var_TCC9-1 nil 3582311613
       ("" (skosimp* :preds? t)
        (("" (expand âˆˆ -3)
          (("" (bddsimp -3)
            (("1" (propax) nil nil) ("2" (propax) nil nil)
             ("3" (inst - "rest(Î“!1)")
              (("1" (inst - x!1)
                (("1" (flatten)
                  (("1" (split 4)
                    (("1" (propax) nil nil)
                     ("2"
                      (case "weight(F)(rest(Î“!1)) <= weight(F)(Î“!1)")
                      (("1" (grind) nil nil)
                       ("2" (hide -1 -2 -3 -4 -5 2 3 4 5)
                        (("2" (grind)
                          (("2" (typepred Î“!1)
                            (("2" (grind)
                              (("2"
                                (expand weight 1 2)
                                (("2"
                                  (grind)
                                  (("2"
                                    (reveal *)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil)
       ((real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (context_as_nonempty formula-decl nil subtype nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (nonempty_context? const-decl "[semantic -> bool]" language
         nil)
        (nonempty_context type-eq-decl nil language nil)
        (context_rest judgement-tcc nil subtype nil)
        (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
        (iconst? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (itype? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (ktheory? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (ord type-decl nil language nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (weight def-decl "nat" language nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (<= const-decl "bool" reals nil)
        (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
        (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
        (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
         nil)
        (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
        (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
        (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
         nil)
        (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
         nil)
        (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
         nil)
        (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
        (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
         language nil)
        (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
         language nil)
        (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
         language nil)
        (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
         language nil)
        (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
         nil)
        (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
        (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
         language nil)
        (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
         language nil)
        (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
         language nil)
        (kvar? adt-recognizer-decl "[semantic -> boolean]" language
         nil))
       nil))
     (app_var_TCC10 0
      (app_var_TCC10-1 nil 3583002022 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (semantic type-decl nil language nil)
        (context? const-decl "[semantic -> bool]" language nil)
        (context type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (ord type-decl nil language nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (weight def-decl "nat" language nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (<= const-decl "bool" reals nil)
        (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
        (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
        (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
         nil)
        (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
        (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
        (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
         nil)
        (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
         nil)
        (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
         nil)
        (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
        (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
         language nil)
        (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
         language nil)
        (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
         language nil)
        (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
         language nil)
        (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
         nil)
        (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
        (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
         language nil)
        (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
         language nil)
        (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
         language nil)
        (âˆˆ def-decl "bool" map nil) (decl type-decl nil decl nil)
        (dvar? adt-recognizer-decl "[decl -> boolean]" decl nil)
        (â†‘ const-decl "decl" subst nil)
        (shift_size application-judgement "{B | size(B) = size(A)}"
         subst nil)
        (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
        (iconst? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (itype? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (ktheory? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (kvar? adt-recognizer-decl "[semantic -> boolean]" language
         nil)
        (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
         language nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil))
       nil)))

