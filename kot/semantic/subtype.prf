(subtype (name_is_pretype 0
          (name_is_pretype-1 nil 3582308672
           ("" (skosimp* :preds? t)
            (("" (rewrite "name") (("" (grind) nil nil)) nil)) nil)
           ((name formula-decl nil language nil)
            (pretype formula-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (name? const-decl "[semantic -> bool]" language nil)
            (name type-eq-decl nil language nil))
           nil))
         (name_is_preterm 0
          (name_is_preterm-1 nil 3582308672
           ("" (skosimp* :preds? t)
            (("" (rewrite "name") (("" (grind) nil nil)) nil)) nil)
           ((name formula-decl nil language nil)
            (preterm formula-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (name? const-decl "[semantic -> bool]" language nil)
            (name type-eq-decl nil language nil))
           nil))
         (pretype_is_expr 0
          (pretype_is_expr-1 nil 3582308672
           ("" (judgement-tcc) nil nil)
           ((expr formula-decl nil language nil)) nil))
         (preterm_is_expr 0
          (preterm_is_expr-1 nil 3582308672
           ("" (judgement-tcc) nil nil)
           ((expr formula-decl nil language nil)) nil))
         (expr_is_syntaxic 0
          (expr_is_syntaxic-1 nil 3582308672
           ("" (judgement-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (expr? const-decl "[semantic -> bool]" language nil)
            (expr type-eq-decl nil language nil)
            (expr formula-decl nil language nil)
            (syntaxic formula-decl nil language nil))
           nil))
         (nonempty_interp_is_interp 0
          (nonempty_interp_is_interp-1 nil 3582308672
           ("" (use "nonempty_interp")
            (("" (use "interp")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (inst * "x")
                  (("" (inst * "x")
                    (("" (lift-if) (("" (bddsimp) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ((interp formula-decl nil language nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (nonempty_interp? const-decl "[semantic -> bool]" language
             nil)
            (nonempty_interp type-eq-decl nil language nil)
            (nonempty_interp formula-decl nil language nil))
           nil))
         (interp_is_expr 0
          (interp_is_expr-1 nil 3582308672 ("" (judgement-tcc) nil nil)
           ((expr formula-decl nil language nil)) nil))
         (interp_is_map 0
          (interp_is_map-1 nil 3582308672
           ("" (skosimp* :preds? t)
            (("" (rewrite "interp") (("" (smash) nil nil)) nil)) nil)
           ((interp formula-decl nil language nil)
            (map formula-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (interp? const-decl "[semantic -> bool]" language nil)
            (interp type-eq-decl nil language nil))
           nil))
         (map_is_syntaxic 0
          (map_is_syntaxic-1 nil 3582308672
           ("" (skosimp* :preds? t)
            (("" (rewrite "map") (("" (smash) nil nil)) nil)) nil)
           ((map formula-decl nil language nil)
            (context formula-decl nil language nil)
            (pretype formula-decl nil language nil)
            (preterm formula-decl nil language nil)
            (interp formula-decl nil language nil)
            (pretheory formula-decl nil language nil)
            (syntaxic formula-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (map? const-decl "[semantic -> bool]" language nil)
            (map type-eq-decl nil language nil))
           nil))
         (nonempty_interp_is_nonempty 0
          (nonempty_interp_is_nonempty-1 nil 3582308672
           ("" (skosimp* :preds? t)
            (("" (rewrite "nonempty_interp") (("" (smash) nil nil))
              nil))
            nil)
           ((nonempty_interp formula-decl nil language nil)
            (interp formula-decl nil language nil)
            (nonempty formula-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (nonempty_interp? const-decl "[semantic -> bool]" language
             nil)
            (nonempty_interp type-eq-decl nil language nil))
           nil))
         (nonempty_context_is_nonempty 0
          (nonempty_context_is_nonempty-1 nil 3582308672
           ("" (skosimp* :preds? t)
            (("" (rewrite "nonempty_context") (("" (smash) nil nil))
              nil))
            nil)
           ((nonempty_context formula-decl nil language nil)
            (context formula-decl nil language nil)
            (nonempty formula-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (nonempty_context? const-decl "[semantic -> bool]" language
             nil)
            (nonempty_context type-eq-decl nil language nil))
           nil))
         (nonempty_is_map 0
          (nonempty_is_map-1 nil 3582308672
           ("" (use "nonempty")
            (("" (use "map")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (inst * "x")
                  (("" (inst * "x")
                    (("" (lift-if) (("" (smash) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ((map formula-decl nil language nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (nonempty? const-decl "[semantic -> bool]" language nil)
            (nonempty type-eq-decl nil language nil)
            (interp formula-decl nil language nil)
            (context formula-decl nil language nil)
            (nonempty formula-decl nil language nil))
           nil))
         (nonempty_context_is_context 0
          (nonempty_context_is_context-1 nil 3582308672
           ("" (use "nonempty_context")
            (("" (use "context")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (inst * "x")
                  (("" (inst * "x")
                    (("" (lift-if) (("" (bddsimp) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ((context formula-decl nil language nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (nonempty_context? const-decl "[semantic -> bool]" language
             nil)
            (nonempty_context type-eq-decl nil language nil)
            (nonempty_context formula-decl nil language nil))
           nil))
         (pretheory_is_context 0
          (pretheory_is_context-1 nil 3582308672
           ("" (induct-and-simplify "x") nil nil)
           ((semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
            (pretheory? const-decl "[semantic -> bool]" language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic_induction formula-decl nil language nil)
            (pretheory type-eq-decl nil language nil)
            (pretheory formula-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (context_is_map 0
          (context_is_map-1 nil 3582308672
           ("" (skosimp* :preds? t)
            (("" (rewrite "context") (("" (smash) nil nil)) nil)) nil)
           ((context formula-decl nil language nil)
            (map formula-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context type-eq-decl nil language nil))
           nil))
         (pretheory_is_expr 0
          (pretheory_is_expr-1 nil 3583006538
           ("" (judgement-tcc) nil nil)
           ((expr formula-decl nil language nil)) nil))
         (name_when_nonempty_interp 0
          (name_when_nonempty_interp-3 nil 3582388981
           ("" (use "name")
            (("" (use "nonempty_interp")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((nonempty_interp formula-decl nil language nil)
            (nonempty_interp type-eq-decl nil language nil)
            (nonempty_interp? const-decl "[semantic -> bool]" language
             nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (name formula-decl nil language nil))
           nil)
          (name_when_nonempty_interp-2 nil 3582388724
           ("" (use "name")
            (("" (use "nonempty_interp")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (inst * "x")
                  (("" (inst * "x")
                    (("" (lift-if) (("" (bddsimp) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ((name formula-decl nil language nil)
            (semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (nonempty_interp? const-decl "[semantic -> bool]" language
             nil)
            (nonempty_interp type-eq-decl nil language nil)
            (nonempty_interp formula-decl nil language nil))
           nil)
          (name_when_nonempty_interp-1 nil 3582385200
           ("" (subtype-tcc)
            (("" (rewrite "nonempty_interp")
              (("" (rewrite "name") (("" (subtype-tcc) nil nil)) nil))
              nil))
            nil)
           ((nonempty_interp formula-decl nil language nil)
            (interp formula-decl nil language nil)
            (name formula-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (nonempty_interp? const-decl "[semantic -> bool]" language
             nil)
            (nonempty_interp type-eq-decl nil language nil))
           nil))
         (name_when_interp 0
          (name_when_interp-2 nil 3582388983
           ("" (use "name")
            (("" (use "interp")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((interp formula-decl nil language nil)
            (interp type-eq-decl nil language nil)
            (interp? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (name formula-decl nil language nil))
           nil)
          (name_when_interp-1 nil 3582385200
           ("" (judgement-tcc) nil nil) nil nil))
         (name_when_nonempty 0
          (name_when_nonempty-4 nil 3582389039
           ("" (use "name")
            (("" (use "nonempty")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((nonempty formula-decl nil language nil)
            (nonempty type-eq-decl nil language nil)
            (nonempty? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (name formula-decl nil language nil))
           nil)
          (name_when_nonempty-3 nil 3582388990
           ("" (use "name")
            (("" (use "nonempty")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil))))))))))
            nil)
           nil nil)
          (name_when_nonempty-2 nil 3582387260
           ("" (use "name")
            (("" (use "nonempty")
              (("" (skosimp* :preds? t)
                (("" (inst?)
                  (("" (inst?)
                    (("" (lift-if) (("" (bddsimp) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ((name formula-decl nil language nil)
            (nonempty type-eq-decl nil language nil)
            (nonempty? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (nonempty formula-decl nil language nil))
           nil)
          (name_when_nonempty-1 nil 3582385200
           ("" (judgement-tcc) nil nil) nil nil))
         (name_when_context 0
          (name_when_context-2 nil 3582389043
           ("" (use "name")
            (("" (use "context")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((context formula-decl nil language nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (name formula-decl nil language nil))
           nil)
          (name_when_context-1 nil 3582385200
           ("" (judgement-tcc) nil nil) nil nil))
         (name_when_map 0
          (name_when_map-2 nil 3582389045
           ("" (use "name")
            (("" (use "map")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((map formula-decl nil language nil)
            (map type-eq-decl nil language nil)
            (map? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (name formula-decl nil language nil))
           nil)
          (name_when_map-1 nil 3582385200
           ("" (use "map")
            (("" (use "name") (("" (subtype-tcc) nil nil)) nil)) nil)
           ((name formula-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (map? const-decl "[semantic -> bool]" language nil)
            (map type-eq-decl nil language nil)
            (map formula-decl nil language nil))
           nil))
         (pretype_when_nonempty_interp 0
          (pretype_when_nonempty_interp-2 nil 3582389047
           ("" (use "pretype")
            (("" (use "nonempty_interp")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((nonempty_interp formula-decl nil language nil)
            (nonempty_interp type-eq-decl nil language nil)
            (nonempty_interp? const-decl "[semantic -> bool]" language
             nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (pretype formula-decl nil language nil))
           nil)
          (pretype_when_nonempty_interp-1 nil 3582385200
           ("" (judgement-tcc) nil nil) nil nil))
         (pretype_when_interp 0
          (pretype_when_interp-2 nil 3582389048
           ("" (use "pretype")
            (("" (use "interp")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((interp formula-decl nil language nil)
            (interp type-eq-decl nil language nil)
            (interp? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (pretype formula-decl nil language nil))
           nil)
          (pretype_when_interp-1 nil 3582385200
           ("" (judgement-tcc) nil nil) nil nil))
         (pretype_when_nonempty 0
          (pretype_when_nonempty-2 nil 3582389050
           ("" (use "pretype")
            (("" (use "nonempty")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((nonempty formula-decl nil language nil)
            (nonempty type-eq-decl nil language nil)
            (nonempty? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (pretype formula-decl nil language nil))
           nil)
          (pretype_when_nonempty-1 nil 3582385200
           ("" (judgement-tcc) nil nil) nil nil))
         (pretype_when_context 0
          (pretype_when_context-2 nil 3582389052
           ("" (use "pretype")
            (("" (use "context")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((context formula-decl nil language nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (pretype formula-decl nil language nil))
           nil)
          (pretype_when_context-1 nil 3582385200
           ("" (judgement-tcc) nil nil) nil nil))
         (pretype_when_map 0
          (pretype_when_map-2 nil 3582389054
           ("" (use "pretype")
            (("" (use "map")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((map formula-decl nil language nil)
            (map type-eq-decl nil language nil)
            (map? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (pretype formula-decl nil language nil))
           nil)
          (pretype_when_map-1 nil 3582309753
           ("" (skosimp* :preds? t)
            (("" (rewrite "map") (("" (smash) nil nil)) nil)) nil)
           ((map formula-decl nil language nil)
            (pretype formula-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (map? const-decl "[semantic -> bool]" language nil)
            (map type-eq-decl nil language nil))
           shostak))
         (preterm_when_nonempty_interp 0
          (preterm_when_nonempty_interp-2 nil 3582
           ("" (use "preterm")
            (("" (use "nonempty_interp")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((nonempty_interp formula-decl nil language nil)
            (nonempty_interp type-eq-decl nil language nil)
            (nonempty_interp? const-decl "[semantic -> bool]" language
             nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (preterm formula-decl nil language nil))
           nil)
          (preterm_when_nonempty_interp-1 nil 3582385200
           ("" (judgement-tcc) nil nil) nil nil))
         (preterm_when_interp 0
          (preterm_when_interp-2 nil 3582389057
           ("" (use "preterm")
            (("" (use "interp")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((interp formula-decl nil language nil)
            (interp type-eq-decl nil language nil)
            (interp? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (preterm formula-decl nil language nil))
           nil)
          (preterm_when_interp-1 nil 3582385200
           ("" (judgement-tcc) nil nil) nil nil))
         (preterm_when_nonempty 0
          (preterm_when_nonempty-3 nil 3582389060
           ("" (use "preterm")
            (("" (use "nonempty")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((nonempty formula-decl nil language nil)
            (nonempty type-eq-decl nil language nil)
            (nonempty? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (preterm formula-decl nil language nil))
           nil)
          (preterm_when_nonempty-2 nil 3582385799
           ("" (use "nonempty")
            (("" (use "preterm")
              (("" (skosimp* :preds? t)
                (("" (inst?)
                  (("" (inst?)
                    (("" (lift-if) (("" (bddsimp) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ((preterm formula-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (nonempty? const-decl "[semantic -> bool]" language nil)
            (nonempty type-eq-decl nil language nil)
            (nonempty formula-decl nil language nil))
           nil)
          (preterm_when_nonempty-1 nil 3582385200
           ("" (judgement-tcc) nil nil) nil nil))
         (preterm_when_context 0
          (preterm_when_context-8 "" 3582389065
           ("" (use "preterm")
            (("" (use "context")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((context formula-decl nil language nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (preterm formula-decl nil language nil))
           nil)
          (preterm_when_context-7 "" 3582387170
           ("" (use "preterm")
            (("" (use "context")
              (("" (skosimp* :preds? t)
                (("" (repeat* (inst?))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil))))))))))
            nil)
           ((preterm formula-decl nil language nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (context formula-decl nil language nil))
           nil)
          (preterm_when_context-6 "" 3582386955
           ("" (use "preterm")
            (("" (use "context")
              (("" (skosimp* :preds? t)
                (("" (inst?)
                  (("" (inst?)
                    (("" (lift-if) (("" (bddsimp) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ((preterm formula-decl nil language nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (context formula-decl nil language nil))
           nil)
          (preterm_when_context-5 "" 3582386832
           ("" (use "preterm")
            (("" (use "context")
              (("" (skosimp* :preds? t)
                (("" (inst?)
                  (("" (inst?)
                    (("" (lift-if) (("" (bddsimp) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           nil shostak)
          (preterm_when_context-4 nil 3582386818
           ("" (use "preterm")
            (("" (use "context")
              (("" (skosimp* :preds? t)
                (("" (repeat* (inst?))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil))))))))))
            nil)
           ((preterm formula-decl nil language nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (context formula-decl nil language nil))
           nil)
          (preterm_when_context-3 nil 3582386559
           ("" (use "preterm")
            (("" (use "context")
              (("" (skosimp* :preds? t)
                (("" (inst?)
                  (("" (inst?)
                    (("" (lift-if) (("" (bddsimp) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ((preterm formula-decl nil language nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (semantic type-decl nil language nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (context formula-decl nil language nil))
           nil)
          (preterm_when_context-2 nil 3582386508
           ("" (use "preterm")
            (("" (use "context")
              (("" (skosimp* :preds? t)
                (("" (inst?) (("" (inst?) (("" (bddsimp) nil))))))))))
            nil)
           nil nil)
          (preterm_when_context-1 nil 3582385200
           ("" (judgement-tcc) nil nil) nil nil))
         (preterm_when_map 0
          (preterm_when_map-2 nil 3582389067
           ("" (use "preterm")
            (("" (use "map")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((map formula-decl nil language nil)
            (map type-eq-decl nil language nil)
            (map? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (preterm formula-decl nil language nil))
           nil)
          (preterm_when_map-1 nil 3582309770
           ("" (skosimp* :preds? t)
            (("" (rewrite "map") (("" (smash) nil nil)) nil)) nil)
           ((map formula-decl nil language nil)
            (preterm formula-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (map? const-decl "[semantic -> bool]" language nil)
            (map type-eq-decl nil language nil))
           shostak))
         (nonempty_interp_when_name 0
          (nonempty_interp_when_name-1 nil 3582385200
           ("" (use "nonempty_interp")
            (("" (use "name")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((name formula-decl nil language nil)
            (name type-eq-decl nil language nil)
            (name? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nonempty_interp formula-decl nil language nil))
           nil))
         (nonempty_interp_when_pretype 0
          (nonempty_interp_when_pretype-1 nil 3582385200
           ("" (use "nonempty_interp")
            (("" (use "pretype")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((pretype formula-decl nil language nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nonempty_interp formula-decl nil language nil))
           nil))
         (nonempty_interp_when_preterm 0
          (nonempty_interp_when_preterm-1 nil 3582385200
           ("" (use "nonempty_interp")
            (("" (use "preterm")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((preterm formula-decl nil language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nonempty_interp formula-decl nil language nil))
           nil))
         (interp_when_name 0
          (interp_when_name-1 nil 3582385200
           ("" (use "interp")
            (("" (use "name")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((name formula-decl nil language nil)
            (name type-eq-decl nil language nil)
            (name? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (interp formula-decl nil language nil))
           nil))
         (interp_when_pretype 0
          (interp_when_pretype-1 nil 3582385200
           ("" (use "interp")
            (("" (use "pretype")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((pretype formula-decl nil language nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (interp formula-decl nil language nil))
           nil))
         (interp_when_preterm 0
          (interp_when_preterm-1 nil 3582385200
           ("" (use "interp")
            (("" (use "preterm")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((preterm formula-decl nil language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (interp formula-decl nil language nil))
           nil))
         (nonempty_when_name 0
          (nonempty_when_name-1 nil 3582385200
           ("" (use "nonempty")
            (("" (use "name")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((name formula-decl nil language nil)
            (name type-eq-decl nil language nil)
            (name? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nonempty formula-decl nil language nil))
           nil))
         (nonempty_when_pretype 0
          (nonempty_when_pretype-1 nil 3582385200
           ("" (use "nonempty")
            (("" (use "pretype")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((pretype formula-decl nil language nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nonempty formula-decl nil language nil))
           nil))
         (nonempty_when_preterm 0
          (nonempty_when_preterm-1 nil 3582385200
           ("" (use "nonempty")
            (("" (use "preterm")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((preterm formula-decl nil language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nonempty formula-decl nil language nil))
           nil))
         (nonempty_context_when_name 0
          (nonempty_context_when_name-1 nil 3582385200
           ("" (use "nonempty_context")
            (("" (use "name")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((name formula-decl nil language nil)
            (name type-eq-decl nil language nil)
            (name? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nonempty_context formula-decl nil language nil))
           nil))
         (nonempty_context_when_pretype 0
          (nonempty_context_when_pretype-1 nil 3582385200
           ("" (use "nonempty_context")
            (("" (use "pretype")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((pretype formula-decl nil language nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nonempty_context formula-decl nil language nil))
           nil))
         (nonempty_context_when_preterm 0
          (nonempty_context_when_preterm-1 nil 3582385200
           ("" (use "nonempty_context")
            (("" (use "preterm")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((preterm formula-decl nil language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nonempty_context formula-decl nil language nil))
           nil))
         (context_when_name 0
          (context_when_name-1 nil 3582385200
           ("" (use "context")
            (("" (use "name")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((name formula-decl nil language nil)
            (name type-eq-decl nil language nil)
            (name? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (context_when_pretype 0
          (context_when_pretype-1 nil 3582385200
           ("" (use "context")
            (("" (use "pretype")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((pretype formula-decl nil language nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (context_when_preterm 0
          (context_when_preterm-1 nil 3582385200
           ("" (use "context")
            (("" (use "preterm")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((preterm formula-decl nil language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (pretheory_when_name 0
          (pretheory_when_name-1 nil 3582385200
           ("" (use "pretheory")
            (("" (use "name")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((name formula-decl nil language nil)
            (name type-eq-decl nil language nil)
            (name? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (pretheory_when_pretype 0
          (pretheory_when_pretype-1 nil 3582385200
           ("" (use "pretheory")
            (("" (use "pretype")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((pretype formula-decl nil language nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (pretheory_when_preterm 0
          (pretheory_when_preterm-1 nil 3582385200
           ("" (use "pretheory")
            (("" (use "preterm")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((preterm formula-decl nil language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (map_when_name 0
          (map_when_name-1 nil 3582385200
           ("" (use "map")
            (("" (use "name")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((name formula-decl nil language nil)
            (name type-eq-decl nil language nil)
            (name? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (map formula-decl nil language nil))
           nil))
         (map_when_pretype 0
          (map_when_pretype-1 nil 3582309723
           ("" (use "map")
            (("" (use "pretype")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((pretype formula-decl nil language nil)
            (pretype type-eq-decl nil language nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (map formula-decl nil language nil))
           shostak))
         (map_when_preterm 0
          (map_when_preterm-1 nil 3582309761
           ("" (use "map")
            (("" (use "preterm")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((preterm formula-decl nil language nil)
            (preterm type-eq-decl nil language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (map formula-decl nil language nil))
           shostak))
         (interp_when_nonempty_context 0
          (interp_when_nonempty_context-1 nil 3582385200
           ("" (use "interp")
            (("" (use "nonempty_context")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((nonempty_context formula-decl nil language nil)
            (nonempty_context type-eq-decl nil language nil)
            (nonempty_context? const-decl "[semantic -> bool]" language
             nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (interp formula-decl nil language nil))
           nil))
         (interp_when_pretheory 0
          (interp_when_pretheory-1 nil 3582385200
           ("" (use "interp")
            (("" (use "pretheory")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((pretheory formula-decl nil language nil)
            (pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (interp formula-decl nil language nil))
           nil))
         (interp_when_context 0
          (interp_when_context-1 nil 3582385200
           ("" (use "interp")
            (("" (use "context")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((context formula-decl nil language nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (interp formula-decl nil language nil))
           nil))
         (nonempty_interp_when_nonempty_context 0
          (nonempty_interp_when_nonempty_context-1 nil 3582385200
           ("" (use "nonempty_interp")
            (("" (use "nonempty_context")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((nonempty_context formula-decl nil language nil)
            (nonempty_context type-eq-decl nil language nil)
            (nonempty_context? const-decl "[semantic -> bool]" language
             nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nonempty_interp formula-decl nil language nil))
           nil))
         (nonempty_interp_when_pretheory 0
          (nonempty_interp_when_pretheory-1 nil 3582385200
           ("" (use "nonempty_interp")
            (("" (use "pretheory")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((pretheory formula-decl nil language nil)
            (pretheory type-eq-decl nil language nil)
            (pretheory? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nonempty_interp formula-decl nil language nil))
           nil))
         (nonempty_interp_when_context 0
          (nonempty_interp_when_context-1 nil 3582385200
           ("" (use "nonempty_interp")
            (("" (use "context")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((context formula-decl nil language nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nonempty_interp formula-decl nil language nil))
           nil))
         (nonempty_context_when_interp 0
          (nonempty_context_when_interp-1 nil 3582385200
           ("" (use "nonempty_context")
            (("" (use "interp")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((interp formula-decl nil language nil)
            (interp type-eq-decl nil language nil)
            (interp? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (nonempty_context formula-decl nil language nil))
           nil))
         (pretheory_when_interp 0
          (pretheory_when_interp-1 nil 3582385200
           ("" (use "pretheory")
            (("" (use "interp")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((interp formula-decl nil language nil)
            (interp type-eq-decl nil language nil)
            (interp? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (pretheory formula-decl nil language nil))
           nil))
         (context_when_interp 0
          (context_when_interp-1 nil 3582385200
           ("" (use "context")
            (("" (use "interp")
              (("" (skolem * "x" :skolem-typepreds? t)
                (("" (repeat* (inst * "x"))
                  (("" (repeat* (lift-if)) (("" (bddsimp) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((interp formula-decl nil language nil)
            (interp type-eq-decl nil language nil)
            (interp? const-decl "[semantic -> bool]" language nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (boolean nonempty-type-decl nil booleans nil)
            (semantic type-decl nil language nil)
            (context formula-decl nil language nil))
           nil))
         (expr_split 0
          (expr_split-1 nil 3582393253
           ("" (skosimp* :preds? t)
            (("" (rewrite "expr") (("" (bddsimp) nil nil)) nil)) nil)
           ((expr formula-decl nil language nil)
            (semantic type-decl nil language nil))
           shostak))
         (map_split 0
          (map_split-1 nil 3582383918
           ("" (skosimp* :preds? t)
            (("" (rewrite "interp")
              (("" (rewrite "context")
                (("" (rewrite "map")
                  (("" (lift-if)
                    (("" (lift-if)
                      (("" (lift-if)
                        (("" (lift-if)
                          (("" (lift-if)
                            (("" (lift-if)
                              ((""
                                (lift-if)
                                ((""
                                  (lift-if)
                                  ((""
                                    (lift-if)
                                    ((""
                                      (lift-if)
                                      (("" (bddsimp) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((interp formula-decl nil language nil)
            (semantic type-decl nil language nil)
            (map formula-decl nil language nil)
            (context formula-decl nil language nil))
           shostak))
         (syntaxic_split 0
          (syntaxic_split-1 nil 3582393302
           ("" (skosimp* :preds? t)
            (("" (rewrite "syntaxic")
              (("" (rewrite "expr")
                (("" (rewrite "map_split")
                  (("" (bddsimp)
                    (("" (assert)
                      (("" (use "pretheory_is_context")
                        (("" (use "name_is_preterm" :polarity? t) nil
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((syntaxic formula-decl nil language nil)
            (semantic type-decl nil language nil)
            (map_split formula-decl nil subtype nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (name? const-decl "[semantic -> bool]" language nil)
            (name type-eq-decl nil language nil)
            (name_is_preterm judgement-tcc nil subtype nil)
            (pretheory_is_context judgement-tcc nil subtype nil)
            (expr formula-decl nil language nil))
           shostak))
         (nonempty_split 0
          (nonempty_split-1 nil 3582393448
           ("" (skosimp* :preds? t)
            (("" (rewrite "nonempty_interp")
              (("" (rewrite "nonempty")
                (("" (rewrite "nonempty_context")
                  (("" (lift-if)
                    (("" (lift-if)
                      (("" (lift-if)
                        (("" (lift-if)
                          (("" (lift-if)
                            (("" (lift-if)
                              ((""
                                (lift-if)
                                ((""
                                  (lift-if)
                                  ((""
                                    (lift-if)
                                    (("" (bddsimp) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ((nonempty_interp formula-decl nil language nil)
            (semantic type-decl nil language nil)
            (interp formula-decl nil language nil)
            (nonempty_context formula-decl nil language nil)
            (context formula-decl nil language nil)
            (nonempty formula-decl nil language nil))
           shostak))
         (map_as_nonempty 0
          (map_as_nonempty-1 nil 3582308881
           ("" (skosimp* :preds? t)
            (("" (rewrite "map")
              (("" (rewrite "nonempty")
                (("" (lift-if)
                  (("" (lift-if)
                    (("" (lift-if) (("" (bddsimp) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ((map formula-decl nil language nil)
            (semantic type-decl nil language nil)
            (interp formula-decl nil language nil)
            (context formula-decl nil language nil)
            (nonempty formula-decl nil language nil))
           shostak))
         (interp_as_nonempty 0
          (interp_as_nonempty-1 nil 3582393857
           ("" (skosimp* :preds? t)
            (("" (rewrite "interp")
              (("" (rewrite "nonempty_interp")
                (("" (lift-if)
                  (("" (lift-if) (("" (bddsimp) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ((interp formula-decl nil language nil)
            (semantic type-decl nil language nil)
            (nonempty_interp formula-decl nil language nil))
           shostak))
         (context_as_nonempty 0
          (context_as_nonempty-1 nil 3582393880
           ("" (skosimp* :preds? t)
            (("" (rewrite "context")
              (("" (rewrite "nonempty_context")
                (("" (lift-if)
                  (("" (lift-if) (("" (bddsimp) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ((context formula-decl nil language nil)
            (semantic type-decl nil language nil)
            (nonempty_context formula-decl nil language nil))
           shostak))
         (nonempty_as_map 0
          (nonempty_as_map-1 nil 3582308939
           ("" (skosimp* :preds? t)
            (("" (rewrite "map_as_nonempty")
              (("" (bddsimp)
                (("1" (assert) (("1" (assert) nil nil)) nil)
                 ("2" (assert) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ((map_as_nonempty formula-decl nil subtype nil)
            (semantic type-decl nil language nil)
            (nonempty formula-decl nil language nil))
           shostak))
         (nonempty_context_as_context 0
          (nonempty_context_as_context-1 nil 3582309538
           ("" (skosimp* :preds? t)
            (("" (rewrite "context_as_nonempty") (("" (smash) nil nil))
              nil))
            nil)
           ((context_as_nonempty formula-decl nil subtype nil)
            (semantic type-decl nil language nil)
            (nonempty_context formula-decl nil language nil))
           shostak))
         (nonempty_interp_as_interp 0
          (nonempty_interp_as_interp-1 nil 3582309638
           ("" (skosimp* :preds? t)
            (("" (rewrite "interp_as_nonempty") (("" (smash) nil nil))
              nil))
            nil)
           ((interp_as_nonempty formula-decl nil subtype nil)
            (semantic type-decl nil language nil)
            (nonempty_interp formula-decl nil language nil))
           shostak))
         (nonempty_rest_TCC1 0
          (nonempty_rest_TCC1-1 nil 3582308672
           ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (nonempty? const-decl "[semantic -> bool]" language nil)
            (nonempty type-eq-decl nil language nil)
            (nonempty formula-decl nil language nil))
           nil))
         (nonempty_rest 0
          (nonempty_rest-1 nil 3582308672
           ("" (skosimp* :preds? t)
            (("" (rewrite "nonempty")
              (("" (rewrite "context_is_map")
                (("1" (smash) nil nil)
                 ("2" (rewrite "interp_is_map") (("2" (smash) nil nil))
                  nil)
                 ("3" (smash) nil nil))
                nil))
              nil))
            nil)
           ((nonempty formula-decl nil language nil)
            (context formula-decl nil language nil)
            (interp formula-decl nil language nil)
            (interp type-eq-decl nil language nil)
            (interp? const-decl "[semantic -> bool]" language nil)
            (interp_is_map judgement-tcc nil subtype nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (weight def-decl "nat" language nil)
            (rest shared-adt-accessor-decl
                  "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
                  language nil)
            (iconst? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (itype? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktheory? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kvar? adt-recognizer-decl "[semantic -> boolean]" language
             nil)
            (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (OR const-decl "[bool, bool -> bool]" booleans nil)
            (context type-eq-decl nil language nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (context_is_map judgement-tcc nil subtype nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (nonempty? const-decl "[semantic -> bool]" language nil)
            (nonempty type-eq-decl nil language nil))
           nil))
         (context_rest_TCC1 0
          (context_rest_TCC1-1 nil 3582308672
           ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (nonempty_context? const-decl "[semantic -> bool]" language
             nil)
            (nonempty_context type-eq-decl nil language nil)
            (nonempty_context formula-decl nil language nil))
           nil))
         (context_rest 0
          (context_rest-1 nil 3582308672
           ("" (skosimp* :preds? t)
            (("" (rewrite "nonempty_context") (("" (smash) nil nil))
              nil))
            nil)
           ((nonempty_context formula-decl nil language nil)
            (nonempty_rest application-judgement
             "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
            (context formula-decl nil language nil)
            (weight def-decl "nat" language nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (nonempty_context? const-decl "[semantic -> bool]" language
             nil)
            (nonempty_context type-eq-decl nil language nil))
           nil))
         (interp_rest_TCC1 0
          (interp_rest_TCC1-1 nil 3582308672 ("" (subtype-tcc) nil nil)
           ((boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (nonempty_interp? const-decl "[semantic -> bool]" language
             nil)
            (nonempty_interp type-eq-decl nil language nil)
            (nonempty_interp formula-decl nil language nil))
           nil))
         (interp_rest 0
          (interp_rest-1 nil 3582308672
           ("" (skosimp* :preds? t)
            (("" (rewrite "nonempty_interp") (("" (smash) nil nil))
              nil))
            nil)
           ((nonempty_interp formula-decl nil language nil)
            (nonempty_rest application-judgement
             "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
            (interp formula-decl nil language nil)
            (weight def-decl "nat" language nil)
            (posint_plus_nnint_is_posint application-judgement "posint"
             integers nil)
            (nnint_plus_nnint_is_nnint application-judgement
             "nonneg_int" integers nil)
            (nnint_plus_posint_is_posint application-judgement "posint"
             integers nil)
            (real_lt_is_strict_total_order name-judgement
             "(strict_total_order?[real])" real_props nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (NOT const-decl "[bool -> bool]" booleans nil)
            (semantic type-decl nil language nil)
            (nonempty_interp? const-decl "[semantic -> bool]" language
             nil)
            (nonempty_interp type-eq-decl nil language nil))
           nil)))

