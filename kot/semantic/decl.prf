(decl
 (find_TCC1 0
  (find_TCC1-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
   nil))
 (find_TCC2 0
  (find_TCC2-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (find_TCC3 0
  (find_TCC3-1 nil 3583161319 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (find_TCC4 0
  (find_TCC4-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (find_TCC5 0
  (find_TCC5-1 nil 3583161319
   ("" (subtype-tcc)
    (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
   nil))
 (find_TCC6 0
  (find_TCC6-1 nil 3583161319
   ("" (subtype-tcc)
    (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
   nil))
 (find_TCC7 0
  (find_TCC7-1 nil 3583161319
   ("" (subtype-tcc)
    (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
   nil))
 (dsymbols_find 0
  (dsymbols_find-1 nil 3583166367
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil))
    nil)
   ((pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (context_induction formula-decl nil inductions nil)
    (find def-decl "context" decl nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (set type-eq-decl nil sets nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   shostak))
 (dvars_find 0
  (dvars_find-1 nil 3583166377
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil))
    nil)
   ((pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (pretheory formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (dvars_pretheory formula-decl nil syntaxic_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (context_induction formula-decl nil inductions nil)
    (find def-decl "context" decl nil)
    (dvars def-decl "nat" syntaxic_sets nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (set type-eq-decl nil sets nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   shostak))
 (symbols_find 0
  (symbols_find-1 nil 3583165960
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil))
    nil)
   ((pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (union const-decl "set" sets nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (context_induction formula-decl nil inductions nil)
    (find def-decl "context" decl nil)
    (symbols def-decl "set[symbol]" syntaxic_sets nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (set type-eq-decl nil sets nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   shostak))
 (vars_find 0
  (vars_find-1 nil 3583165977
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil)
     ("5" (skosimp* :preds? t)
      (("5" (assert)
        (("5" (grind-with-ext :if-match nil) (("5" (grind) nil nil))
          nil))
        nil))
      nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil)
     ("9" (grind) nil nil))
    nil)
   ((semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (vars def-decl "set[nat]" syntaxic_sets nil)
    (find def-decl "context" decl nil)
    (context_induction formula-decl nil inductions nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (union const-decl "set" sets nil)
    (- const-decl "set[nat]" syntaxic_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil))
   shostak))
 (find_is_closed 0
  (find_is_closed-1 nil 3583165953
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (expand "closed?")
        (("" (assert)
          (("" (skosimp* :preds? t)
            (("" (assert)
              ((""
                (auto-rewrite ("definition" "closed?" "definition?"
                               "find" "union" "member" "subset?"
                               "difference" "type_"))
                (("" (assert)
                  (("" (split +)
                    (("1" (assert)
                      (("1" (skosimp* :preds? t)
                        (("1" (lemma "vars_find")
                          (("1" (inst - "Δ!1" "s!1")
                            (("1" (assert)
                              (("1"
                                (inst - "x!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -6
                                       "x!1 + dvars(Δ!1) - dvars(find(Δ!1)(s!1))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "dvars_find")
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "dvars_find")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "symbols_find")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (symbols_find formula-decl nil decl nil)
    (vars_find formula-decl nil decl nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dvars def-decl "nat" syntaxic_sets nil)
    (find def-decl "context" decl nil)
    (dvars_find formula-decl nil decl nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (closed? const-decl "bool" syntaxic_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
   nil))
 (find_is_uniques 0
  (find_is_uniques-1 nil 3583165953
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil))
    nil)
   ((pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (context_induction formula-decl nil inductions nil)
    (find def-decl "context" decl nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (set type-eq-decl nil sets nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" syntaxic_sets nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   nil))
 (after_TCC1 0
  (after_TCC1-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((pretheory formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil))
   nil))
 (after_TCC2 0
  (after_TCC2-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC3 0
  (after_TCC3-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC4 0
  (after_TCC4-1 nil 3583243461 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC5 0
  (after_TCC5-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((pretheory formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (after_TCC6 0
  (after_TCC6-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((pretheory formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil))
   nil))
 (after_TCC7 0
  (after_TCC7-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC8 0
  (after_TCC8-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC9 0
  (after_TCC9-1 nil 3583243461 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC10 0
  (after_TCC10-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (after_TCC11 0
  (after_TCC11-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((pretheory formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil))
   nil))
 (after_TCC12 0
  (after_TCC12-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC13 0
  (after_TCC13-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC14 0
  (after_TCC14-1 nil 3583243461 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC15 0
  (after_TCC15-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((pretheory formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (after_TCC16 0
  (after_TCC16-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC17 0
  (after_TCC17-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC18 0
  (after_TCC18-1 nil 3583243461 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC19 0
  (after_TCC19-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (after_TCC20 0
  (after_TCC20-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((pretheory formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil))
   nil))
 (after_TCC21 0
  (after_TCC21-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC22 0
  (after_TCC22-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC23 0
  (after_TCC23-1 nil 3583243461 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC24 0
  (after_TCC24-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (after_TCC25 0
  (after_TCC25-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((pretheory formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil))
   nil))
 (after_TCC26 0
  (after_TCC26-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC27 0
  (after_TCC27-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC28 0
  (after_TCC28-1 nil 3583243461 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC29 0
  (after_TCC29-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (after_TCC30 0
  (after_TCC30-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((pretheory formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil))
   nil))
 (after_TCC31 0
  (after_TCC31-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC32 0
  (after_TCC32-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC33 0
  (after_TCC33-1 nil 3583243461 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC34 0
  (after_TCC34-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (after_TCC35 0
  (after_TCC35-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((pretheory formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil))
   nil))
 (after_TCC36 0
  (after_TCC36-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC37 0
  (after_TCC37-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC38 0
  (after_TCC38-1 nil 3583243461 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (after_TCC39 0
  (after_TCC39-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (after_TCC40 0
  (after_TCC40-1 nil 3583243461 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (extract_TCC1 0
  (extract_TCC1-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((pretheory formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil))
   nil))
 (extract_TCC2 0
  (extract_TCC2-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((pretheory formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil))
   nil))
 (extract_TCC3 0
  (extract_TCC3-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((pretheory formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil))
   nil))
 (extract_TCC4 0
  (extract_TCC4-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((pretheory formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil))
   nil))
 (extract_TCC5 0
  (extract_TCC5-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((pretheory formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil))
   nil))
 (extract_TCC6 0
  (extract_TCC6-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((pretheory formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil))
   nil))
 (extract_TCC7 0
  (extract_TCC7-1 nil 3583243461 ("" (subtype-tcc) nil nil)
   ((pretheory formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil))
   nil))
 (find_as_concat 0
  (find_as_concat-1 nil 3583239391
   ("" (auto-rewrite "find")
    (("" (induct "Γ" :name "context_induction")
      (("1" (grind) nil nil)
       ("2" (skosimp* :preds? t)
        (("2" (assert)
          (("2" (assert)
            (("2" (expand "add")
              (("2" (expand "member")
                (("2" (case "s!1 = s!2")
                  (("1" (assert)
                    (("1" (delete -2)
                      (("1" (inst + "〈〉" "ktype_decl(s!1, 〈〉)")
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (inst - "s!2")
                      (("2" (assert)
                        (("2" (skosimp* :preds? t)
                          (("2" (assert)
                            (("2" (inst + "ktype_decl(s!1, Δ!2)" "D!1")
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skosimp* :preds? t)
        (("3" (assert)
          (("3" (expand* ("add" "member"))
            (("3" (expand* ("add" "member"))
              (("3" (case "s!1 = s!2")
                (("1" (assert)
                  (("1" (inst + "〈〉" "ktype_def(s!1, T!1, 〈〉)")
                    (("1" (assert) nil nil)
                     ("2" (assert) (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (inst - "s!2")
                    (("2" (skosimp* :preds? t)
                      (("2" (inst + "ktype_def(s!1, T!1, Δ!2)" "D!1")
                        (("1" (assert) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skosimp* :preds? t)
        (("4" (assert)
          (("4" (assert)
            (("4" (expand* ("add" "member"))
              (("4" (case "s!1 = s!2")
                (("1" (assert)
                  (("1" (inst + "〈〉" "ktype_ext(s!1, 〈〉)")
                    (("1" (assert) nil nil)
                     ("2" (assert) (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (inst - "s!2")
                  (("1" (assert)
                    (("1" (skosimp* :preds? t)
                      (("1" (inst + "ktype_ext(s!1, Δ!2)" "D!1")
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skosimp* :preds? t)
        (("5" (assert)
          (("5" (inst - "s!1")
            (("5" (assert)
              (("5" (skosimp* :preds? t)
                (("5" (inst + "kvar(T!1, Δ!2)" "D!1")
                  (("5" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skosimp* :preds? t)
        (("6" (assert)
          (("6" (expand* ("add" "member"))
            (("6" (expand* ("add" "member"))
              (("6" (assert)
                (("6" (case "s!1 = s!2")
                  (("1" (inst + "〈〉" "kconst_decl(s!1, T!1, 〈〉)")
                    (("1" (assert) nil nil)
                     ("2" (assert) (("2" (grind) nil nil)) nil))
                    nil)
                   ("2" (assert)
                    (("2" (inst - "s!2")
                      (("2" (assert)
                        (("2" (skosimp* :preds? t)
                          (("2"
                            (inst + "kconst_decl(s!1, T!1, Δ!2)" "D!1")
                            (("1" (assert) nil nil)
                             ("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skosimp* :preds? t)
        (("7" (assert)
          (("7" (expand* ("add" "member"))
            (("7" (expand* ("add" "member"))
              (("7" (case "s!1 = s!2")
                (("1" (assert)
                  (("1" (inst + "〈〉" "kconst_def(s!1, T!1, a!1, 〈〉)")
                    (("1" (assert) nil nil)
                     ("2" (assert) (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (inst - "s!2")
                  (("1" (assert)
                    (("1" (skosimp* :preds? t)
                      (("1"
                        (inst + "kconst_def(s!1, T!1, a!1, Δ!2)" "D!1")
                        (("1" (assert) nil nil)
                         ("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (skosimp* :preds? t)
        (("8" (assert)
          (("8" (assert)
            (("8" (expand* ("add" "member"))
              (("8" (case "s!1 = s!2")
                (("1" (assert)
                  (("1" (inst + "〈〉" "kconst_ext(s!1, T!1, 〈〉)")
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (inst - "s!2")
                  (("1" (skosimp* :preds? t)
                    (("1" (inst + "kconst_ext(s!1, T!1, Δ!2)" "D!1")
                      (("1" (assert) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (skosimp* :preds? t)
        (("9" (assert)
          (("9" (expand* ("add" "member"))
            (("9" (expand* ("add" "member"))
              (("9" (assert)
                (("9" (case "s!1 = s!2")
                  (("1" (assert)
                    (("1" (inst + "〈〉" "ktheory(s!1, Θ!1, 〈〉)")
                      (("1" (assert) nil nil)
                       ("2" (assert) (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (inst - "s!2")
                    (("1" (assert)
                      (("1" (skosimp* :preds? t)
                        (("1" (inst + "ktheory(s!1, Θ!1, Δ!2)" "D!1")
                          (("1" (assert) nil nil)
                           ("2" (assert) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (length def-decl "nat" context nil)
    (ord type-decl nil language nil)
    (weight def-decl "nat" language nil)
    (<= const-decl "bool" reals nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_empty? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_empty adt-constructor-decl "(ord_empty?)" language nil)
    (++ def-decl
     "{Θ | weight(F)(Θ) = weight(F)(Γ) + weight(F)(Δ) - F(ord_empty) - 1}"
     context nil)
    (find def-decl "context" decl nil)
    (context_induction formula-decl nil inductions nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (add const-decl "(nonempty?)" sets nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (pretheory formula-decl nil language nil) nil nil
    (FALSE const-decl "bool" booleans nil) nil
    (nonempty? const-decl "bool" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil (context formula-decl nil language nil)
    (member const-decl "bool" sets nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    nil nil nil nil nil
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil) nil nil nil
    nil
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil nil nil nil nil
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    nil nil nil nil nil nil
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil) nil nil nil
    nil nil
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    nil nil nil nil nil
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil))
   shostak))
 (length_find 0
  (length_find-1 nil 3583186858
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil))
    nil)
   ((pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (context_induction formula-decl nil inductions nil) nil
    (< const-decl "bool" reals nil) (find def-decl "context" decl nil)
    (length def-decl "nat" context nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (set type-eq-decl nil sets nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   shostak))
 (dsymbols_find_pos 0
  (dsymbols_find_pos-1 nil 3583240285
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil))
    nil)
   ((pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil) nil nil
    nil nil nil
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    nil nil nil nil nil
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil) nil nil nil
    nil nil nil
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    nil nil nil nil nil
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil nil nil nil
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil) nil nil nil
    nil nil
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil) nil nil nil nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (context_induction formula-decl nil inductions nil)
    (find def-decl "context" decl nil) nil
    (length def-decl "nat" context nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (set type-eq-decl nil sets nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   shostak))
 (pos_find_TCC1 0
  (pos_find_TCC1-1 nil 3583240428 ("" (subtype-tcc) nil nil) nil nil))
 (pos_find 0
  (pos_find-1 nil 3583240428
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (lemma "dsymbols_find_pos") (("10" (propax) nil nil)) nil))
    nil)
   ((dsymbols_find_pos formula-decl nil decl nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil) nil nil
    nil nil nil
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    nil nil nil nil nil
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil) nil nil nil
    nil nil nil
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    nil nil nil nil nil
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil nil nil nil
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil) nil nil nil
    nil nil
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil) nil nil nil nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (context_induction formula-decl nil inductions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (length def-decl "nat" context nil) nil
    (find def-decl "context" decl nil))
   shostak))
 (find_find 0
  (find_find-1 nil 3583240494
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (lemma "dsymbols_find_pos") (("10" (propax) nil nil)) nil))
    nil)
   ((dsymbols_find_pos formula-decl nil decl nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil) nil nil
    nil nil
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    nil nil nil nil
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil) nil nil nil
    nil nil
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    nil nil nil nil
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil nil nil
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil) nil nil nil
    nil
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil) nil nil nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (context_induction formula-decl nil inductions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (length def-decl "nat" context nil) nil
    (find def-decl "context" decl nil))
   shostak))
 (kind_TCC1 0
  (kind_TCC1-1 nil 3583243040 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
   nil))
 (kind_TCC2 0
  (kind_TCC2-1 nil 3583243040 ("" (subtype-tcc) nil nil)
   ((kind? const-decl "bool" language nil)) nil))
 (kind_TCC3 0
  (kind_TCC3-1 nil 3583243040 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
   nil))
 (kind_TCC4 0
  (kind_TCC4-1 nil 3583243040 ("" (subtype-tcc) nil nil)
   ((kind? const-decl "bool" language nil)) nil))
 (kind_TCC5 0
  (kind_TCC5-1 nil 3583243040
   ("" (skosimp* :preds? t)
    (("" (rewrite context -1) (("" (grind) nil nil)) nil)) nil)
   ((context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
   nil))
 (kind_TCC6 0
  (kind_TCC6-1 nil 3583243040 ("" (subtype-tcc) nil nil)
   ((kind? const-decl "bool" language nil)) nil))
 (kind_TCC7 0
  (kind_TCC7-1 nil 3583243040
   ("" (skosimp* :preds? t)
    (("" (rewrite context -1) (("" (grind) nil nil)) nil)) nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
   nil))
 (kind_TCC8 0
  (kind_TCC8-1 nil 3583243040
   ("" (skosimp* :preds? t)
    (("" (rewrite context -1) (("" (grind) nil nil)) nil)) nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
   nil))
 (kind_TCC9 0
  (kind_TCC9-1 nil 3583243040
   ("" (skosimp* :preds? t)
    (("" (rewrite context -1) (("" (grind) nil nil)) nil)) nil)
   ((context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil))
   nil))
 (kind_TCC10 0
  (kind_TCC10-1 nil 3583243040 ("" (subtype-tcc) nil nil) nil nil))
 (kind_TCC11 0
  (kind_TCC11-1 nil 3583243040 ("" (cond-disjoint-tcc) nil nil) nil
   nil))
 (definition?_TCC1 0
  (definition?_TCC1-1 nil 3583243816 ("" (subtype-tcc) nil nil) nil
   nil))
 (definition?_TCC2 0
  (definition?_TCC2-1 nil 3583243816 ("" (subtype-tcc) nil nil) nil
   nil))
 (definition?_TCC3 0
  (definition?_TCC3-1 nil 3583243816 ("" (termination-tcc) nil nil) nil
   nil))
 (definition?_TCC4 0
  (definition?_TCC4-1 nil 3583243816 ("" (subtype-tcc) nil nil) nil
   nil))
 (definition?_TCC5 0
  (definition?_TCC5-1 nil 3583243816 ("" (subtype-tcc) nil nil) nil
   nil))
 (dtheory_is_definition 0
  (dtheory_is_definition-1 nil 3583161372
   ("" (induct-and-simplify "Γ" :name "context_induction")
    (("" (grind)
      (("" (typepred! "〈〉 :: semantic" :implicit? t)
        (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dtheory? def-decl "bool" decl nil)
    (definition? def-decl "bool" decl nil)
    (context_induction formula-decl nil inductions nil))
   shostak))
 (dtype_is_definition 0
  (dtype_is_definition-1 nil 3583161418
   ("" (induct-and-simplify "Γ" :name "context_induction")
    (("" (typepred! "〈〉 :: semantic" :implicit? t)
      (("" (grind) nil nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dtype? def-decl "bool" decl nil)
    (definition? def-decl "bool" decl nil)
    (context_induction formula-decl nil inductions nil))
   shostak))
 (dconst_is_definition 0
  (dconst_is_definition-1 nil 3583161427
   ("" (induct-and-simplify "Γ" :name "context_induction")
    (("" (typepred! "〈〉 :: semantic" :implicit? t)
      (("" (grind) nil nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dconst? def-decl "bool" decl nil)
    (definition? def-decl "bool" decl nil)
    (context_induction formula-decl nil inductions nil))
   shostak))
 (definition_TCC1 0
  (definition_TCC1-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil)
    (dtype_is_definition formula-decl nil decl nil)
    (dtype? def-decl "bool" decl nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (definition_TCC2 0
  (definition_TCC2-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil)
    (dconst? def-decl "bool" decl nil)
    (dtype? def-decl "bool" decl nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_TCC3 0
  (definition_TCC3-1 nil 3583161319 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (dconst? def-decl "bool" decl nil)
    (dtype? def-decl "bool" decl nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_TCC4 0
  (definition_TCC4-1 nil 3583161319
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil)
    (dconst? def-decl "bool" decl nil)
    (dtype? def-decl "bool" decl nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_TCC5 0
  (definition_TCC5-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil)
    (dconst_is_definition formula-decl nil decl nil)
    (dconst? def-decl "bool" decl nil)
    (dtype? def-decl "bool" decl nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (definition_TCC6 0
  (definition_TCC6-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil)
    (dconst? def-decl "bool" decl nil)
    (dtype? def-decl "bool" decl nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_TCC7 0
  (definition_TCC7-1 nil 3583161319 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (dconst? def-decl "bool" decl nil)
    (dtype? def-decl "bool" decl nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_TCC8 0
  (definition_TCC8-1 nil 3583161319
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil)
    (dconst? def-decl "bool" decl nil)
    (dtype? def-decl "bool" decl nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_TCC9 0
  (definition_TCC9-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil)
    (dtheory_is_definition formula-decl nil decl nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (definition_TCC10 0
  (definition_TCC10-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil)
    (dconst? def-decl "bool" decl nil)
    (dtype? def-decl "bool" decl nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_TCC11 0
  (definition_TCC11-1 nil 3583161319 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (dconst? def-decl "bool" decl nil)
    (dtype? def-decl "bool" decl nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_TCC12 0
  (definition_TCC12-1 nil 3583161319
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil)
    (dconst? def-decl "bool" decl nil)
    (dtype? def-decl "bool" decl nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_TCC13 0
  (definition_TCC13-1 nil 3583161319
   ("" (subtype-tcc)
    (("" (grind) (("" (rewrite "context") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((context formula-decl nil language nil)
    (dtheory? def-decl "bool" decl nil)
    (dtype? def-decl "bool" decl nil)
    (dconst? def-decl "bool" decl nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil))
   nil))
 (definition_TCC14 0
  (definition_TCC14-1 nil 3583161319
   ("" (subtype-tcc)
    (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil))
   nil))
 (definition_TCC15 0
  (definition_TCC15-1 nil 3583161319
   ("" (termination-tcc)
    (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
   ((context formula-decl nil language nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (dconst? def-decl "bool" decl nil)
    (dtype? def-decl "bool" decl nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil))
   nil))
 (definition_TCC16 0
  (definition_TCC16-1 nil 3583161319
   ("" (subtype-tcc)
    (("1" (grind)
      (("1" (rewrite "context") (("1" (grind) nil nil)) nil)) nil)
     ("2" (rewrite "context") (("2" (grind) nil nil)) nil))
    nil)
   ((member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (dtheory? def-decl "bool" decl nil)
    (dtype? def-decl "bool" decl nil)
    (dconst? def-decl "bool" decl nil)
    (context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil))
   nil))
 (definition_dtype_TCC1 0
  (definition_dtype_TCC1-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtype? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtype_TCC2 0
  (definition_dtype_TCC2-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtype? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtype_TCC3 0
  (definition_dtype_TCC3-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtype? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtype_TCC4 0
  (definition_dtype_TCC4-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtype? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtype_TCC5 0
  (definition_dtype_TCC5-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtype? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtype_TCC6 0
  (definition_dtype_TCC6-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtype? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtype_TCC7 0
  (definition_dtype_TCC7-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtype? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtype_TCC8 0
  (definition_dtype_TCC8-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtype? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtype_TCC9 0
  (definition_dtype_TCC9-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtype? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtype_TCC10 0
  (definition_dtype_TCC10-1 nil 3583161319
   ("" (recursive-judgement-tcc)
    (("1" (rewrite "context") (("1" (grind) nil nil)) nil)
     ("2" (rewrite "context") (("2" (grind) nil nil)) nil))
    nil)
   ((context formula-decl nil language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtype? def-decl "bool" decl nil))
   nil))
 (definition_dtype_TCC11 0
  (definition_dtype_TCC11-1 nil 3583161319
   ("" (recursive-judgement-tcc)
    (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtype? def-decl "bool" decl nil))
   nil))
 (definition_dtype_TCC12 0
  (definition_dtype_TCC12-1 nil 3583161319
   ("" (recursive-judgement-tcc)
    (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtype? def-decl "bool" decl nil))
   nil))
 (definition_dconst_TCC1 0
  (definition_dconst_TCC1-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dconst? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dconst_TCC2 0
  (definition_dconst_TCC2-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dconst? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dconst_TCC3 0
  (definition_dconst_TCC3-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dconst? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dconst_TCC4 0
  (definition_dconst_TCC4-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dconst? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dconst_TCC5 0
  (definition_dconst_TCC5-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dconst? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dconst_TCC6 0
  (definition_dconst_TCC6-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dconst? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dconst_TCC7 0
  (definition_dconst_TCC7-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dconst? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dconst_TCC8 0
  (definition_dconst_TCC8-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dconst? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dconst_TCC9 0
  (definition_dconst_TCC9-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dconst? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dconst_TCC10 0
  (definition_dconst_TCC10-1 nil 3583161319
   ("" (recursive-judgement-tcc)
    (("1" (rewrite "context") (("1" (grind) nil nil)) nil)
     ("2" (rewrite "context") (("2" (grind) nil nil)) nil))
    nil)
   ((context formula-decl nil language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dconst? def-decl "bool" decl nil))
   nil))
 (definition_dconst_TCC11 0
  (definition_dconst_TCC11-1 nil 3583161319
   ("" (recursive-judgement-tcc)
    (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dconst? def-decl "bool" decl nil))
   nil))
 (definition_dconst_TCC12 0
  (definition_dconst_TCC12-1 nil 3583161319
   ("" (recursive-judgement-tcc)
    (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dconst? def-decl "bool" decl nil))
   nil))
 (definition_dtheory_TCC1 0
  (definition_dtheory_TCC1-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtheory_TCC2 0
  (definition_dtheory_TCC2-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtheory_TCC3 0
  (definition_dtheory_TCC3-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtheory_TCC4 0
  (definition_dtheory_TCC4-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtheory_TCC5 0
  (definition_dtheory_TCC5-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtheory_TCC6 0
  (definition_dtheory_TCC6-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtheory_TCC7 0
  (definition_dtheory_TCC7-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtheory_TCC8 0
  (definition_dtheory_TCC8-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtheory_TCC9 0
  (definition_dtheory_TCC9-1 nil 3583161319
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (definition_dtheory_TCC10 0
  (definition_dtheory_TCC10-1 nil 3583161319
   ("" (recursive-judgement-tcc)
    (("1" (rewrite "context") (("1" (grind) nil nil)) nil)
     ("2" (rewrite "context") (("2" (grind) nil nil)) nil))
    nil)
   ((context formula-decl nil language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtheory? def-decl "bool" decl nil))
   nil))
 (definition_dtheory_TCC11 0
  (definition_dtheory_TCC11-1 nil 3583161319
   ("" (recursive-judgement-tcc)
    (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtheory? def-decl "bool" decl nil))
   nil))
 (definition_dtheory_TCC12 0
  (definition_dtheory_TCC12-1 nil 3583161319
   ("" (recursive-judgement-tcc)
    (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtheory? def-decl "bool" decl nil))
   nil))
 (symbols_definition 0
  (symbols_definition-1 nil 3583161554
   ("" (skolem + ("Γ" _ _))
    (("" (induct "Δ" :name "context_induction")
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (grind) nil nil)
       ("4" (skosimp* :preds? t)
        (("4" (assert)
          (("4" (assert)
            (("4" (split -)
              (("1" (assert)
                (("1" (auto-rewrite "closed?")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (auto-rewrite "closed?")
                (("2" (assert)
                  (("2" (flatten)
                    (("2" (assert)
                      (("2" (grind :if-match nil)
                        (("1" (grind) nil nil) ("2" (grind) nil nil)
                         ("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (auto-rewrite "closed?") (("5" (grind) nil nil)) nil)
       ("6" (auto-rewrite "closed?")
        (("6" (grind :if-match nil)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (grind :if-match all) nil nil))
          nil))
        nil)
       ("7" (lazy-grind) nil nil)
       ("8" (lazy-grind)
        (("8" (grind)
          (("8" (inst -8 "x!1") (("8" (assert) nil nil)) nil)) nil))
        nil)
       ("9" (lazy-grind) nil nil)
       ("10" (auto-rewrite "dsymbols_find")
        (("10" (lazy-grind)
          (("10" (inst -7 "x!1") (("10" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (closed? const-decl "bool" syntaxic_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil)
    (subset? const-decl "bool" sets nil)
    (symbols def-decl "set[symbol]" syntaxic_sets nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (definition def-decl "expr" decl nil)
    (union const-decl "set" sets nil)
    (find def-decl "context" decl nil)
    (context_induction formula-decl nil inductions nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (vars def-decl "set[nat]" syntaxic_sets nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (add const-decl "(nonempty?)" sets nil)
    (dtheory? def-decl "bool" decl nil)
    (dtype? def-decl "bool" decl nil)
    (dconst? def-decl "bool" decl nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (dvars def-decl "nat" syntaxic_sets nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (difference const-decl "set" sets nil)
    (- const-decl "set[nat]" syntaxic_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (+ const-decl "set[nat]" syntaxic_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil))
   shostak))
 (vars_definition 0
  (vars_definition-1 nil 3583162332
   ("" (auto-rewrite ("closed?" "dvars_find"))
    (("" (assert)
      (("" (skolem + ("Γ" _ _))
        (("" (induct "Δ" :name "context_induction")
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil)
           ("4" (skosimp* :preds? t)
            (("4" (assert)
              (("4" (assert)
                (("4" (split -)
                  (("1" (assert)
                    (("1" (grind-with-ext :if-match nil)
                      (("1" (inst -7 "x!1 - dvars(Δ!1)")
                        (("1" (assert) nil nil)) nil)
                       ("2" (inst -8 "x!1") (("2" (assert) nil nil))
                        nil)
                       ("3" (inst -8 "x!1") (("3" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (grind :if-match nil)
                      (("1" (inst -7 "x!1 - dvars(find(Δ!1)(s!2))")
                        (("1" (grind) nil nil)) nil)
                       ("2" (inst - "x!2 - dvars(find(Δ!1)(s!2))")
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil)
                       ("3" (inst - "x!1") (("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (grind) nil nil)
           ("6" (skosimp* :preds? t)
            (("6" (assert)
              (("6" (grind :if-match nil)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (inst -8 "x!1 + 1") (("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("7" (skosimp* :preds? t)
            (("7" (grind :if-match nil)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil))
            nil)
           ("8" (skosimp* :preds? t)
            (("8" (assert)
              (("8" (flatten)
                (("8" (assert)
                  (("8" (split -)
                    (("1" (assert)
                      (("1" (grind :if-match nil)
                        (("1" (inst -8 "x!1 - dvars(Δ!1)")
                          (("1" (assert) nil nil)) nil)
                         ("2" (grind) nil nil) ("3" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert) (("2" (lazy-grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("9" (lazy-grind) nil nil)
           ("10" (grind :if-match nil)
            (("1" (inst -7 "x!1 - dvars(Δ!1)") (("1" (grind) nil nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil) ("5" (grind) nil nil)
             ("6" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (closed? const-decl "bool" syntaxic_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (subset? const-decl "bool" sets nil)
    (vars def-decl "set[nat]" syntaxic_sets nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (definition def-decl "expr" decl nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dvars def-decl "nat" syntaxic_sets nil)
    (find def-decl "context" decl nil)
    (context_induction formula-decl nil inductions nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (symbols def-decl "set[symbol]" syntaxic_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (dconst? def-decl "bool" decl nil)
    (dtype? def-decl "bool" decl nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (difference const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (- const-decl "set[nat]" syntaxic_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "set[nat]" syntaxic_sets nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil))
   shostak))
 (closed_definition 0
  (closed_definition-1 nil 3583163563
   ("" (lemma "vars_definition")
    (("" (lemma "symbols_definition")
      (("" (skosimp* :preds? t)
        (("" (assert)
          (("" (auto-rewrite "closed?")
            (("" (assert)
              (("" (inst?)
                (("" (inst?)
                  (("" (assert)
                    (("" (auto-rewrite "dvars_concat")
                      (("" (assert)
                        (("" (auto-rewrite "dvars_find")
                          (("" (auto-rewrite "dsymbols_concat")
                            (("" (assert)
                              ((""
                                (auto-rewrite "dsymbols_find")
                                (("" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((symbols_definition formula-decl nil decl nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (dsymbols_concat formula-decl nil context nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (dvars def-decl "nat" syntaxic_sets nil)
    (find def-decl "context" decl nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (dvars_concat formula-decl nil context nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (closed? const-decl "bool" syntaxic_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil)
    (vars_definition formula-decl nil decl nil))
   shostak))
 (dvars_definition_TCC1 0
  (dvars_definition_TCC1-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((dtheory_is_definition formula-decl nil decl nil)) nil))
 (dvars_definition 0
  (dvars_definition-1 nil 3583163270
   ("" (skosimp* :preds? t) (("" (grind) nil nil)) nil)
   ((dvars_pretheory formula-decl nil syntaxic_sets nil)
    (definition_dtheory rec-application-judgement "pretheory" decl nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (dtheory? def-decl "bool" decl nil))
   shostak))
 (uniques_definition 0
  (uniques_definition-1 nil 3583163276
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil))
    nil)
   ((ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil nil nil nil
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    nil nil nil nil
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    nil nil nil nil nil
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    nil nil nil nil
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    nil nil nil
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    nil nil nil nil
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    nil nil nil (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (context_induction formula-decl nil inductions nil)
    (definition def-decl "expr" decl nil)
    (expr type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (definition? def-decl "bool" decl nil)
    (uniques? def-decl "bool" syntaxic_sets nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dtheory? def-decl "bool" decl nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (set type-eq-decl nil sets nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (dtheory_is_definition formula-decl nil decl nil)
    (definition_dtheory rec-application-judgement "pretheory" decl
     nil))
   shostak))
 (type__TCC1 0
  (type__TCC1-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (type__TCC2 0
  (type__TCC2-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (type__TCC3 0
  (type__TCC3-1 nil 3583161319 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (type__TCC4 0
  (type__TCC4-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (type__TCC5 0
  (type__TCC5-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (type__TCC6 0
  (type__TCC6-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (type__TCC7 0
  (type__TCC7-1 nil 3583161319 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (type__TCC8 0
  (type__TCC8-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (type__TCC9 0
  (type__TCC9-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (type__TCC10 0
  (type__TCC10-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (type__TCC11 0
  (type__TCC11-1 nil 3583161319 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (type__TCC12 0
  (type__TCC12-1 nil 3583161319 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil))
   nil))
 (type__TCC13 0
  (type__TCC13-1 nil 3583161319
   ("" (subtype-tcc)
    (("" (rewrite "dsymbols") (("" (grind) nil nil)) nil)) nil)
   ((member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil))
   nil))
 (type__TCC14 0
  (type__TCC14-1 nil 3583161319
   ("" (grind) (("" (rewrite "context") (("" (grind) nil nil)) nil))
    nil)
   ((context formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil))
   nil))
 (type__TCC15 0
  (type__TCC15-1 nil 3583161319
   ("" (termination-tcc)
    (("" (rewrite "context") (("" (grind) nil nil)) nil)) nil)
   ((context formula-decl nil language nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil))
   nil))
 (type__TCC16 0
  (type__TCC16-1 nil 3583161319
   ("" (subtype-tcc)
    (("1" (rewrite "context") (("1" (grind) nil nil)) nil)
     ("2" (rewrite "context") (("2" (grind) nil nil)) nil))
    nil)
   ((context formula-decl nil language nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil))
   nil))
 (symbols_type 0
  (symbols_type-1 nil 3583164036
   (""
    (auto-rewrite ("definition" "closed?" "definition?" "find" "union"
                   "member" "subset?" "difference" "type_"))
    (("" (induct "Γ" :name "context_induction")
      (("1" (grind) nil nil)
       ("2" (grind)
        (("2" (typepred! "Γ!1" :implicit? t) (("2" (propax) nil nil))
          nil))
        nil)
       ("3" (grind) nil nil) ("4" (grind) nil nil)
       ("5" (skosimp* :preds? t)
        (("5" (assert)
          (("5" (flatten)
            (("5" (assert)
              (("5" (skosimp* :preds? t)
                (("5" (assert)
                  (("5" (split -)
                    (("1" (propax) nil nil)
                     ("2" (skosimp* :preds? t)
                      (("2" (assert)
                        (("2" (split -)
                          (("1" (grind :if-match all) nil nil)
                           ("2" (skosimp* :preds? t)
                            (("2" (grind :if-match all) nil nil)) nil)
                           ("3" (skosimp* :preds? t)
                            (("3" (grind :if-match all) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skosimp* :preds? t)
        (("6" (assert)
          (("6" (assert)
            (("6" (skosimp* :preds? t)
              (("6" (split -)
                (("1" (propax) nil nil)
                 ("2" (assert)
                  (("2" (flatten)
                    (("2" (assert)
                      (("2" (split -)
                        (("1" (grind :if-match all) nil nil)
                         ("2" (propax) nil nil) ("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skosimp* :preds? t)
        (("7" (assert)
          (("7" (flatten)
            (("7" (skosimp* :preds? t)
              (("7" (assert)
                (("7" (split -)
                  (("1" (grind :if-match all) nil nil)
                   ("2" (skosimp* :preds? t)
                    (("2" (grind :if-match all) nil nil)) nil)
                   ("3" (skosimp* :preds? t)
                    (("3" (grind :if-match all) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (skosimp* :preds? t)
        (("8" (assert)
          (("8" (flatten)
            (("8" (skosimp* :preds? t)
              (("8" (assert)
                (("8" (split -)
                  (("1" (assert) (("1" (grind :if-match all) nil nil))
                    nil)
                   ("2" (skosimp* :preds? t)
                    (("2" (assert)
                      (("2" (split -)
                        (("1" (grind :if-match all) nil nil)
                         ("2" (skosimp* :preds? t)
                          (("2" (grind :if-match all) nil nil)) nil)
                         ("3" (skosimp* :preds? t)
                          (("3" (grind :if-match all) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (skosimp* :preds? t)
        (("9" (assert)
          (("9" (skosimp* :preds? t)
            (("9" (assert)
              (("9" (split -)
                (("1" (assert)
                  (("1" (split -)
                    (("1" (grind :if-match all) nil nil)
                     ("2" (skosimp* :preds? t)
                      (("2" (grind :if-match all) nil nil)) nil)
                     ("3" (skosimp* :preds? t)
                      (("3" (grind :if-match all) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (split -)
                      (("1" (assert)
                        (("1" (grind :if-match all) nil nil)) nil)
                       ("2" (skosimp* :preds? t)
                        (("2" (grind :if-match all) nil nil)) nil)
                       ("3" (skosimp* :preds? t)
                        (("3" (grind :if-match all) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("10" (skosimp* :preds? t)
        (("10" (assert)
          (("10" (skosimp* :preds? t)
            (("10" (assert)
              (("10" (split -)
                (("1" (assert)
                  (("1" (split -)
                    (("1" (assert)
                      (("1" (grind :if-match all) nil nil)) nil)
                     ("2" (skosimp* :preds? t)
                      (("2" (grind :if-match all) nil nil)) nil)
                     ("3" (skosimp* :preds? t)
                      (("3" (grind :if-match all) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (skosimp* :preds? t)
                  (("2" (assert)
                    (("2" (split -)
                      (("1" (grind :if-match all) nil nil)
                       ("2" (skosimp* :preds? t)
                        (("2" (grind :if-match all) nil nil)) nil)
                       ("3" (skosimp* :preds? t)
                        (("3" (grind :if-match all) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("11" (skosimp* :preds? t)
        (("11" (assert)
          (("11" (skosimp* :preds? t)
            (("11" (assert)
              (("11" (split -)
                (("1" (propax) nil nil)
                 ("2" (skosimp* :preds? t)
                  (("2" (assert)
                    (("2" (split -)
                      (("1" (assert) (("1" (grind) nil nil)) nil)
                       ("2" (skosimp* :preds? t)
                        (("2" (grind) nil nil)) nil)
                       ("3" (skosimp* :preds? t)
                        (("3" (grind :if-match all) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pretheory_is_context judgement-tcc nil subtype nil)
    (pretheory formula-decl nil language nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (closed? const-decl "bool" syntaxic_sets nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil)
    (subset? const-decl "bool" sets nil)
    (symbols def-decl "set[symbol]" syntaxic_sets nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (type_ def-decl "pretype" decl nil)
    (find def-decl "context" decl nil)
    (context_induction formula-decl nil inductions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (vars def-decl "set[nat]" syntaxic_sets nil)
    (dvars_pretheory formula-decl nil syntaxic_sets nil)
    (emptyset const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (union const-decl "set" sets nil)
    (difference const-decl "set" sets nil)
    (- const-decl "set[nat]" syntaxic_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dvars def-decl "nat" syntaxic_sets nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (+ const-decl "set[nat]" syntaxic_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil))
   shostak))
 (vars_type 0
  (vars_type-1 nil 3583164455
   (""
    (auto-rewrite ("definition" "closed?" "definition?" "find" "union"
                   "member" "subset?" "difference" "type_"))
    (("" (induct "Γ" :name "context_induction")
      (("1" (grind) nil nil)
       ("2" (grind)
        (("2" (typepred! "Γ!1" :implicit? t) (("2" (propax) nil nil))
          nil))
        nil)
       ("3" (grind) nil nil)
       ("4" (skosimp* :preds? t)
        (("4" (assert)
          (("4" (assert)
            (("4" (skosimp* :preds? t)
              (("4" (split -)
                (("1" (propax) nil nil)
                 ("2" (skosimp* :preds? t)
                  (("2" (assert)
                    (("2" (split -)
                      (("1" (grind) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skosimp* :preds? t)
        (("5" (assert)
          (("5" (assert)
            (("5" (skosimp* :preds? t)
              (("5" (assert)
                (("5" (split -)
                  (("1" (propax) nil nil)
                   ("2" (skosimp* :preds? t)
                    (("2" (assert)
                      (("2" (split -)
                        (("1" (assert) (("1" (grind) nil nil)) nil)
                         ("2" (skosimp* :preds? t)
                          (("2" (grind) nil nil)) nil)
                         ("3" (skosimp* :preds? t)
                          (("3" (grind :if-match all) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skosimp* :preds? t)
        (("6" (assert)
          (("6" (flatten)
            (("6" (assert)
              (("6" (skosimp* :preds? t)
                (("6" (assert)
                  (("6" (split -)
                    (("1" (propax) nil nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (split -)
                          (("1" (grind :if-match all) nil nil)
                           ("2" (propax) nil nil)
                           ("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skosimp* :preds? t)
        (("7" (assert)
          (("7" (skosimp* :preds? t)
            (("7" (assert)
              (("7" (split -)
                (("1" (grind :if-match all) nil nil)
                 ("2" (skosimp* :preds? t)
                  (("2" (grind :if-match all) nil nil)) nil)
                 ("3" (skosimp* :preds? t)
                  (("3" (grind :if-match all) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (skosimp* :preds? t)
        (("8" (assert)
          (("8" (flatten)
            (("8" (assert)
              (("8" (split -)
                (("1" (skosimp* :preds? t)
                  (("1" (assert)
                    (("1" (inst -7 "x!1 - dvars(Δ!1)")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (split -)
                            (("1" (grind :if-match all) nil nil)
                             ("2" (skosimp* :preds? t)
                              (("2" (grind :if-match all) nil nil))
                              nil)
                             ("3" (skosimp* :preds? t)
                              (("3" (grind :if-match all) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp* :preds? t)
                  (("2" (assert)
                    (("2" (split -)
                      (("1" (grind :if-match all) nil nil)
                       ("2" (skosimp* :preds? t)
                        (("2" (grind :if-match all) nil nil)) nil)
                       ("3" (skosimp* :preds? t)
                        (("3" (grind :if-match all) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (skosimp* :preds? t)
        (("9" (assert)
          (("9" (assert)
            (("9" (skosimp* :preds? t)
              (("9" (assert)
                (("9" (split -)
                  (("1" (assert)
                    (("1" (split -)
                      (("1" (assert)
                        (("1" (inst -8 "x!1 - dvars(Δ!1)")
                          (("1" (assert) (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (skosimp* :preds? t)
                        (("2" (inst -9 "x!1 - dvars(Δ!1)")
                          (("2" (assert) (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (skosimp* :preds? t)
                        (("3" (assert)
                          (("3" (inst -8 "x!1 - dvars(Δ!1)")
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp* :preds? t)
                    (("2" (assert)
                      (("2" (split -)
                        (("1" (grind :if-match all) nil nil)
                         ("2" (skosimp* :preds? t)
                          (("2" (grind :if-match all) nil nil)) nil)
                         ("3" (skosimp* :preds? t)
                          (("3" (grind :if-match all) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("10" (skosimp* :preds? t)
        (("10" (assert)
          (("10" (flatten)
            (("10" (assert)
              (("10" (split -)
                (("1" (assert)
                  (("1" (skosimp* :preds? t)
                    (("1" (assert)
                      (("1" (inst -7 "x!1 - dvars(Δ!1)")
                        (("1" (assert)
                          (("1" (split -)
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2" (grind) nil nil)
                             ("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp* :preds? t)
                  (("2" (assert)
                    (("2" (split -)
                      (("1" (grind :if-match all) nil nil)
                       ("2" (skosimp* :preds? t)
                        (("2" (grind :if-match all) nil nil)) nil)
                       ("3" (skosimp* :preds? t)
                        (("3" (grind :if-match all) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("11" (skosimp* :preds? t)
        (("11" (assert)
          (("11" (skosimp* :preds? t)
            (("11" (assert)
              (("11" (split -)
                (("1" (propax) nil nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (split -)
                      (("1" (grind :if-match all) nil nil)
                       ("2" (skosimp* :preds? t)
                        (("2" (grind :if-match all) nil nil)) nil)
                       ("3" (skosimp* :preds? t)
                        (("3" (grind :if-match all) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pretheory_is_context judgement-tcc nil subtype nil)
    (pretheory formula-decl nil language nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (closed? const-decl "bool" syntaxic_sets nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (subset? const-decl "bool" sets nil)
    (vars def-decl "set[nat]" syntaxic_sets nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (type_ def-decl "pretype" decl nil) (< const-decl "bool" reals nil)
    (dvars def-decl "nat" syntaxic_sets nil)
    (find def-decl "context" decl nil)
    (context_induction formula-decl nil inductions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (dvars_pretheory formula-decl nil syntaxic_sets nil)
    (emptyset const-decl "set" sets nil)
    (symbols def-decl "set[symbol]" syntaxic_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (union const-decl "set" sets nil)
    (difference const-decl "set" sets nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (- const-decl "set[nat]" syntaxic_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "set[nat]" syntaxic_sets nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil))
   shostak))
 (closed_type 0
  (closed_type-1 nil 3583164862
   ("" (lemma "symbols_type")
    (("" (lemma "vars_type")
      (("" (skosimp* :preds? t)
        (("" (inst?)
          (("" (inst?) (("" (assert) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((vars_type formula-decl nil decl nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (syntaxic formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (dvars_pretheory formula-decl nil syntaxic_sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (closed? const-decl "bool" syntaxic_sets nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (set type-eq-decl nil sets nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (typed? def-decl "bool" decl nil)
    (symbols_type formula-decl nil decl nil))
   shostak))
 (pos_definition 0
  (pos_definition-1 nil 3583165179
   ("" (skolem + ("Γ" "_" "_"))
    (("" (auto-rewrite ("find" "closed?"))
      (("" (induct "Δ" :name "context_induction")
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (grind) nil nil)
         ("4" (lemma "length_find")
          (("4" (skosimp* :preds? t)
            (("4" (assert)
              (("4" (assert)
                (("4" (lift-if)
                  (("4" (split -)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (invoke (typepred "%1") (~ + "%1 < %"))
                          (("2" (assert)
                            (("2" (inst -7 "Δ!1" "s!2")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (skosimp* :preds? t)
          (("5" (assert)
            (("5" (lemma "length_find")
              (("5" (assert)
                (("5" (split -4)
                  (("1" (propax) nil nil)
                   ("2" (assert)
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (assert)
                          (("2" (invoke (typepred "%1") (~ + "%1 < %"))
                            (("2" (inst - "Δ!1" "s!2")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (lemma "length_find")
          (("6" (assert)
            (("6" (skosimp* :preds? t)
              (("6" (assert) (("6" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("7" (skosimp* :preds? t)
          (("7" (assert)
            (("7" (lemma "length_find")
              (("7" (assert)
                (("7" (split -)
                  (("1" (propax) nil nil)
                   ("2" (assert)
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (invoke (typepred "%1") (~ + "%1 < %"))
                          (("2" (assert)
                            (("2" (inst - "Δ!1" "s!2")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("8" (skosimp* :preds? t)
          (("8" (assert)
            (("8" (assert)
              (("8" (assert)
                (("8" (split -)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (assert)
                        (("1" (invoke (typepred "%1") (~ + "%1 < %"))
                          nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (assert)
                        (("2" (lemma "length_find")
                          (("2" (invoke (typepred "%1") (~ + "%1 < %"))
                            (("2" (assert)
                              (("2"
                                (inst - "Δ!1" "s!2")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("9" (skosimp* :preds? t)
          (("9" (assert)
            (("9" (flatten)
              (("9" (assert)
                (("9" (split -)
                  (("1" (propax) nil nil)
                   ("2" (assert)
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (lemma "length_find")
                          (("2" (assert)
                            (("2"
                              (invoke (typepred "%1") (~ + "%1 < %"))
                              (("2"
                                (assert)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("10" (skosimp* :preds? t)
          (("10" (assert)
            (("10" (assert)
              (("10" (assert)
                (("10" (split -)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (invoke (typepred "%1") (~ + "%1 < %")) nil
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (assert)
                        (("2" (invoke (typepred "%1") (~ + "%1 < %"))
                          (("2" (lemma "length_find")
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("11" (delete 2)
          (("11" (skosimp* :preds? t)
            (("11" (assert)
              (("11" (use "dsymbols_find")
                (("11" (assert)
                  (("11" (lemma "symbols_definition")
                    (("11" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktheory?)]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (union const-decl "set" sets nil)
    (- const-decl "set[nat]" syntaxic_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (length_find formula-decl nil decl nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil) nil nil nil
    nil (dconst? def-decl "bool" decl nil)
    (dtype? def-decl "bool" decl nil)
    (dtheory? def-decl "bool" decl nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vars def-decl "set[nat]" syntaxic_sets nil)
    (context_induction formula-decl nil inductions nil) nil
    (length def-decl "nat" context nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (find def-decl "context" decl nil)
    (definition def-decl "expr" decl nil)
    (expr type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (symbols def-decl "set[symbol]" syntaxic_sets nil)
    (definition? def-decl "bool" decl nil)
    (dsymbols def-decl "set[symbol]" syntaxic_sets nil)
    (set type-eq-decl nil sets nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (closed? const-decl "bool" syntaxic_sets nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   shostak)))

