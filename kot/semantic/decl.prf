(decl
 (decl_TCC1 0
  (decl_TCC1-1 nil 3583005442 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (decl_TCC2 0
  (decl_TCC2-1 nil 3583005442 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (decl_TCC3 0
  (decl_TCC3-1 nil 3583005442 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (decl_TCC4 0
  (decl_TCC4-1 nil 3583005442 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (decl_TCC5 0
  (decl_TCC5-1 nil 3583005442 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (decl_TCC6 0
  (decl_TCC6-1 nil 3583005442 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (decl_TCC7 0
  (decl_TCC7-1 nil 3583005442 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty formula-decl nil language nil)
    (context formula-decl nil language nil))
   nil))
 (decl_TCC8 0
  (decl_TCC8-1 nil 3583005442 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (decl_TCC9 0
  (decl_TCC9-1 nil 3583005442 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty formula-decl nil language nil)
    (interp formula-decl nil language nil))
   nil))
 (decl_TCC10 0
  (decl_TCC10-1 nil 3583005442 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty formula-decl nil language nil))
   nil))
 (decl_context 0
  (decl_context-1 nil 3583015624 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty formula-decl nil language nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (interp formula-decl nil language nil)
    (context formula-decl nil language nil)
    (decl const-decl "decl" decl nil)
    (kcontext? const-decl "bool" decl nil))
   nil))
 (decl_theory 0
  (decl_theory-1 nil 3583015624 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (pretheory formula-decl nil language nil)
    (nonempty formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (context formula-decl nil language nil)
    (decl const-decl "decl" decl nil)
    (ktheory? const-decl "bool" decl nil))
   nil))
 (decl_interp 0
  (decl_interp-1 nil 3583015624
   ("" (judgement-tcc)
    (("" (rewrite interp) (("" (grind) nil nil)) nil)) nil)
   ((interp formula-decl nil language nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (decl const-decl "decl" decl nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (kinterp? const-decl "bool" decl nil))
   nil))
 (kind_TCC1 0
  (kind_TCC1-1 nil 3582043686
   ("" (grind)
    (("" (typepred "d!1`the_kind") (("" (grind) nil nil)) nil)) nil)
   ((ktype_decl adt-def-decl "boolean" decl nil)
    (kind? const-decl "bool" language nil))
   nil))
 (kind_TCC2 0
  (kind_TCC2-1 nil 3583005442 ("" (subtype-tcc) nil nil)
   ((kvar_decl adt-def-decl "boolean" decl nil)
    (kind? const-decl "bool" language nil))
   nil))
 (kind_TCC3 0
  (kind_TCC3-1 nil 3583005442 ("" (subtype-tcc) nil nil)
   ((kconst_decl adt-def-decl "boolean" decl nil)
    (kind? const-decl "bool" language nil))
   nil))
 (kind_TCC4 0
  (kind_TCC4-1 nil 3583005442 ("" (subtype-tcc) nil nil)
   ((ktheory_decl adt-def-decl "boolean" decl nil)
    (kind? const-decl "bool" language nil))
   nil))
 (kind_TCC5 0
  (kind_TCC5-1 nil 3583005442 ("" (cond-disjoint-tcc) nil nil)
   ((ktype_decl adt-def-decl "boolean" decl nil)
    (kvar_decl adt-def-decl "boolean" decl nil)
    (kconst_decl adt-def-decl "boolean" decl nil)
    (ktheory_decl adt-def-decl "boolean" decl nil))
   nil))
 (kind_TCC6 0
  (kind_TCC6-1 nil 3583005442 ("" (cond-coverage-tcc) nil nil)
   ((ktype_decl adt-def-decl "boolean" decl nil)
    (kvar_decl adt-def-decl "boolean" decl nil)
    (kconst_decl adt-def-decl "boolean" decl nil)
    (ktheory_decl adt-def-decl "boolean" decl nil))
   nil)))

