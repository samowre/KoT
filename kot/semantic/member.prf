(apply (in_TCC1 0
        (in_TCC1-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil))
         nil))
       (in_TCC2 0
        (in_TCC2-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil))
         nil))
       (in_TCC3 0
        (in_TCC3-1 nil 3582044781 ("" (termination-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (weight def-decl "nat" language nil)
          (posint_plus_nnint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (nnint_plus_posint_is_posint application-judgement "posint"
           integers nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil))
         nil))
       (in_TCC4 0
        (in_TCC4-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil))
         nil))
       (in_TCC5 0
        (in_TCC5-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (interp formula-decl nil language nil)
          (context formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (keyword formula-decl nil language nil))
         nil))
       (in_TCC6 0
        (in_TCC6-1 nil 3582044781
         ("" (skosimp* :preds? t)
          (("" (split -2)
            (("1" (rewrite "context")
              (("1" (lift-if)
                (("1" (bddsimp)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)
                   ("3" (assert) nil nil) ("4" (assert) nil nil)
                   ("5" (assert) nil nil) ("6" (grind) nil nil)
                   ("7" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "interp")
              (("2" (lift-if)
                (("2" (bddsimp)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ((keyword formula-decl nil language nil)
          (name formula-decl nil language nil)
          (preterm formula-decl nil language nil)
          (pretype formula-decl nil language nil)
          (pretheory formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (context formula-decl nil language nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil))
         nil))
       (in_TCC7 0
        (in_TCC7-1 nil 3582044781
         ("" (skosimp* :preds? t)
          (("" (split -2)
            (("1" (rewrite "context")
              (("1" (lift-if)
                (("1" (bddsimp)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)
                   ("3" (assert) nil nil) ("4" (assert) nil nil)
                   ("5" (assert) nil nil) ("6" (grind) nil nil)
                   ("7" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "interp")
              (("2" (lift-if)
                (("2" (bddsimp)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ((keyword formula-decl nil language nil)
          (name formula-decl nil language nil)
          (preterm formula-decl nil language nil)
          (pretype formula-decl nil language nil)
          (pretheory formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (weight def-decl "nat" language nil)
          (posint_plus_nnint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (nnint_plus_posint_is_posint application-judgement "posint"
           integers nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (context formula-decl nil language nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil))
         nil))
       (in_TCC8 0
        (in_TCC8-1 nil 3582044781 ("" (cond-disjoint-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (syntaxic formula-decl nil language nil)
          (keyword formula-decl nil language nil))
         nil))
       (in_TCC9 0
        (in_TCC9-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]"
           number_fields nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers
                        nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (int_minus_int_is_int application-judgement "int" integers
           nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil))
         nil))
       (in_TCC10 0
        (in_TCC10-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]"
           number_fields nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers
                        nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil))
         nil))
       (in_TCC11 0
        (in_TCC11-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]"
           number_fields nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers
                        nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (context formula-decl nil language nil))
         nil))
       (in_TCC12 0
        (in_TCC12-1 nil 3582044781 ("" (termination-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]"
           number_fields nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (>= const-decl "bool" reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers
                        nil)
          (int nonempty-type-eq-decl nil integers nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (weight def-decl "nat" language nil)
          (posint_plus_nnint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (nnint_plus_posint_is_posint application-judgement "posint"
           integers nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil))
         nil))
       (in_TCC13 0
        (in_TCC13-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (context formula-decl nil language nil))
         nil))
       (in_TCC14 0
        (in_TCC14-1 nil 3582044781
         ("" (skosimp* :preds? t)
          (("" (rewrite "context")
            (("" (lift-if) (("" (bddsimp) nil nil)) nil)) nil))
          nil)
         ((context formula-decl nil language nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil))
         nil))
       (in_TCC15 0
        (in_TCC15-1 nil 3582044781
         ("" (skosimp* :preds? t)
          (("" (rewrite "context")
            (("" (lift-if)
              (("" (bddsimp)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (grind) nil nil)
                 ("7" (grind) nil nil))
                nil))
              nil))
            nil))
          nil)
         ((context formula-decl nil language nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (nnint_plus_posint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (posint_plus_nnint_is_posint application-judgement "posint"
           integers nil)
          (weight def-decl "nat" language nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil))
         nil))
       (in_TCC16 0
        (in_TCC16-1 nil 3582044781 ("" (cond-disjoint-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil))
         nil))
       (app_symbol_TCC1 0
        (app_symbol_TCC1-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC2 0
        (app_symbol_TCC2-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC3 0
        (app_symbol_TCC3-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC4 0
        (app_symbol_TCC4-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil))
         nil))
       (app_symbol_TCC5 0
        (app_symbol_TCC5-1 nil 3582044781
         ("" (termination-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (weight def-decl "nat" language nil)
          (posint_plus_nnint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (nnint_plus_posint_is_posint application-judgement "posint"
           integers nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil))
         nil))
       (app_symbol_TCC6 0
        (app_symbol_TCC6-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (pretheory formula-decl nil language nil)
          (pretype formula-decl nil language nil)
          (name formula-decl nil language nil)
          (preterm formula-decl nil language nil))
         nil))
       (app_symbol_TCC7 0
        (app_symbol_TCC7-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC8 0
        (app_symbol_TCC8-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC9 0
        (app_symbol_TCC9-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC10 0
        (app_symbol_TCC10-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil))
         nil))
       (app_symbol_TCC11 0
        (app_symbol_TCC11-1 nil 3582044781
         ("" (termination-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (weight def-decl "nat" language nil)
          (posint_plus_nnint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (nnint_plus_posint_is_posint application-judgement "posint"
           integers nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil))
         nil))
       (app_symbol_TCC12 0
        (app_symbol_TCC12-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (pretheory formula-decl nil language nil)
          (pretype formula-decl nil language nil)
          (name formula-decl nil language nil)
          (preterm formula-decl nil language nil))
         nil))
       (app_symbol_TCC13 0
        (app_symbol_TCC13-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC14 0
        (app_symbol_TCC14-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC15 0
        (app_symbol_TCC15-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC16 0
        (app_symbol_TCC16-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil))
         nil))
       (app_symbol_TCC17 0
        (app_symbol_TCC17-1 nil 3582044781
         ("" (termination-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (weight def-decl "nat" language nil)
          (posint_plus_nnint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (nnint_plus_posint_is_posint application-judgement "posint"
           integers nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil))
         nil))
       (app_symbol_TCC18 0
        (app_symbol_TCC18-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (pretheory formula-decl nil language nil)
          (pretype formula-decl nil language nil)
          (name formula-decl nil language nil)
          (preterm formula-decl nil language nil))
         nil))
       (app_symbol_TCC19 0
        (app_symbol_TCC19-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC20 0
        (app_symbol_TCC20-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC21 0
        (app_symbol_TCC21-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC22 0
        (app_symbol_TCC22-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil))
         nil))
       (app_symbol_TCC23 0
        (app_symbol_TCC23-1 nil 3582044781
         ("" (termination-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (weight def-decl "nat" language nil)
          (posint_plus_nnint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (nnint_plus_posint_is_posint application-judgement "posint"
           integers nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil))
         nil))
       (app_symbol_TCC24 0
        (app_symbol_TCC24-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (pretheory formula-decl nil language nil)
          (pretype formula-decl nil language nil)
          (name formula-decl nil language nil)
          (preterm formula-decl nil language nil))
         nil))
       (app_symbol_TCC25 0
        (app_symbol_TCC25-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC26 0
        (app_symbol_TCC26-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC27 0
        (app_symbol_TCC27-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC28 0
        (app_symbol_TCC28-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil))
         nil))
       (app_symbol_TCC29 0
        (app_symbol_TCC29-1 nil 3582044781
         ("" (termination-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (weight def-decl "nat" language nil)
          (posint_plus_nnint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (nnint_plus_posint_is_posint application-judgement "posint"
           integers nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil))
         nil))
       (app_symbol_TCC30 0
        (app_symbol_TCC30-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (pretheory formula-decl nil language nil)
          (pretype formula-decl nil language nil)
          (name formula-decl nil language nil)
          (preterm formula-decl nil language nil))
         nil))
       (app_symbol_TCC31 0
        (app_symbol_TCC31-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC32 0
        (app_symbol_TCC32-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC33 0
        (app_symbol_TCC33-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC34 0
        (app_symbol_TCC34-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil))
         nil))
       (app_symbol_TCC35 0
        (app_symbol_TCC35-1 nil 3582044781
         ("" (termination-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (weight def-decl "nat" language nil)
          (posint_plus_nnint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (nnint_plus_posint_is_posint application-judgement "posint"
           integers nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil))
         nil))
       (app_symbol_TCC36 0
        (app_symbol_TCC36-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (pretheory formula-decl nil language nil)
          (pretype formula-decl nil language nil)
          (name formula-decl nil language nil)
          (preterm formula-decl nil language nil))
         nil))
       (app_symbol_TCC37 0
        (app_symbol_TCC37-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC38 0
        (app_symbol_TCC38-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC39 0
        (app_symbol_TCC39-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC40 0
        (app_symbol_TCC40-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil))
         nil))
       (app_symbol_TCC41 0
        (app_symbol_TCC41-1 nil 3582044781
         ("" (termination-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (weight def-decl "nat" language nil)
          (posint_plus_nnint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (nnint_plus_posint_is_posint application-judgement "posint"
           integers nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil))
         nil))
       (app_symbol_TCC42 0
        (app_symbol_TCC42-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (pretheory formula-decl nil language nil)
          (pretype formula-decl nil language nil)
          (name formula-decl nil language nil)
          (preterm formula-decl nil language nil))
         nil))
       (app_symbol_TCC43 0
        (app_symbol_TCC43-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC44 0
        (app_symbol_TCC44-1 nil 3582044781
         ("" (cond-disjoint-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_TCC45 0
        (app_symbol_TCC45-1 nil 3582044781
         ("" (skosimp* :preds? t)
          (("" (split -2)
            (("1" (rewrite "context")
              (("1" (lift-if)
                (("1" (bddsimp) (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (rewrite "interp")
              (("2" (lift-if)
                (("2" (bddsimp) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ((∈ def-decl "bool" apply nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (char type-eq-decl nil strings nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (character type-decl nil character_adt nil)
          (below type-eq-decl nil nat_types nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (interp? const-decl "bool" language nil)
          (context? const-decl "bool" language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (syntaxic type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (semantic type-decl nil language nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (boolean nonempty-type-decl nil booleans nil))
         nil))
       (app_symbol_TCC46 0
        (app_symbol_TCC46-1 nil 3582048428 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil))
         nil))
       (app_symbol_TCC47 0
        (app_symbol_TCC47-1 nil 3582048428
         ("" (termination-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (weight def-decl "nat" language nil)
          (posint_plus_nnint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (nnint_plus_posint_is_posint application-judgement "posint"
           integers nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil))
         nil))
       (app_symbol_TCC48 0
        (app_symbol_TCC48-1 nil 3582048428 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (pretheory formula-decl nil language nil)
          (pretype formula-decl nil language nil)
          (name formula-decl nil language nil)
          (preterm formula-decl nil language nil))
         nil))
       (app_symbol_TCC49 0
        (app_symbol_TCC49-1 nil 3582048428 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC50 0
        (app_symbol_TCC50-1 nil 3582048428 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_TCC51 0
        (app_symbol_TCC51-1 nil 3582048428 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_TCC52 0
        (app_symbol_TCC52-1 nil 3582048428 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil))
         nil))
       (app_symbol_TCC53 0
        (app_symbol_TCC53-1 nil 3582048428
         ("" (termination-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (weight def-decl "nat" language nil)
          (posint_plus_nnint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (nnint_plus_posint_is_posint application-judgement "posint"
           integers nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil))
         nil))
       (app_symbol_TCC54 0
        (app_symbol_TCC54-1 nil 3582048428 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (pretheory formula-decl nil language nil)
          (pretype formula-decl nil language nil)
          (name formula-decl nil language nil)
          (preterm formula-decl nil language nil))
         nil))
       (app_symbol_TCC55 0
        (app_symbol_TCC55-1 nil 3582048428 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (pretheory formula-decl nil language nil)
          (pretype formula-decl nil language nil)
          (name formula-decl nil language nil)
          (preterm formula-decl nil language nil))
         nil))
       (app_symbol_TCC56 0
        (app_symbol_TCC56-1 nil 3582048428
         ("" (cond-disjoint-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil)
          (syntaxic formula-decl nil language nil)
          (keyword formula-decl nil language nil))
         nil))
       (app_symbol_TCC57 0
        (app_symbol_TCC57-1 nil 3582048428
         ("" (cond-coverage-tcc)
          (("1" (grind)
            (("1" (grind)
              (("1" (rewrite "context") (("1" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (rewrite "interp") (("2" (grind) nil nil)) nil))
          nil)
         ((context formula-decl nil language nil)
          (interp formula-decl nil language nil)
          (keyword formula-decl nil language nil)
          (syntaxic formula-decl nil language nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC1 0
        (app_symbol_context_TCC1-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC2 0
        (app_symbol_context_TCC2-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC3 0
        (app_symbol_context_TCC3-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC4 0
        (app_symbol_context_TCC4-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC5 0
        (app_symbol_context_TCC5-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC6 0
        (app_symbol_context_TCC6-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC7 0
        (app_symbol_context_TCC7-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC8 0
        (app_symbol_context_TCC8-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC9 0
        (app_symbol_context_TCC9-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC10 0
        (app_symbol_context_TCC10-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC11 0
        (app_symbol_context_TCC11-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC12 0
        (app_symbol_context_TCC12-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC13 0
        (app_symbol_context_TCC13-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC14 0
        (app_symbol_context_TCC14-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC15 0
        (app_symbol_context_TCC15-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC16 0
        (app_symbol_context_TCC16-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC17 0
        (app_symbol_context_TCC17-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC18 0
        (app_symbol_context_TCC18-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC19 0
        (app_symbol_context_TCC19-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC20 0
        (app_symbol_context_TCC20-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC21 0
        (app_symbol_context_TCC21-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC22 0
        (app_symbol_context_TCC22-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC23 0
        (app_symbol_context_TCC23-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC24 0
        (app_symbol_context_TCC24-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC25 0
        (app_symbol_context_TCC25-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC26 0
        (app_symbol_context_TCC26-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC27 0
        (app_symbol_context_TCC27-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC28 0
        (app_symbol_context_TCC28-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC29 0
        (app_symbol_context_TCC29-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC30 0
        (app_symbol_context_TCC30-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC31 0
        (app_symbol_context_TCC31-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC32 0
        (app_symbol_context_TCC32-1 nil 3582044781
         ("" (cond-disjoint-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC33 0
        (app_symbol_context_TCC33-1 nil 3582044781
         ("" (skosimp* :preds? t)
          (("" (rewrite "context")
            (("" (lift-if) (("" (bddsimp) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ((∈ def-decl "bool" apply nil)
          (interp? const-decl "bool" language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (syntaxic type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (char type-eq-decl nil strings nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (character type-decl nil character_adt nil)
          (below type-eq-decl nil nat_types nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (context type-eq-decl nil language nil)
          (context? const-decl "bool" language nil)
          (semantic type-decl nil language nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (boolean nonempty-type-decl nil booleans nil))
         nil))
       (app_symbol_context_TCC34 0
        (app_symbol_context_TCC34-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC35 0
        (app_symbol_context_TCC35-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC36 0
        (app_symbol_context_TCC36-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC37 0
        (app_symbol_context_TCC37-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC38 0
        (app_symbol_context_TCC38-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC39 0
        (app_symbol_context_TCC39-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (context formula-decl nil language nil))
         nil))
       (app_symbol_context_TCC40 0
        (app_symbol_context_TCC40-1 nil 3582048428
         ("" (cond-disjoint-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_context_TCC41 0
        (app_symbol_context_TCC41-1 nil 3582048428
         ("" (cond-coverage-tcc)
          (("" (rewrite "context")
            (("" (lift-if) (("" (bddsimp) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ((context formula-decl nil language nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC1 0
        (app_symbol_theory_TCC1-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC2 0
        (app_symbol_theory_TCC2-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC3 0
        (app_symbol_theory_TCC3-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC4 0
        (app_symbol_theory_TCC4-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC5 0
        (app_symbol_theory_TCC5-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC6 0
        (app_symbol_theory_TCC6-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC7 0
        (app_symbol_theory_TCC7-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC8 0
        (app_symbol_theory_TCC8-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC9 0
        (app_symbol_theory_TCC9-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC10 0
        (app_symbol_theory_TCC10-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC11 0
        (app_symbol_theory_TCC11-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC12 0
        (app_symbol_theory_TCC12-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC13 0
        (app_symbol_theory_TCC13-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC14 0
        (app_symbol_theory_TCC14-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC15 0
        (app_symbol_theory_TCC15-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC16 0
        (app_symbol_theory_TCC16-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC17 0
        (app_symbol_theory_TCC17-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC18 0
        (app_symbol_theory_TCC18-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC19 0
        (app_symbol_theory_TCC19-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC20 0
        (app_symbol_theory_TCC20-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC21 0
        (app_symbol_theory_TCC21-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC22 0
        (app_symbol_theory_TCC22-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC23 0
        (app_symbol_theory_TCC23-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC24 0
        (app_symbol_theory_TCC24-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC25 0
        (app_symbol_theory_TCC25-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC26 0
        (app_symbol_theory_TCC26-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC27 0
        (app_symbol_theory_TCC27-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC28 0
        (app_symbol_theory_TCC28-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC29 0
        (app_symbol_theory_TCC29-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC30 0
        (app_symbol_theory_TCC30-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC31 0
        (app_symbol_theory_TCC31-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC32 0
        (app_symbol_theory_TCC32-1 nil 3582044781
         ("" (cond-disjoint-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC33 0
        (app_symbol_theory_TCC33-1 nil 3582044781
         ("" (skosimp* :preds? t)
          (("" (rewrite "pretheory")
            (("" (lift-if) (("" (bddsimp) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ((∈ def-decl "bool" apply nil)
          (interp? const-decl "bool" language nil)
          (context? const-decl "bool" language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (syntaxic type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (char type-eq-decl nil strings nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (character type-decl nil character_adt nil)
          (below type-eq-decl nil nat_types nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (pretheory type-eq-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (semantic type-decl nil language nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (boolean nonempty-type-decl nil booleans nil))
         nil))
       (app_symbol_theory_TCC34 0
        (app_symbol_theory_TCC34-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC35 0
        (app_symbol_theory_TCC35-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC36 0
        (app_symbol_theory_TCC36-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC37 0
        (app_symbol_theory_TCC37-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC38 0
        (app_symbol_theory_TCC38-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC39 0
        (app_symbol_theory_TCC39-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (pretheory formula-decl nil language nil))
         nil))
       (app_symbol_theory_TCC40 0
        (app_symbol_theory_TCC40-1 nil 3582048428
         ("" (cond-disjoint-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_theory_TCC41 0
        (app_symbol_theory_TCC41-1 nil 3582048428
         ("" (cond-coverage-tcc)
          (("" (rewrite "pretheory")
            (("" (lift-if) (("" (bddsimp) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ((pretheory formula-decl nil language nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (pretheory? const-decl "bool" language nil)
          (pretheory type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (interp? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC1 0
        (app_symbol_interp_TCC1-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC2 0
        (app_symbol_interp_TCC2-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC3 0
        (app_symbol_interp_TCC3-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC4 0
        (app_symbol_interp_TCC4-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC5 0
        (app_symbol_interp_TCC5-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC6 0
        (app_symbol_interp_TCC6-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC7 0
        (app_symbol_interp_TCC7-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC8 0
        (app_symbol_interp_TCC8-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC9 0
        (app_symbol_interp_TCC9-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC10 0
        (app_symbol_interp_TCC10-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC11 0
        (app_symbol_interp_TCC11-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC12 0
        (app_symbol_interp_TCC12-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC13 0
        (app_symbol_interp_TCC13-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC14 0
        (app_symbol_interp_TCC14-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC15 0
        (app_symbol_interp_TCC15-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC16 0
        (app_symbol_interp_TCC16-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC17 0
        (app_symbol_interp_TCC17-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC18 0
        (app_symbol_interp_TCC18-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC19 0
        (app_symbol_interp_TCC19-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC20 0
        (app_symbol_interp_TCC20-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC21 0
        (app_symbol_interp_TCC21-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC22 0
        (app_symbol_interp_TCC22-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC23 0
        (app_symbol_interp_TCC23-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC24 0
        (app_symbol_interp_TCC24-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC25 0
        (app_symbol_interp_TCC25-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC26 0
        (app_symbol_interp_TCC26-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC27 0
        (app_symbol_interp_TCC27-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC28 0
        (app_symbol_interp_TCC28-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC29 0
        (app_symbol_interp_TCC29-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC30 0
        (app_symbol_interp_TCC30-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC31 0
        (app_symbol_interp_TCC31-1 nil 3582044781
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC32 0
        (app_symbol_interp_TCC32-1 nil 3582044781
         ("" (cond-disjoint-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC33 0
        (app_symbol_interp_TCC33-1 nil 3582044781
         ("" (skosimp* :preds? t)
          (("" (rewrite "interp")
            (("" (lift-if) (("" (bddsimp) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ((∈ def-decl "bool" apply nil)
          (context? const-decl "bool" language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (syntaxic type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (char type-eq-decl nil strings nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (character type-decl nil character_adt nil)
          (below type-eq-decl nil nat_types nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (interp type-eq-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (semantic type-decl nil language nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (boolean nonempty-type-decl nil booleans nil))
         nil))
       (app_symbol_interp_TCC34 0
        (app_symbol_interp_TCC34-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC35 0
        (app_symbol_interp_TCC35-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC36 0
        (app_symbol_interp_TCC36-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC37 0
        (app_symbol_interp_TCC37-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC38 0
        (app_symbol_interp_TCC38-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC39 0
        (app_symbol_interp_TCC39-1 nil 3582048428
         ("" (recursive-judgement-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil)
          (interp formula-decl nil language nil))
         nil))
       (app_symbol_interp_TCC40 0
        (app_symbol_interp_TCC40-1 nil 3582048428
         ("" (cond-disjoint-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_symbol_interp_TCC41 0
        (app_symbol_interp_TCC41-1 nil 3582048428
         ("" (cond-coverage-tcc)
          (("" (rewrite "interp")
            (("" (lift-if) (("" (bddsimp) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ((interp formula-decl nil language nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (interp? const-decl "bool" language nil)
          (interp type-eq-decl nil language nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (below type-eq-decl nil nat_types nil)
          (character type-decl nil character_adt nil)
          (char? adt-recognizer-decl "[character -> boolean]"
           character_adt nil)
          (char type-eq-decl nil strings nil)
          (symbol nonempty-type-eq-decl nil language nil)
          (syntaxic? const-decl "bool" language nil)
          (syntaxic type-eq-decl nil language nil)
          (OR const-decl "[bool, bool -> bool]" booleans nil)
          (context? const-decl "bool" language nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_var_TCC1 0
        (app_var_TCC1-1 nil 3582044781 ("" (subtype-tcc) nil nil) nil
         nil))
       (app_var_TCC2 0
        (app_var_TCC2-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]"
           number_fields nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers
                        nil)
          (int nonempty-type-eq-decl nil integers nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (∈ def-decl "bool" apply nil)
          (int_minus_int_is_int application-judgement "int" integers
           nil)
          (real_ge_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (context formula-decl nil language nil))
         nil))
       (app_var_TCC3 0
        (app_var_TCC3-1 nil 3582044781 ("" (subtype-tcc) nil nil)
         ((boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]"
           number_fields nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (< const-decl "bool" reals nil)
          (ord type-decl nil language nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers
                        nil)
          (int nonempty-type-eq-decl nil integers nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (weight def-decl "nat" language nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
           nil)
          (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
          (<= const-decl "bool" reals nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (+ const-decl "[numfield, numfield -> numfield]"
             number_fields nil)
          (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
           language nil)
          (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
           language nil)
          (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
           nil)
          (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
          (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
           language nil)
          (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
           language nil)
          (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
           language nil)
          (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
           language nil)
          (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
           nil)
          (ord_iconst adt-constructor-decl "(ord_iconst?)" language
           nil)
          (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
           language nil)
          (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
           language nil)
          (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_bot) = 0) AND
    (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
     (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
           language nil)
          (∈ def-decl "bool" apply nil)
          (kvar? adt-recognizer-decl "[semantic -> boolean]" language
           nil)
          (posint_plus_nnint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (nnint_plus_posint_is_posint application-judgement "posint"
           integers nil)
          (int_minus_int_is_int application-judgement "int" integers
           nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil))
         nil))
       (app_var_TCC4 0
        (app_var_TCC4-1 nil 3582044781
         ("" (skosimp* :preds? t)
          (("" (rewrite "context")
            (("" (lift-if) (("" (bddsimp) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ((context formula-decl nil language nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]"
           number_fields nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers
                        nil)
          (int nonempty-type-eq-decl nil integers nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_var_TCC5 0
        (app_var_TCC5-1 nil 3582044781
         ("" (skosimp* :preds? t)
          (("" (rewrite "context")
            (("" (lift-if) (("" (bddsimp) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ((context formula-decl nil language nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]"
           number_fields nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers
                        nil)
          (int nonempty-type-eq-decl nil integers nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_var_TCC6 0
        (app_var_TCC6-1 nil 3582044781
         ("" (skosimp* :preds? t)
          (("" (rewrite "context")
            (("" (lift-if)
              (("" (bddsimp)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (grind) nil nil) ("8" (grind) nil nil))
                nil))
              nil))
            nil))
          nil)
         ((context formula-decl nil language nil)
          (real_lt_is_strict_total_order name-judgement
           "(strict_total_order?[real])" real_props nil)
          (nnint_plus_posint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (posint_plus_nnint_is_posint application-judgement "posint"
           integers nil)
          (weight def-decl "nat" language nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]"
           number_fields nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers
                        nil)
          (int nonempty-type-eq-decl nil integers nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_var_TCC7 0
        (app_var_TCC7-1 nil 3582044781
         ("" (skosimp* :preds? t)
          (("" (rewrite "context")
            (("" (lift-if)
              (("" (bddsimp)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (grind) nil nil) ("8" (grind) nil nil))
                nil))
              nil))
            nil))
          nil)
         ((context formula-decl nil language nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]"
           number_fields nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers
                        nil)
          (int nonempty-type-eq-decl nil integers nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (∈ def-decl "bool" apply nil))
         nil))
       (app_var_TCC8 0
        (app_var_TCC8-1 nil 3582044781
         ("" (skosimp* :preds? t)
          (("" (rewrite "context")
            (("" (lift-if)
              (("" (bddsimp)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (grind) nil nil) ("8" (grind) nil nil))
                nil))
              nil))
            nil))
          nil)
         ((context formula-decl nil language nil)
          (real_le_is_total_order name-judgement "(total_order?[real])"
           real_props nil)
          (nnint_plus_posint_is_posint application-judgement "posint"
           integers nil)
          (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
           integers nil)
          (posint_plus_nnint_is_posint application-judgement "posint"
           integers nil)
          (boolean nonempty-type-decl nil booleans nil)
          (bool nonempty-type-eq-decl nil booleans nil)
          (NOT const-decl "[bool -> bool]" booleans nil)
          (semantic type-decl nil language nil)
          (context? const-decl "bool" language nil)
          (context type-eq-decl nil language nil)
          (number nonempty-type-decl nil numbers nil)
          (number_field_pred const-decl "[number -> boolean]"
           number_fields nil)
          (number_field nonempty-type-from-decl nil number_fields nil)
          (real_pred const-decl "[number_field -> boolean]" reals nil)
          (real nonempty-type-from-decl nil reals nil)
          (< const-decl "bool" reals nil)
          (ord type-decl nil language nil)
          (rational_pred const-decl "[real -> boolean]" rationals nil)
          (rational nonempty-type-from-decl nil rationals nil)
          (integer_pred const-decl "[rational -> boolean]" integers
                        nil)
          (int nonempty-type-eq-decl nil integers nil)
          (>= const-decl "bool" reals nil)
          (nat nonempty-type-eq-decl nil naturalnumbers nil)
          (weight def-decl "nat" language nil)
          (AND const-decl "[bool, bool -> bool]" booleans nil)
          (= const-decl "[T, T -> boolean]" equalities nil)
          (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
           nil)
          (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
          (<= const-decl "bool" reals nil)
          (numfield nonempty-type-eq-decl nil number_fields nil)
          (+ const-decl "[numfield, numfield -> numfield]"
             number_fields nil)
          (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
           language nil)
          (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
           language nil)
          (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
           nil)
          (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
          (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
           language nil)
          (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
           language nil)
          (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
           language nil)
          (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
           language nil)
          (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
           nil)
          (ord_iconst adt-constructor-decl "(ord_iconst?)" language
           nil)
          (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
           language nil)
          (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
           language nil)
          (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_bot) = 0) AND
    (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
     (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
           language nil)
          (∈ def-decl "bool" apply nil)
          (kvar? adt-recognizer-decl "[semantic -> boolean]" language
           nil))
         nil)))

