(weight
 (w_TCC1 0
  (w_TCC1-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (kind_theory formula-decl nil decl nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (kind_nonempty application-judgement "kind" decl nil))
   nil))
 (w_TCC2 0
  (w_TCC2-1 nil 3582991403 ("" (grind) nil nil)
   ((ordinal_of_nat const-decl "ordinal" ordinals_props nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil))
   nil))
 (w_TCC3 0
  (w_TCC3-1 nil 3582991403
   ("" (skosimp* :preds? t)
    (("" (use "member_nonempty" :polarity? t) (("" (assert) nil nil))
      nil))
    nil)
   ((member_nonempty formula-decl nil map nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (syntaxic formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil))
   nil))
 (w_TCC4 0
  (w_TCC4-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (kind_nonempty application-judgement "kind" decl nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (theory_kind? const-decl "bool" decl nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (const_kind? const-decl "bool" decl nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (app_symbol def-decl
     "{T: nonempty | (interp?(S) => interp?(T)) AND (context?(S) => context?(T)) AND (pretheory?(S) => pretheory?(T)) AND weight(F)(T) <= weight(F)(S)}"
     map nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (∈ def-decl "bool" map nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (type_kind? const-decl "bool" decl nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (kind_theory formula-decl nil decl nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC5 0
  (w_TCC5-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (kind_nonempty application-judgement "kind" decl nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (theory_kind? const-decl "bool" decl nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (const_kind? const-decl "bool" decl nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (app_symbol def-decl
     "{T: nonempty | (interp?(S) => interp?(T)) AND (context?(S) => context?(T)) AND (pretheory?(S) => pretheory?(T)) AND weight(F)(T) <= weight(F)(S)}"
     map nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (∈ def-decl "bool" map nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (type_kind? const-decl "bool" decl nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (kind const-decl "{r: keyword | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (definition const-decl
                "{x: semantic | (type_kind?(S) IMPLIES pretype?(x)) AND (const_kind?(S) IMPLIES preterm?(x)) AND (theory_kind?(S) IMPLIES pretheory?(x)) AND weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}"
                decl nil))
   nil))
 (w_TCC6 0
  (w_TCC6-1 nil 3582991403
   ("" (skosimp* :preds? t) (("" (grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (kind_nonempty application-judgement "kind" decl nil)
    (ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil)
    (definition const-decl
                "{x: semantic | (type_kind?(S) IMPLIES pretype?(x)) AND (const_kind?(S) IMPLIES preterm?(x)) AND (theory_kind?(S) IMPLIES pretheory?(x)) AND weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}"
                decl nil)
    (kind const-decl "{r: keyword | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (syntaxic formula-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (type_kind? const-decl "bool" decl nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" map nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (app_symbol def-decl
     "{T: nonempty | (interp?(S) => interp?(T)) AND (context?(S) => context?(T)) AND (pretheory?(S) => pretheory?(T)) AND weight(F)(T) <= weight(F)(S)}"
     map nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (const_kind? const-decl "bool" decl nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (theory_kind? const-decl "bool" decl nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   nil))
 (w_TCC7 0
  (w_TCC7-1 nil 3582991403
   ("" (grind) (("" (use "pretheory_is_context" :polarity? t) nil nil))
    nil)
   ((pretheory type-eq-decl nil language nil)
    (dtheory adt-accessor-decl "[(ktheory?) -> semantic]" language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (kind_nonempty application-judgement "kind" decl nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (kvar_app_symbol formula-decl nil map nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (type_kind? const-decl "bool" decl nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (app_symbol def-decl
     "{T: nonempty | (interp?(S) => interp?(T)) AND (context?(S) => context?(T)) AND (pretheory?(S) => pretheory?(T)) AND weight(F)(T) <= weight(F)(S)}"
     map nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (const_kind? const-decl "bool" decl nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (theory_kind? const-decl "bool" decl nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (definition const-decl
                "{x: semantic | (type_kind?(S) IMPLIES pretype?(x)) AND (const_kind?(S) IMPLIES preterm?(x)) AND (theory_kind?(S) IMPLIES pretheory?(x)) AND weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}"
                decl nil)
    (kind const-decl "{r: keyword | nonempty?(S) IFF r ≠ ⊥}" decl nil))
   nil))
 (w_TCC8 0
  (w_TCC8-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (kind_nonempty application-judgement "kind" decl nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (theory_kind? const-decl "bool" decl nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (const_kind? const-decl "bool" decl nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (app_symbol def-decl
     "{T: nonempty | (interp?(S) => interp?(T)) AND (context?(S) => context?(T)) AND (pretheory?(S) => pretheory?(T)) AND weight(F)(T) <= weight(F)(S)}"
     map nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (∈ def-decl "bool" map nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (type_kind? const-decl "bool" decl nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (kind_theory formula-decl nil decl nil))
   nil))
 (w_TCC9 0
  (w_TCC9-1 nil 3582991403
   ("" (skosimp* :preds? t) (("" (grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (kind_nonempty application-judgement "kind" decl nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal_of_nat const-decl "ordinal" ordinals_props nil)
    (definition const-decl
                "{x: semantic | (type_kind?(S) IMPLIES pretype?(x)) AND (const_kind?(S) IMPLIES preterm?(x)) AND (theory_kind?(S) IMPLIES pretheory?(x)) AND weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}"
                decl nil)
    (kind const-decl "{r: keyword | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (syntaxic formula-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (type_kind? const-decl "bool" decl nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (∈ def-decl "bool" map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (weight def-decl "nat" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (app_symbol def-decl
     "{T: nonempty | (interp?(S) => interp?(T)) AND (context?(S) => context?(T)) AND (pretheory?(S) => pretheory?(T)) AND weight(F)(T) <= weight(F)(S)}"
     map nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (const_kind? const-decl "bool" decl nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (theory_kind? const-decl "bool" decl nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil))
   nil))
 (w_TCC10 0
  (w_TCC10-1 nil 3582991403
   ("" (skosimp* :preds? t) (("" (grind) nil nil)) nil)
   ((kvar_app_symbol formula-decl nil map nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (definition const-decl
                "{x: semantic | (type_kind?(S) IMPLIES pretype?(x)) AND (const_kind?(S) IMPLIES preterm?(x)) AND (theory_kind?(S) IMPLIES pretheory?(x)) AND weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}"
                decl nil)
    (definition? const-decl "bool" decl nil)
    (kind const-decl "{r: keyword | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (syntaxic formula-decl nil language nil)
    (kind_nonempty application-judgement "kind" decl nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil))
   nil))
 (w_TCC11 0
  (w_TCC11-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC12 0
  (w_TCC12-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC13 0
  (w_TCC13-1 nil 3582991403
   ("" (grind)
    (("" (use "doubleplus_empty" :polarity? t)
      (("" (assert) (("" (inst -1 "Γ!1") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (context formula-decl nil language nil)
    (concat_empty formula-decl nil context nil)
    (well_formed? def-decl "bool" well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (w_TCC14 0
  (w_TCC14-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC15 0
  (w_TCC15-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC16 0
  (w_TCC16-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC17 0
  (w_TCC17-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC18 0
  (w_TCC18-1 nil 3582991403
   ("" (grind)
    (("" (auto-rewrite "doubleplus_empty") (("" (assert) nil nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (context formula-decl nil language nil)
    (concat_empty formula-decl nil context nil)
    (well_formed? def-decl "bool" well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (w_TCC19 0
  (w_TCC19-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC20 0
  (w_TCC20-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC21 0
  (w_TCC21-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC22 0
  (w_TCC22-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC23 0
  (w_TCC23-1 nil 3582991403
   ("" (auto-rewrite "doubleplus_empty") (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (context formula-decl nil language nil)
    (concat_empty formula-decl nil context nil)
    (well_formed? def-decl "bool" well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (w_TCC24 0
  (w_TCC24-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC25 0
  (w_TCC25-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC26 0
  (w_TCC26-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC27 0
  (w_TCC27-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC28 0
  (w_TCC28-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC29 0
  (w_TCC29-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC30 0
  (w_TCC30-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC31 0
  (w_TCC31-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC32 0
  (w_TCC32-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC33 0
  (w_TCC33-1 nil 3582991403
   ("" (auto-rewrite "doubleplus_empty") (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (context formula-decl nil language nil)
    (concat_empty formula-decl nil context nil)
    (well_formed? def-decl "bool" well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (w_TCC34 0
  (w_TCC34-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC35 0
  (w_TCC35-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC36 0
  (w_TCC36-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC37 0
  (w_TCC37-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC38 0
  (w_TCC38-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC39 0
  (w_TCC39-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC40 0
  (w_TCC40-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC41 0
  (w_TCC41-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC42 0
  (w_TCC42-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC43 0
  (w_TCC43-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC44 0
  (w_TCC44-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC45 0
  (w_TCC45-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC46 0
  (w_TCC46-1 nil 3582991403
   ("" (grind) (("" (use "pretheory_is_context" :polarity? t) nil nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil))
   nil))
 (w_TCC47 0
  (w_TCC47-1 nil 3582991403
   ("" (grind)
    (("1" (use "well_formed_concat" :polarity? t)
      (("1" (inst - "〈〉" "Δ!1" "Γ!1") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (lemma "well_formed_concat")
      (("2" (inst -1 "〈〉" "Δ!1" "Γ!1") (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((well_formed_concat formula-decl nil well_formed nil)
    (concat_empty formula-decl nil context nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil))
   nil))
 (w_TCC48 0
  (w_TCC48-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC49 0
  (w_TCC49-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC50 0
  (w_TCC50-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC51 0
  (w_TCC51-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC52 0
  (w_TCC52-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC53 0
  (w_TCC53-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC54 0
  (w_TCC54-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (w_TCC55 0
  (w_TCC55-1 nil 3582991403
   ("" (grind)
    (("" (lemma "well_formed_concat")
      (("" (inst -1 "〈〉" "Δ!1" "Γ!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((well_formed_concat formula-decl nil well_formed nil)
    (concat_empty formula-decl nil context nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil))
   nil))
 (w_TCC56 0
  (w_TCC56-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC57 0
  (w_TCC57-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC58 0
  (w_TCC58-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC59 0
  (w_TCC59-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC60 0
  (w_TCC60-1 nil 3582991403
   ("" (grind) (("" (use "pretheory_is_context" :polarity? t) nil nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil))
   nil))
 (w_TCC61 0
  (w_TCC61-1 nil 3582991403
   ("" (skosimp* :preds? t)
    (("" (lemma "well_formed_concat")
      (("" (inst -1 "〈〉" "Δ!1" "Γ!1")
        (("" (assert) (("" (rewrite -5) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((well_formed_concat formula-decl nil well_formed nil)
    (syntaxic formula-decl nil language nil)
    (concat_empty formula-decl nil context nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil))
   nil))
 (w_TCC62 0
  (w_TCC62-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC63 0
  (w_TCC63-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC64 0
  (w_TCC64-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC65 0
  (w_TCC65-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC66 0
  (w_TCC66-1 nil 3582991403
   ("" (grind) (("" (use "pretheory_is_context" :polarity? t) nil nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil))
   nil))
 (w_TCC67 0
  (w_TCC67-1 nil 3582991403
   ("" (grind)
    (("1" (lemma "well_formed_concat")
      (("1" (inst -1 "〈〉" "Δ!1" "Γ!1") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (lemma "well_formed_concat")
      (("2" (inst -1 "〈〉" "Δ!1" "Γ!1") (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((well_formed_concat formula-decl nil well_formed nil)
    (concat_empty formula-decl nil context nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil))
   nil))
 (w_TCC68 0
  (w_TCC68-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC69 0
  (w_TCC69-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC70 0
  (w_TCC70-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC71 0
  (w_TCC71-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC72 0
  (w_TCC72-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC73 0
  (w_TCC73-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC74 0
  (w_TCC74-1 nil 3582991403
   ("" (grind) (("" (use "pretheory_is_context" :polarity? t) nil nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil))
   nil))
 (w_TCC75 0
  (w_TCC75-1 nil 3582991403
   ("" (grind)
    (("1" (lemma "well_formed_concat")
      (("1" (inst -1 "〈〉" "Δ!1" "Γ!1") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (lemma "well_formed_concat")
      (("2" (inst -1 "〈〉" "Δ!1" "Γ!1") (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((well_formed_concat formula-decl nil well_formed nil)
    (concat_empty formula-decl nil context nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil))
   nil))
 (w_TCC76 0
  (w_TCC76-1 nil 3582991403 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC77 0
  (w_TCC77-1 nil 3582991403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC78 0
  (w_TCC78-1 nil 3582992058 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC79 0
  (w_TCC79-1 nil 3582992058 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC80 0
  (w_TCC80-1 nil 3582992058 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (w_TCC81 0
  (w_TCC81-1 nil 3582992058
   ("" (grind)
    (("" (lemma "well_formed_concat")
      (("" (inst -1 "〈〉" "Δ!1" "Γ!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((well_formed_concat formula-decl nil well_formed nil)
    (concat_empty formula-decl nil context nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil))
   nil))
 (w_TCC82 0
  (w_TCC82-1 nil 3582992448 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC83 0
  (w_TCC83-1 nil 3582992448 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC84 0
  (w_TCC84-1 nil 3582992448 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC85 0
  (w_TCC85-1 nil 3582992448 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC86 0
  (w_TCC86-1 nil 3582992448 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC87 0
  (w_TCC87-1 nil 3582992448 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC88 0
  (w_TCC88-1 nil 3582992448 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC89 0
  (w_TCC89-1 nil 3582992448 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC90 0
  (w_TCC90-1 nil 3582992448 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC91 0
  (w_TCC91-1 nil 3582992448 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC92 0
  (w_TCC92-1 nil 3582992448 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC93 0
  (w_TCC93-1 nil 3582992448 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (well_formed type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_subword_TCC1 0
  (w_subword_TCC1-1 nil 3582997890
   ("" (lemma "well_formed_subword")
    (("" (skosimp* :preds? t)
      (("" (inst -6 "e!1" "Γ!1" "Δ!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((well_formed_context type-eq-decl nil well_formed nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (expr formula-decl nil language nil)
    (subword_is_reflexive name-judgement
     "(reflexive?[well_formed_context])" subword nil)
    (well_formed_subword formula-decl nil subword nil))
   nil))
 (w_subword 0
  (w_subword-1 nil 3582997922
   ("" (induct "e" :name "expr_induction")
    (("1" (skosimp* :preds? t)
      (("1" (assert)
        (("1" (flatten)
          (("1" (assert)
            (("1" (auto-rewrite "w")
              (("1" (assert)
                (("1" (assert)
                  (("1" (expand "<=" +)
                    (("1" (expand "<" +)
                      (("1" (assert)
                        (("1" (use "ordinal_irreflexive" :polarity? t)
                          (("1" (assert)
                            (("1" (inst -1 "ordinal_of_nat(1)")
                              (("1"
                                (assert)
                                (("1"
                                  (use
                                   "ordinal_irreflexive"
                                   :polarity?
                                   t)
                                  (("1"
                                    (inst -1 "zero")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use
                                             "member_symbol_when_subword"
                                             :polarity?
                                             t)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use
                                                 "pos_symbol_subword"
                                                 :polarity?
                                                 t)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp* :preds? t)
      (("2" (auto-rewrite "w")
        (("2" (assert)
          (("2" (assert)
            (("2" (assert)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (use "member_symbol_when_subword" :polarity? t)
                    (("2" (assert)
                      (("2" (assert)
                        (("2" (use "subword_symbol_kind" :polarity? t)
                          (("2" (assert)
                            (("2" (lemma "kind_theory")
                              (("2"
                                (inst -1 "Δ!1(m!1)")
                                (("2"
                                  (rewrite -12 :dont-delete? t)
                                  (("2"
                                    (simplify)
                                    (("2"
                                      (rewrite -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "symmetry_of_equals[keyword]")
                                          (("2"
                                            (invoke
                                             (inst - "%1" "%2")
                                             (~ -2 "%1 = %2"))
                                            (("2"
                                              (rewrite
                                               -2
                                               :dont-delete?
                                               t)
                                              (("2"
                                                (rewrite
                                                 -2
                                                 :dont-delete?
                                                 t)
                                                (("2"
                                                  (simplify)
                                                  (("2"
                                                    (lemma
                                                     "kind_theory")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "Γ!1(m!1)")
                                                      (("2"
                                                        (rewrite -3)
                                                        (("2"
                                                          (simplify)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (use
                                                               "both_sides_plus_le1"
                                                               :polarity?
                                                               t)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (lemma
                                                                     "pos_symbol_subword")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "m!1"
                                                                       "Γ!1"
                                                                       "Δ!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "subword_symbol_definition")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "m!1"
                                                                             "Γ!1"
                                                                             "Δ!1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred!
                                                                                 "Δ!1(m!1)"
                                                                                 :implicit?
                                                                                 t)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     -2
                                                                                     :dont-delete?
                                                                                     t)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "le_plus_le")
                                                                                        (("2"
                                                                                          (invoke
                                                                                           (inst
                                                                                            -
                                                                                            "%4"
                                                                                            "%1"
                                                                                            "%3"
                                                                                            "%2")
                                                                                           (~
                                                                                            +
                                                                                            "%1 + %2 <= %3 + %4"))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (split
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -11
                                                                                                   "Γ!1"
                                                                                                   "Δ!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "<="
                                                                                                       +)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "<"
                                                                                                         +)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (decompose-equality
                                                                                                               3)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "<="
                                                                                                                 -)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "<="
                                                                                                     +)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "<"
                                                                                                         +)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (decompose-equality
                                                                                                             4)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp* :preds? t)
      (("3" (assert)
        (("3" (expand "<=" +)
          (("3" (flatten)
            (("3" (assert)
              (("3" (auto-rewrite "w")
                (("3" (assert)
                  (("3" (expand "ordinal_of_nat")
                    (("3" (assert)
                      (("3" (decompose-equality 2)
                        (("3" (expand "<" +)
                          (("3" (flatten)
                            (("3" (assert)
                              (("3"
                                (use "pos_var_subword" :polarity? t)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp* :preds? t)
      (("4" (assert)
        (("4" (flatten)
          (("4" (auto-rewrite "w")
            (("4" (assert)
              (("4" (use "both_sides_plus_le1" :polarity? t)
                (("4" (assert)
                  (("4" (use "le_max" :polarity? t)
                    (("4" (assert)
                      (("4"
                        (invoke (inst -1 "%1" "%2" "%3")
                         (~ + "%1 <= max(%2, %3)"))
                        (("4" (assert)
                          (("4" (flatten)
                            (("4" (assert)
                              (("4"
                                (inst - "Γ!1" "Δ!1")
                                (("4"
                                  (inst - "Γ!1" "Δ!1")
                                  (("4"
                                    (assert)
                                    (("4"
                                      (use "max_le" :polarity? t)
                                      (("4"
                                        (assert)
                                        (("4"
                                          (copy -)
                                          (("4"
                                            (invoke
                                             (inst - "%1" "%2" "%3")
                                             (~ 1 "max(%1, %2) <= %3"))
                                            (("4"
                                              (invoke
                                               (inst - "%1" "%2" "%3")
                                               (~
                                                2
                                                "max(%1, %2) <= %3"))
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (hide (1 2 3 4))
                                                  (("4"
                                                    (expand "max" 1)
                                                    (("4"
                                                      (assert)
                                                      (("4"
                                                        (lift-if)
                                                        (("4"
                                                          (lift-if)
                                                          (("4"
                                                            (lift-if)
                                                            (("4"
                                                              (bddsimp
                                                               1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 ">")
                                                                (("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -8
                                                                    -9
                                                                    1
                                                                    2))
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (use
                                                                       "ordinal_trichotomy"
                                                                       :polarity?
                                                                       t)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide
                                                                           -2
                                                                           -4
                                                                           1)
                                                                          (("2"
                                                                            (use
                                                                             "le_cut"
                                                                             :polarity?
                                                                             t)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "<="
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                (("3"
                                                                  (expand
                                                                   ">")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -8
                                                                        -9
                                                                        1
                                                                        2))
                                                                      (("3"
                                                                        (use
                                                                         "ordinal_trichotomy"
                                                                         :polarity?
                                                                         t)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (use
                                                                             "le_cut"
                                                                             :polarity?
                                                                             t)
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (expand
                                                                                 "<="
                                                                                 1)
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp* :preds? t)
      (("5" (auto-rewrite "w")
        (("5" (assert)
          (("5" (use "both_sides_plus_le1" :polarity? t)
            (("5" (assert)
              (("5" (hide 2)
                (("5" (expand "max" +)
                  (("5" (lift-if)
                    (("5" (lift-if)
                      (("5" (lift-if)
                        (("5" (inst -7 "Γ!1" "Δ!1")
                          (("5"
                            (inst -8 "kvar(T!1, Γ!1)" "kvar(T!1, Δ!1)")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (bddsimp +)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand ">")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide-all-but
                                               (-1 -8 -9 1 2))
                                              (("1"
                                                (use
                                                 "ordinal_trichotomy"
                                                 :polarity?
                                                 t)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (use
                                                     "le_cut"
                                                     :polarity?
                                                     t)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "<=" 1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand ">")
                                        (("2"
                                          (hide-all-but (-1 -8 -9 +))
                                          (("2"
                                            (use
                                             "ordinal_trichotomy"
                                             :polarity?
                                             t)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (use
                                                 "le_cut"
                                                 :polarity?
                                                 t)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "<=" 1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil)
                             ("3" (assert)
                              (("3"
                                (flatten)
                                (("3"
                                  (assert)
                                  (("3"
                                    (use
                                     "well_formed_subword"
                                     :polarity?
                                     t)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t)
      (("6" (inst -7 "Γ!1" "Δ!1")
        (("6" (inst - "Γ!1" "Δ!1")
          (("6" (assert)
            (("6" (flatten)
              (("6" (assert)
                (("6" (use "ordinal_trichotomy" :polarity? t)
                  (("6" (auto-rewrite "w")
                    (("6" (assert)
                      (("6" (use "both_sides_plus_le1" :polarity? t)
                        (("6" (assert)
                          (("6" (delete 2)
                            (("6" (expand "max" +)
                              (("6"
                                (lift-if)
                                (("6"
                                  (lift-if)
                                  (("6"
                                    (bddsimp +)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (use
                                         "ordinal_trichotomy"
                                         :polarity?
                                         t)
                                        (("2"
                                          (use "le_cut" :polarity? t)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "<=" 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand ">")
                                                  (("2"
                                                    (use
                                                     "le_cut"
                                                     :polarity?
                                                     t)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (use
                                                         "ordinal_trichotomy"
                                                         :polarity?
                                                         t)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand ">")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (use
                                           "ordinal_trichotomy"
                                           :polarity?
                                           t)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (lift-if)
                                              (("3"
                                                (bddsimp +)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (use
                                                     "ordinal_trichotomy"
                                                     :polarity?
                                                     t)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "le_cut"
                                                         :polarity?
                                                         t)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "<="
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skosimp* :preds? t)
      (("7" (auto-rewrite "w")
        (("7" (assert)
          (("7" (use "both_sides_plus_le1" :polarity? t)
            (("7" (assert)
              (("7" (inst -6 "Γ!1" "Δ!1") (("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (skosimp* :preds? t)
      (("8" (inst -6 "Γ!1" "Δ!1")
        (("8" (assert)
          (("8" (auto-rewrite "w")
            (("8" (assert)
              (("8" (use "both_sides_plus_le1" :polarity? t)
                (("8" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (skosimp* :preds? t)
      (("9" (inst -7 "Γ!1" "Δ!1")
        (("9" (assert)
          (("9" (inst - "kvar(A!1, Γ!1)" "kvar(A!1, Δ!1)")
            (("1" (assert)
              (("1" (auto-rewrite "w")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (use "both_sides_plus_le1" :polarity? t)
                        (("1" (assert)
                          (("1" (delete 2)
                            (("1" (expand "max" +)
                              (("1"
                                (assert)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand ">")
                                          (("1"
                                            (bddsimp +)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use
                                                 "ordinal_trichotomy"
                                                 :polarity?
                                                 t)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (use
                                                     "le_cut"
                                                     :polarity?
                                                     t)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "<=" 1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use
                                               "ordinal_trichotomy"
                                               :polarity?
                                               t)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "le_cut"
                                                   :polarity?
                                                   t)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "<=" 1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil)
             ("3" (assert)
              (("3" (flatten)
                (("3" (assert)
                  (("3" (auto-rewrite "w")
                    (("3" (assert)
                      (("3" (use "well_formed_subword" :polarity? t)
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (skosimp* :preds? t)
      (("10" (auto-rewrite "w")
        (("10" (assert)
          (("10" (flatten)
            (("10" (inst - "Γ!1" "Δ!1")
              (("10" (inst - "kvar(A!1, Γ!1)" "kvar(A!1, Δ!1)")
                (("10" (assert)
                  (("10" (use "both_sides_plus_le1" :polarity? t)
                    (("10" (assert)
                      (("10" (delete 2)
                        (("10" (expand "max" +)
                          (("10" (expand ">")
                            (("10" (lift-if)
                              (("10"
                                (lift-if)
                                (("10"
                                  (lift-if)
                                  (("10"
                                    (assert)
                                    (("10"
                                      (bddsimp +)
                                      (("1"
                                        (use
                                         "ordinal_trichotomy"
                                         :polarity?
                                         t)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use "le_cut" :polarity? t)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "<=" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use
                                         "ordinal_trichotomy"
                                         :polarity?
                                         t)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (use "le_cut" :polarity? t)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "<=" 1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (skosimp* :preds? t)
      (("11" (auto-rewrite "w")
        (("11" (assert)
          (("11" (flatten)
            (("11" (inst - "Γ!1" "Δ!1")
              (("11" (inst - "kvar(T!1, Γ!1)" "kvar(T!1, Δ!1)")
                (("11" (assert)
                  (("11" (use "both_sides_plus_le1" :polarity? t)
                    (("11" (assert)
                      (("11" (delete 2)
                        (("11" (expand "max" +)
                          (("11" (expand ">")
                            (("11" (lift-if)
                              (("11"
                                (lift-if)
                                (("11"
                                  (lift-if)
                                  (("11"
                                    (bddsimp +)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (use
                                       "ordinal_trichotomy"
                                       :polarity?
                                       t)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (use "le_cut" :polarity? t)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "<=" 1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (assert)
                                      (("3"
                                        (use
                                         "ordinal_trichotomy"
                                         :polarity?
                                         t)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (use "le_cut" :polarity? t)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand "<=" 1)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("12" (grind) nil nil)
     ("13" (skosimp* :preds? t)
      (("13" (auto-rewrite "w")
        (("13" (assert)
          (("13" (flatten)
            (("13" (assert)
              (("13" (inst - "Γ!1" "Δ!1")
                (("13" (inst - "Γ!1" "Δ!1")
                  (("13" (assert)
                    (("13" (use "both_sides_plus_le1" :polarity? t)
                      (("13" (assert)
                        (("13" (delete 3)
                          (("13" (expand "max" +)
                            (("13" (expand ">")
                              (("13"
                                (lift-if)
                                (("13"
                                  (lift-if)
                                  (("13"
                                    (lift-if)
                                    (("13"
                                      (bddsimp +)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (use
                                           "ordinal_trichotomy"
                                           :polarity?
                                           t)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (use
                                               "le_cut"
                                               :polarity?
                                               t)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "<=" 1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (use
                                         "ordinal_trichotomy"
                                         :polarity?
                                         t)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (use "le_cut" :polarity? t)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand "<=" 1)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("14" (skosimp* :preds? t)
      (("14" (auto-rewrite "w")
        (("14" (assert)
          (("14" (flatten)
            (("14" (inst - "Γ!1" "Δ!1")
              (("14" (inst - "Γ!1" "Δ!1")
                (("14" (assert)
                  (("14" (use "both_sides_plus_le1" :polarity? t)
                    (("14" (assert)
                      (("14" (delete 3)
                        (("14" (expand "max" +)
                          (("14" (expand ">")
                            (("14" (lift-if)
                              (("14"
                                (lift-if)
                                (("14"
                                  (lift-if)
                                  (("14"
                                    (bddsimp +)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (use
                                       "ordinal_trichotomy"
                                       :polarity?
                                       t)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (use "le_cut" :polarity? t)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "<=" 1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (use
                                       "ordinal_trichotomy"
                                       :polarity?
                                       t)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (use "le_cut" :polarity? t)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (expand "<=" 1)
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("15" (lemma "well_formed_subword")
      (("15" (skosimp* :preds? t)
        (("15" (inst -10 "e!2" "Γ!1" "Δ!1") (("15" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((≺ def-decl "bool" subword nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (<= const-decl "bool" ordinals nil)
    (well_formed type-eq-decl nil well_formed nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w def-decl "ordinal" weight nil)
    (expr_induction formula-decl nil inductions nil)
    (ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil)
    (kind_nonempty application-judgement "kind" decl nil)
    (subword_is_reflexive name-judgement
     "(reflexive?[well_formed_context])" subword nil)
    (kind_theory formula-decl nil decl nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (member_symbol_when_subword formula-decl nil subword nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (symbol nonempty-type-eq-decl nil language nil)
    (pos_symbol_subword formula-decl nil subword nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ordinal_of_nat const-decl "ordinal" ordinals_props nil)
    (ordinal_irreflexive formula-decl nil ordinals nil)
    (< def-decl "bool" ordinals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (∈ def-decl "bool" map nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (<= const-decl "bool" reals nil) (ord type-decl nil language nil)
    (weight def-decl "nat" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (app_symbol def-decl
     "{T: nonempty | (interp?(S) => interp?(T)) AND (context?(S) => context?(T)) AND (pretheory?(S) => pretheory?(T)) AND weight(F)(T) <= weight(F)(S)}"
     map nil)
    (KTHEORY? adt-recognizer-decl "[keyword -> boolean]" language nil)
    (KTHEORY adt-constructor-decl "(KTHEORY?)" language nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (≠ const-decl "[T, T -> bool]" notequal nil)
    (undefined? adt-recognizer-decl "[keyword -> boolean]" language
     nil)
    (⊥ adt-constructor-decl "(undefined?)" language nil)
    (kind const-decl "{r: keyword | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (le_plus_le formula-decl nil ordinals_props nil)
    (ordstruct_add_extensionality formula-decl nil ordstruct_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subword_symbol_definition formula-decl nil subword nil)
    (>= const-decl "bool" ordinals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (+ def-decl
       "{z |      (z >= x) AND (z >= y) AND (zero?(x) IMPLIES z = y) AND (zero?(y) IMPLIES z = x) AND (nonzero?(x) AND nonzero?(y) IMPLIES exp(z) = max(exp(x), exp(y)))}"
       ordinals_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" context nil)
    (pos def-decl "below[length(Γ)]" context nil)
    (definition? const-decl "bool" decl nil)
    (definition type-eq-decl nil decl nil)
    (type_kind? const-decl "bool" decl nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (const_kind? const-decl "bool" decl nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (theory_kind? const-decl "bool" decl nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (definition const-decl
                "{x: semantic | (type_kind?(S) IMPLIES pretype?(x)) AND (const_kind?(S) IMPLIES preterm?(x)) AND (theory_kind?(S) IMPLIES pretheory?(x)) AND weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}"
                decl nil)
    (both_sides_plus_le1 formula-decl nil ordinals_props nil)
    (keyword type-decl nil language nil)
    (symmetry_of_equals formula-decl nil equality_props nil)
    (subword_symbol_kind formula-decl nil subword nil)
    (plus_has_identity name-judgement "(has_identity?[ordinal])"
     ordinals_props nil)
    (plus_is_associative name-judgement "(associative?[ordinal])"
     ordinals_props nil)
    (interp type-eq-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pos def-decl "below[length(Γ)]" context nil)
    (∈ def-decl "bool" map nil)
    (pos_var_subword formula-decl nil subword nil)
    (le_max formula-decl nil ordinals_props nil)
    (> const-decl "bool" ordinals nil)
    (le_cut formula-decl nil ordinals_props nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (max_le formula-decl nil ordinals_props nil)
    (preterm type-eq-decl nil language nil)
    (kvar adt-constructor-decl "[[semantic, semantic] -> (kvar?)]"
     language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (Γ!1 skolem-const-decl "well_formed_context" weight nil)
    (T!1 skolem-const-decl "pretype" weight nil)
    (Δ!1 skolem-const-decl "well_formed_context" weight nil)
    (concat_empty formula-decl nil context nil)
    (context formula-decl nil language nil)
    (well_formed_subword formula-decl nil subword nil)
    (pretype type-eq-decl nil language nil)
    (A!1 skolem-const-decl "pretype" weight nil)
    (Γ!1 skolem-const-decl "well_formed_context" weight nil)
    (Δ!1 skolem-const-decl "well_formed_context" weight nil)
    (expr formula-decl nil language nil))
   shostak)))

