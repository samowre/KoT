(weight
 (length_TCC1 0
  (length_TCC1-1 nil 3582640246
   ("" (grind) (("" (use "pretheory_is_context" :polarity? t) nil nil))
    nil)
   ((context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (context formula-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dtheory adt-accessor-decl "[(ktheory?) -> semantic]" language
     nil))
   nil))
 (length_TCC2 0
  (length_TCC2-1 nil 3582640246 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (length_TCC3 0
  (length_TCC3-1 nil 3582640246 ("" (subtype-tcc) nil nil)
   ((context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (length_TCC4 0
  (length_TCC4-1 nil 3582640246 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (length_TCC5 0
  (length_TCC5-1 nil 3582640246 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (length_TCC6 0
  (length_TCC6-1 nil 3582640246 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (length_TCC7 0
  (length_TCC7-1 nil 3582640246
   ("" (grind) (("" (rewrite "context") (("" (grind) nil nil)) nil))
    nil)
   ((context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (context formula-decl nil language nil))
   nil))
 (length_TCC8 0
  (length_TCC8-1 nil 3582640246
   ("" (grind) (("" (rewrite "context") (("" (grind) nil nil)) nil))
    nil)
   ((context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (length_TCC9 0
  (length_TCC9-1 nil 3582640246 ("" (cond-disjoint-tcc) nil nil)
   ((context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (length_subword 0
  (length_subword-1 nil 3582900040
   ("" (auto-rewrite ("length" "≺" "well_formed?"))
    ((""
      (apply (branch (induct "Γ" :name "context_induction")
              ((grind) (grind)
               (then (skosimp* :preds? t)
                (repeat* (then (assert) (flatten))) (repeat* (lift-if))
                (bddsimp) (repeat* (flatten))
                (invoke (inst - "%1") (~ - "^%1 ≺ %$")) (assert)))))
      nil nil))
    nil)
   ((context formula-decl nil language nil)
    (semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (≺ def-decl "bool" contexts nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" weight nil)
    (context_induction formula-decl nil inductions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (∈ def-decl "bool" map nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil))
   shostak))
 (w_TCC1 0
  (w_TCC1-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (w_TCC2 0
  (w_TCC2-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil))
   nil))
 (w_TCC3 0
  (w_TCC3-1 nil 3582641802 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (context formula-decl nil language nil))
   nil))
 (w_TCC4 0
  (w_TCC4-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (weight def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (w_TCC5 0
  (w_TCC5-1 nil 3582641802
   ("" (skosimp* :preds? t) (("" (grind) nil nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (symbol nonempty-type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (length def-decl "nat" weight nil)
    (upto nonempty-type-eq-decl nil nat_types nil))
   nil))
 (w_TCC6 0
  (w_TCC6-1 nil 3582641802 ("" (subtype-tcc) nil nil) nil nil))
 (w_TCC7 0
  (w_TCC7-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil))
   nil))
 (w_symbol_subword 0
  (w_symbol_subword-1 nil 3582901588
   ("" (auto-rewrite ("length" "≺" "well_formed?"))
    (("" (auto-rewrite ("length" "≺" "well_formed?" "w"))
      (("" (induct "Γ" :name "context_induction")
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (skosimp* :preds? t)
          (("3" (assert)
            (("3" (flatten)
              (("3" (assert)
                (("3" (assert)
                  (("3" (lift-if)
                    (("3" (bddsimp)
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (inst -4 "s(Δ!2)" "rest(Δ!2)")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (use "length_subword" :polarity? t)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (assert)
                          (("2" (inst -4 "s!2" "rest(Δ!2)")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (assert)
                        (("3" (inst - "s!2" "Δ!2")
                          (("3" (assert) (("3" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (inst -4 "s!2" "Δ!2")
                        (("4" (assert) nil nil)) nil)
                       ("5" (assert)
                        (("5" (inst - "s!2" "Δ!2")
                          (("5" (assert) (("5" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("6" (inst - "s!2" "Δ!2")
                        (("6" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (assert)
          (("4" (skosimp* :preds? t)
            (("4" (assert)
              (("4" (assert)
                (("4" (lift-if)
                  (("4" (bddsimp)
                    (("1" (assert)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (use "length_subword" :polarity? t)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (inst - "s!2" "rest(Δ!2)")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (inst - "s!2" "Δ!2")
                      (("3" (assert) (("3" (assert) nil nil)) nil))
                      nil)
                     ("4" (inst - "s!2" "Δ!2") (("4" (assert) nil nil))
                      nil)
                     ("5" (inst - "s!2" "Δ!2")
                      (("5" (assert) (("5" (assert) nil nil)) nil))
                      nil)
                     ("6" (inst - "s!2" "Δ!2") (("6" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (skosimp* :preds? t)
          (("5" (assert)
            (("5" (flatten)
              (("5" (assert)
                (("5" (assert)
                  (("5" (lift-if)
                    (("5" (bddsimp)
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (use "length_subword" :polarity? t)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst - "s!2" "rest(Δ!2)")
                        (("2" (assert) nil nil)) nil)
                       ("3" (inst - "s!2" "Δ!2")
                        (("3" (assert) (("3" (assert) nil nil)) nil))
                        nil)
                       ("4" (inst - "s!2" "Δ!2")
                        (("4" (assert) nil nil)) nil)
                       ("5" (inst - "s!2" "Δ!2")
                        (("5" (assert) (("5" (assert) nil nil)) nil))
                        nil)
                       ("6" (inst - "s!2" "Δ!2")
                        (("6" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (skosimp* :preds? t)
          (("6" (assert)
            (("6" (flatten)
              (("6" (assert)
                (("6" (lift-if)
                  (("6" (bddsimp)
                    (("6" (inst - "s!1" "rest(Δ!2)")
                      (("6" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("7" (skosimp* :preds? t)
          (("7" (assert)
            (("7" (flatten)
              (("7" (assert)
                (("7" (assert)
                  (("7" (lift-if)
                    (("7" (bddsimp)
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (use "length_subword" :polarity? t)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst - "s!2" "rest(Δ!2)")
                        (("2" (assert) nil nil)) nil)
                       ("3" (inst - "s!2" "Δ!2")
                        (("3" (assert) (("3" (assert) nil nil)) nil))
                        nil)
                       ("4" (inst - "s!2" "Δ!2")
                        (("4" (assert) nil nil)) nil)
                       ("5" (inst - "s!2" "Δ!2")
                        (("5" (assert) (("5" (assert) nil nil)) nil))
                        nil)
                       ("6" (inst - "s!2" "Δ!2")
                        (("6" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("8" (skosimp* :preds? t)
          (("8" (assert)
            (("8" (flatten)
              (("8" (assert)
                (("8" (assert)
                  (("8" (lift-if)
                    (("8" (bddsimp)
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (use "length_subword" :polarity? t)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst - "s!2" "rest(Δ!2)")
                        (("2" (assert) nil nil)) nil)
                       ("3" (inst - "s!2" "Δ!2")
                        (("3" (assert) (("3" (assert) nil nil)) nil))
                        nil)
                       ("4" (inst - "s!2" "Δ!2")
                        (("4" (assert) nil nil)) nil)
                       ("5" (inst - "s!2" "Δ!2")
                        (("5" (assert) (("5" (assert) nil nil)) nil))
                        nil)
                       ("6" (inst - "s!2" "Δ!2")
                        (("6" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("9" (skosimp* :preds? t)
          (("9" (assert)
            (("9" (flatten)
              (("9" (assert)
                (("9" (assert)
                  (("9" (lift-if)
                    (("9" (bddsimp)
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (use "length_subword" :polarity? t)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst - "s!2" "rest(Δ!2)")
                        (("2" (assert) nil nil)) nil)
                       ("3" (inst - "s!2" "Δ!2")
                        (("3" (assert) (("3" (assert) nil nil)) nil))
                        nil)
                       ("4" (inst - "s!2" "Δ!2")
                        (("4" (assert) nil nil)) nil)
                       ("5" (inst - "s!2" "Δ!2")
                        (("5" (assert) (("5" (assert) nil nil)) nil))
                        nil)
                       ("6" (inst - "s!2" "Δ!2")
                        (("6" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("10" (skosimp* :preds? t)
          (("10" (assert)
            (("10" (flatten)
              (("10" (assert)
                (("10" (assert)
                  (("10" (lift-if)
                    (("10" (bddsimp)
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (use "length_subword" :polarity? t)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst - "s!2" "rest(Δ!2)")
                        (("2" (assert) nil nil)) nil)
                       ("3" (inst - "s!2" "Δ!2")
                        (("3" (assert) (("3" (assert) nil nil)) nil))
                        nil)
                       ("4" (inst - "s!2" "Δ!2")
                        (("4" (assert) nil nil)) nil)
                       ("5" (inst - "s!2" "Δ!2")
                        (("5" (assert) (("5" (assert) nil nil)) nil))
                        nil)
                       ("6" (inst - "s!2" "Δ!2")
                        (("6" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pretheory type-eq-decl nil language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (s shared-adt-accessor-decl
     "[{x: semantic |     symbol?(x) OR dot?(x) OR ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> symbol]"
     language nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (length_subword formula-decl nil weight nil)
    (∈ def-decl "bool" map nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (context_induction formula-decl nil inductions nil)
    (w def-decl "upto[length(Γ)]" weight nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (length def-decl "nat" weight nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (≺ def-decl "bool" contexts nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (symbol nonempty-type-decl nil language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (context formula-decl nil language nil))
   shostak))
 (w_TCC8 0
  (w_TCC8-1 nil 3582641802 ("" (cond-disjoint-tcc) nil nil) nil nil))
 (w_TCC9 0
  (w_TCC9-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (w_TCC10 0
  (w_TCC10-1 nil 3582641802 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (weight def-decl "nat" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (length def-decl "nat" weight nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (w_TCC11 0
  (w_TCC11-1 nil 3582641802
   ("" (grind)
    (("1" (rewrite "context" -) (("1" (grind) nil nil)) nil)
     ("2" (rewrite "context" -) (("2" (grind) nil nil)) nil))
    nil)
   ((context formula-decl nil language nil) (∈ def-decl "bool" map nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil))
   nil))
 (w_TCC12 0
  (w_TCC12-1 nil 3582641802
   ("" (grind) (("" (rewrite "context") (("" (grind) nil nil)) nil))
    nil)
   ((context formula-decl nil language nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil) (∈ def-decl "bool" map nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil))
   nil))
 (w_TCC13 0
  (w_TCC13-1 nil 3582641802 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (ord type-decl nil language nil)
    (weight def-decl "nat" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (length def-decl "nat" weight nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Γ!1 skolem-const-decl "well_formed_context" weight nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (w_var_lt 0
  (w_var_lt-1 nil 3582644295
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil)
     ("6" (skosimp* :preds? t)
      (("6" (auto-rewrite ("length" "≺" "well_formed?" "w"))
        (("6" (assert)
          (("6" (assert)
            (("6" (flatten)
              (("6" (assert)
                (("6" (lift-if)
                  (("6" (lift-if)
                    (("6" (lift-if)
                      (("6" (bddsimp)
                        (("1" (assert) nil nil) ("2" (assert) nil nil)
                         ("3" (assert) nil nil)
                         ("4" (assert)
                          (("4" (inst -5 "i!1 - 1" "j!1 - 1")
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil) (∈ def-decl "bool" map nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (context_induction formula-decl nil inductions nil)
    (w def-decl "upto[length(Γ)]" weight nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (length def-decl "nat" weight nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (context formula-decl nil language nil))
   shostak))
 (w_var_subword 0
  (w_var_subword-1 nil 3582902572
   ("" (induct "Γ" :name "context_induction")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (grind :if-match nil)
      (("1" (inst -5 "i!1" "rest(Δ!2)") (("1" (assert) nil nil)) nil)
       ("2" (inst - "i!1" "Δ!2") (("2" (assert) nil nil)) nil)
       ("3" (inst - "i!1" "Δ!2") (("3" (assert) nil nil)) nil))
      nil)
     ("4" (grind :if-match nil)
      (("1" (inst - "i!1" "rest(Δ!2)") (("1" (assert) nil nil)) nil)
       ("2" (inst - "i!1" "Δ!2") (("2" (assert) nil nil)) nil)
       ("3" (inst - "i!1" "Δ!2") (("3" (assert) nil nil)) nil))
      nil)
     ("5" (grind :if-match nil)
      (("1" (inst - "i!1" "rest(Δ!2)") (("1" (assert) nil nil)) nil)
       ("2" (inst - "i!1" "Δ!2") (("2" (assert) nil nil)) nil)
       ("3" (inst - "i!1" "Δ!2") (("3" (assert) nil nil)) nil))
      nil)
     ("6" (skosimp* :preds? t)
      (("6" (assert)
        (("6" (auto-rewrite ("length" "≺" "well_formed?" "w"))
          (("6" (assert)
            (("6" (flatten)
              (("6" (assert)
                (("6" (assert)
                  (("6" (lift-if)
                    (("6" (bddsimp)
                      (("1" (inst -6 "i!1" "rest(Δ!2)")
                        (("1" (assert)
                          (("1" (use "length_subword")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (inst - "i!1 - 1" "rest(Δ!2)")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (grind :if-match nil)
      (("1" (inst - "i!1" "rest(Δ!2)") (("1" (assert) nil nil)) nil)
       ("2" (inst - "i!1" "Δ!2") (("2" (assert) nil nil)) nil)
       ("3" (inst - "i!1" "Δ!2") (("3" (assert) nil nil)) nil))
      nil)
     ("8" (grind :if-match nil)
      (("1" (inst - "i!1" "rest(Δ!2)") (("1" (assert) nil nil)) nil)
       ("2" (inst - "i!1" "Δ!2") (("2" (assert) nil nil)) nil)
       ("3" (inst - "i!1" "Δ!2") (("3" (assert) nil nil)) nil))
      nil)
     ("9" (grind :if-match nil)
      (("1" (inst - "i!1" "rest(Δ!2)") (("1" (assert) nil nil)) nil)
       ("2" (inst - "i!1" "Δ!2") (("2" (assert) nil nil)) nil)
       ("3" (inst - "i!1" "Δ!2") (("3" (assert) nil nil)) nil))
      nil)
     ("10" (grind :if-match nil)
      (("1" (inst - "i!1" "rest(Δ!2)") (("1" (assert) nil nil)) nil)
       ("2" (inst - "i!1" "Δ!2") (("2" (assert) nil nil)) nil)
       ("3" (inst - "i!1" "Δ!2") (("3" (assert) nil nil)) nil))
      nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (i!1 skolem-const-decl "nat" weight nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length_subword formula-decl nil weight nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil) (∈ def-decl "bool" map nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (context_induction formula-decl nil inductions nil)
    (w def-decl "upto[length(Γ)]" weight nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (length def-decl "nat" weight nil) (<= const-decl "bool" reals nil)
    (≺ def-decl "bool" contexts nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (syntaxic type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (context formula-decl nil language nil))
   shostak))
 (w_TCC14 0
  (w_TCC14-1 nil 3582641802
   ("" (grind)
    (("" (use "member_nonempty") (("" (assert) nil nil)) nil)) nil)
   ((member_nonempty formula-decl nil map nil)
    (symbol nonempty-type-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil))
   nil))
 (w_TCC15 0
  (w_TCC15-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (theory_kind? const-decl "bool" decl nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (const_kind? const-decl "bool" decl nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (app_symbol def-decl
     "{T: nonempty | (interp?(S) => interp?(T)) AND (context?(S) => context?(T)) AND (pretheory?(S) => pretheory?(T)) AND weight(F)(T) <= weight(F)(S)}"
     map nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (∈ def-decl "bool" map nil)
    (symbol nonempty-type-decl nil language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (type_kind? const-decl "bool" decl nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (kind const-decl "{r: keyword | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (definition const-decl
                "{x: semantic | (type_kind?(S) IMPLIES pretype?(x)) AND (const_kind?(S) IMPLIES preterm?(x)) AND (theory_kind?(S) IMPLIES pretheory?(x)) AND weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}"
                decl nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC16 0
  (w_TCC16-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (theory_kind? const-decl "bool" decl nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (const_kind? const-decl "bool" decl nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (app_symbol def-decl
     "{T: nonempty | (interp?(S) => interp?(T)) AND (context?(S) => context?(T)) AND (pretheory?(S) => pretheory?(T)) AND weight(F)(T) <= weight(F)(S)}"
     map nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (weight def-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ord type-decl nil language nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (∈ def-decl "bool" map nil)
    (symbol nonempty-type-decl nil language nil)
    (nonempty type-eq-decl nil language nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (type_kind? const-decl "bool" decl nil)
    (map type-eq-decl nil language nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (kind_theory formula-decl nil decl nil))
   nil))
 (w_TCC17 0
  (w_TCC17-1 nil 3582641802
   ("" (grind) (("" (rewrite "context" -) (("" (grind) nil nil)) nil))
    nil)
   ((kind const-decl "{r: keyword | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (definition const-decl
                "{x: semantic | (type_kind?(S) IMPLIES pretype?(x)) AND (const_kind?(S) IMPLIES preterm?(x)) AND (theory_kind?(S) IMPLIES pretheory?(x)) AND weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}"
                decl nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil))
   nil))
 (w_TCC18 0
  (w_TCC18-1 nil 3582641802
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (assert)
        (("" (bddsimp -6)
          (("" (assert)
            (("" (rewrite -10)
              (("" (rewrite -9)
                (("" (assert)
                  (("" (assert)
                    (("" (typepred "definition")
                      (("" (inst?)
                        (("" (assert)
                          (("" (flatten)
                            ((""
                              (use "pretheory_is_context" :polarity? t)
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((kind_nonempty application-judgement "kind" decl nil)
    (nonempty_rest application-judgement
     "{m: map | weight(F)(m) < weight(F)(x)}" subtype nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (syntaxic formula-decl nil language nil)
    (kind_theory formula-decl nil decl nil)
    (definition? const-decl "bool" decl nil)
    (definition type-eq-decl nil decl nil)
    (definition const-decl
                "{x: semantic | (type_kind?(S) IMPLIES pretype?(x)) AND (const_kind?(S) IMPLIES preterm?(x)) AND (theory_kind?(S) IMPLIES pretheory?(x)) AND weight(F)(x) + weight(F)(rest(S)) < weight(F)(S)}"
                decl nil)
    (pretheory type-eq-decl nil language nil)
    (pretheory_is_context judgement-tcc nil subtype nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (map? const-decl "[semantic -> bool]" language nil)
    (map type-eq-decl nil language nil)
    (type_kind? const-decl "bool" decl nil)
    (nonempty? const-decl "[semantic -> bool]" language nil)
    (nonempty type-eq-decl nil language nil)
    (symbol nonempty-type-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil) (ord type-decl nil language nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (weight def-decl "nat" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (F const-decl
     "(LAMBDA (F: [ord -> nat]): (F(ord_nil) <= F(ord_symbol)) AND (F(ord_nil) <= F(ord_dot)) AND (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
     language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (const_kind? const-decl "bool" decl nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (theory_kind? const-decl "bool" decl nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x) OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x) OR ktheory?(x) OR itype?(x) OR iconst?(x)} -> semantic]"
          language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil))
   nil))
 (w_TCC19 0
  (w_TCC19-1 nil 3582641802 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (name formula-decl nil language nil)
    (syntaxic formula-decl nil language nil)
    (kind const-decl "{r: keyword | nonempty?(S) IFF r ≠ ⊥}" decl nil)
    (definition? const-decl "bool" decl nil))
   nil))
 (w_TCC20 0
  (w_TCC20-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC21 0
  (w_TCC21-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC22 0
  (w_TCC22-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC23 0
  (w_TCC23-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC24 0
  (w_TCC24-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC25 0
  (w_TCC25-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC26 0
  (w_TCC26-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC27 0
  (w_TCC27-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC28 0
  (w_TCC28-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC29 0
  (w_TCC29-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC30 0
  (w_TCC30-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC31 0
  (w_TCC31-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC32 0
  (w_TCC32-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC33 0
  (w_TCC33-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC34 0
  (w_TCC34-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC35 0
  (w_TCC35-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC36 0
  (w_TCC36-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC37 0
  (w_TCC37-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC38 0
  (w_TCC38-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC39 0
  (w_TCC39-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC40 0
  (w_TCC40-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC41 0
  (w_TCC41-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC42 0
  (w_TCC42-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC43 0
  (w_TCC43-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC44 0
  (w_TCC44-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC45 0
  (w_TCC45-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC46 0
  (w_TCC46-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC47 0
  (w_TCC47-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC48 0
  (w_TCC48-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC49 0
  (w_TCC49-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC50 0
  (w_TCC50-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC51 0
  (w_TCC51-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC52 0
  (w_TCC52-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC53 0
  (w_TCC53-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC54 0
  (w_TCC54-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC55 0
  (w_TCC55-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC56 0
  (w_TCC56-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC57 0
  (w_TCC57-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC58 0
  (w_TCC58-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC59 0
  (w_TCC59-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC60 0
  (w_TCC60-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC61 0
  (w_TCC61-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC62 0
  (w_TCC62-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC63 0
  (w_TCC63-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC64 0
  (w_TCC64-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC65 0
  (w_TCC65-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC66 0
  (w_TCC66-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC67 0
  (w_TCC67-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC68 0
  (w_TCC68-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC69 0
  (w_TCC69-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC70 0
  (w_TCC70-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC71 0
  (w_TCC71-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC72 0
  (w_TCC72-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC73 0
  (w_TCC73-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC74 0
  (w_TCC74-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC75 0
  (w_TCC75-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC76 0
  (w_TCC76-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC77 0
  (w_TCC77-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC78 0
  (w_TCC78-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC79 0
  (w_TCC79-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC80 0
  (w_TCC80-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC81 0
  (w_TCC81-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC82 0
  (w_TCC82-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC83 0
  (w_TCC83-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_TCC84 0
  (w_TCC84-1 nil 3582641802 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (syntaxic formula-decl nil language nil))
   nil))
 (w_TCC85 0
  (w_TCC85-1 nil 3582641802 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (context type-eq-decl nil language nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (syntaxic type-eq-decl nil language nil)
    (well_formed? def-decl "bool" well_formed nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (well_formed_context type-eq-decl nil well_formed nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (weight def-decl "nat" language nil)
    (syntaxic formula-decl nil language nil)
    (name formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (pretheory formula-decl nil language nil)
    (context formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (w_prefix 0
  (w_prefix-1 nil 3582649780
   ("" (induct "S")
    (("1" (assert) nil nil)
     ("2" (assert)
      (("2" (skosimp* :preds? t)
        (("2" (assert)
          (("2" (expand "w" +)
            (("2" (assert)
              (("2" (lemma "both_sides_plus_le1")
                (("2" (inst? :polarity? t)
                  (("2" (assert)
                    (("2" (lemma "w_symbol_prefix")
                      (("2" (inst? :polarity? t)
                        (("2" (inst -1 "symbol1_var!1")
                          (("2" (lemma "ordinal_of_nat_le")
                            (("2" (assert)
                              (("2"
                                (inst? :if-match all)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp* :preds? t)
      (("3" (assert)
        (("3" (bddsimp -4)
          (("3" (assert)
            (("3" (inst -4 "Γ!1" "Δ!1")
              (("3" (assert)
                (("3" (expand "w" +)
                  (("3" (assert)
                    (("3" (lemma "apply_symbol_when_prefix")
                      (("3" (lemma "member_symbol_when_prefix")
                        (("3" (inst -1 "dot1_var!1" "Δ!1" "Γ!1")
                          (("3" (inst -2 "dot1_var!1" "Δ!1" "Γ!1")
                            (("3" (assert)
                              (("3"
                                (case "dot1_var!1 ∈ Δ!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite -3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if +)
                                          (("1"
                                            (bddsimp +)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "both_sides_plus_le1")
                                                (("1"
                                                  (inst? :polarity? t)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "both_sides_plus_le1")
                                                      (("1"
                                                        (inst?
                                                         :polarity?
                                                         t)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (lemma
                                                                 "le_plus_le")
                                                                (("1"
                                                                  (invoke
                                                                   (inst
                                                                    -1
                                                                    "%4"
                                                                    "%1"
                                                                    "%3"
                                                                    "%2")
                                                                   (~
                                                                    1
                                                                    "%1 + %2 <= %3 + %4"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       +)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "w_symbol_prefix"
                                                                         :polarity?
                                                                         t)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "dot1_var!1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (use
                                                                               "ordinal_of_nat_le"
                                                                               :polarity?
                                                                               t)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "w(Δ!1, dot1_var!1)"
                                                                                   "w(Γ!1, dot1_var!1)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "<=" 2)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (assert)
      (("4" (skosimp* :preds? t)
        (("4" (assert)
          (("4" (expand "w" +)
            (("4" (assert)
              (("4" (inst -3 "Γ!1" "Δ!1")
                (("4" (inst -4 "Γ!1" "Δ!1")
                  (("4" (lemma "le_cut")
                    (("4" (lemma "le_cut")
                      (("4" (expand "max" +)
                        (("4" (assert)
                          (("4" (assert) (("4" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (postpone) nil nil) ("6" (postpone) nil nil)
     ("7" (postpone) nil nil) ("8" (postpone) nil nil)
     ("9" (postpone) nil nil) ("10" (postpone) nil nil)
     ("11" (postpone) nil nil) ("12" (postpone) nil nil)
     ("13" (postpone) nil nil) ("14" (postpone) nil nil)
     ("15" (postpone) nil nil) ("16" (postpone) nil nil)
     ("17" (postpone) nil nil) ("18" (postpone) nil nil)
     ("19" (postpone) nil nil) ("20" (postpone) nil nil)
     ("21" (postpone) nil nil) ("22" (postpone) nil nil)
     ("23" (postpone) nil nil) ("24" (postpone) nil nil))
    nil)
   nil shostak)))

