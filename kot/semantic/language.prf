(language
 (weight_TCC1 0
  (weight_TCC1-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC2 0
  (weight_TCC2-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC3 0
  (weight_TCC3-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC4 0
  (weight_TCC4-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC5 0
  (weight_TCC5-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC6 0
  (weight_TCC6-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC7 0
  (weight_TCC7-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC8 0
  (weight_TCC8-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC9 0
  (weight_TCC9-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC10 0
  (weight_TCC10-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC11 0
  (weight_TCC11-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC12 0
  (weight_TCC12-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC13 0
  (weight_TCC13-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC14 0
  (weight_TCC14-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC15 0
  (weight_TCC15-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC16 0
  (weight_TCC16-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC17 0
  (weight_TCC17-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC18 0
  (weight_TCC18-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC19 0
  (weight_TCC19-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC20 0
  (weight_TCC20-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC21 0
  (weight_TCC21-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC22 0
  (weight_TCC22-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC23 0
  (weight_TCC23-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC24 0
  (weight_TCC24-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC25 0
  (weight_TCC25-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC26 0
  (weight_TCC26-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC27 0
  (weight_TCC27-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC28 0
  (weight_TCC28-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC29 0
  (weight_TCC29-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC30 0
  (weight_TCC30-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC31 0
  (weight_TCC31-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC32 0
  (weight_TCC32-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC33 0
  (weight_TCC33-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (weight_TCC34 0
  (weight_TCC34-1 nil 3582058845 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (F_TCC1 0
  (F_TCC1-1 nil 3582058845
   (""
    (inst 1
     "LAMBDA (x: ord): CASES x OF ord_ktype_decl: 1, ord_kconst_decl: 1 ELSE 0 ENDCASES")
    nil nil)
   ((ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)" language
     nil)
    (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_iconst adt-constructor-decl "(ord_iconst?)" language nil)
    (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)" language
     nil)
    (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)" language
     nil)
    (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
    (ord_itype? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)" language
     nil)
    (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]" language
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
    (ord_dot? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_symbol adt-constructor-decl "(ord_symbol?)" language nil)
    (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language nil)
    (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
    (ord_nil? adt-recognizer-decl "[ord -> boolean]" language nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ord type-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (name 0
       (name-1 nil 3581869130 ("" (induct-and-simplify "S") nil nil)
        ((semantic type-decl nil language nil)
         (boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (name? const-decl "[semantic -> bool]" language nil)
         (symbol nonempty-type-decl nil language nil)
         (symbol? adt-recognizer-decl "[semantic -> boolean]" language
          nil)
         (symbol adt-constructor-decl "[symbol -> (symbol?)]" language
          nil)
         (TRUE const-decl "bool" booleans nil)
         (dot? adt-recognizer-decl "[semantic -> boolean]" language
          nil)
         (dot adt-constructor-decl
          "[[symbol, semantic, symbol] -> (dot?)]" language nil)
         (interp? const-decl "[semantic -> bool]" language nil)
         (FALSE const-decl "bool" booleans nil)
         (semantic_induction formula-decl nil language nil)
         (finite_emptyset name-judgement "finite_set" finite_sets nil)
         (member const-decl "bool" sets nil)
         (emptyset const-decl "set" sets nil))
        shostak))
 (preterm 0
  (preterm-1 nil 3581869139 ("" (induct-and-simplify "S") nil nil)
   ((semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (v adt-constructor-decl "[nat -> (var?)]" language nil)
    (TRUE const-decl "bool" booleans nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app adt-constructor-decl "[[semantic, semantic] -> (app?)]"
     language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam adt-constructor-decl "[[semantic, semantic] -> (lam?)]"
         language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair adt-constructor-decl "[[semantic, semantic] -> (pair?)]"
     language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj adt-constructor-decl "[semantic -> (lproj?)]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj adt-constructor-decl "[semantic -> (rproj?)]" language nil)
    (name? const-decl "[semantic -> bool]" language nil)
    (semantic_induction formula-decl nil language nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil))
   shostak))
 (pretype 0
  (pretype-1 nil 3581869144 ("" (induct-and-simplify "S") nil nil)
   ((semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun adt-constructor-decl "[[semantic, semantic] -> (fun?)]"
     language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod adt-constructor-decl "[[semantic, semantic] -> (prod?)]"
     language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype adt-constructor-decl
             "[[semantic, semantic] -> (subtype?)]" language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (name? const-decl "[semantic -> bool]" language nil)
    (semantic_induction formula-decl nil language nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil))
   shostak))
 (interp 0
         (interp-1 nil 3581888760
          ("" (induct-and-simplify "S") nil nil)
          ((semantic type-decl nil language nil)
           (boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (null? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (nil adt-constructor-decl "(null?)" language nil)
           (TRUE const-decl "bool" booleans nil)
           (symbol nonempty-type-decl nil language nil)
           (itype? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (itype adt-constructor-decl
            "[[symbol, semantic, semantic] -> (itype?)]" language nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (pretype? const-decl "[semantic -> bool]" language nil)
           (iconst? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (iconst adt-constructor-decl
            "[[symbol, semantic, semantic] -> (iconst?)]" language nil)
           (preterm? const-decl "[semantic -> bool]" language nil)
           (FALSE const-decl "bool" booleans nil)
           (semantic_induction formula-decl nil language nil)
           (finite_emptyset name-judgement "finite_set" finite_sets
            nil)
           (member const-decl "bool" sets nil)
           (emptyset const-decl "set" sets nil))
          shostak))
 (context 0
          (context-1 nil 3581869159
           ("" (induct-and-simplify "S") nil nil)
           ((semantic type-decl nil language nil)
            (boolean nonempty-type-decl nil booleans nil)
            (bool nonempty-type-eq-decl nil booleans nil)
            (= const-decl "[T, T -> boolean]" equalities nil)
            (context? const-decl "[semantic -> bool]" language nil)
            (empty? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (〈〉 adt-constructor-decl "(empty?)" language nil)
            (TRUE const-decl "bool" booleans nil)
            (symbol nonempty-type-decl nil language nil)
            (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_decl adt-constructor-decl
             "[[symbol, semantic] -> (ktype_decl?)]" language nil)
            (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_def adt-constructor-decl
             "[[symbol, semantic, semantic] -> (ktype_def?)]" language
             nil)
            (AND const-decl "[bool, bool -> bool]" booleans nil)
            (pretype? const-decl "[semantic -> bool]" language nil)
            (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktype_ext adt-constructor-decl
             "[[symbol, semantic] -> (ktype_ext?)]" language nil)
            (kvar? adt-recognizer-decl "[semantic -> boolean]" language
             nil)
            (kvar adt-constructor-decl
             "[[semantic, semantic] -> (kvar?)]" language nil)
            (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_decl adt-constructor-decl
             "[[symbol, semantic, semantic] -> (kconst_decl?)]"
             language nil)
            (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_def adt-constructor-decl
             "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
             language nil)
            (preterm? const-decl "[semantic -> bool]" language nil)
            (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (kconst_ext adt-constructor-decl
             "[[symbol, semantic, semantic] -> (kconst_ext?)]" language
             nil)
            (ktheory? adt-recognizer-decl "[semantic -> boolean]"
             language nil)
            (ktheory adt-constructor-decl
             "[[symbol, semantic, semantic] -> (ktheory?)]" language
             nil)
            (pretheory? const-decl "[semantic -> bool]" language nil)
            (FALSE const-decl "bool" booleans nil)
            (semantic_induction formula-decl nil language nil)
            (finite_emptyset name-judgement "finite_set" finite_sets
             nil)
            (member const-decl "bool" sets nil)
            (emptyset const-decl "set" sets nil))
           shostak))
 (map 0
      (map-1 nil 3582302097
       ("" (skosimp* :preds? t)
        (("" (rewrite "map?")
          (("" (rewrite "context")
            (("" (rewrite "interp") (("" (grind :defs nil) nil nil))
              nil))
            nil))
          nil))
        nil)
       ((map? const-decl "[semantic -> bool]" language nil)
        (semantic type-decl nil language nil)
        (interp formula-decl nil language nil)
        (context formula-decl nil language nil))
       shostak))
 (pretheory 0
  (pretheory-1 nil 3581869164 ("" (induct-and-simplify "S") nil nil)
   ((semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (〈〉 adt-constructor-decl "(empty?)" language nil)
    (TRUE const-decl "bool" booleans nil)
    (symbol nonempty-type-decl nil language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_decl?)]" language nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def adt-constructor-decl
     "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
     language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (kconst_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_ext adt-constructor-decl
     "[[symbol, semantic, semantic] -> (kconst_ext?)]" language nil)
    (FALSE const-decl "bool" booleans nil)
    (semantic_induction formula-decl nil language nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil))
   shostak))
 (syntaxic 0
  (syntaxic-1 nil 3581869169
   ("" (grind) (("" (decompose-equality 1) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (name? const-decl "[semantic -> bool]" language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (pretheory? const-decl "[semantic -> bool]" language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (member const-decl "bool" sets nil)
    (syntaxic? const-decl "[semantic -> bool]" language nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (expr 0
       (expr-1 nil 3582302186
        ("" (skosimp* :preds? t)
         (("" (rewrite "expr?")
           (("" (iff) (("" (bddsimp) nil nil)) nil)) nil))
         nil)
        ((expr? const-decl "[semantic -> bool]" language nil)
         (semantic type-decl nil language nil))
        shostak))
 (nonempty_TCC1 0
  (nonempty_TCC1-1 nil 3582302387 ("" (cond-disjoint-tcc) nil nil) nil
   nil))
 (nonempty 0
  (nonempty-1 nil 3582302489
   ("" (skosimp* :preds? t)
    (("" (rewrite "nonempty?")
      (("" (iff)
        (("" (split)
          (("1" (flatten)
            (("1" (rewrite "map")
              (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (split 1)
              (("1" (rewrite "map")
                (("1" (lift-if)
                  (("1" (bddsimp +)
                    (("1" (assert) nil nil) ("2" (assert) nil nil)
                     ("3" (assert) nil nil) ("4" (assert) nil nil)
                     ("5" (assert) nil nil) ("6" (assert) nil nil)
                     ("7" (assert) nil nil) ("8" (assert) nil nil)
                     ("9" (assert) nil nil) ("10" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil) ("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (map formula-decl nil language nil))
   shostak))
 (nonempty_context 0
  (nonempty_context-1 nil 3582302750
   ("" (skosimp* :preds? t)
    (("" (rewrite "nonempty_context?")
      (("" (iff)
        (("" (split)
          (("1" (flatten)
            (("1" (assert)
              (("1" (split)
                (("1" (propax) nil nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (split)
                      (("1" (propax) nil nil)
                       ("2" (flatten)
                        (("2" (bddsimp)
                          (("2" (assert)
                            (("2" (rewrite "context") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) (("2" (bddsimp) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_context? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (context formula-decl nil language nil))
   shostak))
 (nonempty_interp 0
  (nonempty_interp-1 nil 3582302905
   ("" (skosimp* :preds? t)
    (("" (rewrite "nonempty_interp?")
      (("" (iff)
        (("" (split)
          (("1" (flatten)
            (("1" (bddsimp)
              (("1" (assert) (("1" (rewrite "interp") nil nil)) nil))
              nil))
            nil)
           ("2" (flatten) (("2" (bddsimp) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_interp? const-decl "[semantic -> bool]" language nil)
    (semantic type-decl nil language nil)
    (interp formula-decl nil language nil))
   shostak))
 (context_induction_TCC1 0
  (context_induction_TCC1-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction_TCC2 0
  (context_induction_TCC2-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction_TCC3 0
  (context_induction_TCC3-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction_TCC4 0
  (context_induction_TCC4-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction_TCC5 0
  (context_induction_TCC5-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction_TCC6 0
  (context_induction_TCC6-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction_TCC7 0
  (context_induction_TCC7-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction_TCC8 0
  (context_induction_TCC8-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction_TCC9 0
  (context_induction_TCC9-1 nil 3582655284 ("" (subtype-tcc) nil nil)
   ((context formula-decl nil language nil)) nil))
 (context_induction 0
  (context_induction-1 nil 3582655284
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (induct "x")
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (grind) nil nil) ("4" (grind) nil nil)
         ("5" (grind) nil nil) ("6" (grind) nil nil)
         ("7" (grind) nil nil) ("8" (grind) nil nil)
         ("9" (grind) nil nil) ("10" (grind) nil nil)
         ("11" (grind) nil nil) ("12" (grind) nil nil)
         ("13" (grind) nil nil)
         ("14" (skosimp* :preds? t)
          (("14" (rewrite "context" -2)
            (("14" (assert)
              (("14" (inst -4 "ktype_decl1_var!1" "ktype_decl2_var!1")
                (("14" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("15" (skosimp* :preds? t)
          (("15" (rewrite "context" -3)
            (("15" (assert)
              (("15" (flatten)
                (("15" (assert)
                  (("15"
                    (inst -7 "ktype_def1_var!1" "ktype_def2_var!1"
                     "ktype_def3_var!1")
                    (("15" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("16" (skosimp* :preds? t)
          (("16" (rewrite "context" -2)
            (("16" (assert)
              (("16" (inst -6 "ktype_ext1_var!1" "ktype_ext2_var!1")
                (("16" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("17" (skosimp* :preds? t)
          (("17" (assert)
            (("17" (flatten)
              (("17" (assert)
                (("17" (inst -9 "kvar1_var!1" "kvar2_var!1")
                  (("17" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("18" (skosimp* :preds? t)
          (("18" (assert)
            (("18" (flatten)
              (("18" (assert)
                (("18"
                  (inst -10 "kconst_decl1_var!1 " "kconst_decl2_var!1"
                   "kconst_decl3_var!1")
                  (("18" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("19" (skosimp* :preds? t)
          (("19" (assert)
            (("19" (flatten)
              (("19" (assert)
                (("19"
                  (inst -13 "kconst_def1_var!1 " "kconst_def2_var!1"
                   "kconst_def3_var!1" "kconst_def4_var!1")
                  (("19" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("20" (skosimp* :preds? t)
          (("20" (assert)
            (("20" (flatten)
              (("20" (assert)
                (("20"
                  (inst -12 "kconst_ext1_var!1" "kconst_ext2_var!1"
                   "kconst_ext3_var!1")
                  (("20" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("21" (skosimp* :preds? t)
          (("21" (assert)
            (("21" (flatten)
              (("21" (assert)
                (("21"
                  (inst -13 "ktheory1_var!1" "ktheory2_var!1"
                   "ktheory3_var!1")
                  (("21" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("22" (assert) nil nil) ("23" (assert) nil nil)
         ("24" (assert) nil nil))
        nil))
      nil))
    nil)
   ((pretheory? const-decl "[semantic -> bool]" language nil)
    (pretheory type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (ktype_ext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_ext adt-constructor-decl
     "[[symbol, semantic] -> (ktype_ext?)]" language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def adt-constructor-decl
     "[[symbol, semantic, semantic] -> (ktype_def?)]" language nil)
    (symbol nonempty-type-decl nil language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl adt-constructor-decl
     "[[symbol, semantic] -> (ktype_decl?)]" language nil)
    (context formula-decl nil language nil)
    (semantic_induction formula-decl nil language nil)
    (context type-eq-decl nil language nil)
    (context? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   shostak))
 (pretype_induction_TCC1 0
  (pretype_induction_TCC1-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((pretype formula-decl nil language nil)) nil))
 (pretype_induction_TCC2 0
  (pretype_induction_TCC2-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((pretype formula-decl nil language nil)) nil))
 (pretype_induction_TCC3 0
  (pretype_induction_TCC3-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((pretype formula-decl nil language nil)) nil))
 (pretype_induction_TCC4 0
  (pretype_induction_TCC4-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((pretype formula-decl nil language nil)) nil))
 (pretype_induction_TCC5 0
  (pretype_induction_TCC5-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((pretype formula-decl nil language nil)) nil))
 (pretype_induction 0
  (pretype_induction-1 nil 3582656208
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (assert)
        (("" (induct "x")
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (assert)
            (("3" (skosimp* :preds? t)
              (("3" (assert)
                (("3" (inst -4 "dot1_var!1" "dot2_var!1" "dot3_var!1")
                  nil nil))
                nil))
              nil))
            nil)
           ("4" (skosimp* :preds? t)
            (("4" (assert)
              (("4" (flatten)
                (("4" (assert)
                  (("4" (inst -7 "fun1_var!1" "fun2_var!1")
                    (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (skosimp* :preds? t)
            (("5" (assert)
              (("5" (flatten)
                (("5" (assert)
                  (("5" (inst -8 "prod1_var!1" "prod2_var!1")
                    (("5" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (assert)
            (("6" (skosimp* :preds? t)
              (("6" (assert)
                (("6" (inst -9 "subtype1_var!1" "subtype2_var!1")
                  (("6" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("7" (assert) nil nil) ("8" (assert) nil nil)
           ("9" (assert) nil nil) ("10" (assert) nil nil)
           ("11" (assert) nil nil) ("12" (assert) nil nil)
           ("13" (assert) nil nil) ("14" (assert) nil nil)
           ("15" (assert) nil nil) ("16" (assert) nil nil)
           ("17" (assert) nil nil) ("18" (assert) nil nil)
           ("19" (assert) nil nil) ("20" (assert) nil nil)
           ("21" (assert) nil nil) ("22" (assert) nil nil)
           ("23" (assert) nil nil) ("24" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (semantic_induction formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (interp type-eq-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (symbol nonempty-type-decl nil language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil))
   shostak))
 (preterm_induction_TCC1 0
  (preterm_induction_TCC1-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (preterm_induction_TCC2 0
  (preterm_induction_TCC2-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (preterm_induction_TCC3 0
  (preterm_induction_TCC3-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (preterm_induction_TCC4 0
  (preterm_induction_TCC4-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (preterm_induction_TCC5 0
  (preterm_induction_TCC5-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (preterm_induction_TCC6 0
  (preterm_induction_TCC6-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (preterm_induction_TCC7 0
  (preterm_induction_TCC7-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (preterm_induction_TCC8 0
  (preterm_induction_TCC8-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (preterm_induction 0
  (preterm_induction-1 nil 3582656313
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (induct "x")
        (("1" (assert) nil nil) ("2" (assert) nil nil)
         ("3" (skosimp* :preds? t)
          (("3" (assert) (("3" (inst? :polarity? t) nil nil)) nil))
          nil)
         ("4" (skosimp* :preds? t) (("4" (assert) nil nil)) nil)
         ("5" (assert) nil nil)
         ("6" (skosimp* :preds? t) (("6" (assert) nil nil)) nil)
         ("7" (assert) nil nil)
         ("8" (skosimp* :preds? t)
          (("8" (assert)
            (("8" (flatten)
              (("8" (assert)
                (("8" (inst? :polarity? t) (("8" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("9" (assert)
          (("9" (skosimp* :preds? t)
            (("9" (assert)
              (("9" (inst -9 "lam1_var!1" "lam2_var!1")
                (("9" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("10" (skosimp* :preds? t)
          (("10" (assert)
            (("10" (flatten)
              (("10" (assert)
                (("10" (inst -10 "pair1_var!1" "pair2_var!1")
                  (("10" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("11" (skosimp* :preds? t)
          (("11" (assert)
            (("11" (inst -9 "lproj1_var!1") (("11" (assert) nil nil))
              nil))
            nil))
          nil)
         ("12" (skosimp* :preds? t)
          (("12" (assert)
            (("12" (inst -10 "rproj1_var!1") (("12" (assert) nil nil))
              nil))
            nil))
          nil)
         ("13" (assert) nil nil) ("14" (assert) nil nil)
         ("15" (assert) nil nil) ("16" (assert) nil nil)
         ("17" (assert) nil nil) ("18" (assert) nil nil)
         ("19" (assert) nil nil) ("20" (assert) nil nil)
         ("21" (assert) nil nil) ("22" (assert) nil nil)
         ("23" (assert) nil nil) ("24" (assert) nil nil))
        nil))
      nil))
    nil)
   ((pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (symbol nonempty-type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (preterm formula-decl nil language nil)
    (semantic_induction formula-decl nil language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   shostak))
 (interp_induction_TCC1 0
  (interp_induction_TCC1-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)) nil))
 (interp_induction_TCC2 0
  (interp_induction_TCC2-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)) nil))
 (interp_induction_TCC3 0
  (interp_induction_TCC3-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)) nil))
 (interp_induction 0
  (interp_induction-1 nil 3582656489
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (induct "x")
        (("1" (assert) nil nil) ("2" (assert) nil nil)
         ("3" (assert) nil nil) ("4" (assert) nil nil)
         ("5" (assert) nil nil) ("6" (assert) nil nil)
         ("7" (assert) nil nil) ("8" (assert) nil nil)
         ("9" (assert) nil nil) ("10" (assert) nil nil)
         ("11" (assert) nil nil) ("12" (assert) nil nil)
         ("13" (assert) nil nil) ("14" (assert) nil nil)
         ("15" (assert) nil nil) ("16" (assert) nil nil)
         ("17" (assert) nil nil) ("18" (assert) nil nil)
         ("19" (assert) nil nil) ("20" (assert) nil nil)
         ("21" (assert) nil nil) ("22" (assert) nil nil)
         ("23" (assert)
          (("23" (skosimp* :preds? t)
            (("23" (assert)
              (("23"
                (inst -6 "itype1_var!1" "itype2_var!1" "itype3_var!1")
                (("23" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("24" (assert)
          (("24" (skosimp* :preds? t)
            (("24" (assert)
              (("24"
                (inst -7 "iconst1_var!1" "iconst2_var!1"
                 "iconst3_var!1")
                (("24" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (interp type-eq-decl nil language nil)
    (semantic_induction formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (symbol nonempty-type-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (pretype type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil))
   shostak))
 (expr_induction_TCC1 0
  (expr_induction_TCC1-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC2 0
  (expr_induction_TCC2-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((expr formula-decl nil language nil)) nil))
 (expr_induction_TCC3 0
  (expr_induction_TCC3-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC4 0
  (expr_induction_TCC4-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC5 0
  (expr_induction_TCC5-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((expr formula-decl nil language nil)) nil))
 (expr_induction_TCC6 0
  (expr_induction_TCC6-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((expr formula-decl nil language nil)) nil))
 (expr_induction_TCC7 0
  (expr_induction_TCC7-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC8 0
  (expr_induction_TCC8-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((expr formula-decl nil language nil)) nil))
 (expr_induction_TCC9 0
  (expr_induction_TCC9-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((expr formula-decl nil language nil)) nil))
 (expr_induction_TCC10 0
  (expr_induction_TCC10-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC11 0
  (expr_induction_TCC11-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC12 0
  (expr_induction_TCC12-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((expr formula-decl nil language nil)) nil))
 (expr_induction_TCC13 0
  (expr_induction_TCC13-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC14 0
  (expr_induction_TCC14-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC15 0
  (expr_induction_TCC15-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((expr formula-decl nil language nil)) nil))
 (expr_induction_TCC16 0
  (expr_induction_TCC16-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((expr formula-decl nil language nil)) nil))
 (expr_induction_TCC17 0
  (expr_induction_TCC17-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC18 0
  (expr_induction_TCC18-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC19 0
  (expr_induction_TCC19-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC20 0
  (expr_induction_TCC20-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC21 0
  (expr_induction_TCC21-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((expr formula-decl nil language nil)) nil))
 (expr_induction_TCC22 0
  (expr_induction_TCC22-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction_TCC23 0
  (expr_induction_TCC23-1 nil 3582656201 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (expr formula-decl nil language nil))
   nil))
 (expr_induction 0
  (expr_induction-1 nil 3582656682
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (induct "x")
        (("1" (assert) nil nil) ("2" (assert) nil nil)
         ("3" (assert)
          (("3" (skosimp* :preds? t)
            (("3" (assert)
              (("3" (bddsimp -)
                (("3" (inst -4 "dot1_var!1" "dot2_var!1" "dot3_var!1")
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (assert)
          (("4" (skosimp* :preds? t)
            (("4" (assert)
              (("4" (inst -13 "fun1_var!1" "fun2_var!1")
                (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("5" (assert)
          (("5" (skosimp* :preds? t)
            (("5" (assert)
              (("5" (inst -14 "prod1_var!1" "prod2_var!1")
                (("5" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("6" (assert)
          (("6" (skosimp* :preds? t)
            (("6" (assert)
              (("6" (inst -15 "subtype1_var!1" "subtype2_var!1")
                (("6" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("7" (assert) nil nil)
         ("8" (assert)
          (("8" (skosimp* :preds? t)
            (("8" (assert)
              (("8" (inst -8 "app1_var!1" "app2_var!1")
                (("8" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("9" (assert)
          (("9" (skosimp* :preds? t)
            (("9" (assert)
              (("9" (inst -9 "lam1_var!1" "lam2_var!1")
                (("9" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("10" (assert)
          (("10" (skosimp* :preds? t)
            (("10" (assert)
              (("10" (inst -10 "pair1_var!1" "pair2_var!1")
                (("10" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("11" (assert)
          (("11" (skosimp* :preds? t)
            (("11" (assert)
              (("11" (inst -9 "lproj1_var!1") (("11" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("12" (assert)
          (("12" (skosimp* :preds? t)
            (("12" (assert)
              (("12" (inst -10 "rproj1_var!1")
                (("12" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("13" (assert) nil nil) ("14" (assert) nil nil)
         ("15" (assert) nil nil) ("16" (assert) nil nil)
         ("17" (assert) nil nil) ("18" (assert) nil nil)
         ("19" (assert) nil nil) ("20" (assert) nil nil)
         ("21" (assert) nil nil) ("22" (assert) nil nil)
         ("23" (assert)
          (("23" (skosimp* :preds? t)
            (("23" (assert)
              (("23"
                (inst -17 "itype1_var!1 " "itype2_var!1"
                 "itype3_var!1")
                (("23" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("24" (assert)
          (("24" (skosimp* :preds? t)
            (("24" (assert)
              (("24"
                (inst -18 "iconst1_var!1" "iconst2_var!1"
                 "iconst3_var!1")
                (("24" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (expr? const-decl "[semantic -> bool]" language nil)
    (expr type-eq-decl nil language nil)
    (semantic_induction formula-decl nil language nil)
    (expr formula-decl nil language nil)
    (pretype formula-decl nil language nil)
    (preterm formula-decl nil language nil)
    (interp formula-decl nil language nil)
    (interp type-eq-decl nil language nil)
    (symbol nonempty-type-decl nil language nil)
    (interp? const-decl "[semantic -> bool]" language nil)
    (dot2_var!1 skolem-const-decl "semantic" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype? const-decl "[semantic -> bool]" language nil)
    (preterm type-eq-decl nil language nil)
    (preterm? const-decl "[semantic -> bool]" language nil))
   shostak))
 (rightarrow_TCC1 0
  (rightarrow_TCC1-1 nil 3581868892 ("" (subtype-tcc) nil nil)
   ((pretype formula-decl nil language nil)) nil))
 (⌈⌉_TCC1 0
  (⌈⌉_TCC1-1 nil 3581868892 ("" (subtype-tcc) nil nil)
   ((pretype formula-decl nil language nil)) nil))
 (Λ_TCC1 0
  (Λ_TCC1-1 nil 3581868892 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (〈〉_TCC1 0
  (〈〉_TCC1-1 nil 3581868892 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (app_preterm_TCC1 0
  (app_preterm_TCC1-1 nil 3581868892 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (bool__TCC1 0
  (bool__TCC1-1 nil 3581868892 ("" (subtype-tcc) nil nil)
   ((pretype formula-decl nil language nil)) nil))
 (TRUE__TCC1 0
  (TRUE__TCC1-1 nil 3581868892 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (FALSE__TCC1 0
  (FALSE__TCC1-1 nil 3581868892 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (boolop__TCC1 0
  (boolop__TCC1-1 nil 3581868892 ("" (subtype-tcc) nil nil)
   ((pretype formula-decl nil language nil)) nil))
 (¬_TCC1 0
  (¬_TCC1-1 nil 3581868892 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (vee_TCC1 0
  (vee_TCC1-1 nil 3581868892 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (wedge_TCC1 0
  (wedge_TCC1-1 nil 3581868892 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (supset_TCC1 0
  (supset_TCC1-1 nil 3581868892 ("" (subtype-tcc) nil nil)
   ((preterm formula-decl nil language nil)) nil))
 (doteq_TCC1 0
  (doteq_TCC1-1 nil 3581868892 ("" (subtype-tcc) nil nil)
   ((interp formula-decl nil language nil)
    (preterm formula-decl nil language nil))
   nil))
 (forall__TCC1 0
  (forall__TCC1-1 nil 3581868892 ("" (subtype-tcc) nil nil) nil nil))
 (forall__TCC2 0
  (forall__TCC2-1 nil 3581868892 ("" (subtype-tcc) nil nil)
   ((pretype formula-decl nil language nil)) nil)))

