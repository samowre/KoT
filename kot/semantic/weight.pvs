weight: THEORY
BEGIN
  IMPORTING inductions, ordinals_props
  IMPORTING well_formed

  Γ, Δ: VAR well_formed_context
  s: VAR symbol
  i, j: VAR nat
  e: VAR expr
  S, U: VAR syntaxic
  
  w(Γ, (S | well_formed?(Γ)(S))): RECURSIVE ordinal =
    CASES S OF
      symbol(s):
        IF s ∈ Γ THEN
          add(pos(Γ, s) + 1, 1, zero) % ω ^ (pos(Γ, s) + 1)
	ELSE zero ENDIF,
      dot(m, σ, s):
        IF m ∈ Γ AND kind(Γ(m)) = KTHEORY THEN
          LET Δ = definition(Γ(m)) IN
          add(1, w(Γ, σ), zero) + add(pos(Γ, m) + IF s ∈ Δ THEN pos(Δ, s) ELSE 0 ENDIF + 1, 1, zero) + 1
	ELSE zero ENDIF,

      fun(A, B): max(w(Γ, A), w(kvar(A, Γ), B)) + 1,
      prod(A, B): max(w(Γ, A), w(kvar(A, Γ), B)) + 1,
      subtype(T, a): max(w(Γ, T), w(kvar(T, Γ), a)) + 1,

      v(i): IF i ∈ Γ THEN ordinal_of_nat(pos(Γ, i) + 1) ELSE zero ENDIF,
      app(f, a): max(w(Γ, f), w(Γ, a)) + 1,
      lam(T, a): max(w(Γ, T), w(kvar(T, Γ), a)) + 1,
      pair(a, b): max(w(Γ, a), w(Γ, b)) + 1,
      lproj(a): w(Γ, a) + 1,
      rproj(a): w(Γ, a) + 1,

      〈〉: ordinal_of_nat(1),
      ktype_decl(s, Δ): w(Γ, Δ) + 1,
      ktype_def(s, T, Δ): max(w(Γ ++ Δ, T), w(Γ, Δ)) + 1,
      ktype_ext(s, Δ): w(Γ, Δ) + 1,
      kvar(T, Δ): max(w(Γ ++ Δ, T), w(Γ, Δ)) + 1,
      kconst_decl(s, T, Δ): max(w(Γ ++ Δ, T), w(Γ, Δ)) + 1,
      kconst_def(s, T, a, Δ): max(w(Γ ++ Δ, T), max(w(Γ ++ Δ, a), w(Γ, Δ))) + 1,
      kconst_ext(s, T, Δ): max(w(Γ ++ Δ, T), w(Γ, Δ)) + 1,
      ktheory(s, Θ, Δ): max(w(Γ ++ Δ, Θ), w(Γ, Δ)) + 1,

      nil: ordinal_of_nat(1),
      itype(s, T, σ): max(w(Γ, T), w(Γ, σ)) + 1,
      iconst(s, a, σ): max(w(Γ, a), w(Γ, σ)) + 1
    ENDCASES
  MEASURE w(S)
END weight
