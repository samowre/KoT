(interp (difference_TCC1 0
         (difference_TCC1-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (interp formula-decl nil language nil)
           (weight def-decl "nat" language nil))
          nil))
        (difference_TCC2 0
         (difference_TCC2-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (weight def-decl "nat" language nil)
           (interp formula-decl nil language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (difference_TCC3 0
         (difference_TCC3-1 nil 3582039022
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (interp formula-decl nil language nil))
          nil))
        (difference_TCC4 0
         (difference_TCC4-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (interp formula-decl nil language nil))
          nil))
        (difference_TCC5 0
         (difference_TCC5-1 nil 3582039022
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (interp formula-decl nil language nil))
          nil))
        (difference_TCC6 0
         (difference_TCC6-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (<= const-decl "bool" reals nil)
           (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
           (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_symbol adt-constructor-decl "(ord_symbol?)" language
            nil)
           (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (interp formula-decl nil language nil)
           (weight def-decl "nat" language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (difference_TCC7 0
         (difference_TCC7-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (weight def-decl "nat" language nil)
           (interp formula-decl nil language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (difference_TCC8 0
         (difference_TCC8-1 nil 3582039022
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (interp formula-decl nil language nil))
          nil))
        (difference_TCC9 0
         (difference_TCC9-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (interp formula-decl nil language nil))
          nil))
        (difference_TCC10 0
         (difference_TCC10-1 nil 3582039022
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (interp formula-decl nil language nil))
          nil))
        (difference_TCC11 0
         (difference_TCC11-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (<= const-decl "bool" reals nil)
           (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
           (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_symbol adt-constructor-decl "(ord_symbol?)" language
            nil)
           (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (interp formula-decl nil language nil)
           (weight def-decl "nat" language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (difference_TCC12 0
         (difference_TCC12-1 nil 3582039022 ("" (cases-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (interp formula-decl nil language nil))
          nil))
        (difference_apply_weight 0
         (difference_apply_weight-1 nil 3582045478
          ("" (induct "σ")
           (("1" (grind) nil nil) ("2" (grind) nil nil)
            ("3" (grind) nil nil) ("4" (grind) nil nil)
            ("5" (grind) nil nil) ("6" (grind) nil nil)
            ("7" (grind) nil nil) ("8" (grind) nil nil)
            ("9" (grind) nil nil) ("10" (grind) nil nil)
            ("11" (grind) nil nil) ("12" (grind) nil nil)
            ("13" (grind) nil nil) ("14" (grind) nil nil)
            ("15" (grind) nil nil) ("16" (grind) nil nil)
            ("17" (grind) nil nil) ("18" (grind) nil nil)
            ("19" (grind) nil nil) ("20" (grind) nil nil)
            ("21" (grind) nil nil) ("22" (grind) nil nil)
            ("23" (skosimp*)
             (("23" (expand - +)
               (("23" (lift-if)
                 (("23" (bddsimp 1)
                   (("1" (grind) nil nil)
                    ("2" (rewrite interp -3)
                     (("2" (bddsimp -2)
                       (("1" (expand app_symbol +)
                         (("1" (lift-if)
                           (("1" (bddsimp 2)
                             (("1" (assert) nil nil)
                              ("2" (inst?)
                               (("2"
                                 (expand weight 2 3)
                                 (("2" (assert) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2" (assert) nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ("24" (skosimp* :preds? t)
             (("24" (rewrite interp -4)
               (("24" (bddsimp -3)
                 (("1" (expand - +)
                   (("1" (lift-if)
                     (("1" (bddsimp 1)
                       (("1" (grind) nil nil)
                        ("2" (rewrite app_symbol)
                         (("2" (inst?) (("2" (assert) nil nil)) nil))
                         nil))
                       nil))
                     nil))
                   nil)
                  ("2" (assert) nil nil))
                 nil))
               nil))
             nil)
            ("25" (skosimp* :preds? t)
             (("25" (assert)
               (("25"
                 (invoke (typepred "app_symbol(%1)(%2)")
                  (~ + "app_symbol(%1)(%2)"))
                 (("25" (bddsimp -2)
                   (("1" (rewrite interp_as_nonempty)
                     (("1" (split -1)
                       (("1" (rewrite nonempty_interp_is_definition)
                         nil nil)
                        ("2" (assert) nil nil))
                       nil))
                     nil)
                    ("2" (propax) nil nil))
                   nil))
                 nil))
               nil))
             nil)
            ("26" (skosimp* :preds? t)
             (("26" (rewrite interp_as_nonempty)
               (("26" (rewrite nonempty_split)
                 (("26" (assert)
                   (("26" (split -3)
                     (("1" (assert) nil nil) ("2" (grind) nil nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ("27" (skosimp* :preds? t)
             (("27" (rewrite interp_is_map) nil nil)) nil))
           nil)
          ((interp_is_map judgement-tcc nil subtype nil)
           (nonempty_split formula-decl nil subtype nil)
           (interp_as_nonempty formula-decl nil subtype nil)
           (nonempty formula-decl nil language nil)
           (nonempty_interp type-eq-decl nil language nil)
           (nonempty_interp? const-decl "[semantic -> bool]" language
            nil)
           (iconst adt-constructor-decl
            "[[symbol, semantic, semantic] -> (iconst?)]" language nil)
           (itype adt-constructor-decl
            "[[symbol, semantic, semantic] -> (itype?)]" language nil)
           (nnint_times_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (even_times_int_is_even application-judgement "even_int"
            integers nil)
           (mult_divides1 application-judgement "(divides(n))" divides
            nil)
           (mult_divides2 application-judgement "(divides(m))" divides
            nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (nil adt-constructor-decl "(null?)" language nil)
           (null? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (interp formula-decl nil language nil)
           (semantic_induction formula-decl nil language nil)
           (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
           (iconst? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (itype? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (ktheory? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kvar? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (preterm? const-decl "[semantic -> bool]" language nil)
           (pretype? const-decl "[semantic -> bool]" language nil)
           (definition type-eq-decl nil decl nil)
           (- def-decl "{τ | weight(F)(τ) < weight(F)(σ)}" interp nil)
           (interp type-eq-decl nil language nil)
           (< const-decl "bool" reals nil)
           (nonempty type-eq-decl nil language nil)
           (definition? const-decl "bool" decl nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (context? const-decl "[semantic -> bool]" language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (<= const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (weight def-decl "nat" language nil)
           (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
           (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_symbol adt-constructor-decl "(ord_symbol?)" language
            nil)
           (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (map type-eq-decl nil language nil)
           (nonempty? const-decl "[semantic -> bool]" language nil)
           (semantic type-decl nil language nil)
           (boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil))
          shostak))
        (interp_for?_TCC1 0
         (interp_for?_TCC1-1 nil 3582039022
          ("" (skeep)
           (("" (use member_nonempty) (("" (assert) nil nil)) nil))
           nil)
          ((interp type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (boolean nonempty-type-decl nil booleans nil)
           (semantic type-decl nil language nil))
          nil))
        (interp_for?_TCC2 0
         (interp_for?_TCC2-1 nil 3582039022
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil)
           (kind const-decl "kind" decl nil))
          nil))
        (interp_for?_TCC3 0
         (interp_for?_TCC3-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC4 0
         (interp_for?_TCC4-1 nil 3582039022
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC5 0
         (interp_for?_TCC5-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC6 0
         (interp_for?_TCC6-1 nil 3582039022
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC7 0
         (interp_for?_TCC7-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC8 0
         (interp_for?_TCC8-1 nil 3582039022
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC9 0
         (interp_for?_TCC9-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC10 0
         (interp_for?_TCC10-1 nil 3582039022
          ("" (skeep)
           (("" (use member_nonempty) (("" (assert) nil nil)) nil))
           nil)
          ((interp type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (boolean nonempty-type-decl nil booleans nil)
           (semantic type-decl nil language nil))
          nil))
        (interp_for?_TCC11 0
         (interp_for?_TCC11-1 nil 3582039022 ("" (cases-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC12 0
         (interp_for?_TCC12-1 nil 3582040377
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil)
           (weight def-decl "nat" language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (kind const-decl "kind" decl nil))
          nil))
        (interp_for?_TCC13 0
         (interp_for?_TCC13-1 nil 3582040377 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC14 0
         (interp_for?_TCC14-1 nil 3582040377
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC15 0
         (interp_for?_TCC15-1 nil 3582040377 ("" (cases-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC16 0
         (interp_for?_TCC16-1 nil 3582048910
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC17 0
         (interp_for?_TCC17-1 nil 3582048910 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC18 0
         (interp_for?_TCC18-1 nil 3582048910
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC19 0
         (interp_for?_TCC19-1 nil 3582048910 ("" (cases-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC1 0
         (interp_TCC1-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (pretheory formula-decl nil language nil)
           (weight def-decl "nat" language nil))
          nil))
        (interp_TCC2 0
         (interp_TCC2-1 nil 3582045437
          ("" (skosimp* :preds? t)
           (("" (use app_symbol_is_definition)
             (("" (lemma app_symbol_is_definition)
               (("" (inst?) nil nil)) nil))
             nil))
           nil)
          ((nonempty? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil))
          nil))
        (interp_TCC3 0
         (interp_TCC3-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC4 0
         (interp_TCC4-1 nil 3582045437 ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC5 0
         (interp_TCC5-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC6 0
         (interp_TCC6-2 nil 3582581068
          ("" (skosimp* :preds? t)
           (("" (assert)
             (("" (inst?)
               (("1" (assert)
                 (("1" (assert)
                   (("1" (rewrite -6)
                     (("1" (assert)
                       (("1" (flatten)
                         (("1" (assert)
                           (("1" (use "difference_apply_weight")
                             (("1" (assert)
                               (("1"
                                 (assert)
                                 (("1"
                                   (split 1)
                                   (("1"
                                     (assert)
                                     (("1"
                                       (typepred "app_symbol")
                                       (("1"
                                         (inst?)
                                         (("1"
                                           (assert)
                                           (("1"
                                             (typepred definition)
                                             (("1"
                                               (inst?)
                                               (("1" (assert) nil nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2"
                                     (assert)
                                     (("2"
                                       (typepred F)
                                       (("2" (assert) nil nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("2" (assert)
                 (("2" (rewrite -5) (("2" (assert) nil nil)) nil)) nil)
                ("3" (rewrite -5) (("3" (assert) nil nil)) nil)
                ("4" (rewrite -5) (("4" (assert) nil nil)) nil))
               nil))
             nil))
           nil)
          ((posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (pretheory formula-decl nil language nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (difference_apply_weight formula-decl nil interp nil)
           (definition? const-decl "bool" decl nil)
           (definition type-eq-decl nil decl nil)
           (pretype? const-decl "[semantic -> bool]" language nil)
           (preterm? const-decl "[semantic -> bool]" language nil)
           (context? const-decl "[semantic -> bool]" language nil)
           (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
           (nonempty type-eq-decl nil language nil)
           (nonempty? const-decl "[semantic -> bool]" language nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kvar? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (ktheory? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (itype? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (iconst? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (- def-decl "{τ | weight(F)(τ) < weight(F)(σ)}" interp nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (weight def-decl "nat" language nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (<= const-decl "bool" reals nil)
           (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
           (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_symbol adt-constructor-decl "(ord_symbol?)" language
            nil)
           (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil))
          nil)
         (interp_TCC6-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC7 0
         (interp_TCC7-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC8 0
         (interp_TCC8-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (<= const-decl "bool" reals nil)
           (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
           (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_symbol adt-constructor-decl "(ord_symbol?)" language
            nil)
           (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (pretheory formula-decl nil language nil)
           (weight def-decl "nat" language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (interp_TCC9 0
         (interp_TCC9-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC10 0
         (interp_TCC10-1 nil 3582045437 ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC11 0
         (interp_TCC11-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC12 0
         (interp_TCC12-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (<= const-decl "bool" reals nil)
           (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
           (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_symbol adt-constructor-decl "(ord_symbol?)" language
            nil)
           (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (pretheory formula-decl nil language nil)
           (weight def-decl "nat" language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (interp_TCC13 0
         (interp_TCC13-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC14 0
         (interp_TCC14-1 nil 3582045437 ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC15 0
         (interp_TCC15-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC16 0
         (interp_TCC16-1 nil 3582045437
          ("" (skosimp* :preds? t)
           (("" (assert)
             (("" (inst?)
               (("1" (assert)
                 (("1" (flatten)
                   (("1" (assert)
                     (("1" (rewrite -5) (("1" (assert) nil nil)) nil))
                     nil))
                   nil))
                 nil)
                ("2" (assert)
                 (("2" (rewrite -4) (("2" (assert) nil nil)) nil)) nil)
                ("3" (rewrite -4) (("3" (assert) nil nil)) nil))
               nil))
             nil))
           nil)
          ((posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (pretheory formula-decl nil language nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (weight def-decl "nat" language nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (<= const-decl "bool" reals nil)
           (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
           (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_symbol adt-constructor-decl "(ord_symbol?)" language
            nil)
           (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil))
          nil))
        (interp_TCC17 0
         (interp_TCC17-1 nil 3582045437
          ("" (skosimp* :preds? t)
           (("" (lemma app_symbol_is_definition) (("" (inst?) nil nil))
             nil))
           nil)
          ((nonempty? const-decl "[semantic -> bool]" language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil))
          nil))
        (interp_TCC18 0
         (interp_TCC18-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC19 0
         (interp_TCC19-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC20 0
         (interp_TCC20-1 nil 3582045437 ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC21 0
         (interp_TCC21-1 nil 3582045437
          ("" (skosimp* :preds? t)
           (("" (split 1)
             (("1" (invoke (typepred "v!1(%1,%2)") (~ + "v!1(%1,%2)"))
               (("1" (rewrite pretheory +)
                 (("1" (split 1)
                   (("1" (grind) nil nil)
                    ("2" (typepred definition)
                     (("2" (inst?)
                       (("2" (flatten)
                         (("2" (hide -1 -3 -4) (("2" (grind) nil nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil)
                  ("2" (grind) nil nil) ("3" (grind) nil nil))
                 nil)
                ("2" (grind) nil nil) ("3" (grind) nil nil))
               nil)
              ("2" (inst?)
               (("1" (typepred F)
                 (("1" (use difference_apply_weight)
                   (("1" (grind) nil nil)) nil))
                 nil)
                ("2" (grind) nil nil) ("3" (grind) nil nil))
               nil))
             nil))
           nil)
          ((pretheory formula-decl nil language nil)
           (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kconst_def adt-constructor-decl
            "[[symbol, semantic, semantic, semantic] -> (kconst_def?)]"
            language nil)
           (nonempty? const-decl "[semantic -> bool]" language nil)
           (nonempty type-eq-decl nil language nil)
           (definition? const-decl "bool" decl nil)
           (definition type-eq-decl nil decl nil)
           (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
           (pretype? const-decl "[semantic -> bool]" language nil)
           (preterm? const-decl "[semantic -> bool]" language nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kvar? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (ktheory? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (itype? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (iconst? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
           (context? const-decl "[semantic -> bool]" language nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (kind const-decl "kind" decl nil)
           (- def-decl "{τ | weight(F)(τ) < weight(F)(σ)}" interp nil)
           (map type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (difference_apply_weight formula-decl nil interp nil)
           (boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (weight def-decl "nat" language nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (<= const-decl "bool" reals nil)
           (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
           (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_symbol adt-constructor-decl "(ord_symbol?)" language
            nil)
           (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil))
          nil))
        (interp_TCC22 0
         (interp_TCC22-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC23 0
         (interp_TCC23-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (<= const-decl "bool" reals nil)
           (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
           (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_symbol adt-constructor-decl "(ord_symbol?)" language
            nil)
           (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (pretheory formula-decl nil language nil)
           (weight def-decl "nat" language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (interp_TCC24 0
         (interp_TCC24-1 nil 3582045437 ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC25 0
         (interp_TCC25-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC26 0
         (interp_TCC26-1 nil 3582048910 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC27 0
         (interp_TCC27-1 nil 3582048910 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (<= const-decl "bool" reals nil)
           (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
           (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_symbol adt-constructor-decl "(ord_symbol?)" language
            nil)
           (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (pretheory formula-decl nil language nil)
           (weight def-decl "nat" language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (interp_TCC28 0
         (interp_TCC28-1 nil 3582048910 ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC29 0
         (interp_TCC29-1 nil 3582048910 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC30 0
         (interp_TCC30-1 nil 3582048910 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC31 0
         (interp_TCC31-1 nil 3582048910 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (<= const-decl "bool" reals nil)
           (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
           (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_symbol adt-constructor-decl "(ord_symbol?)" language
            nil)
           (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (pretheory formula-decl nil language nil)
           (weight def-decl "nat" language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (interp_TCC32 0
         (interp_TCC32-1 nil 3582048910 ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC33 0
         (interp_TCC33-1 nil 3582048910 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (member_difference 0
         (member_difference-1 nil 3583094530
          ("" (induct "σ" :name "interp_induction")
           (("1" (grind) nil nil) ("2" (grind) nil nil)
            ("3" (grind) nil nil))
           nil)
          ((iconst adt-constructor-decl
            "[[symbol, semantic, semantic] -> (iconst?)]" language nil)
           (iconst? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (preterm? const-decl "[semantic -> bool]" language nil)
           (preterm type-eq-decl nil language nil)
           (itype adt-constructor-decl
            "[[symbol, semantic, semantic] -> (itype?)]" language nil)
           (itype? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (pretype? const-decl "[semantic -> bool]" language nil)
           (pretype type-eq-decl nil language nil)
           (interp_induction formula-decl nil inductions nil)
           (- def-decl "{τ | weight(F)(τ) < weight(F)(σ)}" interp nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
           (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_symbol adt-constructor-decl "(ord_symbol?)" language
            nil)
           (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
           (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (<= const-decl "bool" reals nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (weight def-decl "nat" language nil)
           (>= const-decl "bool" reals nil)
           (int nonempty-type-eq-decl nil integers nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (ord type-decl nil language nil)
           (< const-decl "bool" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number nonempty-type-decl nil numbers nil)
           (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
           (map type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (char type-eq-decl nil strings nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (character type-decl nil character_adt nil)
           (below type-eq-decl nil nat_types nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (interp type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (boolean nonempty-type-decl nil booleans nil)
           (semantic type-decl nil language nil))
          shostak))
        (member_difference_when 0
         (member_difference_when-1 nil 3583095748
          ("" (induct "σ" :name "interp_induction")
           (("1" (grind) nil nil) ("2" (grind) nil nil)
            ("3" (grind) nil nil))
           nil)
          ((iconst adt-constructor-decl
            "[[symbol, semantic, semantic] -> (iconst?)]" language nil)
           (iconst? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (preterm? const-decl "[semantic -> bool]" language nil)
           (preterm type-eq-decl nil language nil)
           (itype adt-constructor-decl
            "[[symbol, semantic, semantic] -> (itype?)]" language nil)
           (itype? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (pretype? const-decl "[semantic -> bool]" language nil)
           (pretype type-eq-decl nil language nil)
           (interp_induction formula-decl nil inductions nil)
           (- def-decl "{τ | weight(F)(τ) < weight(F)(σ)}" interp nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
           (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_symbol adt-constructor-decl "(ord_symbol?)" language
            nil)
           (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
           (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (<= const-decl "bool" reals nil)
           (weight def-decl "nat" language nil)
           (>= const-decl "bool" reals nil)
           (int nonempty-type-eq-decl nil integers nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (ord type-decl nil language nil)
           (< const-decl "bool" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number nonempty-type-decl nil numbers nil)
           (/= const-decl "boolean" notequal nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
           (map type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (char type-eq-decl nil strings nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (character type-decl nil character_adt nil)
           (below type-eq-decl nil nat_types nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (interp type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (boolean nonempty-type-decl nil booleans nil)
           (semantic type-decl nil language nil))
          shostak))
        (member_interp_for 0
         (member_interp_for-1 nil 3583094144
          ("" (induct "Δ" :name "context_induction")
           (("1" (grind) nil nil) ("2" (grind) nil nil)
            ("3" (skosimp* :preds? t)
             (("3" (assert)
               (("3" (bddsimp)
                 (("1" (inst - s!2 "σ!1 - s!1")
                   (("1" (bddsimp -3)
                     (("1" (propax) nil nil)
                      ("2" (use member_difference_when)
                       (("2" (assert) nil nil)) nil)
                      ("3" (propax) nil nil))
                     nil))
                   nil)
                  ("2" (inst - s!2 σ!1) (("2" (assert) nil nil)) nil))
                 nil))
               nil))
             nil)
            ("4" (skosimp* :preds? t)
             (("4" (assert)
               (("4" (flatten)
                 (("4" (inst - s!2 σ!1) (("4" (assert) nil nil)) nil))
                 nil))
               nil))
             nil)
            ("5" (skosimp* :preds? t)
             (("5" (assert)
               (("5" (flatten)
                 (("5" (inst - s!2 σ!1) (("5" (assert) nil nil)) nil))
                 nil))
               nil))
             nil)
            ("6" (skosimp* :preds? t) (("6" (assert) nil nil)) nil)
            ("7" (skosimp* :preds? t)
             (("7" (assert)
               (("7" (bddsimp)
                 (("1" (inst - s!2 "σ!1 - s!1")
                   (("1" (assert)
                     (("1" (use member_difference_when)
                       (("1" (assert) nil nil)) nil))
                     nil))
                   nil)
                  ("2" (inst - s!2 σ!1) (("2" (assert) nil nil)) nil))
                 nil))
               nil))
             nil)
            ("8" (skosimp* :preds? t)
             (("8" (assert)
               (("8" (flatten)
                 (("8" (inst - s!2 σ!1) (("8" (assert) nil nil)) nil))
                 nil))
               nil))
             nil)
            ("9" (skosimp* :preds? t)
             (("9" (assert)
               (("9" (flatten)
                 (("9" (inst - s!2 σ!1) (("9" (assert) nil nil)) nil))
                 nil))
               nil))
             nil)
            ("10" (skosimp* :preds? t) (("10" (assert) nil nil)) nil))
           nil)
          ((semantic type-decl nil language nil)
           (boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (context? const-decl "[semantic -> bool]" language nil)
           (context type-eq-decl nil language nil)
           (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (character type-decl nil character_adt nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (char type-eq-decl nil strings nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (interp type-eq-decl nil language nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (pretheory type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (map type-eq-decl nil language nil)
           (context_induction formula-decl nil inductions nil)
           (pretheory formula-decl nil language nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (weight def-decl "nat" language nil)
           (<= const-decl "bool" reals nil)
           (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
           (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_symbol adt-constructor-decl "(ord_symbol?)" language
            nil)
           (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (- def-decl "{τ | weight(F)(τ) < weight(F)(σ)}" interp nil)
           (member_difference_when formula-decl nil interp nil)
           (app_symbol_interp rec-application-judgement "(kinterp?)"
            map nil)
           (app_symbol_is_definition rec-application-judgement
            "definition" map nil)
           (ktype_decl adt-def-decl "boolean" decl nil)
           (pretype type-eq-decl nil language nil)
           (pretype? const-decl "[semantic -> bool]" language nil)
           (preterm? const-decl "[semantic -> bool]" language nil)
           (preterm type-eq-decl nil language nil))
          shostak))
        (member_interp 0
         (member_interp-1 nil 3583097027
          ("" (induct "Δ" :name "context_induction")
           (("1" (grind) nil nil) ("2" (grind) nil nil)
            ("3" (grind) nil nil) ("4" (grind) nil nil)
            ("5" (grind) nil nil) ("6" (grind) nil nil)
            ("7" (grind) nil nil) ("8" (grind) nil nil)
            ("9" (grind) nil nil) ("10" (grind) nil nil))
           nil)
          ((preterm? const-decl "[semantic -> bool]" language nil)
           (preterm type-eq-decl nil language nil)
           (pretype? const-decl "[semantic -> bool]" language nil)
           (pretype type-eq-decl nil language nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (< const-decl "bool" reals nil)
           (- def-decl "{τ | weight(F)(τ) < weight(F)(σ)}" interp nil)
           (kind const-decl "kind" decl nil)
           (kconst_decl adt-def-decl "boolean" decl nil)
           (kvar_decl adt-def-decl "boolean" decl nil)
           (ktype_decl adt-def-decl "boolean" decl nil)
           (app_symbol_interp rec-application-judgement "(kinterp?)"
            map nil)
           (app_symbol_is_definition rec-application-judgement
            "definition" map nil)
           (pretheory formula-decl nil language nil)
           (context_induction formula-decl nil inductions nil)
           (interp def-decl
                   "{Δ: pretheory | weight(F)(Δ) <= weight(F)(Γ) + weight(F)(σ)}"
                   interp nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_nil) <= F(ord_symbol)) AND
    (F(ord_nil) <= F(ord_dot)) AND
     (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
      (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (ord_dot adt-constructor-decl "(ord_dot?)" language nil)
           (ord_dot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_symbol adt-constructor-decl "(ord_symbol?)" language
            nil)
           (ord_symbol? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_nil adt-constructor-decl "(ord_nil?)" language nil)
           (ord_nil? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (weight def-decl "nat" language nil)
           (>= const-decl "bool" reals nil)
           (int nonempty-type-eq-decl nil integers nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (ord type-decl nil language nil)
           (<= const-decl "bool" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number nonempty-type-decl nil numbers nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory type-eq-decl nil language nil)
           (∈ def-decl "bool" map nil)
           (map type-eq-decl nil language nil)
           (map? const-decl "[semantic -> bool]" language nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (interp type-eq-decl nil language nil)
           (interp? const-decl "[semantic -> bool]" language nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (char type-eq-decl nil strings nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (character type-decl nil character_adt nil)
           (below type-eq-decl nil nat_types nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (pretheory? const-decl "[semantic -> bool]" language nil)
           (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
           (context type-eq-decl nil language nil)
           (context? const-decl "[semantic -> bool]" language nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (boolean nonempty-type-decl nil booleans nil)
           (semantic type-decl nil language nil))
          shostak))
        (well_formed_interp_l 0
         (well_formed_interp_l-1 nil 3583096413
          ("" (induct "Δ" :name "context_induction")
           (("1" (grind) nil nil) ("2" (grind) nil nil)
            ("3" (skosimp* :preds? t)
             (("3" (assert)
               (("3" (bddsimp -8)
                 (("1" (split 3)
                   (("1" (use member_interp) (("1" (assert) nil nil))
                     nil)
                    ("2" (propax) nil nil)
                    ("3" (bddsimp -7)
                     (("1" (inst - Γ!1 "σ!1 - s!1")
                       (("1" (assert) nil nil)) nil)
                      ("2" (propax) nil nil))
                     nil))
                   nil)
                  ("2" (assert)
                   (("2" (split 4)
                     (("1" (use member_interp) (("1" (assert) nil nil))
                       nil)
                      ("2" (inst - Γ!1 σ!1) (("2" (assert) nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ("4" (skosimp* :preds? t)
             (("4" (assert)
               (("4" (bddsimp -9)
                 (("4" (flatten)
                   (("4" (assert)
                     (("4" (split 4)
                       (("1" (use member_interp)
                         (("1" (assert) nil nil)) nil)
                        ("2" (postpone) nil nil)
                        ("3" (inst - Γ!1 σ!1) (("3" (assert) nil nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ("5" (postpone) nil nil) ("6" (postpone) nil nil)
            ("7" (postpone) nil nil) ("8" (postpone) nil nil)
            ("9" (postpone) nil nil) ("10" (postpone) nil nil))
           nil)
          nil shostak))
        (well_formed_interp_TCC1 0
         (well_formed_interp_TCC1-1 nil 3583096443
          ("" (subtype-tcc) nil nil) nil nil))
        (well_formed_interp 0
         (well_formed_interp-1 nil 3583092192
          ("" (induct "σ" :name "interp_induction")
           (("1" (grind) nil nil)
            ("2" (skosimp* :preds? t)
             (("2" (assert)
               (("2" (expand interp -8)
                 (("2" (lift-if)
                   (("2" (bddsimp -8)
                     (("1" (grind) nil nil)
                      ("2" (assert)
                       (("2" (flatten)
                         (("2" (assert)
                           (("2" (lift-if)
                             (("2" (bddsimp -3)
                               (("1"
                                 (split -5)
                                 (("1"
                                   (inst - Γ!1 "rest(Δ!1)")
                                   (("1"
                                     (split 3)
                                     (("1"
                                       (split -10)
                                       (("1"
                                         (flatten)
                                         (("1"
                                           (split -2)
                                           (("1"
                                             (flatten)
                                             (("1"
                                               (split -3)
                                               (("1"
                                                 (flatten)
                                                 (("1"
                                                   (grind)
                                                   (("1"
                                                     (postpone)
                                                     nil
                                                     nil))
                                                   nil))
                                                 nil)
                                                ("2"
                                                 (postpone)
                                                 nil
                                                 nil))
                                               nil))
                                             nil)
                                            ("2" (postpone) nil nil))
                                           nil))
                                         nil)
                                        ("2" (postpone) nil nil))
                                       nil)
                                      ("2" (postpone) nil nil)
                                      ("3" (postpone) nil nil))
                                     nil)
                                    ("2" (postpone) nil nil))
                                   nil)
                                  ("2" (postpone) nil nil))
                                 nil)
                                ("2" (postpone) nil nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil)
                      ("3" (postpone) nil nil) ("4" (postpone) nil nil)
                      ("5" (postpone) nil nil) ("6" (postpone) nil nil)
                      ("7" (postpone) nil nil) ("8" (postpone) nil nil)
                      ("9" (postpone) nil nil)
                      ("10" (postpone) nil nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ("3" (postpone) nil nil))
           nil)
          nil shostak)))

