(interp (difference_TCC1 0
         (difference_TCC1-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (character type-decl nil character_adt nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (char type-eq-decl nil strings nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (syntaxic? const-decl "bool" language nil)
           (syntaxic type-eq-decl nil language nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (context? const-decl "bool" language nil)
           (∈ def-decl "bool" apply nil)
           (interp formula-decl nil language nil)
           (weight def-decl "nat" language nil))
          nil))
        (difference_TCC2 0
         (difference_TCC2-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (character type-decl nil character_adt nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (char type-eq-decl nil strings nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (syntaxic? const-decl "bool" language nil)
           (syntaxic type-eq-decl nil language nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (context? const-decl "bool" language nil)
           (∈ def-decl "bool" apply nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (weight def-decl "nat" language nil)
           (interp formula-decl nil language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (difference_TCC3 0
         (difference_TCC3-1 nil 3582039022
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (character type-decl nil character_adt nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (char type-eq-decl nil strings nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (syntaxic? const-decl "bool" language nil)
           (syntaxic type-eq-decl nil language nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (context? const-decl "bool" language nil)
           (∈ def-decl "bool" apply nil)
           (interp formula-decl nil language nil))
          nil))
        (difference_TCC4 0
         (difference_TCC4-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (character type-decl nil character_adt nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (char type-eq-decl nil strings nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (syntaxic? const-decl "bool" language nil)
           (syntaxic type-eq-decl nil language nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (context? const-decl "bool" language nil)
           (∈ def-decl "bool" apply nil)
           (interp formula-decl nil language nil))
          nil))
        (difference_TCC5 0
         (difference_TCC5-1 nil 3582039022
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (character type-decl nil character_adt nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (char type-eq-decl nil strings nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (syntaxic? const-decl "bool" language nil)
           (syntaxic type-eq-decl nil language nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (context? const-decl "bool" language nil)
           (∈ def-decl "bool" apply nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (interp formula-decl nil language nil))
          nil))
        (difference_TCC6 0
         (difference_TCC6-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (character type-decl nil character_adt nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (char type-eq-decl nil strings nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (syntaxic? const-decl "bool" language nil)
           (syntaxic type-eq-decl nil language nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (context? const-decl "bool" language nil)
           (∈ def-decl "bool" apply nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
           (<= const-decl "bool" reals nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_bot) = 0) AND
    (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
     (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (s!1 skolem-const-decl "{s | s ∈ σ!1}" interp nil)
           (σ!1 skolem-const-decl "interp" interp nil)
           (τ!1 skolem-const-decl "semantic" interp nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (interp formula-decl nil language nil)
           (weight def-decl "nat" language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (difference_TCC7 0
         (difference_TCC7-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (character type-decl nil character_adt nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (char type-eq-decl nil strings nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (syntaxic? const-decl "bool" language nil)
           (syntaxic type-eq-decl nil language nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (context? const-decl "bool" language nil)
           (∈ def-decl "bool" apply nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (weight def-decl "nat" language nil)
           (interp formula-decl nil language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (difference_TCC8 0
         (difference_TCC8-1 nil 3582039022
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (character type-decl nil character_adt nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (char type-eq-decl nil strings nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (syntaxic? const-decl "bool" language nil)
           (syntaxic type-eq-decl nil language nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (context? const-decl "bool" language nil)
           (∈ def-decl "bool" apply nil)
           (interp formula-decl nil language nil))
          nil))
        (difference_TCC9 0
         (difference_TCC9-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (character type-decl nil character_adt nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (char type-eq-decl nil strings nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (syntaxic? const-decl "bool" language nil)
           (syntaxic type-eq-decl nil language nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (context? const-decl "bool" language nil)
           (∈ def-decl "bool" apply nil)
           (interp formula-decl nil language nil))
          nil))
        (difference_TCC10 0
         (difference_TCC10-1 nil 3582039022
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (character type-decl nil character_adt nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (char type-eq-decl nil strings nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (syntaxic? const-decl "bool" language nil)
           (syntaxic type-eq-decl nil language nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (context? const-decl "bool" language nil)
           (∈ def-decl "bool" apply nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (interp formula-decl nil language nil))
          nil))
        (difference_TCC11 0
         (difference_TCC11-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (character type-decl nil character_adt nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (char type-eq-decl nil strings nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (syntaxic? const-decl "bool" language nil)
           (syntaxic type-eq-decl nil language nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (context? const-decl "bool" language nil)
           (∈ def-decl "bool" apply nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
           (<= const-decl "bool" reals nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_bot) = 0) AND
    (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
     (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (s!1 skolem-const-decl "{s | s ∈ σ!1}" interp nil)
           (σ!1 skolem-const-decl "interp" interp nil)
           (τ!1 skolem-const-decl "semantic" interp nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (interp formula-decl nil language nil)
           (weight def-decl "nat" language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (difference_TCC12 0
         (difference_TCC12-1 nil 3582039022 ("" (cases-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (character type-decl nil character_adt nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (char type-eq-decl nil strings nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (syntaxic? const-decl "bool" language nil)
           (syntaxic type-eq-decl nil language nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (context? const-decl "bool" language nil)
           (∈ def-decl "bool" apply nil)
           (interp formula-decl nil language nil))
          nil))
        (difference_apply_weight 0
         (difference_apply_weight-1 nil 3582045478
          ("" (induct "σ")
           (("1" (grind) nil nil) ("2" (grind) nil nil)
            ("3" (grind) nil nil) ("4" (grind) nil nil)
            ("5" (grind) nil nil) ("6" (grind) nil nil)
            ("7" (grind) nil nil) ("8" (grind) nil nil)
            ("9" (grind) nil nil) ("10" (grind) nil nil)
            ("11" (grind) nil nil) ("12" (grind) nil nil)
            ("13" (grind) nil nil) ("14" (grind) nil nil)
            ("15" (grind) nil nil) ("16" (grind) nil nil)
            ("17" (grind) nil nil) ("18" (grind) nil nil)
            ("19" (grind) nil nil) ("20" (grind) nil nil)
            ("21" (grind) nil nil) ("22" (grind) nil nil)
            ("23" (grind) nil nil) ("24" (grind) nil nil)
            ("25" (grind) nil nil) ("26" (grind) nil nil)
            ("27" (grind) nil nil)
            ("28" (skosimp* :preds? t) (("28" (assert) nil nil)) nil)
            ("29" (skosimp* :preds? t) (("29" (assert) nil nil)) nil)
            ("30" (skosimp* :preds? t)
             (("30" (use "app_symbol_interp")
               (("30" (lemma "app_symbol_interp")
                 (("30" (inst?)
                   (("30" (assert)
                     (("30" (flatten)
                       (("30" (assert)
                         (("30" (assert)
                           (("30" (case "s!1 = itype1_var!1")
                             (("1" (assert) nil nil)
                              ("2" (assert)
                               (("2"
                                 (assert)
                                 (("2"
                                   (inst?)
                                   (("2" (assert) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ("31" (skosimp* :preds? t)
             (("31" (assert)
               (("31" (skosimp* :preds? t)
                 (("31" (assert)
                   (("31" (assert)
                     (("31" (case "s!1 = iconst1_var!1")
                       (("1" (assert) nil nil)
                        ("2" (assert)
                         (("2" (inst?) (("2" (assert) nil nil)) nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ("32" (skosimp* :preds? t)
             (("32" (assert)
               (("32" (assert)
                 (("32" (rewrite "app_symbol_interp") nil nil)) nil))
               nil))
             nil)
            ("33" (assert)
             (("33" (skosimp* :preds? t) (("33" (assert) nil nil))
               nil))
             nil)
            ("34" (skosimp* :preds? t) (("34" (assert) nil nil)) nil))
           nil)
          ((iconst? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (iconst adt-constructor-decl
            "[[symbol, semantic, semantic] -> (iconst?)]" language nil)
           (itype adt-constructor-decl
            "[[symbol, semantic, semantic] -> (itype?)]" language nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (app_symbol_interp rec-application-judgement "interp" apply
            nil)
           (app_symbol_interp recursive-judgement-axiom nil apply nil)
           (nil adt-constructor-decl "(null?)" language nil)
           (ktheory adt-constructor-decl
            "[[symbol, semantic, semantic] -> (ktheory?)]" language
            nil)
           (interp formula-decl nil language nil)
           (semantic_induction formula-decl nil language nil)
           (definition const-decl
                       "ε({x: semantic | pretype?(x) OR preterm?(x) OR pretheory?(x)})"
                       decl nil)
           (ε type-eq-decl nil language nil)
           (undefined? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (- def-decl "{τ | weight(F)(τ) < weight(F)(σ)}" interp nil)
           (interp type-eq-decl nil language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_bot) = 0) AND
    (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
     (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (<= const-decl "bool" reals nil)
           (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
           (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (weight def-decl "nat" language nil)
           (>= const-decl "bool" reals nil)
           (int nonempty-type-eq-decl nil integers nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (ord type-decl nil language nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (< const-decl "bool" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number nonempty-type-decl nil numbers nil)
           (keyword formula-decl nil language nil)
           (syntaxic formula-decl nil language nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (null? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (ktheory? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (app_symbol def-decl "{T: semantic |
             (interp?(T) AND NOT null?(T)) OR ktype_def?(T)
          OR ktype_decl?(T) OR kconst_def?(T) OR kconst_decl?(T)
          OR ktheory?(T) OR ktype_ext?(T) OR kconst_ext?(T)}" apply
            nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (character type-decl nil character_adt nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (char type-eq-decl nil strings nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (syntaxic? const-decl "bool" language nil)
           (syntaxic type-eq-decl nil language nil)
           (∈ def-decl "bool" apply nil)
           (semantic type-decl nil language nil)
           (boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
           (interp? const-decl "bool" language nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (KTYPE? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (KCONST? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (KVAR? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (KTHEORY? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (KCONTEXT? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (KTERM? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (pretype? const-decl "bool" language nil)
           (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kvar? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (itype? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (dtype shared-adt-accessor-decl "[{x: semantic |
              KTERM?(x) OR ktype_def?(x) OR kvar?(x) OR kconst_decl?(x)
           OR kconst_def?(x) OR kconst_ext?(x) OR itype?(x)} ->
   semantic]" language nil)
           (preterm? const-decl "bool" language nil)
           (context? const-decl "bool" language nil)
           (pretheory? const-decl "bool" language nil)
           (name? const-decl "bool" language nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil))
          shostak))
        (interp_for?_TCC1 0
         (interp_for?_TCC1-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (app_symbol_interp rec-application-judgement "interp" apply
            nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC2 0
         (interp_for?_TCC2-1 nil 3582039022
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (app_symbol_interp rec-application-judgement "interp" apply
            nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC3 0
         (interp_for?_TCC3-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC4 0
         (interp_for?_TCC4-1 nil 3582039022
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC5 0
         (interp_for?_TCC5-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC6 0
         (interp_for?_TCC6-1 nil 3582039022
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC7 0
         (interp_for?_TCC7-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC8 0
         (interp_for?_TCC8-1 nil 3582039022
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC9 0
         (interp_for?_TCC9-1 nil 3582039022 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil)
           (app_symbol_interp rec-application-judgement "interp" apply
            nil))
          nil))
        (interp_for?_TCC10 0
         (interp_for?_TCC10-1 nil 3582039022
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (app_symbol_interp rec-application-judgement "interp" apply
            nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC11 0
         (interp_for?_TCC11-1 nil 3582039022 ("" (cases-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC12 0
         (interp_for?_TCC12-1 nil 3582040377
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC13 0
         (interp_for?_TCC13-1 nil 3582040377 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC14 0
         (interp_for?_TCC14-1 nil 3582040377
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC15 0
         (interp_for?_TCC15-1 nil 3582040377 ("" (cases-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC16 0
         (interp_for?_TCC16-1 nil 3582048910
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC17 0
         (interp_for?_TCC17-1 nil 3582048910 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC18 0
         (interp_for?_TCC18-1 nil 3582048910
          ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_for?_TCC19 0
         (interp_for?_TCC19-1 nil 3582048910 ("" (cases-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC1 0
         (interp_TCC1-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (pretheory formula-decl nil language nil)
           (weight def-decl "nat" language nil))
          nil))
        (interp_TCC2 0
         (interp_TCC2-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC3 0
         (interp_TCC3-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC4 0
         (interp_TCC4-1 nil 3582045437 ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC5 0
         (interp_TCC5-1 nil 3582045437
          ("" (skosimp* :preds? t)
           (("" (assert)
             (("" (inst?)
               (("1" (assert)
                 (("1" (assert)
                   (("1" (rewrite -6)
                     (("1" (assert)
                       (("1" (flatten)
                         (("1" (assert)
                           (("1" (use "difference_apply_weight")
                             (("1" (assert)
                               (("1"
                                 (assert)
                                 (("1"
                                   (split 1)
                                   (("1"
                                     (assert)
                                     (("1"
                                       (lemma "definition_type")
                                       (("1"
                                         (inst?)
                                         (("1"
                                           (assert)
                                           (("1"
                                             (auto-rewrite
                                              "definition?")
                                             (("1"
                                               (assert)
                                               (("1"
                                                 (auto-rewrite
                                                  "definition_type")
                                                 (("1"
                                                   (flatten)
                                                   (("1"
                                                     (assert)
                                                     (("1"
                                                       (lemma
                                                        "app_symbol_interp")
                                                       (("1"
                                                         (assert)
                                                         (("1"
                                                           (inst?)
                                                           (("1"
                                                             (rewrite
                                                              "interp")
                                                             (("1"
                                                               (lift-if)
                                                               (("1"
                                                                 (assert)
                                                                 (("1"
                                                                   (split
                                                                    -1)
                                                                   (("1"
                                                                     (assert)
                                                                     (("1"
                                                                       (rewrite
                                                                        "kind")
                                                                       (("1"
                                                                         (grind)
                                                                         nil
                                                                         nil))
                                                                       nil))
                                                                     nil)
                                                                    ("2"
                                                                     (propax)
                                                                     nil
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2"
                                     (assert)
                                     (("2"
                                       (typepred "F")
                                       (("2" (assert) nil nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("2" (assert)
                 (("2" (rewrite -5) (("2" (assert) nil nil)) nil)) nil)
                ("3" (rewrite -5) (("3" (assert) nil nil)) nil)
                ("4" (rewrite -5) (("4" (assert) nil nil)) nil))
               nil))
             nil))
           nil)
          ((posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (app_symbol_interp rec-application-judgement "interp" apply
            nil)
           (pretheory formula-decl nil language nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (difference_apply_weight formula-decl nil interp nil)
           (app_symbol def-decl "{T: semantic |
             (interp?(T) AND NOT null?(T)) OR ktype_def?(T)
          OR ktype_decl?(T) OR kconst_def?(T) OR kconst_decl?(T)
          OR ktheory?(T) OR ktype_ext?(T) OR kconst_ext?(T)}" apply
            nil)
           (null? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (KTYPE adt-constructor-decl "(KTYPE?)" language nil)
           (KTYPE? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (kind const-decl "ε(kind?)" decl nil)
           (ε type-eq-decl nil language nil)
           (kind? const-decl "bool" language nil)
           (undefined? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (definition? const-decl "bool" decl nil)
           (definition const-decl
                       "ε({x: semantic | pretype?(x) OR preterm?(x) OR pretheory?(x)})"
                       decl nil)
           (name formula-decl nil language nil)
           (pretype formula-decl nil language nil)
           (interp formula-decl nil language nil)
           (app_symbol_interp recursive-judgement-axiom nil apply nil)
           (definition_type judgement-tcc nil decl nil)
           (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kvar? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (ktheory? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (itype? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (iconst? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
           (below type-eq-decl nil nat_types nil)
           (character type-decl nil character_adt nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (char type-eq-decl nil strings nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (syntaxic? const-decl "bool" language nil)
           (syntaxic type-eq-decl nil language nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (context? const-decl "bool" language nil)
           (∈ def-decl "bool" apply nil)
           (- def-decl "{τ | weight(F)(τ) < weight(F)(σ)}" interp nil)
           (Γ!1 skolem-const-decl "pretheory" interp nil)
           (σ!1 skolem-const-decl "(interp_for?(Γ!1))" interp nil)
           (s!1 skolem-const-decl "symbol" interp nil)
           (Δ!1 skolem-const-decl "semantic" interp nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (weight def-decl "nat" language nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
           (<= const-decl "bool" reals nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_bot) = 0) AND
    (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
     (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil))
          nil))
        (interp_TCC6 0
         (interp_TCC6-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC7 0
         (interp_TCC7-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
           (<= const-decl "bool" reals nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_bot) = 0) AND
    (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
     (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (pretheory formula-decl nil language nil)
           (weight def-decl "nat" language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (interp_TCC8 0
         (interp_TCC8-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC9 0
         (interp_TCC9-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC10 0
         (interp_TCC10-1 nil 3582045437 ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC11 0
         (interp_TCC11-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
           (<= const-decl "bool" reals nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_bot) = 0) AND
    (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
     (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (σ!1 skolem-const-decl "(interp_for?(Γ!1))" interp nil)
           (Γ!1 skolem-const-decl "pretheory" interp nil)
           (Δ!1 skolem-const-decl "semantic" interp nil)
           (pretheory formula-decl nil language nil)
           (weight def-decl "nat" language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (interp_TCC12 0
         (interp_TCC12-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC13 0
         (interp_TCC13-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC14 0
         (interp_TCC14-1 nil 3582045437 ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC15 0
         (interp_TCC15-1 nil 3582045437
          ("" (skosimp* :preds? t)
           (("" (assert)
             (("" (inst?)
               (("1" (assert)
                 (("1" (flatten)
                   (("1" (assert)
                     (("1" (rewrite -5) (("1" (assert) nil nil)) nil))
                     nil))
                   nil))
                 nil)
                ("2" (assert)
                 (("2" (rewrite -4) (("2" (assert) nil nil)) nil)) nil)
                ("3" (rewrite -4) (("3" (assert) nil nil)) nil))
               nil))
             nil))
           nil)
          ((posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (pretheory formula-decl nil language nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (σ!1 skolem-const-decl "(interp_for?(Γ!1))" interp nil)
           (Γ!1 skolem-const-decl "pretheory" interp nil)
           (Δ!1 skolem-const-decl "semantic" interp nil)
           (boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (weight def-decl "nat" language nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
           (<= const-decl "bool" reals nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_bot) = 0) AND
    (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
     (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil))
          nil))
        (interp_TCC16 0
         (interp_TCC16-1 nil 3582045437
          ("" (skosimp* :preds? t)
           (("" (assert)
             (("" (rewrite -5) (("" (assert) nil nil)) nil)) nil))
           nil)
          ((pretheory formula-decl nil language nil)
           (boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil))
          nil))
        (interp_TCC17 0
         (interp_TCC17-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC18 0
         (interp_TCC18-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC19 0
         (interp_TCC19-1 nil 3582045437
          ("" (skosimp* :preds? t)
           (("" (assert)
             (("" (inst?)
               (("1" (assert)
                 (("1" (rewrite -6)
                   (("1" (assert)
                     (("1" (assert)
                       (("1" (flatten)
                         (("1" (assert)
                           (("1" (split 1)
                             (("1" (assert)
                               (("1"
                                 (lemma "app_symbol_interp")
                                 (("1"
                                   (assert)
                                   (("1"
                                     (inst?)
                                     (("1"
                                       (lemma "definition_const")
                                       (("1"
                                         (inst?)
                                         (("1"
                                           (assert)
                                           (("1"
                                             (rewrite "definition?")
                                             (("1"
                                               (flatten)
                                               (("1"
                                                 (assert)
                                                 (("1"
                                                   (rewrite "interp")
                                                   (("1"
                                                     (lift-if)
                                                     (("1"
                                                       (assert)
                                                       (("1"
                                                         (split -1)
                                                         (("1"
                                                           (assert)
                                                           (("1"
                                                             (rewrite
                                                              "kind")
                                                             (("1"
                                                               (assert)
                                                               nil
                                                               nil))
                                                             nil))
                                                           nil)
                                                          ("2"
                                                           (propax)
                                                           nil
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil)
                              ("2" (assert)
                               (("2"
                                 (lemma "difference_apply_weight")
                                 (("2"
                                   (inst?)
                                   (("2"
                                     (assert)
                                     (("2"
                                       (typepred "F")
                                       (("2" (assert) nil nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("2" (assert)
                 (("2" (rewrite -5)
                   (("2" (assert) (("2" (assert) nil nil)) nil)) nil))
                 nil)
                ("3" (assert)
                 (("3" (rewrite -5) (("3" (assert) nil nil)) nil)) nil)
                ("4" (assert)
                 (("4" (rewrite -5) (("4" (assert) nil nil)) nil))
                 nil))
               nil))
             nil))
           nil)
          ((posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (app_symbol_interp rec-application-judgement "interp" apply
            nil)
           (pretheory formula-decl nil language nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (app_symbol_interp recursive-judgement-axiom nil apply nil)
           (app_symbol def-decl "{T: semantic |
             (interp?(T) AND NOT null?(T)) OR ktype_def?(T)
          OR ktype_decl?(T) OR kconst_def?(T) OR kconst_decl?(T)
          OR ktheory?(T) OR ktype_ext?(T) OR kconst_ext?(T)}" apply
            nil)
           (null? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (KCONST adt-constructor-decl "(KCONST?)" language nil)
           (KCONST? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kind const-decl "ε(kind?)" decl nil)
           (ε type-eq-decl nil language nil)
           (kind? const-decl "bool" language nil)
           (undefined? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (definition? const-decl "bool" decl nil)
           (definition const-decl
                       "ε({x: semantic | pretype?(x) OR preterm?(x) OR pretheory?(x)})"
                       decl nil)
           (name formula-decl nil language nil)
           (preterm formula-decl nil language nil)
           (interp formula-decl nil language nil)
           (definition_const judgement-tcc nil decl nil)
           (difference_apply_weight formula-decl nil interp nil)
           (KTERM? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (ktype_def? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kvar? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (kconst_decl? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kconst_def? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (kconst_ext? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (itype? adt-recognizer-decl "[semantic -> boolean]" language
            nil)
           (dtype shared-adt-accessor-decl "[{x: semantic |
              KTERM?(x) OR ktype_def?(x) OR kvar?(x) OR kconst_decl?(x)
           OR kconst_def?(x) OR kconst_ext?(x) OR itype?(x)} ->
   semantic]" language nil)
           (ktype_decl? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (ktype_ext? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (ktheory? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (iconst? adt-recognizer-decl "[semantic -> boolean]"
            language nil)
           (rest shared-adt-accessor-decl "[{x: semantic |
              ktype_decl?(x) OR ktype_def?(x) OR ktype_ext?(x) OR kvar?(x)
           OR kconst_decl?(x) OR kconst_def?(x) OR kconst_ext?(x)
           OR ktheory?(x) OR itype?(x) OR iconst?(x)} ->
   semantic]" language nil)
           (below type-eq-decl nil nat_types nil)
           (character type-decl nil character_adt nil)
           (char? adt-recognizer-decl "[character -> boolean]"
            character_adt nil)
           (char type-eq-decl nil strings nil)
           (symbol nonempty-type-eq-decl nil language nil)
           (syntaxic? const-decl "bool" language nil)
           (syntaxic type-eq-decl nil language nil)
           (OR const-decl "[bool, bool -> bool]" booleans nil)
           (context? const-decl "bool" language nil)
           (∈ def-decl "bool" apply nil)
           (- def-decl "{τ | weight(F)(τ) < weight(F)(σ)}" interp nil)
           (Γ!1 skolem-const-decl "pretheory" interp nil)
           (σ!1 skolem-const-decl "(interp_for?(Γ!1))" interp nil)
           (s!1 skolem-const-decl "symbol" interp nil)
           (Δ!1 skolem-const-decl "semantic" interp nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (weight def-decl "nat" language nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
           (<= const-decl "bool" reals nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_bot) = 0) AND
    (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
     (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil))
          nil))
        (interp_TCC20 0
         (interp_TCC20-1 nil 3582045437 ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC21 0
         (interp_TCC21-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
           (<= const-decl "bool" reals nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_bot) = 0) AND
    (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
     (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (σ!1 skolem-const-decl "(interp_for?(Γ!1))" interp nil)
           (Γ!1 skolem-const-decl "pretheory" interp nil)
           (Δ!1 skolem-const-decl "semantic" interp nil)
           (pretheory formula-decl nil language nil)
           (weight def-decl "nat" language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (interp_TCC22 0
         (interp_TCC22-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC23 0
         (interp_TCC23-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC24 0
         (interp_TCC24-1 nil 3582045437 ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC25 0
         (interp_TCC25-1 nil 3582045437 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
           (<= const-decl "bool" reals nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_bot) = 0) AND
    (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
     (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (σ!1 skolem-const-decl "(interp_for?(Γ!1))" interp nil)
           (Γ!1 skolem-const-decl "pretheory" interp nil)
           (Δ!1 skolem-const-decl "semantic" interp nil)
           (pretheory formula-decl nil language nil)
           (weight def-decl "nat" language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (interp_TCC26 0
         (interp_TCC26-1 nil 3582048910 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC27 0
         (interp_TCC27-1 nil 3582048910 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC28 0
         (interp_TCC28-1 nil 3582048910 ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (weight def-decl "nat" language nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC29 0
         (interp_TCC29-1 nil 3582048910 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
           (<= const-decl "bool" reals nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_bot) = 0) AND
    (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
     (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (σ!1 skolem-const-decl "(interp_for?(Γ!1))" interp nil)
           (Γ!1 skolem-const-decl "pretheory" interp nil)
           (Δ!1 skolem-const-decl "semantic" interp nil)
           (pretheory formula-decl nil language nil)
           (weight def-decl "nat" language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil))
        (interp_TCC30 0
         (interp_TCC30-1 nil 3582048910 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC31 0
         (interp_TCC31-1 nil 3582048910 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC32 0
         (interp_TCC32-1 nil 3582048910 ("" (termination-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (pretheory formula-decl nil language nil))
          nil))
        (interp_TCC33 0
         (interp_TCC33-1 nil 3582048910 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (semantic type-decl nil language nil)
           (pretheory? const-decl "bool" language nil)
           (pretheory type-eq-decl nil language nil)
           (interp? const-decl "bool" language nil)
           (interp type-eq-decl nil language nil)
           (interp_for? def-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (ord type-decl nil language nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (ord_bot? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_bot adt-constructor-decl "(ord_bot?)" language nil)
           (<= const-decl "bool" reals nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (ord_ktype_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_def adt-constructor-decl "(ord_ktype_def?)"
            language nil)
           (ord_itype? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_itype adt-constructor-decl "(ord_itype?)" language nil)
           (ord_ktype_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_ktype_decl adt-constructor-decl "(ord_ktype_decl?)"
            language nil)
           (ord_kconst_def? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_def adt-constructor-decl "(ord_kconst_def?)"
            language nil)
           (ord_iconst? adt-recognizer-decl "[ord -> boolean]" language
            nil)
           (ord_iconst adt-constructor-decl "(ord_iconst?)" language
            nil)
           (ord_kconst_decl? adt-recognizer-decl "[ord -> boolean]"
            language nil)
           (ord_kconst_decl adt-constructor-decl "(ord_kconst_decl?)"
            language nil)
           (F const-decl "(LAMBDA (F: [ord -> nat]):
   (F(ord_bot) = 0) AND
    (F(ord_ktype_def) + F(ord_itype) <= F(ord_ktype_decl)) AND
     (F(ord_kconst_def) + F(ord_iconst) <= F(ord_kconst_decl)))"
            language nil)
           (pretheory formula-decl nil language nil)
           (weight def-decl "nat" language nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil))
          nil)))

