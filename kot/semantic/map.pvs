map: THEORY
BEGIN
  IMPORTING subst
  IMPORTING decl

  S: VAR syntaxic
  Γ, Δ, Θ: VAR context
  A, B, T: VAR pretype
  r, s: VAR symbol
  n, m: VAR name
  x, y: VAR nat
  a, b, f, g: VAR preterm
  σ, τ: VAR interp
  d: VAR decl
  M: VAR map

  % Check if a symbol is defined in a map (= context, theory or interpretation)
  % i.e if there is a declaration (def or decl) of this symbol (as a type, term, theory)
  ;∈(s, M): RECURSIVE bool =
    COND
      empty?(M) -> FALSE,
      null?(M) -> FALSE,
      kvar?(M) -> s ∈ rest(M :: nonempty),
      ELSE -> s = s(M) OR s ∈ rest(M :: nonempty)
    ENDCOND
  MEASURE w(M)
  AUTO_REWRITE+ ∈
  member_nonempty: THEOREM
    FORALL s, M: s ∈ M IMPLIES nonempty?(M)
  ;∉(s, M): MACRO bool = NOT s ∈ M

  % The same for a variable
  % Note that since a variable cannot appear in a theory or interpretation
  % this ∈ is defined over contexts only
  ;∈(x, Γ): RECURSIVE bool =
    COND
      empty?(Γ) -> FALSE,
      kvar?(Γ) -> x = 0 OR (x - 1) ∈ rest(Γ :: nonempty_context),
      ELSE -> x ∈ rest(Γ :: nonempty_context)
    ENDCOND
  MEASURE w(Γ)
  AUTO_REWRITE+ ∈
  member_var_nonempty_context: THEOREM
    FORALL x, Γ: x ∈ Γ IMPLIES nonempty_context?(Γ)
  member_var_lt: THEOREM
    x <= y AND y ∈ Γ IMPLIES x ∈ Γ
  ;∉(x, Γ): MACRO bool = NOT x ∈ Γ
  
  % Takes a map S = (Γ, s: _, Δ) and returns (s: _, Δ)
  % Used only as an argument of the functions kind, definition, type_
  app_symbol(M)(s | s ∈ M): RECURSIVE decl =
    COND
      kvar?(M) -> app_symbol(rest(M :: nonempty))(s) ↑ 1,
      ELSE -> IF s = s(M) THEN decl(M :: nonempty) ELSE app_symbol(rest(M :: nonempty))(s) ENDIF
    ENDCOND
  MEASURE w(M)
  AUTO_REWRITE+ app_symbol
  CONVERSION+ app_symbol
  %app_symbol_interp: RECURSIVE JUDGEMENT
  %  app_symbol(σ)(s | s ∈ σ) HAS_TYPE definition
  kvar_app_symbol: LEMMA s ∈ Γ IMPLIES NOT KVAR?(kind(Γ(s)))
  AUTO_REWRITE+ kvar_app_symbol

  app_symbol_is_definition: RECURSIVE JUDGEMENT 
    app_symbol(σ)(s | s ∈ σ) HAS_TYPE definition
  app_symbol_context: RECURSIVE JUDGEMENT
    app_symbol(Γ)(s | s ∈ Γ) HAS_TYPE (kcontext?)
  app_symbol_interp: RECURSIVE JUDGEMENT
    app_symbol(σ)(s | s ∈ σ) HAS_TYPE (kinterp?)
  %TODO: change ktheory name, cause :: [decl -> bool] is Soooo ugly
  app_symbol_pretheory: JUDGEMENT
    app_symbol(Δ: pretheory)(s | s ∈ Δ) HAS_TYPE (ktheory? :: [decl -> bool])

  % The same for variables
  app_var(Γ)(x | x ∈ Γ): RECURSIVE (dvar?) =
    COND
      kvar?(Γ) -> IF x = 0 THEN decl(Γ) ELSE app_var(rest(Γ))(x - 1) ↑ 1 ENDIF,
      ELSE -> app_var(rest(Γ))(x)
    ENDCOND
  MEASURE w(Γ)
  CONVERSION+ app_var
END map
