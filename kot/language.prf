(language
 (subterm_ltlt_equal 0
  (subterm_ltlt_equal-1 nil 3580738216
   (""
    (comment "(apply (then (induct t) (skeep) (skeep) (expand (subterm <<) +) (grind :exclude (subterm <<))))")
    (("" (postpone) nil
      ";;; (apply (then (induct t) (skeep) (skeep) (expand (subterm <<) +) (grind :exclude (subterm <<))))"))
    nil)
   ((empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (semantic_induction formula-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" language nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   shostak))
 (fun_?_TCC1 0
  (fun_?_TCC1-1 nil 3580661121 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (undefined adt-def-decl "boolean" language nil)
    (ε type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil))
   nil))
 (fun_?_TCC2 0
  (fun_?_TCC2-1 nil 3580661121 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (undefined adt-def-decl "boolean" language nil)
    (ε type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil))
   nil))
 (fun_?_TCC3 0
  (fun_?_TCC3-1 nil 3580661121 ("" (grind) nil nil)
   ((pretype adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (fun_?_TCC4 0
  (fun_?_TCC4-1 nil 3580661121 ("" (grind) nil nil)
   ((pretype adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (prod_?_TCC1 0
  (prod_?_TCC1-1 nil 3580661121 ("" (grind) nil nil)
   ((pretype adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (subtype_?_TCC1 0
  (subtype_?_TCC1-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (undefined adt-def-decl "boolean" language nil)
    (ε type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (subtype_?_TCC2 0
  (subtype_?_TCC2-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (undefined adt-def-decl "boolean" language nil)
    (ε type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (subtype_?_TCC3 0
  (subtype_?_TCC3-1 nil 3580758376 ("" (grind) nil nil)
   ((pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (subtype_?_TCC4 0
  (subtype_?_TCC4-1 nil 3580758376 ("" (grind) nil nil)
   ((pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (app_?_TCC1 0
  (app_?_TCC1-1 nil 3580661121 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (undefined adt-def-decl "boolean" language nil)
    (ε type-eq-decl nil language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (app_?_TCC2 0
  (app_?_TCC2-1 nil 3580661121 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (undefined adt-def-decl "boolean" language nil)
    (ε type-eq-decl nil language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (app_?_TCC3 0
  (app_?_TCC3-1 nil 3580661121 ("" (grind) nil nil)
   ((preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (app_?_TCC4 0
  (app_?_TCC4-1 nil 3580758719 ("" (grind) nil nil)
   ((preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (lam_?_TCC1 0
  (lam_?_TCC1-1 nil 3580661121 ("" (grind) nil nil)
   ((pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (lam_?_TCC2 0
  (lam_?_TCC2-1 nil 3580661121 ("" (grind) nil nil)
   ((pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (pair_?_TCC1 0
  (pair_?_TCC1-1 nil 3580661121 ("" (grind) nil nil)
   ((preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (lproj_?_TCC1 0
  (lproj_?_TCC1-1 nil 3580661121 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (undefined adt-def-decl "boolean" language nil)
    (ε type-eq-decl nil language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (lproj_?_TCC2 0
  (lproj_?_TCC2-1 nil 3580661121 ("" (grind) nil nil)
   ((preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (lproj_?_TCC3 0
  (lproj_?_TCC3-1 nil 3580661121 ("" (grind) nil nil)
   ((preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (rproj_?_TCC1 0
  (rproj_?_TCC1-1 nil 3580661121 ("" (grind) nil nil)
   ((preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (bigvee_TCC1 0
  (bigvee_TCC1-1 nil 3580758376 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (app_ctx_symbol_TCC1 0
  (app_ctx_symbol_TCC1-1 nil 3580824537
   ("" (typepred "<<")
    (("" (expand strict_well_founded?)
      (("" (expand well_founded?)
        (("" (skeep)
          (("" (inst -2 "LAMBDA (s: semantic): context(s) AND p(s)")
            (("1" (split)
              (("1" (skolem-typepred -1)
                (("1" (inst 1 "y!1")
                  (("1" (skolem-typepred 1)
                    (("1" (inst -5 "x!1")
                      (("1" (expand restrict) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skolem-typepred)
                (("2" (inst 1 y!1)
                  (("2" (split 1)
                    (("1" (expand context) (("1" (propax) nil nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil (restrict const-decl "R" restrict nil)
    (context type-eq-decl nil language nil)
    (context adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (well_founded? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (app_ctx_symbol_TCC2 0
  (app_ctx_symbol_TCC2-1 nil 3580824537 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (name adt-def-decl "boolean" language nil))
   nil))
 (app_ctx_symbol_TCC3 0
  (app_ctx_symbol_TCC3-1 nil 3580824537 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil))
   nil))
 (app_ctx_symbol_TCC4 0
  (app_ctx_symbol_TCC4-1 nil 3580824537 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (app_ctx_symbol_subterm_TCC1 0
  (app_ctx_symbol_subterm_TCC1-1 nil 3580824537
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (subterm adt-def-decl "boolean" language nil))
   nil))
 (app_ctx_symbol_subterm_TCC2 0
  (app_ctx_symbol_subterm_TCC2-1 nil 3580824537
   ("" (recursive-judgement-tcc) nil nil)
   ((subterm adt-def-decl "boolean" language nil)) nil))
 (app_ctx_symbol_subterm_TCC3 0
  (app_ctx_symbol_subterm_TCC3-1 nil 3580824537
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (symbol nonempty-type-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" language nil))
   nil))
 (app_ctx_var_TCC1 0
  (app_ctx_var_TCC1-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (app_ctx_var_TCC2 0
  (app_ctx_var_TCC2-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (app_ctx_var_TCC3 0
  (app_ctx_var_TCC3-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (app_ctx_var_TCC4 0
  (app_ctx_var_TCC4-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil))
   nil))
 (app_ctx_var_TCC5 0
  (app_ctx_var_TCC5-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (app_ctx_var_subterm_TCC1 0
  (app_ctx_var_subterm_TCC1-1 nil 3580758376 ("" (grind) nil nil)
   ((subterm adt-def-decl "boolean" language nil)) nil))
 (app_ctx_var_subterm_TCC2 0
  (app_ctx_var_subterm_TCC2-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subterm adt-def-decl "boolean" language nil))
   nil))
 (app_ctx_var_subterm_TCC3 0
  (app_ctx_var_subterm_TCC3-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subterm adt-def-decl "boolean" language nil))
   nil))
 (kind_TCC1 0
  (kind_TCC1-1 nil 3580736390 ("" (grind) nil nil)
   ((undefined adt-def-decl "boolean" language nil)) nil))
 (kind_TCC2 0
  (kind_TCC2-1 nil 3580736390 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil))
   nil))
 (kind_TCC3 0
  (kind_TCC3-1 nil 3580736390 ("" (grind) nil nil)
   ((context type-eq-decl nil language nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (kind_nonempty 0
  (kind_nonempty-1 nil 3580824537 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (kind const-decl
          "ε(LAMBDA (s: semantic): KTYPE?(s) OR KCONST?(s) OR KVAR?(s) OR KTHEORY?(s))"
          language nil))
   nil))
 (kind_empty 0
  (kind_empty-1 nil 3580824537 ("" (judgement-tcc) nil nil)
   ((kind const-decl
          "ε(LAMBDA (s: semantic): KTYPE?(s) OR KCONST?(s) OR KVAR?(s) OR KTHEORY?(s))"
          language nil))
   nil))
 (type__TCC1 0
  (type__TCC1-1 nil 3580736390 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil))
   nil))
 (type__TCC2 0
  (type__TCC2-1 nil 3580736390
   ("" (skeep)
    (("" (typepred "dtype(Γ)")
      (("" (expand pretype) (("" (propax) nil nil)) nil)) nil))
    nil)
   ((context type-eq-decl nil language nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dtype shared-adt-accessor-decl
     "[{x: semantic | kconst_def?(x) OR kconst_decl?(x) OR kvar?(x) OR ktype_def?(x)} -> pretype]"
     language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pretype adt-def-decl "boolean" language nil))
   nil))
 (type__TCC3 0
  (type__TCC3-1 nil 3580736390 ("" (grind) nil nil)
   ((undefined adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil))
   nil))
 (type_ktyped 0
  (type_ktyped-1 nil 3580824537
   ("" (skolem-typepred)
    (("" (expand type_)
      (("" (typepred "dtype(Γ!1)")
        (("1" (lift-if)
          (("1" (split -3)
            (("1" (assert) nil nil) ("2" (assert) nil nil)
             ("3" (assert) nil nil))
            nil))
          nil)
         ("2" (flatten) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((type_ const-decl "ε(pretype)" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (dtype shared-adt-accessor-decl
     "[{x: semantic | kconst_def?(x) OR kconst_decl?(x) OR kvar?(x) OR ktype_def?(x)} -> pretype]"
     language nil)
    (context type-eq-decl nil language nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (type_nonktyped 0
  (type_nonktyped-1 nil 3580824537 ("" (judgement-tcc) nil nil)
   ((type_ const-decl "ε(pretype)" language nil)) nil))
 (definition_TCC1 0
  (definition_TCC1-1 nil 3580736390 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil))
   nil))
 (definition_TCC2 0
  (definition_TCC2-1 nil 3580736390
   ("" (skolem-typepred)
    (("" (split -)
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (assert) nil nil) ("4" (assert) nil nil)
       ("5" (assert) nil nil) ("6" (assert) nil nil)
       ("7" (assert) nil nil))
      nil))
    nil)
   ((context type-eq-decl nil language nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (definition_ktype 0
  (definition_ktype-1 nil 3580824537
   ("" (skolem-typepred)
    (("" (split -)
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (expand definition)
        (("3" (typepred "dtype(Γ!1)") (("3" (propax) nil nil)) nil))
        nil)
       ("4" (assert) nil nil) ("5" (assert) nil nil)
       ("6" (assert) nil nil) ("7" (assert) nil nil))
      nil))
    nil)
   ((dtype shared-adt-accessor-decl
     "[{x: semantic | kconst_def?(x) OR kconst_decl?(x) OR kvar?(x) OR ktype_def?(x)} -> pretype]"
     language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (definition const-decl "semantic" language nil)
    (context type-eq-decl nil language nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (definition_kconst 0
  (definition_kconst-1 nil 3580824537
   ("" (skolem-typepred)
    (("" (split -)
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (assert) nil nil) ("4" (assert) nil nil)
       ("5" (assert) nil nil)
       ("6" (expand definition)
        (("6" (typepred "dterm(Γ!1)") (("6" (propax) nil nil)) nil))
        nil)
       ("7" (assert) nil nil))
      nil))
    nil)
   ((dterm adt-accessor-decl "[(kconst_def?) -> preterm]" language nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (definition const-decl "semantic" language nil)
    (context type-eq-decl nil language nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (definition_ktheory 0
  (definition_ktheory-1 nil 3580824537
   ("" (skolem-typepred)
    (("" (split -)
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (assert) nil nil) ("4" (assert) nil nil)
       ("5" (assert) nil nil) ("6" (assert) nil nil)
       ("7" (expand definition)
        (("7" (typepred "dtheory(Γ!1)") (("7" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((dtheory adt-accessor-decl "[(ktheory_def?) -> context]" language
     nil)
    (definition const-decl "semantic" language nil)
    (context type-eq-decl nil language nil)
    (ktheory_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (definition_nondef 0
  (definition_nondef-1 nil 3580824537 ("" (judgement-tcc) nil nil)
   ((definition const-decl "semantic" language nil)) nil))
 (Bumpeq_TCC1 0
  (Bumpeq_TCC1-1 nil 3580736390 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (KTYPE? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype adt-def-decl "boolean" language nil))
   nil)))
(shift
 (uparrow_TCC1 0
  (uparrow_TCC1-1 nil 3580758376
   ("" (typepred "<<")
    (("" (expand strict_well_founded?)
      (("" (expand well_founded?)
        (("" (skeep)
          (("" (inst -2 "LAMBDA (s: semantic): expr(s) AND p(s)")
            (("" (split)
              (("1" (skolem-typepred)
                (("1" (inst 1 "y!1")
                  (("1" (skolem-typepred 1)
                    (("1" (inst -5 "x!1") (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (skolem-typepred)
                (("2" (inst 1 "y!1") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (restrict const-decl "R" restrict nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (expr type-eq-decl nil language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (well_founded? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (uparrow_TCC2 0
  (uparrow_TCC2-1 nil 3580758376 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (name type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC3 0
  (uparrow_TCC3-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC4 0
  (uparrow_TCC4-1 nil 3580758376 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC5 0
  (uparrow_TCC5-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   (nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC6 0
  (uparrow_TCC6-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC7 0
  (uparrow_TCC7-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC8 0
  (uparrow_TCC8-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC9 0
  (uparrow_TCC9-1 nil 3580758376
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (delete 2)
            (("" (rewrite -9)
              (("" (expand pretype +) (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (uparrow_TCC10 0
  (uparrow_TCC10-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC11 0
  (uparrow_TCC11-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC12 0
  (uparrow_TCC12-1 nil 3580758376
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (inst?)
            (("1" (assert)
              (("1" (expand (pretype preterm))
                (("1" (flatten)
                  (("1" (delete -5 -6 -7 -8 -9 -10 1 2 3 4)
                    (("1" (split -4)
                      (("1" (assert) nil nil) ("2" (assert) nil nil)
                       ("3" (assert) nil nil) ("4" (assert) nil nil)
                       ("5" (assert) nil nil) ("6" (assert) nil nil)
                       ("7" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand expr 1)
              (("2" (expand pretype 1)
                (("2" (simplify)
                  (("2" (assert)
                    (("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (uparrow_TCC13 0
  (uparrow_TCC13-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC14 0
  (uparrow_TCC14-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC15 0
  (uparrow_TCC15-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    nil
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC16 0
  (uparrow_TCC16-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (rewrite -9)
      (("" (expand pretype) (("" (propax) nil nil)) nil)) nil))
    nil)
   ((pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC17 0
  (uparrow_TCC17-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC18 0
  (uparrow_TCC18-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC19 0
  (uparrow_TCC19-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand (pretype preterm))
        (("1" (assert)
          (("1" (flatten)
            (("1" (split -4)
              (("1" (assert) nil nil) ("2" (assert) nil nil)
               ("3" (assert) nil nil) ("4" (assert) nil nil)
               ("5" (assert) nil nil) ("6" (assert) nil nil)
               ("7" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand pretype)
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   (nil
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC20 0
  (uparrow_TCC20-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC21 0
  (uparrow_TCC21-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC22 0
  (uparrow_TCC22-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    nil
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC23 0
  (uparrow_TCC23-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    nil
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC24 0
  (uparrow_TCC24-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (name type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC25 0
  (uparrow_TCC25-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC26 0
  (uparrow_TCC26-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC27 0
  (uparrow_TCC27-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC28 0
  (uparrow_TCC28-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC29 0
  (uparrow_TCC29-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC30 0
  (uparrow_TCC30-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC31 0
  (uparrow_TCC31-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC32 0
  (uparrow_TCC32-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC33 0
  (uparrow_TCC33-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC34 0
  (uparrow_TCC34-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC35 0
  (uparrow_TCC35-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC36 0
  (uparrow_TCC36-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   (nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC37 0
  (uparrow_TCC37-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC38 0
  (uparrow_TCC38-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC39 0
  (uparrow_TCC39-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC40 0
  (uparrow_TCC40-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    nil nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC41 0
  (uparrow_TCC41-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC42 0
  (uparrow_TCC42-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC43 0
  (uparrow_TCC43-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC44 0
  (uparrow_TCC44-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC45 0
  (uparrow_TCC45-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC46 0
  (uparrow_TCC46-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC47 0
  (uparrow_TCC47-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC48 0
  (uparrow_TCC48-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC49 0
  (uparrow_TCC49-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC50 0
  (uparrow_TCC50-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -3)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand pretype)
          (("2" (expand preterm)
            (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC51 0
  (uparrow_TCC51-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC52 0
  (uparrow_TCC52-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC53 0
  (uparrow_TCC53-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC54 0
  (uparrow_TCC54-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -3)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC55 0
  (uparrow_TCC55-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (uparrow_TCC56 0
  (uparrow_TCC56-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (uparrow_TCC57 0
  (uparrow_TCC57-1 nil 3580759312
   ("" (skeep) (("" (typepred "↑") (("" (grind) nil nil)) nil)) nil)
   ((↑ def-decl
     "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
     shift nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)))
(subst
   (subst_TCC1 0
    (subst_TCC1-1 nil 3580758376
     ("" (typepred "<<")
      (("" (expand strict_well_founded?)
        (("" (expand well_founded?)
          (("" (expand restrict)
            (("" (skeep)
              (("" (inst -2 "LAMBDA (s: semantic): expr(s) AND p(s)")
                (("" (split)
                  (("1" (skolem-typepred)
                    (("1" (inst 1 "y!1")
                      (("1" (skolem-typepred 1)
                        (("1" (inst -5 "x!1") nil nil)) nil))
                      nil))
                    nil)
                   ("2" (skolem-typepred -2)
                    (("2" (inst 1 "y!1")
                      (("2" (split 1)
                        (("1" (propax) nil nil) ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ((restrict const-decl "R" restrict nil)
      (AND const-decl "[bool, bool -> bool]" booleans nil)
      (OR const-decl "[bool, bool -> bool]" booleans nil)
      (pretype adt-def-decl "boolean" language nil)
      (preterm adt-def-decl "boolean" language nil)
      (expr type-eq-decl nil language nil)
      (well_founded? const-decl "bool" orders nil)
      (boolean nonempty-type-decl nil booleans nil)
      (bool nonempty-type-eq-decl nil booleans nil)
      (NOT const-decl "[bool -> bool]" booleans nil)
      (semantic type-decl nil language nil)
      (pred type-eq-decl nil defined_types nil)
      (strict_well_founded? const-decl "bool" orders nil)
      (<< adt-def-decl "(strict_well_founded?[semantic])" language
       nil))
     shostak))
   (subst_TCC2 0
    (subst_TCC2-1 nil 3580758376
     ("" (skosimp* :preds? t)
      (("" (expand ("preterm" "pretype"))
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil)
     ((name type-eq-decl nil language nil)
      (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
      (symbol? adt-recognizer-decl "[semantic -> boolean]" language
       nil)
      (expr type-eq-decl nil language nil)
      (preterm adt-def-decl "boolean" language nil)
      (pretype adt-def-decl "boolean" language nil)
      (semantic type-decl nil language nil)
      (OR const-decl "[bool, bool -> bool]" booleans nil)
      (NOT const-decl "[bool -> bool]" booleans nil)
      (bool nonempty-type-eq-decl nil booleans nil)
      (boolean nonempty-type-decl nil booleans nil))
     shostak))
   (subst_TCC3 0
    (subst_TCC3-1 nil 3580758376 ("" (semantic-tcc))
     ((preterm type-eq-decl nil language nil)
      (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
      (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
      (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
      (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
      (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
      (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
      (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
      (pretype type-eq-decl nil language nil)
      (subtype? adt-recognizer-decl "[semantic -> boolean]" language
                nil)
      (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
      (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
      (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
      (expr type-eq-decl nil language nil)
      (preterm adt-def-decl "boolean" language nil)
      (pretype adt-def-decl "boolean" language nil)
      (semantic type-decl nil language nil)
      (OR const-decl "[bool, bool -> bool]" booleans nil)
      (NOT const-decl "[bool -> bool]" booleans nil)
      (bool nonempty-type-eq-decl nil booleans nil)
      (boolean nonempty-type-decl nil booleans nil))
     shostak))
  (subst_TCC4 0
   (subst_TCC4-1 nil 3580758376 ("" (semantic-tcc))
    ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
     (restrict const-decl "R" restrict nil))
    shostak)) (subst_TCC5 0
               (subst_TCC5-1 nil 3580758376 ("" (semantic-tcc))
                ((pretype type-eq-decl nil language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (strict_well_founded? const-decl "bool" orders nil)
                 (pred type-eq-decl nil defined_types nil)
                 (restrict const-decl "R" restrict nil)
                 (preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (T!1 skolem-const-decl "pretype" subst nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (↑ def-decl
                  "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
                  shift nil))
                shostak))
  (subst_TCC6 0
   (subst_TCC6-1 nil 3580758376 ("" (semantic-tcc))
    ((preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pretype type-eq-decl nil language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    shostak)) (subst_TCC7 0
               (subst_TCC7-1 nil 3580758376 ("" (semantic-tcc))
                ((pretype type-eq-decl nil language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (number nonempty-type-decl nil numbers nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (>= const-decl "bool" reals nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (↑ def-decl
                  "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
                  shift nil))
                shostak))
  (subst_TCC8 0
   (subst_TCC8-1 nil 3580758376 ("" (semantic-tcc))
    ((pretype type-eq-decl nil language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (↑ def-decl
      "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
      shift nil))
    shostak)) (subst_TCC9 0
               (subst_TCC9-1 nil 3580758376 ("" (semantic-tcc))
                ((<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (restrict const-decl "R" restrict nil))
                shostak))
  (subst_TCC10 0
   (subst_TCC10-1 nil 3580758376 ("" (semantic-tcc))
    ((pretype type-eq-decl nil language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (restrict const-decl "R" restrict nil)
     (preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (a!1 skolem-const-decl "preterm" subst nil)
     (t!1 skolem-const-decl "preterm" subst nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (↑ def-decl
      "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
      shift nil))
    shostak)) (subst_TCC11 0
               (subst_TCC11-1 nil 3580758376 ("" (semantic-tcc))
                ((pretype type-eq-decl nil language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (strict_well_founded? const-decl "bool" orders nil)
                 (pred type-eq-decl nil defined_types nil)
                 (restrict const-decl "R" restrict nil)
                 (preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (↑ def-decl
                  "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
                  shift nil))
                shostak))
  (subst_TCC12 0
   (subst_TCC12-1 nil 3580758376 ("" (semantic-tcc))
    ((pretype type-eq-decl nil language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    shostak)) (subst_TCC13 0
               (subst_TCC13-1 nil 3580758376 ("" (semantic-tcc))
                ((<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (restrict const-decl "R" restrict nil))
                shostak))
  (subst_TCC14 0
   (subst_TCC14-1 nil 3580758376 ("" (semantic-tcc))
    ((pretype type-eq-decl nil language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (restrict const-decl "R" restrict nil)
     (preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (A!1 skolem-const-decl "pretype" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (↑ def-decl
      "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
      shift nil))
    shostak)) (subst_TCC15 0
               (subst_TCC15-1 nil 3580758376 ("" (semantic-tcc))
                ((pretype type-eq-decl nil language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil))
                shostak))
  (subst_TCC16 0
   (subst_TCC16-1 nil 3580758376 ("" (semantic-tcc))
    ((pretype type-eq-decl nil language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (↑ def-decl
      "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
      shift nil))
    shostak)) (subst_TCC17 0
               (subst_TCC17-1 nil 3580758376 ("" (semantic-tcc))
                ((pretype type-eq-decl nil language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (number nonempty-type-decl nil numbers nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (>= const-decl "bool" reals nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (↑ def-decl
                  "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
                  shift nil))
                shostak))
  (subst_TCC18 0
   (subst_TCC18-1 nil 3580758376 ("" (semantic-tcc))
    ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
     (restrict const-decl "R" restrict nil))
    shostak)) (subst_TCC19 0
               (subst_TCC19-1 nil 3580758376 ("" (semantic-tcc))
                ((pretype type-eq-decl nil language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (strict_well_founded? const-decl "bool" orders nil)
                 (pred type-eq-decl nil defined_types nil)
                 (restrict const-decl "R" restrict nil)
                 (preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (posint_plus_nnint_is_posint application-judgement
                  "posint" integers nil)
                 (B!1 skolem-const-decl "pretype" subst nil)
                 (t!1 skolem-const-decl "preterm" subst nil)
                 (+ const-decl "[numfield, numfield -> numfield]"
                    number_fields nil)
                 (numfield nonempty-type-eq-decl nil number_fields nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (nnint_plus_posint_is_posint application-judgement
                  "posint" integers nil)
                 (↑ def-decl
                  "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
                  shift nil))
                shostak))
  (subst_TCC20 0
   (subst_TCC20-1 nil 3580758376 ("" (semantic-tcc))
    ((pretype type-eq-decl nil language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (restrict const-decl "R" restrict nil)
     (preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (⌈⌉ macro-decl "pretype" language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (↑ def-decl
      "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
      shift nil))
    shostak)) (subst_TCC21 0
               (subst_TCC21-1 nil 3580758376 ("" (semantic-tcc))
                ((pretype type-eq-decl nil language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil))
                shostak))
  (subst_TCC22 0
   (subst_TCC22-1 nil 3580758376 ("" (semantic-tcc))
    ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
     (restrict const-decl "R" restrict nil))
    shostak)) (subst_TCC23 0
               (subst_TCC23-1 nil 3580758376 ("" (semantic-tcc))
                ((pretype type-eq-decl nil language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (strict_well_founded? const-decl "bool" orders nil)
                 (pred type-eq-decl nil defined_types nil)
                 (restrict const-decl "R" restrict nil)
                 (preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (A!1 skolem-const-decl "pretype" subst nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (↑ def-decl
                  "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
                  shift nil))
                shostak))
  (subst_TCC24 0
   (subst_TCC24-1 nil 3580758376 ("" (semantic-tcc))
    ((pretype type-eq-decl nil language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    shostak)) (subst_TCC25 0
               (subst_TCC25-1 nil 3580758376 ("" (semantic-tcc))
                ((pretype type-eq-decl nil language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (number nonempty-type-decl nil numbers nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (>= const-decl "bool" reals nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (↑ def-decl
                  "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
                  shift nil))
                shostak))
  (subst_TCC26 0
   (subst_TCC26-1 nil 3580758376 ("" (semantic-tcc))
    ((pretype type-eq-decl nil language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (↑ def-decl
      "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
      shift nil))
    shostak)) (subst_TCC27 0
               (subst_TCC27-1 nil 3580758376 ("" (semantic-tcc))
                ((<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (restrict const-decl "R" restrict nil))
                shostak))
  (subst_TCC28 0
   (subst_TCC28-1 nil 3580758376 ("" (semantic-tcc))
    ((pretype type-eq-decl nil language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (restrict const-decl "R" restrict nil)
     (preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (B!1 skolem-const-decl "pretype" subst nil)
     (t!1 skolem-const-decl "preterm" subst nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (↑ def-decl
      "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
      shift nil))
    shostak)) (subst_TCC29 0
               (subst_TCC29-1 nil 3580758376 ("" (semantic-tcc))
                ((pretype type-eq-decl nil language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (strict_well_founded? const-decl "bool" orders nil)
                 (pred type-eq-decl nil defined_types nil)
                 (restrict const-decl "R" restrict nil)
                 (preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (⌈⌉ macro-decl "pretype" language nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (↑ def-decl
                  "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
                  shift nil))
                shostak))
  (subst_TCC30 0
   (subst_TCC30-1 nil 3580758376 ("" (semantic-tcc))
    ((name type-eq-decl nil language nil)
     (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    shostak)) (subst_TCC31 0
               (subst_TCC31-1 nil 3580758376 ("" (semantic-tcc))
                ((nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (>= const-decl "bool" reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (int_minus_int_is_int application-judgement "int"
                  integers nil)
                 (real_gt_is_strict_total_order name-judgement
                  "(strict_total_order?[real])" real_props nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil))
                shostak))
  (subst_TCC32 0
   (subst_TCC32-1 nil 3580758376 ("" (semantic-tcc))
    ((nat nonempty-type-eq-decl nil naturalnumbers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (>= const-decl "bool" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (real_gt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil))
    shostak)) (subst_TCC33 0
               (subst_TCC33-1 nil 3580758376 ("" (semantic-tcc))
                ((preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (>= const-decl "bool" reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (real_gt_is_strict_total_order name-judgement
                  "(strict_total_order?[real])" real_props nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (↑ def-decl
                  "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
                  shift nil))
                shostak))
  (subst_TCC34 0
   (subst_TCC34-1 nil 3580758376 ("" (semantic-tcc))
    ((nat nonempty-type-eq-decl nil naturalnumbers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (>= const-decl "bool" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (real_gt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil))
    shostak)) (subst_TCC35 0
               (subst_TCC35-1 nil 3580758376 ("" (semantic-tcc))
                ((preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil))
                shostak))
  (subst_TCC36 0
   (subst_TCC36-1 nil 3580758376 ("" (semantic-tcc))
    ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
     (restrict const-decl "R" restrict nil))
    shostak)) (subst_TCC37 0
               (subst_TCC37-1 nil 3580758376 ("" (semantic-tcc))
                ((AND const-decl "[bool, bool -> bool]" booleans nil)
                 (<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (strict_well_founded? const-decl "bool" orders nil)
                 (pred type-eq-decl nil defined_types nil)
                 (restrict const-decl "R" restrict nil)
                 (preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (f!1 skolem-const-decl "preterm" subst nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (↑ def-decl
                  "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
                  shift nil))
                shostak))
  (subst_TCC38 0
   (subst_TCC38-1 nil 3580758376 ("" (semantic-tcc))
    ((preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    shostak)) (subst_TCC39 0
               (subst_TCC39-1 nil 3580758376 ("" (semantic-tcc))
                ((<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (restrict const-decl "R" restrict nil))
                shostak))
  (subst_TCC40 0
   (subst_TCC40-1 nil 3580758376 ("" (semantic-tcc))
    ((AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (restrict const-decl "R" restrict nil)
     (preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (a!1 skolem-const-decl "preterm" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (↑ def-decl
      "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
      shift nil))
    shostak)) (subst_TCC41 0
               (subst_TCC41-1 nil 3580758376 ("" (semantic-tcc))
                ((AND const-decl "[bool, bool -> bool]" booleans nil)
                 (<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (strict_well_founded? const-decl "bool" orders nil)
                 (pred type-eq-decl nil defined_types nil)
                 (restrict const-decl "R" restrict nil)
                 (preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (↑ def-decl
                  "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
                  shift nil))
                shostak))
  (subst_TCC42 0
   (subst_TCC42-1 nil 3580758376 ("" (semantic-tcc))
    ((preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pretype type-eq-decl nil language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    shostak)) (subst_TCC43 0
               (subst_TCC43-1 nil 3580758376 ("" (semantic-tcc))
                ((<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (restrict const-decl "R" restrict nil))
                shostak))
  (subst_TCC44 0
   (subst_TCC44-1 nil 3580758376 ("" (semantic-tcc))
    ((pretype type-eq-decl nil language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (restrict const-decl "R" restrict nil)
     (preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (T!1 skolem-const-decl "pretype" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (↑ def-decl
      "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
      shift nil))
    shostak)) (subst_TCC45 0
               (subst_TCC45-1 nil 3580758376 ("" (semantic-tcc))
                ((preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pretype type-eq-decl nil language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil))
                shostak))
  (subst_TCC46 0
   (subst_TCC46-1 nil 3580758376 ("" (semantic-tcc))
    ((pretype type-eq-decl nil language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (↑ def-decl
      "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
      shift nil))
    shostak)) (subst_TCC47 0
               (subst_TCC47-1 nil 3580758376 ("" (semantic-tcc))
                ((pretype type-eq-decl nil language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (number nonempty-type-decl nil numbers nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (>= const-decl "bool" reals nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (↑ def-decl
                  "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
                  shift nil))
                shostak))
  (subst_TCC48 0
   (subst_TCC48-1 nil 3580758376 ("" (semantic-tcc))
    ((<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
     (restrict const-decl "R" restrict nil))
    shostak)) (subst_TCC49 0
               (subst_TCC49-1 nil 3580758376
                ("" (skosimp* :preds? t)
                 (("" (assert)
                   (("" (typepred "t!1 ↑ (1, 0)")
                     (("" (assert)
                       (("" (inst?)
                         (("1" (assert)
                           (("1" (flatten)
                             (("1" (hide-all-but (-3 -8))
                               (("1" (bddsimp) nil nil)) nil))
                             nil))
                           nil)
                          ("2" (flatten)
                           (("2" (assert)
                             (("2" (flatten)
                               (("2"
                                 (hide-all-but (-1 -5))
                                 (("2" (bddsimp) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("3" (flatten) (("3" (assert) nil nil)) nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ((nnint_plus_posint_is_posint application-judgement
                  "posint" integers nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (posint_plus_nnint_is_posint application-judgement
                  "posint" integers nil)
                 (numfield nonempty-type-eq-decl nil number_fields nil)
                 (+ const-decl "[numfield, numfield -> numfield]"
                    number_fields nil)
                 (t!1 skolem-const-decl "preterm" subst nil)
                 (a!1 skolem-const-decl "preterm" subst nil)
                 (↑ def-decl
                  "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
                  shift nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (semantic type-decl nil language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (expr type-eq-decl nil language nil)
                 (number nonempty-type-decl nil numbers nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (>= const-decl "bool" reals nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (preterm type-eq-decl nil language nil)
                 (restrict const-decl "R" restrict nil)
                 (pred type-eq-decl nil defined_types nil)
                 (strict_well_founded? const-decl "bool" orders nil)
                 (<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (pretype type-eq-decl nil language nil))
                shostak))
  (subst_TCC50 0
   (subst_TCC50-1 nil 3580758376 ("" (semantic-tcc))
    ((pretype type-eq-decl nil language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (restrict const-decl "R" restrict nil)
     (preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (↑ def-decl
      "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
      shift nil))
    shostak)) (subst_TCC51 0
               (subst_TCC51-1 nil 3580758376 ("" (semantic-tcc))
                ((preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil))
                shostak))
  (subst_TCC52 0
   (subst_TCC52-1 nil 3580758376
    ("" (skeep)
     (("" (rewrite -1)
       (("" (expand (restrict <<)) (("" (propax) nil nil)) nil)) nil))
     nil)
    ((restrict const-decl "R" restrict nil)
     (<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
    shostak)) (subst_TCC53 0
               (subst_TCC53-1 nil 3580758376 ("" (semantic-tcc))
                ((AND const-decl "[bool, bool -> bool]" booleans nil)
                 (<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (strict_well_founded? const-decl "bool" orders nil)
                 (pred type-eq-decl nil defined_types nil)
                 (restrict const-decl "R" restrict nil)
                 (preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (a!1 skolem-const-decl "preterm" subst nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (↑ def-decl
                  "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
                  shift nil))
                shostak))
  (subst_TCC54 0
   (subst_TCC54-1 nil 3580758376 ("" (semantic-tcc))
    ((preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    shostak)) (subst_TCC55 0
               (subst_TCC55-1 nil 3580758376 ("" (semantic-tcc))
                ((<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (restrict const-decl "R" restrict nil))
                shostak))
  (subst_TCC56 0
   (subst_TCC56-1 nil 3580763234 ("" (semantic-tcc))
    ((AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (restrict const-decl "R" restrict nil)
     (preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (b!1 skolem-const-decl "preterm" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (↑ def-decl
      "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
      shift nil))
    shostak)) (subst_TCC57 0
               (subst_TCC57-1 nil 3580763234 ("" (semantic-tcc))
                ((AND const-decl "[bool, bool -> bool]" booleans nil)
                 (<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (strict_well_founded? const-decl "bool" orders nil)
                 (pred type-eq-decl nil defined_types nil)
                 (restrict const-decl "R" restrict nil)
                 (preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (〈〉 macro-decl "preterm" language nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (↑ def-decl
                  "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
                  shift nil))
                shostak))
  (subst_TCC58 0
   (subst_TCC58-1 nil 3580763234 ("" (semantic-tcc))
    ((preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    shostak)) (subst_TCC59 0
               (subst_TCC59-1 nil 3580763234 ("" (semantic-tcc))
                ((<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (restrict const-decl "R" restrict nil))
                shostak))
  (subst_TCC60 0
   (subst_TCC60-1 nil 3580763234 ("" (semantic-tcc))
    ((AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (restrict const-decl "R" restrict nil)
     (preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (a!1 skolem-const-decl "preterm" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (↑ def-decl
      "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
      shift nil))
    shostak)) (subst_TCC61 0
               (subst_TCC61-1 nil 3580763234 ("" (semantic-tcc))
                ((AND const-decl "[bool, bool -> bool]" booleans nil)
                 (<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (strict_well_founded? const-decl "bool" orders nil)
                 (pred type-eq-decl nil defined_types nil)
                 (restrict const-decl "R" restrict nil)
                 (preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (↑ def-decl
                  "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
                  shift nil))
                shostak))
  (subst_TCC62 0
   (subst_TCC62-1 nil 3580763234 ("" (semantic-tcc))
    ((preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    shostak)) (subst_TCC63 0
               (subst_TCC63-1 nil 3580763234 ("" (semantic-tcc))
                ((<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (restrict const-decl "R" restrict nil))
                shostak))
  (subst_TCC64 0
   (subst_TCC64-1 nil 3580824537 ("" (semantic-tcc))
    ((AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (restrict const-decl "R" restrict nil)
     (preterm type-eq-decl nil language nil)
     (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (a!1 skolem-const-decl "preterm" subst nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
     (subtype? adt-recognizer-decl "[semantic -> boolean]" language
               nil)
     (↑ def-decl
      "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
      shift nil))
    shostak)) (subst_TCC65 0
               (subst_TCC65-1 nil 3580824537 ("" (semantic-tcc))
                ((AND const-decl "[bool, bool -> bool]" booleans nil)
                 (<< adt-def-decl "(strict_well_founded?[semantic])"
                  language nil)
                 (strict_well_founded? const-decl "bool" orders nil)
                 (pred type-eq-decl nil defined_types nil)
                 (restrict const-decl "R" restrict nil)
                 (preterm type-eq-decl nil language nil)
                 (rproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lproj? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (pair? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (lam? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (app? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (var? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (const? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (expr type-eq-decl nil language nil)
                 (preterm adt-def-decl "boolean" language nil)
                 (pretype adt-def-decl "boolean" language nil)
                 (semantic type-decl nil language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (base? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (fun? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (prod? adt-recognizer-decl "[semantic -> boolean]"
                  language nil)
                 (subtype? adt-recognizer-decl "[semantic -> boolean]"
                           language nil)
                 (↑ def-decl
                  "{S: semantic | (pretype(e) AND pretype(S)) OR (preterm(e) AND preterm(S))}"
                  shift nil))
                shostak))
  (subst_TCC66 0
   (subst_TCC66-1 nil 3580826180 ("" (semantic-tcc))
    ((expr type-eq-decl nil language nil)
     (preterm adt-def-decl "boolean" language nil)
     (pretype adt-def-decl "boolean" language nil)
     (semantic type-decl nil language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    shostak)))

