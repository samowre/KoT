weight: THEORY
BEGIN
  IMPORTING language
  IMPORTING ordinals_props

  Γ: VAR (theory_def?)
  Sig: VAR (stheory?)
  U: VAR syntaxic
  x: VAR nat
  s: VAR signature
% weight(Γ, η(Γ, m, σ)(def(def(Γ(m)))(x))
%     = weight(Γ ++ rest(interp(def(Γ(m)) ↑ (m + 1), σ), x), def(Γ(m))(x)

  
% Contraintes:
%  - weight(rest(Γ, i), def(Γ(i))) < weight(Γ, v(i))
%  - weight(Γ, σ(x)) < weight(Γ, dot(m, σ, x))
%  - weight(Γ, η(Γ, m, σ)(def(def(Γ(m))(x))) < weight(Γ, dot(m, σ, x))
%       ~= weight(Γ ++ interp(def(Γ(m)), σ)
%
%
%
%
%
%

  ;*(x: ordinal, n: nat): ordinal =
    CASES x OF
      zero: zero
    , add(i, u, v): IF n = 0 THEN zero ELSE add(i * n, u, v) ENDIF
    ENDCASES

  max(len: nat, f: [below[len] -> ordinal]): RECURSIVE
    { x: ordinal | len = 0 AND x = zero OR EXISTS (i: below[len]): x = f(i) } =
    IF len = 0 THEN zero
    ELSE max(f(len - 1), max(len - 1, LAMBDA (x: below[len - 1]): f(x))) ENDIF
  MEASURE len

  weight(Sig, U, (s | pretau(Sig)(U)(s))): RECURSIVE ordinal =
    CASES U OF
      v(i):
        IF (sconst_def?(Sig(i)) OR stype_def?(Sig(i)))
	  THEN add(length(Sig) - i, add(1, zero, zero), zero)
	  ELSE zero
	ENDIF
    , dot(m, sp, x): weight(Sig, m, sp) + weight(sp, x, s)
    , interp(m, σ):
        LET i = i(m), 
	    w = max(σ`length, LAMBDA (x: below[σ`length]): weight(Sig, σ(x), s(x))) IN % = weght(Sig, σ)
	w * (length(Sig) - i)
	
    , fun(A, B): max(weight(Sig, A, s), weight(Sig ++ k(sconst_def), B, s))
    , prod(A, B): max(weight(Sig, A, s), weight(Sig ++ k(sconst_def), B, s))
    , subtype(T, a): max(weight(Sig, T, s), weight(Sig ++ k(sconst_def), a, sconst_def))

    , app(f, a): max(weight(Sig, f, s), weight(Sig, a, s))
    , lam(T, a): max(weight(Sig, T, stype_def), weight(Sig ++ k(sconst_def), a, s))
    , pair(a, b): max(weight(Sig, a, s), weight(Sig, b, s))
    , lproj(a): weight(Sig, a, s)
    , rproj(a): weight(Sig, a, s)

    , type_decl: zero
    , type_var: zero
    , type_def(T): weight(Sig, T, s)
    , const_decl(T): weight(Sig, T, stype_def)
    , const_var(T): weight(Sig, T, stype_def)
    , const_def(T, a): max(weight(Sig, T, stype_def), weight(Sig, a, s))
    , theory_def(Θ): max(Θ`length, LAMBDA (x: below[Θ`length]): weight(Sig ++ signature(rest(U, x)), Θ(x), s(x)))

    , ikeep: zero
    , itype(T): weight(Sig, T, s)
    , iterm(a): weight(Sig, a, s)
    ENDCASES
  MEASURE size(U)



  %weight_length: THEOREM FORALL (Δ: pretheory(Γ)):
  %  semantic?(Γ ++ Δ)(U) AND (FORALL (x: below[run_map(Δ)`length]): const_var?(Δ(x)) OR type_var?(Δ(x))) AND NOT map?(U) IMPLIES
  %    weight(Γ ++ Δ, U) <= IF length(Γ) > 0 THEN add(length(Γ), 1, zero) ELSE zero ENDIF

  % precontext?(Γ) => precontext(rest(Γ, x))
  % precontext?(Γ) => pretype?(rest(Γ, x), type_(Γ(x)))
  % precontext?(Γ) => pre{stuff}?(rest(Γ, x), def(Γ(x)))

  weight_definition: THEOREM 
    LET Sig = signature(Γ) in
    pretau(sempty)(Γ)(Sig) AND
    x ∈ Γ AND (type_def?(Γ(x)) OR const_def?(Γ(x))) IMPLIES
    weight(rest(Sig, x), Γ(x), Sig(x)) < weight(Sig, v(x), Sig(x))
END weight
