(trace_resolution (member_numpred_nzint 0 (member_numpred_nzint-1 nil 3483298163 ("" (induct kk) (("1" (grind) nil nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (skolem-typepred) (("2" (expand member 2) (("2" (inst -3 k!1) (("2" (assert) (("2" (replace -3) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((NOT const-decl "[bool -> bool]" booleans nil) (list_induction formula-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (member def-decl "bool" list_props nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (list type-decl nil list_adt nil)) shostak)) (subset_numpred_nzint 0 (subset_numpred_nzint-1 nil 3483298243 ("" (induct kk) (("1" (grind) nil nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (skolem-typepred) (("2" (expand subset 2) (("2" (inst -3 ll!1) (("2" (replace -3) (("2" (use member_numpred_nzint) (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((NOT const-decl "[bool -> bool]" booleans nil) (member_numpred_nzint formula-decl nil trace_resolution nil) (list_induction formula-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (subset def-decl "bool" minlist nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (list type-decl nil list_adt nil)) shostak)) (tr_neg_TCC1 0 (tr_neg_TCC1-1 nil 3483207953 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (tr_literal? const-decl "bool" trace_resolution nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil)) (member_tr_lit_member_nzint 0 (member_tr_lit_member_nzint-1 nil 3483143848 ("" (induct ll) (("1" (grind) nil nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (skolem-typepred) (("2" (expand member 2) (("2" (case "k!1 = cons1_var!1") (("1" (grind) nil nil) ("2" (assert) (("2" (inst -5 k!1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((NOT const-decl "[bool -> bool]" booleans nil) (list_induction formula-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (tr_literal? const-decl "bool" trace_resolution nil) (member def-decl "bool" list_props nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil)) shostak)) (subset_tr_lit_subset_nzint 0 (subset_tr_lit_subset_nzint-1 nil 3483143971 ("" (induct kk) (("1" (grind) nil nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (skolem-typepred) (("2" (expand subset 2) (("2" (case "member(cons1_var!1, ll!1)") (("1" (lemma member_tr_lit_member_nzint) (("1" (inst -1 cons1_var!1 ll!1) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (flatten) (("2" (lemma member_tr_lit_member_nzint) (("2" (inst -1 cons1_var!1 ll!1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((NOT const-decl "[bool -> bool]" booleans nil) (member def-decl "bool" list_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (member_tr_lit_member_nzint formula-decl nil trace_resolution nil) (list_induction formula-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (tr_literal? const-decl "bool" trace_resolution nil) (subset def-decl "bool" minlist nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil)) shostak)) (index_TCC1 0 (index_TCC1-1 nil 3482675376 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil)) nil)) (index_TCC2 0 (index_TCC2-1 nil 3482675376 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil)) (index_inj 0 (index_inj-1 nil 3483128522 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (injective? const-decl "bool" functions nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) shostak)) (IMP_sortedlist_TCC1 0 (IMP_sortedlist_TCC1-1 nil 3482675376 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (injective? const-decl "bool" functions nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil)) (tr_clause_prop_TCC1 0 (tr_clause_prop_TCC1-1 nil 3482675376 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil)) nil)) (tr_clause_prop_TCC2 0 (tr_clause_prop_TCC2-1 nil 3482675376 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil)) nil)) (tr_clause_prop 0 (tr_clause_prop-1 nil 3483144141 ("" (skolem-typepred) (("" (expand tr_clause?) (("" (use sorted_prop) nil nil)) nil)) nil) ((tr_clause? const-decl "bool" trace_resolution nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (sorted_prop formula-decl nil sortedlist nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) shostak)) (cons_tr_clause 0 (cons_tr_clause-1 nil 3483144192 ("" (skolem-typepred) (("" (use tr_clause_prop) (("" (assert) (("" (flatten) (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((tr_clause_prop formula-decl nil trace_resolution nil) (sorted? def-decl "bool" sortedlist nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) shostak)) (tr_clause_true?_TCC1 0 (tr_clause_true?_TCC1-1 nil 3482783478 ("" (skolem-typepred) (("" (flatten) (("" (use cons_tr_clause) (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)) nil) ((sorted? def-decl "bool" sortedlist nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (cons_tr_clause formula-decl nil trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil)) (tr_clause_true?_TCC2 0 (tr_clause_true?_TCC2-1 nil 3482783478 ("" (skolem-typepred) (("" (flatten) (("" (hide -1 -4) (("" (expand tr_clause? -1) (("" (lemma sorted_prop) (("" (inst -1 cl!1) (("" (flatten) (("" (delete -2) (("" (assert) (("" (split -1) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sorted_contains def-decl "bool" sortedlist nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (sorted? def-decl "bool" sortedlist nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (sorted_prop formula-decl nil sortedlist nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil)) (tr_clause_true?_TCC3 0 (tr_clause_true?_TCC3-1 nil 3482783478 ("" (skolem!) (("" (flatten) (("" (typepred cl!1) (("" (hide -1) (("" (use sorted_prop) (("" (expand tr_clause? -2) (("" (assert) (("" (delete 1) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (sorted? def-decl "bool" sortedlist nil) (length def-decl "nat" list_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (sorted_prop formula-decl nil sortedlist nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil)) nil)) (clause_true_lemma 0 (clause_true_lemma-1 nil 3483144275 ("" (induct cl) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skolem-typepred) (("3" (flatten) (("3" (hide -2) (("3" (lemma tr_clause_prop) (("3" (inst -1 "cons(cons1_var!1, cons2_var!1)") (("3" (assert) (("3" (case "tr_clause?(cons2_var!1)") (("1" (assert) (("1" (expand tr_clause_true? 2) (("1" (case "sorted_contains(tr_neg(cons1_var!1), cons2_var!1) OR
        tr_clause_true?(cons2_var!1)") (("1" (replace -1) (("1" (split -1) (("1" (use contains_lemma) (("1" (replace -2) (("1" (inst 2 "cons1_var!1") (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (replace -1) (("2" (skolem-typepred) (("2" (inst 2 l!1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (replace 1) (("2" (assert) (("2" (skolem-typepred) (("2" (use contains_lemma) (("2" (rewrite -1) (("2" (flatten) (("2" (expand member -7) (("2" (expand member -8) (("2" (replace 3) (("2" (assert) (("2" (split -6) (("1" (rewrite -1) (("1" (split -6) (("1" (expand tr_neg -1) (("1" (grind) nil nil)) nil) ("2" (propax) nil nil)) nil)) nil) ("2" (split -7) (("1" (case "l!1 = tr_neg(cons1_var!1)") (("1" (rewrite -1) nil nil) ("2" (expand tr_neg) (("2" (assert) nil nil)) nil)) nil) ("2" (inst 5 l!1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (use index_inj) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((NOT const-decl "[bool -> bool]" booleans nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (index_inj formula-decl nil trace_resolution nil) (contains_lemma formula-decl nil sortedlist nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (injective? const-decl "bool" functions nil) (sorted_contains def-decl "bool" sortedlist nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (tr_clause_prop formula-decl nil trace_resolution nil) (sorted? def-decl "bool" sortedlist nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" trace_resolution nil) (list_induction formula-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (member def-decl "bool" list_props nil) (tr_clause_true? def-decl "bool" trace_resolution nil) (= const-decl "[T, T -> boolean]" equalities nil) (tr_clause? const-decl "bool" trace_resolution nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil)) shostak)) (delete_pivot_TCC1 0 (delete_pivot_TCC1-1 nil 3482675376 ("" (subtype-tcc) (("" (grind) nil nil)) nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (member def-decl "bool" list_props nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil)) (delete_pivot_TCC2 0 (delete_pivot_TCC2-1 nil 3482675376 ("" (skolem-typepred) (("" (flatten) (("" (split 2) (("1" (typepred "remove[(tr_literal?), index]
                     (tr_neg(pivot!1),
                      remove[(tr_literal?), index](pivot!1, ck!1))") (("1" (expand tr_clause? 1) (("1" (propax) nil nil)) nil) ("2" (lemma index_inj) (("2" (grind) nil nil)) nil)) nil) ("2" (skolem-typepred) (("2" (typepred "remove[(tr_literal?), index]
                     (tr_neg(pivot!1),
                      remove[(tr_literal?), index](pivot!1, ck!1))") (("1" (inst -3 l!1) (("1" (split 1) (("1" (flatten) (("1" (assert) (("1" (flatten) (("1" (typepred "remove[(tr_literal?), index](pivot!1, ck!1)") (("1" (hide -5 -10) (("1" (hide -1) (("1" (hide -6) (("1" (inst -2 l!1) (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (hide -7 -2) (("2" (case "index(l!1) = index(tr_neg(pivot!1))") (("1" (use index_inj) (("1" (expand injective?) (("1" (inst -1 l!1 "tr_neg(pivot!1)") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide -3) (("2" (typepred "remove[(tr_literal?), index](pivot!1, ck!1)") (("2" (inst -3 l!1) (("2" (hide -1) (("2" (assert) (("2" (lemma index_inj) (("2" (expand injective?) (("2" (inst -1 l!1 "pivot!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use index_inj) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((remove def-decl "{sBB |
         FORALL f:
           member(f, sBB) <=> (NOT key(f) = key(e)) AND member(f, sAA)}" sortedlist nil) (= const-decl "[T, T -> boolean]" equalities nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (sorted? def-decl "bool" sortedlist nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (injective? const-decl "bool" functions nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (index_inj formula-decl nil trace_resolution nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (member def-decl "bool" list_props nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil)) (exist_pivot?_TCC1 0 (exist_pivot?_TCC1-1 nil 3482760987 ("" (subtype-tcc) (("" (grind) nil nil)) nil) ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (sorted? def-decl "bool" sortedlist nil) (member def-decl "bool" list_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil)) nil)) (exist_pivot?_TCC2 0 (exist_pivot?_TCC2-1 nil 3482760987 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (sorted? def-decl "bool" sortedlist nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil)) nil)) (exist_lemma 0 (exist_lemma-1 nil 3482764467 ("" (induct ck) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skolem-typepred) (("3" (flatten) (("3" (skolem-typepred) (("3" (split 2) (("1" (flatten) (("1" (hide -2 -5) (("1" (expand exist_pivot? -1) (("1" (split -1) (("1" (inst 1 cons1_var!1) (("1" (grind) nil nil)) nil) ("2" (lemma cons_tr_clause) (("2" (inst -1 "cons(cons1_var!1, cons2_var!1)") (("2" (assert) (("2" (inst -5 cl!1) (("2" (assert) (("2" (skolem-typepred) (("2" (inst 1 k!1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide -1 -4) (("2" (lemma cons_tr_clause) (("2" (inst -1 "cons(cons1_var!1, cons2_var!1)") (("2" (assert) (("2" (flatten) (("2" (skolem-typepred) (("2" (flatten) (("2" (expand member -3) (("2" (split -3) (("1" (expand exist_pivot? 2) (("1" (flatten) (("1" (grind) nil nil)) nil)) nil) ("2" (expand exist_pivot? 2) (("2" (flatten) (("2" (inst -7 cl!1) (("2" (assert) (("2" (inst 5 k!1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((NOT const-decl "[bool -> bool]" booleans nil) (cons_tr_clause formula-decl nil trace_resolution nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (cons2_var!1 skolem-const-decl "list[(tr_literal?)]" trace_resolution nil) (cons1_var!1 skolem-const-decl "((tr_literal?))" trace_resolution nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (sorted? def-decl "bool" sortedlist nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" trace_resolution nil) (list_induction formula-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (member def-decl "bool" list_props nil) (exist_pivot? def-decl "bool" trace_resolution nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (tr_clause? const-decl "bool" trace_resolution nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil)) shostak)) (find_pivot_TCC1 0 (find_pivot_TCC1-1 nil 3482760023 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (exist_pivot? def-decl "bool" trace_resolution nil)) nil)) (find_pivot_TCC2 0 (find_pivot_TCC2-1 nil 3482760023 ("" (skolem-typepred) (("" (hide -1 -4) (("" (flatten) (("" (split) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (member def-decl "bool" list_props nil) (sorted? def-decl "bool" sortedlist nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" trace_resolution nil) (exist_pivot? def-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil)) (find_pivot_TCC3 0 (find_pivot_TCC3-1 nil 3482760023 ("" (skolem-typepred) (("" (hide -1 -4 -10) (("" (flatten) (("" (split) (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil) ((nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (member def-decl "bool" list_props nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (exist_pivot? def-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil)) (find_pivot_TCC4 0 (find_pivot_TCC4-1 nil 3482760023 ("" (skolem-typepred) (("" (hide -1 -4 -10) (("" (flatten) (("" (split) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ((mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (sorted? def-decl "bool" sortedlist nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (member def-decl "bool" list_props nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (exist_pivot? def-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil)) (find_pivot_TCC5 0 (find_pivot_TCC5-1 nil 3482760023 ("" (subtype-tcc) (("" (grind) nil nil)) nil) ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (sorted? def-decl "bool" sortedlist nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (exist_pivot? def-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil)) nil)) (find_pivot_TCC6 0 (find_pivot_TCC6-1 nil 3482760023 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (exist_pivot? def-decl "bool" trace_resolution nil) (sorted? def-decl "bool" sortedlist nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" trace_resolution nil) (member def-decl "bool" list_props nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil)) nil)) (find_pivot_TCC7 0 (find_pivot_TCC7-1 nil 3482760023 ("" (subtype-tcc) (("" (grind) nil nil)) nil) ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (sorted? def-decl "bool" sortedlist nil) (member def-decl "bool" list_props nil) (length def-decl "nat" list_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (exist_pivot? def-decl "bool" trace_resolution nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil)) nil)) (find_pivot_TCC8 0 (find_pivot_TCC8-1 nil 3482760987 ("" (skolem-typepred) (("" (flatten) (("" (hide -1 -4 -9) (("" (split) (("1" (typepred "v!1(cdr[((tr_literal?))](nck!1), ncl!1)") (("1" (expand member + 1) (("1" (lift-if) (("1" (split 1) (("1" (grind) nil nil) ("2" (flatten) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (typepred "v!1(cdr[((tr_literal?))](nck!1), ncl!1)") (("1" (propax) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (sorted? def-decl "bool" sortedlist nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (member def-decl "bool" list_props nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (exist_pivot? def-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil)) (merge_TCC1 0 (merge_TCC1-1 nil 3482675376 ("" (subtype-tcc) (("" (grind) nil nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (member def-decl "bool" list_props nil) (sorted? def-decl "bool" sortedlist nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil)) nil)) (merge_TCC2 0 (merge_TCC2-1 nil 3482675376 ("" (subtype-tcc) (("" (grind) nil nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (member def-decl "bool" list_props nil) (sorted? def-decl "bool" sortedlist nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil)) nil)) (merge_TCC3 0 (merge_TCC3-1 nil 3482675376 ("" (subtype-tcc) (("" (grind) nil nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (sorted? def-decl "bool" sortedlist nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil)) nil)) (merge_TCC4 0 (merge_TCC4-1 nil 3482675376 ("" (subtype-tcc) (("" (grind) nil nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (sorted? def-decl "bool" sortedlist nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil)) nil)) (merge_TCC5 0 (merge_TCC5-1 nil 3482675376 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (sorted? def-decl "bool" sortedlist nil) (length def-decl "nat" list_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil)) (merge_TCC6 0 (merge_TCC6-1 nil 3482675376 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (hide -2 -3 -5 -8) (("" (use tr_clause_prop) (("" (assert) (("" (replace -6 -1) (("" (assert) (("" (lemma tr_clause_prop) (("" (inst -1 cl!1) (("" (replace -9 -1) (("" (assert) (("" (typepred "v!1(ckk!1, cll!1)") (("1" (hide -1) (("1" (split 3) (("1" (lemma tr_clause_prop) (("1" (inst -1 "cons[((tr_literal?))](k!1, v!1(ckk!1, cll!1))") (("1" (assert) (("1" (flatten) (("1" (inst -2 "car(v!1(ckk!1, cll!1))") (("1" (assert) (("1" (expand member -2 1) (("1" (split -2) (("1" (lemma sorted_clause) (("1" (inst -1 "car(v!1(ckk!1, cll!1))" ck!1) (("1" (assert) (("1" (replace -10 -1) (("1" (assert) nil nil)) nil)) nil) ("2" (expand tr_clause?) (("2" (propax) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil) ("2" (lemma sorted_clause) (("2" (inst -1 "car(v!1(ckk!1, cll!1))" cl!1) (("1" (assert) (("1" (replace -12 -1) (("1" (assert) nil nil)) nil)) nil) ("2" (expand tr_clause?) (("2" (propax) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil) ("2" (skolem-typepred) (("2" (split 1) (("1" (flatten) (("1" (expand member -1) (("1" (split -1) (("1" (replace -1) (("1" (assert) (("1" (replace -11 1) (("1" (expand member 1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (inst -4 k!2) (("2" (assert) (("2" (split -4) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split -1) (("1" (inst -4 k!2) (("1" (assert) (("1" (expand member -1) (("1" (split -1) (("1" (replace -11 -1) (("1" (expand member 1) (("1" (grind) nil nil)) nil)) nil) ("2" (replace -11 -1) (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -13 -1) (("2" (expand member -1) (("2" (split -1) (("1" (grind) nil nil) ("2" (inst -4 k!2) (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((tr_clause_prop formula-decl nil trace_resolution nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (member def-decl "bool" list_props nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (ckk!1 skolem-const-decl "list[(tr_literal?)]" trace_resolution nil) (cll!1 skolem-const-decl "list[(tr_literal?)]" trace_resolution nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (sorted? def-decl "bool" sortedlist nil) (ck!1 skolem-const-decl "(tr_clause?)" trace_resolution nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (sorted_clause formula-decl nil sortedlist nil) (cl!1 skolem-const-decl "(tr_clause?)" trace_resolution nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil)) (merge_TCC7 0 (merge_TCC7-1 nil 3482675376 ("" (subtype-tcc) (("" (grind) nil nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (sorted? def-decl "bool" sortedlist nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil)) nil)) (merge_TCC8 0 (merge_TCC8-1 nil 3482675376 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (sorted? def-decl "bool" sortedlist nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil)) (merge_TCC9 0 (merge_TCC9-1 nil 3482675376 ("" (skolem-typepred) (("" (hide -1 -3 -7) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (hide -2) (("" (split 4) (("1" (lemma tr_clause_prop) (("1" (inst -1 "cons[((tr_literal?))](k!1, v!1(ckk!1, cl!1))") (("1" (flatten) (("1" (delete -1) (("1" (assert) (("1" (flatten) (("1" (typepred "v!1(ckk!1, cl!1)") (("1" (hide -1) (("1" (inst -2 "car(v!1(ckk!1, cl!1))") (("1" (assert) (("1" (expand member -2 1) (("1" (split -2) (("1" (lemma sorted_clause) (("1" (inst -1 "car(v!1(ckk!1, cl!1))" "ck!1") (("1" (replace -8 -1) (("1" (assert) nil nil)) nil) ("2" (expand tr_clause? -4) (("2" (propax) nil nil)) nil) ("3" (lemma tr_clause_prop) (("3" (inst -1 ck!1) (("3" (assert) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma sorted_clause) (("2" (inst -1 "car(v!1(ckk!1, cl!1))" "cl!1") (("1" (replace -10 -1) (("1" (assert) (("1" (expand member -1) (("1" (replace -9 -1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (lemma tr_clause_prop) (("3" (inst -1 ck!1) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma tr_clause_prop) (("2" (inst -1 ck!1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (lemma tr_clause_prop) (("2" (inst -1 ck!1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma tr_clause_prop) (("2" (inst -1 ck!1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (split 1) (("1" (flatten) (("1" (expand member -1) (("1" (split -1) (("1" (grind) nil nil) ("2" (typepred "v!1(ckk!1, cl!1)") (("1" (hide -1) (("1" (inst -2 k!2) (("1" (assert) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma tr_clause_prop) (("2" (inst -1 ck!1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split -1) (("1" (replace -7 -1) (("1" (expand member -1) (("1" (split -1) (("1" (grind) nil nil) ("2" (typepred "v!1(ckk!1, cl!1)") (("1" (hide -1) (("1" (inst -2 k!2) (("1" (grind) nil nil)) nil)) nil) ("2" (lemma tr_clause_prop) (("2" (inst -1 ck!1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "v!1(ckk!1, cl!1)") (("1" (hide -1) (("1" (inst -2 k!2) (("1" (flatten) (("1" (delete -2) (("1" (expand member 1) (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma tr_clause_prop) (("2" (inst -1 ck!1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((tr_clause_prop formula-decl nil trace_resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (cl!1 skolem-const-decl "(tr_clause?)" trace_resolution nil) (sorted_clause formula-decl nil sortedlist nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" trace_resolution nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (ck!1 skolem-const-decl "(tr_clause?)" trace_resolution nil) (sorted? def-decl "bool" sortedlist nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (member def-decl "bool" list_props nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (ckk!1 skolem-const-decl "list[(tr_literal?)]" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil)) (merge_TCC10 0 (merge_TCC10-1 nil 3482675376 ("" (subtype-tcc) (("" (grind) nil nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (sorted? def-decl "bool" sortedlist nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil)) nil)) (merge_TCC11 0 (merge_TCC11-1 nil 3482675376 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (sorted? def-decl "bool" sortedlist nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil)) (merge_TCC12 0 (merge_TCC12-1 nil 3482675376 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (hide -2 -3 -5 -8) (("" (lemma tr_clause_prop) (("" (inst-cp -1 ck!1) (("" (inst -1 cl!1) (("" (assert) (("" (replace -7 -2) (("" (replace -8 -1) (("" (assert) (("" (case "tr_clause?(cll!1)") (("1" (case "tr_clause?(ckk!1)") (("1" (split 5) (("1" (lemma tr_clause_prop) (("1" (inst -1 "cons[((tr_literal?))](l!1, v!1(ck!1, cll!1))") (("1" (flatten) (("1" (delete -1) (("1" (assert) (("1" (flatten) (("1" (typepred "v!1(ck!1, cll!1)") (("1" (hide -1) (("1" (lemma sorted_clause) (("1" (inst -3 "car(v!1(ck!1, cll!1))") (("1" (expand member -3 1) (("1" (assert) (("1" (split -3) (("1" (inst -2 "car(v!1(ck!1, cll!1))" "ck!1") (("1" (replace -12 -2) (("1" (assert) (("1" (replace -11 1 RL) (("1" (expand member -1) (("1" (split -1) (("1" (replace -11 -1) (("1" (assert) (("1" (replace -11 -1 RL) (("1" (replace -1 3) (("1" (lemma index_inj) (("1" (expand injective?) (("1" (inst -1 k!1 l!1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (replace -11 -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand tr_clause? -8) (("2" (propax) nil nil)) nil)) nil) ("2" (inst -2 "car(v!1(ck!1, cll!1))" "cl!1") (("1" (replace -13 -2) (("1" (assert) nil nil)) nil) ("2" (expand tr_clause? -9) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (split 1) (("1" (flatten) (("1" (expand member -1) (("1" (split -1) (("1" (grind) nil nil) ("2" (typepred "v!1(ck!1, cll!1)") (("1" (hide -1) (("1" (inst -2 k!2) (("1" (assert) (("1" (expand member 2) (("1" (flatten) (("1" (replace -14 3) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split -1) (("1" (typepred "v!1(ck!1, cll!1)") (("1" (hide -1) (("1" (inst -2 k!2) (("1" (assert) (("1" (expand member 1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil) ("2" (expand member 1) (("2" (flatten) (("2" (replace -12 -1) (("2" (expand member -1) (("2" (split -1) (("1" (propax) nil nil) ("2" (typepred "v!1(ck!1, cll!1)") (("1" (hide -1) (("1" (inst -2 k!2) (("1" (assert) nil nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((tr_clause_prop formula-decl nil trace_resolution nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (sorted_clause formula-decl nil sortedlist nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" trace_resolution nil) (injective? const-decl "bool" functions nil) (index_inj formula-decl nil trace_resolution nil) (ck!1 skolem-const-decl "(tr_clause?)" trace_resolution nil) (sorted? def-decl "bool" sortedlist nil) (cl!1 skolem-const-decl "(tr_clause?)" trace_resolution nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (member def-decl "bool" list_props nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cll!1 skolem-const-decl "list[(tr_literal?)]" trace_resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil)) (merge_includes1_TCC1 0 (merge_includes1_TCC1-1 nil 3482760023 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil)) nil)) (merge_includes1_TCC2 0 (merge_includes1_TCC2-1 nil 3482760023 ("" (skolem-typepred) (("" (typepred "merge(ck!1, cl!1)") (("" (expand tr_clause? -2) (("" (propax) nil nil)) nil)) nil)) nil) ((merge def-decl "{cla: (tr_clause?) |
         FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}" trace_resolution nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (member def-decl "bool" list_props nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil)) (merge_includes1_TCC3 0 (merge_includes1_TCC3-1 nil 3482760023 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil)) nil)) (merge_includes1 0 (merge_includes1-1 nil 3483146677 ("" (skolem-typepred) (("" (hide -1 -3) (("" (use every_member_subset (k ck!1 l "merge(ck!1, cl!1)")) (("" (use every_member_subset (k cl!1 l "merge(ck!1, cl!1)")) (("" (lemma subset_include) (("" (inst-cp -1 ck!1 "merge(ck!1, cl!1)") (("1" (inst -1 cl!1 "merge(ck!1, cl!1)") (("1" (replace -1 1) (("1" (replace -2 1) (("1" (replace -3 1) (("1" (replace -4 1) (("1" (hide -1 -2 -3 -4) (("1" (typepred "merge(ck!1, cl!1)") (("1" (hide -1) (("1" (split 1) (("1" (skosimp) (("1" (inst -3 a!1) (("1" (assert) nil nil)) nil)) nil) ("2" (skosimp) (("2" (inst -3 a!1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand tr_clause? -5) (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "merge(ck!1, cl!1)") (("2" (expand tr_clause? -2) (("2" (propax) nil nil)) nil)) nil) ("3" (expand tr_clause? -3) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sorted? def-decl "bool" sortedlist nil) (ck!1 skolem-const-decl "(tr_clause?)" trace_resolution nil) (cl!1 skolem-const-decl "(tr_clause?)" trace_resolution nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (subset_include formula-decl nil sortedlist nil) (merge def-decl "{cla: (tr_clause?) |
         FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}" trace_resolution nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (member def-decl "bool" list_props nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (every_member_subset formula-decl nil minlist nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) shostak)) (resolution_TCC1 0 (resolution_TCC1-1 nil 3482764464 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (hide -4 -7 -10) (("" (rewrite -11) (("" (inst-cp -5 pivot!1) (("" (inst -5 "tr_neg(pivot!1)") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((tr_neg const-decl "(tr_literal?)" trace_resolution nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (member def-decl "bool" list_props nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil)) (resolution_lemma_TCC1 0 (resolution_lemma_TCC1-1 nil 3482776948 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (resolution const-decl "(tr_clause?)" trace_resolution nil) (not_true_clauses const-decl "bool" trace_resolution nil)) nil)) (resolution_lemma_TCC2 0 (resolution_lemma_TCC2-1 nil 3482776948 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (resolution const-decl "(tr_clause?)" trace_resolution nil) (not_true_clauses const-decl "bool" trace_resolution nil)) nil)) (resolution_lemma 0 (resolution_lemma-1 nil 3482783534 ("" (skolem-typepred) (("" (flatten) (("" (assert) (("" (hide -1 -4) (("" (split 1) (("1" (flatten) (("1" (use exist_lemma) (("1" (assert) (("1" (typepred "find_pivot(nck!1, ncl!1)") (("1" (expand resolution 1) (("1" (assert) (("1" (expand not_true_clauses -11) (("1" (flatten) (("1" (assert) (("1" (typepred "merge(nck!1, ncl!1)") (("1" (hide -1) (("1" (typepred "delete_pivot(merge(nck!1, ncl!1),
                               find_pivot(nck!1, ncl!1))") (("1" (hide -1) (("1" (split 2) (("1" (skolem-typepred) (("1" (flatten) (("1" (inst -4 k!1) (("1" (assert) (("1" (split 4) (("1" (inst -5 k!1) (("1" (assert) nil nil)) nil) ("2" (typepred "find_pivot(nck!1, ncl!1)") (("2" (use clause_true_lemma) (("2" (rewrite -1) (("2" (inst 5 "find_pivot(nck!1, ncl!1)") (("2" (split 5) (("1" (propax) nil nil) ("2" (replace -5) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (inst -4 l!1) (("2" (assert) (("2" (split 4) (("1" (inst -5 l!1) (("1" (assert) nil nil)) nil) ("2" (lemma clause_true_lemma) (("2" (inst -1 ncl!1) (("2" (replace -1) (("2" (inst 6 "find_pivot(nck!1, ncl!1)") (("2" (replace -2) (("2" (split 6) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (split 1) (("1" (inst -2 "find_pivot(nck!1, ncl!1)") (("1" (assert) nil nil)) nil) ("2" (inst -2 "tr_neg(find_pivot(nck!1, ncl!1))") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (use subset_include) (("1" (rewrite -1) (("1" (use subset_include) (("1" (rewrite -1) (("1" (split) (("1" (expand resolution 1) (("1" (assert) (("1" (lift-if) (("1" (split 1) (("1" (flatten) (("1" (expand not_true_clauses) (("1" (flatten) nil nil)) nil)) nil) ("2" (flatten) (("2" (split 2) (("1" (flatten) (("1" (expand not_true_clauses) (("1" (flatten) nil nil)) nil)) nil) ("2" (flatten) (("2" (use merge_includes1) (("2" (flatten) (("2" (use subset_include) (("2" (rewrite -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand resolution 1) (("2" (assert) (("2" (lift-if) (("2" (split 1) (("1" (flatten) (("1" (expand not_true_clauses) (("1" (flatten) nil nil)) nil)) nil) ("2" (flatten) (("2" (split 2) (("1" (flatten) (("1" (expand not_true_clauses) (("1" (flatten) nil nil)) nil)) nil) ("2" (flatten) (("2" (use merge_includes1) (("2" (flatten) (("2" (use subset_include) (("2" (rewrite -1) (("2" (use subset_include) (("2" (rewrite -1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "resolution(nck!1, ncl!1)") (("2" (expand tr_clause?) (("2" (propax) nil nil)) nil)) nil) ("3" (expand tr_clause?) (("3" (propax) nil nil)) nil)) nil)) nil) ("2" (typepred "resolution(nck!1, ncl!1)") (("2" (expand tr_clause?) (("2" (propax) nil nil)) nil)) nil) ("3" (expand tr_clause?) (("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((merge_includes1 formula-decl nil trace_resolution nil) (nck!1 skolem-const-decl "(ne_tr_clause?)" trace_resolution nil) (sorted? def-decl "bool" sortedlist nil) (ncl!1 skolem-const-decl "(ne_tr_clause?)" trace_resolution nil) (subset_include formula-decl nil sortedlist nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" trace_resolution nil) (resolution const-decl "(tr_clause?)" trace_resolution nil) (not_true_clauses const-decl "bool" trace_resolution nil) (clause_true_lemma formula-decl nil trace_resolution nil) (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}" trace_resolution nil) (= const-decl "[T, T -> boolean]" equalities nil) (merge def-decl "{cla: (tr_clause?) |
         FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}" trace_resolution nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (exist_pivot? def-decl "bool" trace_resolution nil) (member def-decl "bool" list_props nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (find_pivot def-decl "{k | member(k, nck) AND member(tr_neg(k), ncl)}" trace_resolution nil) (exist_lemma formula-decl nil trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) shostak)) (include_res 0 (include_res-1 nil 3482776952 ("" (skolem-typepred) (("" (flatten) (("" (assert) (("" (flatten) (("" (hide -1 -4) (("" (use resolution_lemma) (("" (assert) (("" (flatten) (("" (split 1) (("1" (use every_member_subset (k "nck!1" l "cons(find_pivot(nck!1, ncl!1), resolution(nck!1, ncl!1))")) (("1" (rewrite -1) (("1" (skolem-typepred) (("1" (flatten) (("1" (expand member 2) (("1" (flatten) (("1" (inst -5 a!1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (use every_member_subset (k "ncl!1" l "cons(tr_neg(find_pivot(nck!1, ncl!1)), resolution(nck!1, ncl!1))")) (("2" (rewrite -1) (("2" (hide -1) (("2" (skolem-typepred) (("2" (flatten) (("2" (expand member 2) (("2" (flatten) (("2" (inst -4 a!1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((resolution_lemma formula-decl nil trace_resolution nil) (every_member_subset formula-decl nil minlist nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (exist_pivot? def-decl "bool" trace_resolution nil) (member def-decl "bool" list_props nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (find_pivot def-decl "{k | member(k, nck) AND member(tr_neg(k), ncl)}" trace_resolution nil) (resolution const-decl "(tr_clause?)" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) shostak)) (resolution_list_TCC1 0 (resolution_list_TCC1-1 nil 3482675376 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}" trace_resolution nil) (resolution const-decl "(tr_clause?)" trace_resolution nil) (length def-decl "nat" list_props nil)) nil)) (resolution_list_TCC2 0 (resolution_list_TCC2-1 nil 3482776948 ("" (grind) nil nil) ((ne_tr_clause? const-decl "bool" trace_resolution nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (tr_literal? const-decl "bool" trace_resolution nil) (bool nonempty-type-eq-decl nil booleans nil) (nzint nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (sorted? def-decl "bool" sortedlist nil) (tr_clause? const-decl "bool" trace_resolution nil)) nil)) (build_chain_list_TCC1 0 (build_chain_list_TCC1-1 nil 3482675376 ("" (subtype-tcc) nil nil) nil nil)) (build_chain_list_TCC2 0 (build_chain_list_TCC2-1 nil 3482675376 ("" (subtype-tcc) (("" (grind) nil nil)) nil) ((map adt-def-decl "list[T1]" list_adt_map nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (n formal-const-decl "nat" trace_resolution nil) (below type-eq-decl nil naturalnumbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (chain type-eq-decl nil trace_resolution nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (clause_chain type-eq-decl nil trace_resolution nil) (certificate type-eq-decl nil trace_resolution nil)) nil)) (resolve_rec_TCC1 0 (resolve_rec_TCC1-1 nil 3482675376 ("" (subtype-tcc) nil nil) ((minus_odd_is_odd application-judgement "odd_int" integers nil)) nil)) (resolve_rec_TCC2 0 (resolve_rec_TCC2-1 nil 3482675376 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (n formal-const-decl "nat" trace_resolution nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil)) (resolve_rec_TCC3 0 (resolve_rec_TCC3-1 nil 3482675376 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (n formal-const-decl "nat" trace_resolution nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil)) (resolve_rec_TCC4 0 (resolve_rec_TCC4-1 nil 3482675376 ("" (termination-tcc) nil nil) ((minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil)) (resolve_rec_TCC5 0 (resolve_rec_TCC5-1 nil 3482675376 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (n formal-const-decl "nat" trace_resolution nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil)) (resolve_rec_TCC6 0 (resolve_rec_TCC6-1 nil 3482675376 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (n formal-const-decl "nat" trace_resolution nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil)) (resolve_rec_TCC7 0 (resolve_rec_TCC7-1 nil 3482675376 ("" (termination-tcc) nil nil) ((minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil)) (resolve_TCC1 0 (resolve_TCC1-1 nil 3482107568 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil)))
