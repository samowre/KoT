(assoc2
 (assoc2_TCC1 0
  (assoc2_TCC1-1 nil 3578325651 ("" (subtype-tcc) nil nil) nil nil))
 (assoc2_lift_not_member 0
  (assoc2_lift_not_member-1 nil 3578325661
   ("" (expand assoc2)
    (("" (grind :defs nil :if-match nil)
      (("" (typepred "findi(LAMBDA x: x = k!1, ks!1)")
        (("" (expand every -1)
          (("" (flatten)
            (("" (grind)
              (("" (rewrite member_nth) (("" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list type-decl nil list_adt nil)
    (K formal-type-decl nil assoc2 nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (V formal-type-decl nil assoc2 nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (member_nth formula-decl nil more_list_props "../lists/")
    (PRED type-eq-decl nil defined_types nil)
    (lift type-decl nil lift_adt nil)
    (every adt-def-decl "boolean" lift_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (findi def-decl "lift[{i: below(length(l)) | p(nth(l, i))}]"
     more_list_props "../lists/")
    (assoc2 const-decl "lift[V]" assoc2 nil))
   shostak))
 (assoc2_lift_member_TCC1 0
  (assoc2_lift_member_TCC1-1 nil 3578325651 ("" (subtype-tcc) nil nil)
   nil nil))
 (assoc2_lift_member 0
  (assoc2_lift_member-1 nil 3578330014
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (lemma "findi_some[K]")
        (("" (inst?)
          (("" (expand assoc2)
            (("" (inst?)
              (("" (prop)
                (("1" (inst 1 "down(findi(LAMBDA x: x = k!1, ks!1))")
                  (("1" (grind) nil nil)) nil)
                 ("2" (grind)
                  (("2" (rewrite some_exists) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (member def-decl "bool" list_props nil)
    (some_exists formula-decl nil more_list_props "../lists/")
    (findi def-decl "lift[{i: below(length(l)) | p(nth(l, i))}]"
     more_list_props "../lists/")
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (k!1 skolem-const-decl "K" assoc2 nil)
    (nth def-decl "T" list_props nil)
    (ks!1 skolem-const-decl "list[K]" assoc2 nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" lift_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (lift type-decl nil lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (assoc2 const-decl "lift[V]" assoc2 nil)
    (findi_some formula-decl nil more_list_props "../lists/")
    (length def-decl "nat" list_props nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list type-decl nil list_adt nil)
    (K formal-type-decl nil assoc2 nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (V formal-type-decl nil assoc2 nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (assoc2_not_member 0
  (assoc2_not_member-1 nil 3578330538
   ("" (expand assoc2)
    (("" (grind :defs nil :if-match nil)
      (("" (typepred "findi(LAMBDA x: x = k!1, ks!1)")
        (("" (expand every -)
          (("" (grind :rewrites member_nth :defs nil) nil nil)) nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list type-decl nil list_adt nil)
    (K formal-type-decl nil assoc2 nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (V formal-type-decl nil assoc2 nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member_nth formula-decl nil more_list_props "../lists/")
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (lift type-decl nil lift_adt nil)
    (every adt-def-decl "boolean" lift_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (findi def-decl "lift[{i: below(length(l)) | p(nth(l, i))}]"
     more_list_props "../lists/")
    (assoc2 const-decl "V" assoc2 nil))
   shostak))
 (assoc2_member 0
  (assoc2_member-1 nil 3578330690
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (lemma "findi_some[K]")
        (("" (inst?)
          (("" (expand assoc2)
            (("" (inst?)
              (("" (prop)
                (("1" (inst 1 "down(findi(LAMBDA x: x = k!1, ks!1))")
                  (("1" (grind) nil nil)) nil)
                 ("2" (grind :rewrites some_exists) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (member def-decl "bool" list_props nil)
    (some_exists formula-decl nil more_list_props "../lists/")
    (findi def-decl "lift[{i: below(length(l)) | p(nth(l, i))}]"
     more_list_props "../lists/")
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (k!1 skolem-const-decl "K" assoc2 nil)
    (nth def-decl "T" list_props nil)
    (ks!1 skolem-const-decl "list[K]" assoc2 nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" lift_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (lift type-decl nil lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (assoc2 const-decl "V" assoc2 nil)
    (findi_some formula-decl nil more_list_props "../lists/")
    (length def-decl "nat" list_props nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list type-decl nil list_adt nil)
    (K formal-type-decl nil assoc2 nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (V formal-type-decl nil assoc2 nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)))
(smap
 (smap_length 0
  (smap_length-1 nil 3578330746 ("" (grind) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   shostak))
 (smap_seq_TCC1 0
  (smap_seq_TCC1-1 nil 3578325651 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil))
 (smap_seq 0
  (smap_seq-1 nil 3578330751 ("" (grind) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   shostak)))
(setmap)
(set_props)
(more_finseq_props
 (findi_TCC1 0
  (findi_TCC1-1 nil 3578323667 ("" (subtype-tcc) nil nil) nil nil))
 (findi_TCC2 0
  (findi_TCC2-1 nil 3578323667 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil more_finseq_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (findi_TCC3 0
  (findi_TCC3-1 nil 3578323667 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil more_finseq_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (findi_TCC4 0
  (findi_TCC4-1 nil 3578323667 ("" (termination-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (findi_exists_TCC1 0
  (findi_exists_TCC1-1 nil 3578323967 ("" (subtype-tcc) nil nil) nil
   nil))
 (findi_exists 0
  (findi_exists-1 nil 3578324082
   ("" (measure-induct "s`length - i" (s i))
    (("1" (grind :if-match nil)
      (("1" (inst - "x!1" "2 + x!2") (("1" (grind) nil nil)) nil)) nil)
     ("2" (grind) nil nil) ("3" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (j!1 skolem-const-decl "subrange(x!2, x!1`length - 1)"
     more_finseq_props nil)
    (x!2 skolem-const-decl "upto(x!1`length)" more_finseq_props nil)
    (x!1 skolem-const-decl "finseq[T]" more_finseq_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (findi def-decl
     "lift[{i: below(s`length) | p(finseq_appl[T](s)(i))}]"
     more_finseq_props nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (every adt-def-decl "boolean" lift_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (lift type-decl nil lift_adt nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil more_finseq_props nil)
    (measure_induction formula-decl nil measure_induction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (find_TCC1 0
  (find_TCC1-1 nil 3578323667 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (find_exists 0
  (find_exists-1 nil 3578324273
   ("" (expand find)
    (("" (lemma findi_exists) (("" (grind) nil nil)) nil)) nil)
   ((findi_exists formula-decl nil more_finseq_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (findi def-decl
     "lift[{i: below(s`length) | p(finseq_appl[T](s)(i))}]"
     more_finseq_props nil)
    (i!1 skolem-const-decl "below(s!1`length)" more_finseq_props nil)
    (s!1 skolem-const-decl "finseq[T]" more_finseq_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil more_finseq_props nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (find const-decl
          "lift[{i: below(s`length) | p(finseq_appl[T](s)(i))}]"
      more_finseq_props nil))
   shostak))
 (every_aux_TCC1 0
  (every_aux_TCC1-1 nil 3578756616 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil more_finseq_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (every_aux_TCC2 0
  (every_aux_TCC2-1 nil 3578756616 ("" (termination-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (every_aux_forall_TCC1 0
  (every_aux_forall_TCC1-1 nil 3578756616
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil more_finseq_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (every_aux_forall_TCC2 0
  (every_aux_forall_TCC2-1 nil 3578756616
   ("" (grind :if-match nil)
    (("1" (typepred "v!1(p!1, s!1, 1 + i!1)")
      (("1" (grind) (("1" (inst -2 "j!1") nil nil)) nil)) nil)
     ("2" (typepred "v!1(p!1, s!1, 1 + i!1)")
      (("2" (rewrite -1)
        (("2" (skeep) (("2" (inst -2 j) nil nil)) nil)) nil))
      nil)
     ("3" (inst -2 "i!1") nil nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil more_finseq_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (every_forall 0
  (every_forall-1 nil 3578756616
   ("" (expand every)
    (("" (use every_aux_forall)
      (("" (skeep)
        (("" (inst?)
          (("" (rewrite -1)
            (("" (iff)
              (("" (prop)
                (("1" (skeep) (("1" (inst -1 i) nil nil)) nil)
                 ("2" (skeep) (("2" (inst -1 j) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((every_aux_forall recursive-judgement-axiom nil more_finseq_props
     nil)
    (T formal-type-decl nil more_finseq_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (every const-decl "bool" more_finseq_props nil))
   nil)))
(wf_pair
 (wf_pair 0
  (wf_pair-1 nil 3578676333
   ("" (comment "Introduce well-foundedness hypothesis")
    (("" (typepred le_l)
      (("" (typepred le_r)
        (("" (comment "Use well-foundedness on left-hand side")
          (("" (expand well_founded?)
            (("" (skeep)
              (("" (inst -2 "LAMBDA (l: L): EXISTS (r: R): p(l, r)")
                (("" (prop)
                  (("1"
                    (comment "Use well-foundedness on right-hand side")
                    (("1" (skeep)
                      (("1" (typepred y)
                        (("1" (inst -3 "LAMBDA (r: R): p(y, r)")
                          (("1" (prop)
                            (("1" (skeep)
                              (("1"
                                (typepred y_1)
                                (("1"
                                  (inst 1 "(y, y_1)")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (typepred x)
                                      (("1"
                                        (comment
                                         "Deduce well-foundedness on pair")
                                        (("1"
                                          (expand le)
                                          (("1"
                                            (eta "[L, R]")
                                            (("1"
                                              (prop)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          ";;; Deduce well-foundedness on pair"))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      ";;; Use well-foundedness on right-hand side"))
                    nil)
                   ("2"
                    (comment "Prove that p(x) => p(x`1, x`2). So fun.")
                    (("2" (skeep)
                      (("2" (inst 1 "y`1")
                        (("2" (inst 1 "y`2") (("2" (grind) nil nil))
                          nil))
                        nil))
                      ";;; Prove that p(x) => p(x`1, x`2). So fun."))
                    nil))
                  nil))
                nil))
              nil))
            ";;; Use well-foundedness on left-hand side"))
          nil))
        nil))
      ";;; Introduce well-foundedness hypothesis"))
    nil)
   ((le_l formal-const-decl "(well_founded?[L])" wf_pair nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (L formal-type-decl nil wf_pair nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (le const-decl "bool" wf_pair nil)
    (x skolem-const-decl "(p)" wf_pair nil)
    (y skolem-const-decl "(LAMBDA (l: L): EXISTS (r: R): p(l, r))"
     wf_pair nil)
    (p skolem-const-decl "pred[[L, R]]" wf_pair nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (R formal-type-decl nil wf_pair nil)
    (le_r formal-const-decl "(well_founded?[R])" wf_pair nil))
   nil)))

