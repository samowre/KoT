(term
 (V_TCC1 0
  (V_TCC1-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (fun type-decl nil term nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[fun -> nat]" term nil)
    (set type-eq-decl nil sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq2set const-decl "set[T]" set_props nil)
    (subterm adt-def-decl "boolean" term nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (vars_subterm 0
  (vars_subterm-1 nil 3578336814
   ("" (induct-and-simplify t :defs nil)
    (("1" (grind) nil nil)
     ("2" (grind) (("2" (decompose-equality) nil nil)) nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil))
    nil)
   ((args adt-accessor-decl
          "[d: (apply?) -> {l: finseq[term] | l`length = arity(fun(d))}]"
          term nil)
    (fun adt-accessor-decl "[(apply?) -> fun]" term nil)
    (apply? adt-recognizer-decl "[term -> boolean]" term nil)
    (apply1_var!1 skolem-const-decl "fun" term nil)
    (apply2_var!1 skolem-const-decl
     "{l: finseq[term] | l`length = arity(apply1_var!1)}" term nil)
    (z!1 skolem-const-decl "below[apply2_var!1`length]" term nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (arity shared-adt-accessor-decl "[fun -> nat]" term nil)
    (fun type-decl nil term nil)
    (finseq2set const-decl "set[T]" set_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (index adt-accessor-decl "[(var?) -> nat]" term nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (term type-decl nil term nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (V def-decl "set[nat]" term nil)
    (subterm adt-def-decl "boolean" term nil)
    (var? adt-recognizer-decl "[term -> boolean]" term nil)
    (v adt-constructor-decl "[nat -> (var?)]" term nil)
    (term_induction formula-decl nil term nil))
   shostak))
 (vars_increases 0
  (vars_increases-1 nil 3578336842
   ("" (induct-and-simplify s :defs nil)
    (("1" (grind) nil nil)
     ("2" (expand V 1 2)
      (("2" (expand subset? +)
        (("2" (skeep)
          (("2" (expand member -3)
            (("2" (expand "<<" -2)
              (("2" (skeep)
                (("2" (grind :defs nil)
                  (("2" (inst - z) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq2set const-decl "set[T]" set_props nil)
    (subterm adt-def-decl "boolean" term nil)
    (t!1 skolem-const-decl "term" term nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (apply? adt-recognizer-decl "[term -> boolean]" term nil)
    (fun adt-accessor-decl "[(apply?) -> fun]" term nil)
    (args adt-accessor-decl
          "[d: (apply?) -> {l: finseq[term] | l`length = arity(fun(d))}]"
          term nil)
    (apply1_var!1 skolem-const-decl "fun" term nil)
    (apply2_var!1 skolem-const-decl
     "{l: finseq[term] | l`length = arity(apply1_var!1)}" term nil)
    (below type-eq-decl nil naturalnumbers nil)
    (z skolem-const-decl "below[apply2_var!1`length]" term nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (fun type-decl nil term nil)
    (arity shared-adt-accessor-decl "[fun -> nat]" term nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (term type-decl nil term nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (V def-decl "set[nat]" term nil)
    (term_induction formula-decl nil term nil))
   shostak))
 (alpha_TCC1 0
  (alpha_TCC1-1 nil 3578420071 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (fun type-decl nil term nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[fun -> nat]" term nil)
    (<< adt-def-decl "(strict_well_founded?[term])" term nil)
    (subterm adt-def-decl "boolean" term nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil))
   nil))
 (alpha_TCC2 0
  (alpha_TCC2-1 nil 3578420071 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil))
 (alpha_vars_TCC1 0
  (alpha_vars_TCC1-1 nil 3578420071
   ("" (grind)
    (("" (expand singleton)
      (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((singleton const-decl "(singleton?)" sets nil)
    (s!1 skolem-const-decl "term" term nil)
    (index adt-accessor-decl "[(var?) -> nat]" term nil)
    (var? adt-recognizer-decl "[term -> boolean]" term nil)
    (i!1 skolem-const-decl "nat" term nil)
    (set type-eq-decl nil sets nil) (term type-decl nil term nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (V def-decl "set[nat]" term nil))
   nil))
 (alpha_vars_TCC2 0
  (alpha_vars_TCC2-1 nil 3578420071
   ("" (recursive-judgement-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil))
 (alpha_vars_TCC3 0
  (alpha_vars_TCC3-1 nil 3578420071
   ("" (grind :if-match nil :exclude "fun?")
    (("" (apply-extensionality)
      (("" (hide 2)
        (("" (iff)
          (("" (prop)
            (("1" (skolem-typepred)
              (("1" (expand finseq2set)
                (("1" (skolem-typepred)
                  (("1" (expand finseq_appl)
                    (("1" (typepred "v1!1(args!1`seq(i!1), rename!1)")
                      (("1" (rewrite -3 :dir rl)
                        (("1" (ground)
                          (("1" (rewrite -1)
                            (("1" (ground)
                              (("1"
                                (skolem-typepred)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem-typepred)
              (("2" (expand V -1)
                (("2" (skolem-typepred)
                  (("2" (expand finseq2set)
                    (("2" (skolem-typepred)
                      (("2" (inst 1 "v1!1(args!1`seq(i!1), rename!1)")
                        (("1"
                          (typepred "v1!1(args!1`seq(i!1), rename!1)")
                          (("1" (grind) nil nil)) nil)
                         ("2" (grind) nil nil) ("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (finseq2set const-decl "set[T]" set_props nil)
    (set type-eq-decl nil sets nil)
    (v1!1 skolem-const-decl "[d: [term, [nat -> nat]] ->
   {t | V(t) = ({v | EXISTS (k: (V(d`1))): v = d`2(k)})}]" term nil)
    (rename!1 skolem-const-decl "[nat -> nat]" term nil)
    (i!1 skolem-const-decl "below(args(s!1)`length)" term nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (k!2 skolem-const-decl "(V(args!1`seq(i!1)))" term nil)
    (i!1 skolem-const-decl "below(args!1`length)" term nil)
    (args!1 skolem-const-decl
     "{l: finseq[term] | l`length = arity(f!1)}" term nil)
    (f!1 skolem-const-decl "fun" term nil)
    (s!1 skolem-const-decl "term" term nil)
    (args adt-accessor-decl
          "[d: (apply?) -> {l: finseq[term] | l`length = arity(fun(d))}]"
          term nil)
    (fun adt-accessor-decl "[(apply?) -> fun]" term nil)
    (apply? adt-recognizer-decl "[term -> boolean]" term nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (fun type-decl nil term nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[fun -> nat]" term nil)
    (V def-decl "set[nat]" term nil)
    (member const-decl "bool" sets nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (parsubst_TCC1 0
  (parsubst_TCC1-1 nil 3578336763 ("" (grind) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil))
 (parsubst_map_vars_TCC1 0
  (parsubst_map_vars_TCC1-1 nil 3578418850
   ("" (recursive-judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (term type-decl nil term nil) (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (i!1 skolem-const-decl "nat" term nil)
    (mapping!1 skolem-const-decl "[nat -> term]" term nil)
    (s!1 skolem-const-decl "term" term nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (var? adt-recognizer-decl "[term -> boolean]" term nil)
    (index adt-accessor-decl "[(var?) -> nat]" term nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (V def-decl "set[nat]" term nil))
   nil))
 (parsubst_map_vars_TCC2 0
  (parsubst_map_vars_TCC2-1 nil 3578418850
   ("" (recursive-judgement-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil))
 (parsubst_map_vars_TCC3 0
  (parsubst_map_vars_TCC3-1 nil 3578418850
   ("" (grind :if-match nil :exclude "fun?")
    (("" (typepred "v1!1(args!1`seq(i!1), mapping!1)")
      (("" (expand subset?)
        (("" (inst -1 x!1)
          (("" (prop)
            (("1" (expand member -1)
              (("1" (expand V -1)
                (("1" (skeep)
                  (("1" (typepred k_1)
                    (("1" (inst 1 k_1)
                      (("1" (grind) nil nil)
                       ("2" (skeep)
                        (("2" (inst + k)
                          (("2" (typepred k) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((s!1 skolem-const-decl "term" term nil)
    (f!1 skolem-const-decl "fun" term nil)
    (args!1 skolem-const-decl
     "{l: finseq[term] | l`length = arity(f!1)}" term nil)
    (i!1 skolem-const-decl "below(arity(f!1))" term nil)
    (mapping!1 skolem-const-decl "[nat -> term]" term nil)
    (k_1 skolem-const-decl
     "({v | EXISTS (k: (V(args!1`seq(i!1)))): v = mapping!1(k)})" term
     nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (apply? adt-recognizer-decl "[term -> boolean]" term nil)
    (fun adt-accessor-decl "[(apply?) -> fun]" term nil)
    (args adt-accessor-decl
          "[d: (apply?) -> {l: finseq[term] | l`length = arity(fun(d))}]"
          term nil)
    (singleton const-decl "(singleton?)" sets nil)
    (k skolem-const-decl "(V(args!1`seq(i!1)))" term nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (set type-eq-decl nil sets nil)
    (finseq2set const-decl "set[T]" set_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (fun type-decl nil term nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[fun -> nat]" term nil)
    (subset? const-decl "bool" sets nil)
    (V def-decl "set[nat]" term nil)
    (member const-decl "bool" sets nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (fsubst_TCC1 0
  (fsubst_TCC1-1 nil 3578336763 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fun type-decl nil term nil)
    (ufun? adt-recognizer-decl "[fun -> boolean]" term nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[fun -> nat]" term nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil))
 (fsubst_TCC2 0
  (fsubst_TCC2-1 nil 3578336763 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil)))

