(interp (compatible?_TCC1 0
         (compatible?_TCC1-1 nil 3584290665 ("" (subtype-tcc) nil nil)
          ((below type-eq-decl nil naturalnumbers nil)
           (finseq type-eq-decl nil finite_sequences nil)
           (scontext? adt-def-decl "boolean" language nil)
           (syntaxic type-decl nil language nil)
           (below type-eq-decl nil nat_types nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (>= const-decl "bool" reals nil)
           (int nonempty-type-eq-decl nil integers nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (< const-decl "bool" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number nonempty-type-decl nil numbers nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (boolean nonempty-type-decl nil booleans nil))
          nil))
        (compatible?_TCC2 0
         (compatible?_TCC2-1 nil 3584290665
          ("" (skosimp* :preds? t)
           (("" (typepred "σ!1(x!1)")
             (("1" (expand "sinterp?")
               (("1" (assert) (("1" (bddsimp) nil nil)) nil)) nil)
              ("2" (assert) nil nil))
             nil))
           nil)
          ((finseq_appl const-decl "[below[length(fs)] -> T]"
            finite_sequences nil)
           (sinterp? adt-def-decl "boolean" language nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (syntaxic type-decl nil language nil)
           (scontext? adt-def-decl "boolean" language nil)
           (finseq type-eq-decl nil finite_sequences nil)
           (below type-eq-decl nil naturalnumbers nil))
          nil))
        (compatible0?_TCC1 0
         (compatible0?_TCC1-1 nil 3584891598 ("" (grind) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (syntaxic type-decl nil language nil)
           (scontext? adt-def-decl "boolean" language nil)
           (sinterp? adt-def-decl "boolean" language nil))
          nil))
        (interpret0_TCC1 0
         (interpret0_TCC1-1 nil 3584890853 ("" (grind) nil nil)
          ((scontext? adt-def-decl "boolean" language nil)) nil))
        (interpret0_TCC2 0
         (interpret0_TCC2-1 nil 3584890853 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (syntaxic type-decl nil language nil)
           (scontext? adt-def-decl "boolean" language nil)
           (sinterp? adt-def-decl "boolean" language nil)
           (compatible0? const-decl "bool" interp nil)
           (sexpr? adt-def-decl "boolean" language nil))
          nil))
        (interpret0_TCC3 0
         (interpret0_TCC3-1 nil 3584890853 ("" (grind) nil nil)
          ((scontext? adt-def-decl "boolean" language nil)) nil))
        (interpret0_TCC4 0
         (interpret0_TCC4-1 nil 3584890853 ("" (grind) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (syntaxic type-decl nil language nil)
           (scontext? adt-def-decl "boolean" language nil)
           (sinterp? adt-def-decl "boolean" language nil)
           (compatible0? const-decl "bool" interp nil))
          nil))
        (interpret_TCC1 0
         (interpret_TCC1-1 nil 3584290665 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (syntaxic type-decl nil language nil)
           (sexpr? adt-def-decl "boolean" language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (scontext? adt-def-decl "boolean" language nil)
           (finseq type-eq-decl nil finite_sequences nil)
           (sinterp? adt-def-decl "boolean" language nil)
           (compatible? const-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (finseq_appl const-decl "[below[length(fs)] -> T]"
            finite_sequences nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil))
          nil))
        (interpret_TCC2 0
         (interpret_TCC2-1 nil 3584290665 ("" (grind) nil nil)
          ((finseq_appl const-decl "[below[length(fs)] -> T]"
            finite_sequences nil)
           (sexpr? adt-def-decl "boolean" language nil))
          nil))
        (interpret_TCC3 0
         (interpret_TCC3-1 nil 3584290665 ("" (grind) nil nil)
          ((finseq_appl const-decl "[below[length(fs)] -> T]"
            finite_sequences nil)
           (sexpr? adt-def-decl "boolean" language nil))
          nil))
        (interpret_TCC4 0
         (interpret_TCC4-1 nil 3584290665 ("" (grind) nil nil)
          ((finseq_appl const-decl "[below[length(fs)] -> T]"
            finite_sequences nil)
           (scontext? adt-def-decl "boolean" language nil))
          nil))
        (interpret_TCC5 0
         (interpret_TCC5-1 nil 3584290665
          ("" (skosimp* :preds? t)
           (("" (assert)
             (("" (expand "compatible?")
               (("" (assert)
                 (("" (grind)
                   (("" (typepred "σ!1`seq(x!1)")
                     (("" (assert) nil nil)) nil))
                   nil))
                 nil))
               nil))
             nil))
           nil)
          ((real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (finseq_appl const-decl "[below[length(fs)] -> T]"
            finite_sequences nil)
           (boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (syntaxic type-decl nil language nil)
           (sexpr? adt-def-decl "boolean" language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (scontext? adt-def-decl "boolean" language nil)
           (finseq type-eq-decl nil finite_sequences nil)
           (sinterp? adt-def-decl "boolean" language nil)
           (compatible? const-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil))
          nil))
        (interpret_TCC6 0
         (interpret_TCC6-1 nil 3584290665 ("" (grind) nil nil)
          ((finseq_appl const-decl "[below[length(fs)] -> T]"
            finite_sequences nil)
           (sexpr? adt-def-decl "boolean" language nil))
          nil))
        (interpret_TCC7 0
         (interpret_TCC7-1 nil 3584890853 ("" (grind) nil nil)
          ((finseq_appl const-decl "[below[length(fs)] -> T]"
            finite_sequences nil)
           (scontext? adt-def-decl "boolean" language nil))
          nil))
        (interpret_TCC8 0
         (interpret_TCC8-1 nil 3584890853 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (syntaxic type-decl nil language nil)
           (sexpr? adt-def-decl "boolean" language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (scontext? adt-def-decl "boolean" language nil)
           (finseq type-eq-decl nil finite_sequences nil)
           (sinterp? adt-def-decl "boolean" language nil)
           (compatible? const-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (finseq_appl const-decl "[below[length(fs)] -> T]"
            finite_sequences nil))
          nil))
        (interpret_TCC9 0
         (interpret_TCC9-1 nil 3584890853 ("" (grind) nil nil)
          ((finseq_appl const-decl "[below[length(fs)] -> T]"
            finite_sequences nil)
           (scontext? adt-def-decl "boolean" language nil))
          nil))
        (interpret_TCC10 0
         (interpret_TCC10-1 nil 3584890853 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (syntaxic type-decl nil language nil)
           (sexpr? adt-def-decl "boolean" language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (scontext? adt-def-decl "boolean" language nil)
           (finseq type-eq-decl nil finite_sequences nil)
           (sinterp? adt-def-decl "boolean" language nil)
           (compatible? const-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (below type-eq-decl nil naturalnumbers nil)
           (finseq_appl const-decl "[below[length(fs)] -> T]"
            finite_sequences nil))
          nil))
        (interpret_TCC11 0
         (interpret_TCC11-1 nil 3584890853 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (syntaxic type-decl nil language nil)
           (sexpr? adt-def-decl "boolean" language nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (below type-eq-decl nil nat_types nil)
           (scontext? adt-def-decl "boolean" language nil)
           (finseq type-eq-decl nil finite_sequences nil)
           (sinterp? adt-def-decl "boolean" language nil)
           (compatible? const-decl "bool" interp nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (< const-decl "bool" reals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (below type-eq-decl nil naturalnumbers nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (finseq_appl const-decl "[below[length(fs)] -> T]"
            finite_sequences nil))
          nil))
        (interpret_TCC12 0
         (interpret_TCC12-1 nil 3584890853 ("" (grind) nil nil)
          ((finseq_appl const-decl "[below[length(fs)] -> T]"
            finite_sequences nil)
           (scontext? adt-def-decl "boolean" language nil))
          nil)))

