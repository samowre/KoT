%% This file, along with ideal-pvs.lisp and the pvs-attachments file,
%% allows to read/display terms in a somewhat more readable way.
%% Here are the instructions to (hopefully) make it work:
%%  - Download http://beta.quicklisp.org/quicklisp.lisp
%%  - Go to buffer *pvs* and type
%%     pvs(1): (load "/path/to/quicklisp.lisp")
%%     pvs(2): (quicklisp-quickstart:install)
%%     pvs(3): (ql:add-to-init-file "~/.pvs.lisp")
%%  - Use M-x load-pvs-attachments in this file to load the
%%    attachments (it might be long the first time as it has to download esrap)
%%  - You can now use the different functions in PVSio.

%% IMPORTANT:
%%  You need to have cl2pvs special displays enabled to see the result.
%%  Enable it by typing in *pvs*
%%    pvs(1): (setf *cl2pvs-enable-specials* t)

read: THEORY
BEGIN
  IMPORTING language

  ideal: TYPE = string

  init_string: ideal =
"BEGIN
  booleans: THEORY
  BEGIN
    bool: TYPE = EXTERNAL
    TRUE: bool = EXTERNAL
    FALSE: bool = EXTERNAL
    boolop: TYPE = [[bool, bool] -> bool]
    not: [bool -> bool] = EXTERNAL
    and: boolop = EXTERNAL
    or: boolop = EXTERNAL
  END

  equalities: THEORY
  BEGIN
    T: TYPE
    =: [[T, T] -> booleans.bool] = EXTERNAL
  END
  
  forall: THEORY
  BEGIN
    T: TYPE
    p: [T -> booleans.bool]
    res: booleans.bool =
      equalities {{ T := [ T -> booleans.bool ] }}
        .=(p, LAMBDA (x: T): booleans.TRUE)
  END
END"
rest:string="
  exists: THEORY
  BEGIN
    T: TYPE
    p: [T -> booleans.bool]
    res: booleans.bool =
      booleans.not(
        forall {{ T := T,
	          p := (LAMBDA (x: T): booleans.not(p(x)))
	       }}.res
      )
  END
END"

  resto: string ="
  orders: THEORY
  BEGIN
    T: TYPE
    well_founded: [[[T, T] -> booleans.bool] -> booleans.bool] =
      LAMBDA (r: [[T, T] -> booleans.bool]):
	equalities {{ T := [ T -> booleans.bool ] }}.=(
	  (LAMBDA (p: [T -> booleans.bool]):
	    booleans.or(
	      equalities {{ T := [ T -> booleans.bool ] }}.=(
	        (LAMBDA (x: T): booleans.not(p(x))),
	        (LAMBDA (x: T): booleans.TRUE)
	      ),
	      booleans.not(
	        equalities {{ T := [ { x: T | p(x) } -> booleans.bool ] }}.=(
	          (LAMBDA (y: { x: T | p(x) }):
	            booleans.not(
	              equalities {{ T := [ { x: T | p(x) } -> booleans.bool ] }}.=(
		        (LAMBDA (x: { x: T | p(x) }):
		          booleans.not(r(x, y))),
		        (LAMBDA (x: { x: T | p(x) }):
		          booleans.TRUE)
		      )
		    )
	          ),
	          (LAMBDA (x: { x: T | p(x) }):
	            booleans.TRUE)
	        )
	      )
            )
	  ),
	  (LAMBDA (p: [T -> booleans.bool]):
	    booleans.TRUE)
        )
  END
  ycomb: THEORY
  BEGIN
    D: TYPE
    R: TYPE
    r: { r: [[D, D] -> booleans.bool] | orders {{ T := D }}.well_founded(r) }
    Y: [[[ x: D, [{ y: D | r(y, x) } -> R]] -> R] -> [ D -> R] ] = EXTERNAL
  END
END"

  %% ideal2syntaxic(ctx, expr) parses expr in context ctx and converts it to De Bruijn representation
  ideal2syntaxic(ctx, expr: ideal): syntaxic
  init2syntaxic(expr: ideal): syntaxic = ideal2syntaxic(init_string, expr)
  init: syntaxic = ideal2syntaxic("BEGIN END", init_string)
END read

view[T: TYPE]: DATATYPE
BEGIN
  IMPORTING read
  %% in_context is going to print every syntaxic subterms of expr as the expression
  %% in_context(ctx, s-expr) where s-expr is a string (with names) valid in the context
  %% ctx.
  in_context(ctx: ideal, expr: T): in_context?
END view

%% This is for having a correct context inside PVSio
hook: THEORY
BEGIN
  IMPORTING view, delta
  IMPORTING tau
  in_init[T: TYPE](expr: T): view[T] = in_context(init_string, expr)
END hook
