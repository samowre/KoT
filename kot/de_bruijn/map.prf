(map (length_TCC1 0
      (length_TCC1-1 nil 3583526969 ("" (well-founded-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil))
       nil))
     (length_TCC2 0
      (length_TCC2-1 nil 3583526969
       ("" (subtype-tcc) (("" (grind) nil nil)) nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (size def-decl "nat" language nil))
       nil))
     (length_TCC3 0
      (length_TCC3-1 nil 3583526969 ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil))
       nil))
     (length_TCC4 0
      (length_TCC4-1 nil 3583526969
       ("" (subtype-tcc) (("" (grind) nil nil)) nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (size def-decl "nat" language nil))
       nil))
     (length_TCC5 0
      (length_TCC5-1 nil 3583526969 ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil))
       nil))
     (length_TCC6 0
      (length_TCC6-1 nil 3583526969
       ("" (subtype-tcc) (("" (grind) nil nil)) nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (size def-decl "nat" language nil))
       nil))
     (length_TCC7 0
      (length_TCC7-1 nil 3583526969 ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil))
       nil))
     (length_TCC8 0
      (length_TCC8-1 nil 3583526969
       ("" (subtype-tcc) (("" (grind) nil nil)) nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (size def-decl "nat" language nil))
       nil))
     (length_TCC9 0
      (length_TCC9-1 nil 3583526969 ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil))
       nil))
     (length_TCC10 0
      (length_TCC10-1 nil 3583526969
       ("" (subtype-tcc) (("" (grind) nil nil)) nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (size def-decl "nat" language nil))
       nil))
     (length_TCC11 0
      (length_TCC11-1 nil 3583528441 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil))
       nil))
     (length_TCC12 0
      (length_TCC12-1 nil 3583528441 ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (size def-decl "nat" language nil))
       nil))
     (length_TCC13 0
      (length_TCC13-1 nil 3583528441 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil))
       nil))
     (length_TCC14 0
      (length_TCC14-1 nil 3583528441 ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (size def-decl "nat" language nil))
       nil))
     (apply_TCC1 0
      (apply_TCC1-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (length def-decl "nat" map nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil))
       nil))
     (apply_TCC2 0
      (apply_TCC2-1 nil 3583526969
       ("" (subtype-tcc)
        (("" (expand "parsed?" -1) (("" (grind) nil nil)) nil)) nil)
       ((length def-decl "nat" map nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (< const-decl "bool" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (precontext type-eq-decl nil language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (syntaxic type-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil))
       nil))
     (apply_TCC3 0
      (apply_TCC3-1 nil 3583526969
       ("" (subtype-tcc)
        (("" (grind)
          (("" (expand "parsed?" -) (("" (grind) nil nil)) nil)) nil))
        nil)
       ((posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (length def-decl "nat" map nil))
       nil))
     (apply_TCC4 0
      (apply_TCC4-1 nil 3583526969
       ("" (termination-tcc)
        (("" (expand "parsed?" -) (("" (grind) nil nil)) nil)) nil)
       ((posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (length def-decl "nat" map nil))
       nil))
     (length_apply 0
      (length_apply-1 nil 3583527235
       ("" (induct "x")
        (("1" (grind) nil nil)
         ("2" (skosimp* :preds? t)
          (("2" (inst - "rest(Γ!1)")
            (("1" (expand "parsed?" -) (("1" (grind) nil nil)) nil)
             ("2" (expand "parsed?" -) (("2" (grind) nil nil)) nil)
             ("3" (expand "parsed?" -) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ((NOT const-decl "[bool -> bool]" booleans nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (rest shared-adt-accessor-decl
              "[{x: syntaxic |     type_decl?(x) OR type_var?(x) OR type_def?(x) OR const_decl?(x) OR const_var?(x) OR const_def?(x) OR theory_def?(x) OR itype?(x) OR iconst?(x)} -> syntaxic]"
              language nil)
        (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (itype? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (theory_def? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (const_def? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (const_var? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (type_var? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (nat_induction formula-decl nil naturalnumbers nil)
        (apply def-decl "precontext" map nil)
        (<= const-decl "bool" reals nil)
        (length def-decl "nat" map nil) (< const-decl "bool" reals nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (precontext type-eq-decl nil language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (syntaxic type-decl nil language nil)
        (pred type-eq-decl nil defined_types nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil))
       shostak))
     (rest_apply_TCC1 0
      (rest_apply_TCC1-1 nil 3583591306 ("" (subtype-tcc) nil nil) nil
       nil))
     (rest_apply_TCC2 0
      (rest_apply_TCC2-1 nil 3583591306 ("" (subtype-tcc) nil nil) nil
       nil))
     (rest_apply_TCC3 0
      (rest_apply_TCC3-1 nil 3583591306 ("" (subtype-tcc) nil nil) nil
       nil))
     (rest_apply 0
      (rest_apply-1 nil 3583591307
       ("" (induct "Γ")
        (("1" (assert) nil nil) ("2" (assert) nil nil)
         ("3" (assert) nil nil) ("4" (assert) nil nil)
         ("5" (assert) nil nil) ("6" (assert) nil nil)
         ("7" (assert) nil nil) ("8" (assert) nil nil)
         ("9" (assert) nil nil) ("10" (assert) nil nil)
         ("11" (assert) nil nil) ("12" (assert) nil nil)
         ("13" (assert) nil nil) ("14" (assert) nil nil)
         ("15" (assert) nil nil) ("16" (assert) nil nil)
         ("17" (assert) nil nil) ("18" (assert) nil nil)
         ("19" (assert) nil nil) ("20" (assert) nil nil)
         ("21" (assert) nil nil) ("22" (assert) nil nil)
         ("23" (assert) nil nil) ("24" (assert) nil nil)
         ("25" (assert) nil nil))
        nil)
       ((nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (rest shared-adt-accessor-decl
              "[{x: syntaxic |     type_decl?(x) OR type_var?(x) OR type_def?(x) OR const_decl?(x) OR const_var?(x) OR const_def?(x) OR theory_def?(x) OR itype?(x) OR iconst?(x)} -> syntaxic]"
              language nil)
        (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (itype? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (theory_def? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (const_def? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (const_var? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (type_var? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (precontext type-eq-decl nil language nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (< const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (syntaxic type-decl nil language nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (apply def-decl "precontext" map nil)
        (syntaxic_induction formula-decl nil language nil))
       shostak))
     (apply_apply_TCC1 0
      (apply_apply_TCC1-1 nil 3583591124 ("" (subtype-tcc) nil nil) nil
       nil))
     (apply_apply_TCC2 0
      (apply_apply_TCC2-1 nil 3583591124 ("" (subtype-tcc) nil nil) nil
       nil))
     (apply_apply 0
      (apply_apply-1 nil 3583591125
       ("" (induct "Γ")
        (("1" (assert) nil nil) ("2" (assert) nil nil)
         ("3" (assert) nil nil) ("4" (assert) nil nil)
         ("5" (assert) nil nil) ("6" (assert) nil nil)
         ("7" (assert) nil nil) ("8" (assert) nil nil)
         ("9" (assert) nil nil) ("10" (assert) nil nil)
         ("11" (assert) nil nil) ("12" (assert) nil nil)
         ("13" (assert)
          (("13" (skosimp* :preds? t)
            (("13" (assert)
              (("13" (expand "apply" 1 2)
                (("13" (assert)
                  (("13" (lift-if)
                    (("13" (assert)
                      (("13" (bddsimp)
                        (("13" (inst?)
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("14" (assert)
          (("14" (skosimp* :preds? t)
            (("14" (expand "apply" 1 2) (("14" (grind) nil nil)) nil))
            nil))
          nil)
         ("15" (assert)
          (("15" (skosimp* :preds? t)
            (("15" (expand "apply" 1 2) (("15" (grind) nil nil)) nil))
            nil))
          nil)
         ("16" (assert)
          (("16" (skosimp* :preds? t)
            (("16" (expand "apply" 1 2) (("16" (grind) nil nil)) nil))
            nil))
          nil)
         ("17" (assert)
          (("17" (skosimp* :preds? t)
            (("17" (expand "apply" 1 2) (("17" (grind) nil nil)) nil))
            nil))
          nil)
         ("18" (assert)
          (("18" (skosimp* :preds? t)
            (("18" (expand "apply" 1 2) (("18" (grind) nil nil)) nil))
            nil))
          nil)
         ("19" (assert)
          (("19" (skosimp* :preds? t)
            (("19" (expand "apply" 1 2) (("19" (grind) nil nil)) nil))
            nil))
          nil)
         ("20" (assert) nil nil) ("21" (assert) nil nil)
         ("22" (assert) nil nil)
         ("23" (assert) (("23" (grind) nil nil)) nil)
         ("24" (assert)
          (("24" (delete 2)
            (("24" (skosimp* :preds? t)
              (("24" (rewrite "length_apply") (("24" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (apply def-decl "precontext" map nil)
        (length def-decl "nat" map nil)
        (precontext type-eq-decl nil language nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (< const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (syntaxic type-decl nil language nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (syntaxic_induction formula-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (i!1 skolem-const-decl "nat" map nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (int_plus_int_is_int application-judgement "int" integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (i!1 skolem-const-decl "nat" map nil)
        (i!1 skolem-const-decl "nat" map nil)
        (i!1 skolem-const-decl "nat" map nil)
        (i!1 skolem-const-decl "nat" map nil)
        (i!1 skolem-const-decl "nat" map nil)
        (i!1 skolem-const-decl "nat" map nil)
        (length_apply formula-decl nil map nil))
       shostak))
     (size_apply 0
      (size_apply-1 nil 3583531994
       ("" (induct "x")
        (("1" (grind) nil nil)
         ("2" (skosimp* :preds? t)
          (("2" (inst - "rest(Γ!1)")
            (("1" (expand "parsed?" -) (("1" (grind) nil nil)) nil)
             ("2" (expand "parsed?" -) (("2" (grind) nil nil)) nil)
             ("3" (expand "parsed?" -) (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ((NOT const-decl "[bool -> bool]" booleans nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (rest shared-adt-accessor-decl
              "[{x: syntaxic |     type_decl?(x) OR type_var?(x) OR type_def?(x) OR const_decl?(x) OR const_var?(x) OR const_def?(x) OR theory_def?(x) OR itype?(x) OR iconst?(x)} -> syntaxic]"
              language nil)
        (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (itype? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (theory_def? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (const_def? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (const_var? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (type_var? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (nat_induction formula-decl nil naturalnumbers nil)
        (apply def-decl "precontext" map nil)
        (size def-decl "nat" language nil)
        (<= const-decl "bool" reals nil)
        (length def-decl "nat" map nil) (< const-decl "bool" reals nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (precontext type-eq-decl nil language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (syntaxic type-decl nil language nil)
        (pred type-eq-decl nil defined_types nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil))
       shostak))
     (doubleplus_TCC1 0
      (doubleplus_TCC1-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (length def-decl "nat" map nil))
       nil))
     (doubleplus_TCC2 0
      (doubleplus_TCC2-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (length def-decl "nat" map nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (doubleplus_TCC3 0
      (doubleplus_TCC3-1 nil 3583526969 ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (length def-decl "nat" map nil))
       nil))
     (doubleplus_TCC4 0
      (doubleplus_TCC4-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (length def-decl "nat" map nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (doubleplus_TCC5 0
      (doubleplus_TCC5-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (length def-decl "nat" map nil))
       nil))
     (doubleplus_TCC6 0
      (doubleplus_TCC6-1 nil 3583526969 ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (length def-decl "nat" map nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (doubleplus_TCC7 0
      (doubleplus_TCC7-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (length def-decl "nat" map nil))
       nil))
     (doubleplus_TCC8 0
      (doubleplus_TCC8-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (length def-decl "nat" map nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (doubleplus_TCC9 0
      (doubleplus_TCC9-1 nil 3583526969 ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (length def-decl "nat" map nil))
       nil))
     (doubleplus_TCC10 0
      (doubleplus_TCC10-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (length def-decl "nat" map nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (doubleplus_TCC11 0
      (doubleplus_TCC11-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (length def-decl "nat" map nil))
       nil))
     (doubleplus_TCC12 0
      (doubleplus_TCC12-1 nil 3583526969 ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (length def-decl "nat" map nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (doubleplus_TCC13 0
      (doubleplus_TCC13-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (length def-decl "nat" map nil))
       nil))
     (doubleplus_TCC14 0
      (doubleplus_TCC14-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (length def-decl "nat" map nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (doubleplus_TCC15 0
      (doubleplus_TCC15-1 nil 3583526969 ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil))
       nil))
     (doubleplus_TCC16 0
      (doubleplus_TCC16-1 nil 3583591306 ("" (subtype-tcc) nil nil) nil
       nil))
     (doubleplus_TCC17 0
      (doubleplus_TCC17-1 nil 3583591306 ("" (termination-tcc) nil nil)
       nil nil))
     (doubleplus_TCC18 0
      (doubleplus_TCC18-1 nil 3583591306 ("" (subtype-tcc) nil nil) nil
       nil))
     (doubleplus_TCC19 0
      (doubleplus_TCC19-1 nil 3583591306 ("" (subtype-tcc) nil nil) nil
       nil))
     (doubleplus_TCC20 0
      (doubleplus_TCC20-1 nil 3583591306 ("" (termination-tcc) nil nil)
       nil nil))
     (doubleplus_TCC21 0
      (doubleplus_TCC21-1 nil 3583591306 ("" (subtype-tcc) nil nil) nil
       nil))
     (doubleplus_TCC22 0
      (doubleplus_TCC22-1 nil 3583591306 ("" (cases-tcc) nil nil) nil
       nil))
     (concat_assoc 0
      (concat_assoc-1 nil 3583531678
       ("" (induct-and-simplify "Θ") nil nil)
       ((syntaxic type-decl nil language nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (++ def-decl "precontext" map nil)
        (syntaxic_induction formula-decl nil language nil))
       shostak))
     (length_concat 0
      (length_concat-1 nil 3583531051
       ("" (induct-and-simplify "Δ") nil nil)
       ((syntaxic type-decl nil language nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (length def-decl "nat" map nil)
        (++ def-decl "precontext" map nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (syntaxic_induction formula-decl nil language nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil))
       shostak))
     (size_concat 0
      (size_concat-1 nil 3583584560
       ("" (induct-and-simplify "Δ") nil nil)
       ((syntaxic type-decl nil language nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (size def-decl "nat" language nil)
        (++ def-decl "precontext" map nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (syntaxic_induction formula-decl nil language nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil))
       shostak))
     (concat_empty_TCC1 0
      (concat_empty_TCC1-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((parsed? def-decl "bool" language nil)) nil))
     (concat_empty 0
      (concat_empty-1 nil 3583531065
       ("" (induct-and-simplify "Δ")
        (("" (induct-and-simplify "Γ") nil nil)) nil)
       ((syntaxic_induction formula-decl nil language nil)
        (empty adt-constructor-decl "(empty?)" language nil)
        (empty? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (++ def-decl "precontext" map nil)
        (precontext type-eq-decl nil language nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (syntaxic type-decl nil language nil))
       shostak))
     (interpret?_TCC1 0
      (interpret?_TCC1-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (preinterp type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil))
       nil))
     (interpret?_TCC2 0
      (interpret?_TCC2-1 nil 3583588230 ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (preinterp type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (size def-decl "nat" language nil))
       nil))
     (interpret?_TCC3 0
      (interpret?_TCC3-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (preinterp type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil))
       nil))
     (interpret?_TCC4 0
      (interpret?_TCC4-1 nil 3583588230 ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (preinterp type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (size def-decl "nat" language nil))
       nil))
     (interpret?_TCC5 0
      (interpret?_TCC5-1 nil 3583588230 ("" (cases-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (preinterp type-eq-decl nil language nil))
       nil))
     (compatible?_TCC1 0
      (compatible?_TCC1-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (preinterp type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil))
       nil))
     (compatible?_TCC2 0
      (compatible?_TCC2-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (preinterp type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (size def-decl "nat" language nil))
       nil))
     (compatible?_TCC3 0
      (compatible?_TCC3-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (preinterp type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil))
       nil))
     (compatible?_TCC4 0
      (compatible?_TCC4-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (preinterp type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (size def-decl "nat" language nil))
       nil))
     (interp_type_TCC1 0
      (interp_type_TCC1-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (interp_type_TCC2 0
      (interp_type_TCC2-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers
         nil))
       nil))
     (interp_type_TCC3 0
      (interp_type_TCC3-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (< const-decl "bool" reals nil) (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (interp_type_TCC4 0
      (interp_type_TCC4-1 nil 3583588230
       ("" (subtype-tcc)
        (("" (expand "apply" -3)
          (("" (assert) (("" (grind) nil nil)) nil)) nil))
        nil)
       ((pretype type-eq-decl nil language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (length def-decl "nat" map nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (< const-decl "bool" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (precontext type-eq-decl nil language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (syntaxic type-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers
         nil))
       nil))
     (interp_type_TCC5 0
      (interp_type_TCC5-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (< const-decl "bool" reals nil) (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (interp_type_TCC6 0
      (interp_type_TCC6-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil))
       nil))
     (interp_type_TCC7 0
      (interp_type_TCC7-1 nil 3583588230
       ("" (subtype-tcc)
        (("" (expand "apply" -4) (("" (grind) nil nil)) nil)) nil)
       ((pretype type-eq-decl nil language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (length def-decl "nat" map nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (< const-decl "bool" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (precontext type-eq-decl nil language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (syntaxic type-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers
         nil))
       nil))
     (interp_type_TCC8 0
      (interp_type_TCC8-1 nil 3583588230 ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil))
       nil))
     (interp_type_TCC9 0
      (interp_type_TCC9-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (< const-decl "bool" reals nil) (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (interp_type_TCC10 0
      (interp_type_TCC10-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil))
       nil))
     (interp_type_TCC11 0
      (interp_type_TCC11-1 nil 3583588230
       ("" (grind) (("" (expand "apply") (("" (grind) nil nil)) nil))
        nil)
       ((int_minus_int_is_int application-judgement "int" integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil))
       nil))
     (interp_type_TCC12 0
      (interp_type_TCC12-1 nil 3583588230
       ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil))
       nil))
     (interp_type_TCC13 0
      (interp_type_TCC13-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (< const-decl "bool" reals nil) (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (interp_type_TCC14 0
      (interp_type_TCC14-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil))
       nil))
     (interp_type_TCC15 0
      (interp_type_TCC15-1 nil 3583588230
       ("" (subtype-tcc)
        (("" (expand "apply") (("" (grind) nil nil)) nil)) nil)
       ((pretype type-eq-decl nil language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (length def-decl "nat" map nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (< const-decl "bool" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (precontext type-eq-decl nil language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (syntaxic type-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers
         nil))
       nil))
     (interp_type_TCC16 0
      (interp_type_TCC16-1 nil 3583588230
       ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil))
       nil))
     (interp_type_TCC17 0
      (interp_type_TCC17-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (< const-decl "bool" reals nil) (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (interp_type_TCC18 0
      (interp_type_TCC18-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil))
       nil))
     (interp_type_TCC19 0
      (interp_type_TCC19-1 nil 3583588230
       ("" (subtype-tcc)
        (("" (expand "apply") (("" (grind) nil nil)) nil)) nil)
       ((pretype type-eq-decl nil language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (length def-decl "nat" map nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (< const-decl "bool" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (precontext type-eq-decl nil language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (syntaxic type-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers
         nil))
       nil))
     (interp_type_TCC20 0
      (interp_type_TCC20-1 nil 3583588230
       ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil))
       nil))
     (interp_type_TCC21 0
      (interp_type_TCC21-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (< const-decl "bool" reals nil) (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (interp_type_TCC22 0
      (interp_type_TCC22-1 nil 3583588230
       ("" (subtype-tcc)
        (("" (expand "apply") (("" (grind) nil nil)) nil)) nil)
       ((pretype type-eq-decl nil language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (length def-decl "nat" map nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (< const-decl "bool" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (precontext type-eq-decl nil language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (syntaxic type-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers
         nil))
       nil))
     (interp_type_TCC23 0
      (interp_type_TCC23-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (< const-decl "bool" reals nil) (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (interp_type_TCC24 0
      (interp_type_TCC24-1 nil 3583588230
       ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (pretype type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil))
       nil))
     (length_interp_type_TCC1 0
      (length_interp_type_TCC1-1 nil 3583590916
       ("" (subtype-tcc) nil nil)
       ((precontext type-eq-decl nil language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (syntaxic type-decl nil language nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (>= const-decl "bool" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil))
       nil))
     (length_interp_type 0
      (length_interp_type-1 nil 3583590917
       ("" (induct "Γ")
        (("1" (assert) nil nil) ("2" (assert) nil nil)
         ("3" (assert) nil nil) ("4" (assert) nil nil)
         ("5" (assert) nil nil) ("6" (assert) nil nil)
         ("7" (assert) nil nil) ("8" (assert) nil nil)
         ("9" (assert) nil nil) ("10" (assert) nil nil)
         ("11" (assert) nil nil) ("12" (assert) nil nil)
         ("13" (assert) (("13" (grind) nil nil)) nil)
         ("14" (assert)
          (("14" (grind)
            (("14" (grind)
              (("14" (grind !!)
                (("14" (expand "apply" -5) (("14" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("15" (assert)
          (("15" (grind)
            (("1" (expand "apply" -) (("1" (grind) nil nil)) nil)
             ("2" (expand "apply" -) (("2" (grind) nil nil)) nil)
             ("3" (expand "apply" -) (("3" (grind) nil nil)) nil)
             ("4" (expand "apply" -) (("4" (grind) nil nil)) nil))
            nil))
          nil)
         ("16" (assert)
          (("16" (grind)
            (("1" (expand "apply" -) (("1" (grind) nil nil)) nil)
             ("2" (expand "apply" -) (("2" (grind) nil nil)) nil)
             ("3" (expand "apply" -) (("3" (grind) nil nil)) nil)
             ("4" (expand "apply" -) (("4" (grind) nil nil)) nil))
            nil))
          nil)
         ("17" (assert)
          (("17" (grind)
            (("1" (expand "apply" -) (("1" (grind) nil nil)) nil)
             ("2" (expand "apply" -) (("2" (grind) nil nil)) nil)
             ("3" (expand "apply" -) (("3" (grind) nil nil)) nil)
             ("4" (expand "apply" -) (("4" (grind) nil nil)) nil))
            nil))
          nil)
         ("18" (assert)
          (("18" (skosimp* :preds? t)
            (("18" (assert)
              (("18" (delete -4)
                (("18" (delete -4)
                  (("18" (expand "apply" -) (("18" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("19" (assert)
          (("19" (skosimp* :preds? t)
            (("19" (assert)
              (("19" (expand "apply" -) (("19" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("20" (assert) nil nil) ("21" (assert) nil nil)
         ("22" (assert) nil nil)
         ("23" (assert) (("23" (grind) nil nil)) nil))
        nil)
       ((apply def-decl "precontext" map nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (length def-decl "nat" map nil)
        (precontext type-eq-decl nil language nil)
        (< const-decl "bool" reals nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (pretype type-eq-decl nil language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (syntaxic type-decl nil language nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (interp_type def-decl "precontext" map nil)
        (syntaxic_induction formula-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (i!1 skolem-const-decl "nat" map nil)
        (i!1 skolem-const-decl "nat" map nil)
        (i!1 skolem-const-decl "nat" map nil)
        (i!1 skolem-const-decl "nat" map nil)
        (i!1 skolem-const-decl "nat" map nil)
        (i!1 skolem-const-decl "nat" map nil)
        (i!1 skolem-const-decl "nat" map nil))
       shostak))
     (apply_interp_type_TCC1 0
      (apply_interp_type_TCC1-1 nil 3583590916
       ("" (subtype-tcc) (("" (rewrite "length_interp_type") nil nil))
        nil)
       ((precontext type-eq-decl nil language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (>= const-decl "bool" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (pretype type-eq-decl nil language nil)
        (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
        (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (syntaxic type-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (length_interp_type formula-decl nil map nil))
       nil))
     (apply_interp_type_TCC2 0
      (apply_interp_type_TCC2-1 nil 3583590916
       ("" (subtype-tcc) nil nil) nil nil))
     (apply_interp_type 0
      (apply_interp_type-1 nil 3583591595
       ("" (induct "Γ")
        (("1" (assert) nil nil) ("2" (assert) nil nil)
         ("3" (assert) nil nil) ("4" (assert) nil nil)
         ("5" (assert) nil nil) ("6" (assert) nil nil)
         ("7" (assert) nil nil) ("8" (assert) nil nil)
         ("9" (assert) nil nil) ("10" (assert) nil nil)
         ("11" (assert) nil nil) ("12" (assert) nil nil)
         ("13" (assert)
          (("13" (skosimp* :preds? t)
            (("13" (assert)
              (("13" (expand "apply" 1 2)
                (("13" (assert)
                  (("13" (expand "apply" 1 3)
                    (("13" (assert)
                      (("13" (lift-if)
                        (("13" (assert)
                          (("13" (bddsimp)
                            (("1" (assert)
                              (("1"
                                (expand "apply" -8)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "interp_type" 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (decompose-equality 1)
                                        (("1"
                                          (expand "parsed?" -5)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (bddsimp)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil)
                                               ("3" (grind) nil nil)
                                               ("4" (grind) nil nil)
                                               ("5" (grind) nil nil)
                                               ("6" (grind) nil nil)
                                               ("7" (grind) nil nil)
                                               ("8" (grind) nil nil)
                                               ("9" (grind) nil nil)
                                               ("10" (grind) nil nil)
                                               ("11" (grind) nil nil)
                                               ("12" (grind) nil nil)
                                               ("13" (grind) nil nil)
                                               ("14" (grind) nil nil)
                                               ("15" (grind) nil nil)
                                               ("16" (grind) nil nil)
                                               ("17" (grind) nil nil)
                                               ("18" (grind) nil nil)
                                               ("19" (grind) nil nil)
                                               ("20" (grind) nil nil)
                                               ("21" (grind) nil nil)
                                               ("22" (grind) nil nil)
                                               ("23" (grind) nil nil)
                                               ("24" (grind) nil nil)
                                               ("25" (grind) nil nil)
                                               ("26"
                                                (assert)
                                                (("26"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil)
                                               ("27"
                                                (postpone)
                                                nil
                                                nil)
                                               ("28"
                                                (postpone)
                                                nil
                                                nil)
                                               ("29"
                                                (postpone)
                                                nil
                                                nil)
                                               ("30"
                                                (postpone)
                                                nil
                                                nil)
                                               ("31"
                                                (postpone)
                                                nil
                                                nil)
                                               ("32"
                                                (postpone)
                                                nil
                                                nil)
                                               ("33"
                                                (postpone)
                                                nil
                                                nil)
                                               ("34"
                                                (postpone)
                                                nil
                                                nil)
                                               ("35"
                                                (postpone)
                                                nil
                                                nil)
                                               ("36"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil)
                             ("3" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("14" (assert) (("14" (postpone) nil nil)) nil)
         ("15" (assert) (("15" (postpone) nil nil)) nil)
         ("16" (assert) (("16" (postpone) nil nil)) nil)
         ("17" (assert) (("17" (postpone) nil nil)) nil)
         ("18" (assert) (("18" (postpone) nil nil)) nil)
         ("19" (assert) (("19" (postpone) nil nil)) nil)
         ("20" (assert) nil nil) ("21" (assert) nil nil)
         ("22" (assert) nil nil)
         ("23" (assert) (("23" (postpone) nil nil)) nil)
         ("24" (assert) (("24" (postpone) nil nil)) nil)
         ("25" (assert) (("25" (postpone) nil nil)) nil))
        nil)
       nil shostak))
     (compatible_interp_type 0
      (compatible_interp_type-1 nil 3583590560
       ("" (induct "τ")
        (("1" (assert) nil nil) ("2" (assert) nil nil)
         ("3" (assert) nil nil) ("4" (assert) nil nil)
         ("5" (assert) nil nil) ("6" (assert) nil nil)
         ("7" (assert) nil nil) ("8" (assert) nil nil)
         ("9" (assert) nil nil) ("10" (assert) nil nil)
         ("11" (assert) nil nil) ("12" (assert) nil nil)
         ("13" (assert) nil nil) ("14" (assert) nil nil)
         ("15" (assert) nil nil) ("16" (assert) nil nil)
         ("17" (assert) nil nil) ("18" (assert) nil nil)
         ("19" (assert) nil nil) ("20" (assert) nil nil)
         ("21" (assert)
          (("21" (skosimp* :preds? t)
            (("21" (assert)
              (("21" (delete -6)
                (("21" (inst - "T!1" "i!1" "Γ!1")
                  (("21" (assert)
                    (("21" (expand "interpret?" 2)
                      (("21" (flatten)
                        (("21" (assert) (("21" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("22" (assert)
          (("22" (skosimp* :preds? t)
            (("22" (assert)
              (("22" (expand "interpret?" 2)
                (("22" (flatten)
                  (("22" (assert)
                    (("22" (delete -6)
                      (("22" (inst - "T!1" "i!1" "Γ!1")
                        (("22" (assert) (("22" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("23" (assert) (("23" (postpone) nil nil)) nil))
        nil)
       nil shostak))
     (interp_const_TCC1 0
      (interp_const_TCC1-1 nil 3583588230
       ("" (subtype-tcc)
        (("" (expand "apply") (("" (grind) nil nil)) nil)) nil)
       ((preterm type-eq-decl nil language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (length def-decl "nat" map nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (< const-decl "bool" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (precontext type-eq-decl nil language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (syntaxic type-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers
         nil))
       nil))
     (interp_const_TCC2 0
      (interp_const_TCC2-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (< const-decl "bool" reals nil) (length def-decl "nat" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (preterm type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (interp_const_TCC3 0
      (interp_const_TCC3-1 nil 3583588230
       ("" (subtype-tcc)
        (("" (expand "apply") (("" (grind) nil nil)) nil)) nil)
       ((preterm type-eq-decl nil language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (length def-decl "nat" map nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (< const-decl "bool" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (precontext type-eq-decl nil language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (syntaxic type-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers
         nil))
       nil))
     (interp_const_TCC4 0
      (interp_const_TCC4-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (< const-decl "bool" reals nil) (length def-decl "nat" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (preterm type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (interp_const_TCC5 0
      (interp_const_TCC5-1 nil 3583588230
       ("" (subtype-tcc)
        (("" (expand "apply") (("" (grind) nil nil)) nil)) nil)
       ((preterm type-eq-decl nil language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (length def-decl "nat" map nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (< const-decl "bool" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (precontext type-eq-decl nil language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (syntaxic type-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers
         nil))
       nil))
     (interp_const_TCC6 0
      (interp_const_TCC6-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (< const-decl "bool" reals nil) (length def-decl "nat" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (preterm type-eq-decl nil language nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (interp_const_TCC7 0
      (interp_const_TCC7-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (preterm type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (interp_const_TCC8 0
      (interp_const_TCC8-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (preterm type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers
         nil))
       nil))
     (interp_const_TCC9 0
      (interp_const_TCC9-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (< const-decl "bool" reals nil) (length def-decl "nat" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (preterm type-eq-decl nil language nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (interp_const_TCC10 0
      (interp_const_TCC10-1 nil 3583588230
       ("" (subtype-tcc)
        (("" (expand "apply") (("" (grind) nil nil)) nil)) nil)
       ((preterm type-eq-decl nil language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (length def-decl "nat" map nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (< const-decl "bool" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (precontext type-eq-decl nil language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (syntaxic type-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers
         nil))
       nil))
     (interp_const_TCC11 0
      (interp_const_TCC11-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (< const-decl "bool" reals nil) (length def-decl "nat" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (preterm type-eq-decl nil language nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (interp_const_TCC12 0
      (interp_const_TCC12-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (preterm type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil))
       nil))
     (interp_const_TCC13 0
      (interp_const_TCC13-1 nil 3583588230
       ("" (subtype-tcc)
        (("" (expand "apply") (("" (grind) nil nil)) nil)) nil)
       ((preterm type-eq-decl nil language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (length def-decl "nat" map nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (< const-decl "bool" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (precontext type-eq-decl nil language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (syntaxic type-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers
         nil))
       nil))
     (interp_const_TCC14 0
      (interp_const_TCC14-1 nil 3583588230
       ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (preterm type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil))
       nil))
     (interp_const_TCC15 0
      (interp_const_TCC15-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (< const-decl "bool" reals nil) (length def-decl "nat" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (preterm type-eq-decl nil language nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (interp_const_TCC16 0
      (interp_const_TCC16-1 nil 3583588230
       ("" (subtype-tcc)
        (("" (expand "apply") (("" (grind) nil nil)) nil)) nil)
       ((preterm type-eq-decl nil language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (length def-decl "nat" map nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (< const-decl "bool" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (precontext type-eq-decl nil language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (syntaxic type-decl nil language nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (int_minus_int_is_int application-judgement "int" integers
         nil))
       nil))
     (interp_const_TCC17 0
      (interp_const_TCC17-1 nil 3583588230 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (< const-decl "bool" reals nil) (length def-decl "nat" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (preterm type-eq-decl nil language nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (parsed? def-decl "bool" language nil))
       nil))
     (interp_const_TCC18 0
      (interp_const_TCC18-1 nil 3583588230
       ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (< const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (length def-decl "nat" map nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (apply def-decl "precontext" map nil)
        (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
        (preterm type-eq-decl nil language nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil))
       nil))
     (interp_TCC1 0
      (interp_TCC1-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (preinterp type-eq-decl nil language nil)
        (compatible? def-decl "bool" map nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil))
       nil))
     (interp_TCC2 0
      (interp_TCC2-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (preinterp type-eq-decl nil language nil)
        (compatible? def-decl "bool" map nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil))
       nil))
     (interp_TCC3 0
      (interp_TCC3-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (preinterp type-eq-decl nil language nil)
        (compatible? def-decl "bool" map nil))
       nil))
     (interp_TCC4 0
      (interp_TCC4-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (preinterp type-eq-decl nil language nil)
        (compatible? def-decl "bool" map nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (size def-decl "nat" language nil))
       nil))
     (interp_TCC5 0
      (interp_TCC5-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (preinterp type-eq-decl nil language nil)
        (compatible? def-decl "bool" map nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil))
       nil))
     (interp_TCC6 0
      (interp_TCC6-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (preinterp type-eq-decl nil language nil)
        (compatible? def-decl "bool" map nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil))
       nil))
     (interp_TCC7 0
      (interp_TCC7-1 nil 3583526969 ("" (termination-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (preinterp type-eq-decl nil language nil)
        (compatible? def-decl "bool" map nil))
       nil))
     (interp_TCC8 0
      (interp_TCC8-1 nil 3583526969 ("" (subtype-tcc) nil nil)
       ((boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (syntaxic type-decl nil language nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (preinterp type-eq-decl nil language nil)
        (compatible? def-decl "bool" map nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (>= const-decl "bool" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (size def-decl "nat" language nil))
       nil))
     (length_interp 0
      (length_interp-1 nil 3583531345
       ("" (induct "σ")
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (grind) nil nil) ("4" (grind) nil nil)
         ("5" (grind) nil nil) ("6" (grind) nil nil)
         ("7" (assert) nil nil) ("8" (assert) nil nil)
         ("9" (assert) nil nil) ("10" (assert) nil nil)
         ("11" (assert) nil nil) ("12" (assert) nil nil)
         ("13" (assert) nil nil) ("14" (assert) nil nil)
         ("15" (assert) nil nil) ("16" (assert) nil nil)
         ("17" (assert) nil nil) ("18" (assert) nil nil)
         ("19" (assert) nil nil)
         ("20" (assert) (("20" (grind) nil nil)) nil)
         ("21" (skosimp* :preds? t)
          (("21" (assert)
            (("21" (inst - "rest(Γ!1)") (("21" (grind) nil nil)) nil))
            nil))
          nil)
         ("22" (grind) nil nil) ("23" (grind) nil nil)
         ("24" (grind) nil nil) ("25" (grind) nil nil))
        nil)
       ((NOT const-decl "[bool -> bool]" booleans nil)
        (rest shared-adt-accessor-decl
              "[{x: syntaxic |     type_decl?(x) OR type_var?(x) OR type_def?(x) OR const_decl?(x) OR const_var?(x) OR const_def?(x) OR theory_def?(x) OR itype?(x) OR iconst?(x)} -> syntaxic]"
              language nil)
        (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (itype? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (theory_def? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (const_def? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (const_var? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (type_var? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (syntaxic_induction formula-decl nil language nil)
        (length def-decl "nat" map nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (premap type-eq-decl nil language nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (number nonempty-type-decl nil numbers nil)
        (syntaxic type-decl nil language nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (prekeyword type-decl nil language nil)
        (parsed? def-decl "bool" language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (precontext type-eq-decl nil language nil)
        (preinterp type-eq-decl nil language nil)
        (compatible? def-decl "bool" map nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (interp def-decl "precontext" map nil))
       shostak))
     (size_interp 0
      (size_interp-1 nil 3583531760
       ("" (induct-and-simplify "Θ")
        (("" (induct-and-simplify "σ")
          (("" (typepred "Γ!1")
            (("" (assert)
              (("" (expand "parsed?" -1) (("" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ((syntaxic_induction formula-decl nil language nil)
        (+ const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (interp def-decl "precontext" map nil)
        (size def-decl "nat" language nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (< const-decl "bool" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (compatible? def-decl "bool" map nil)
        (preinterp type-eq-decl nil language nil)
        (precontext type-eq-decl nil language nil)
        (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
        (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
        (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
         language nil)
        (parsed? def-decl "bool" language nil)
        (prekeyword type-decl nil language nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil)
        (syntaxic type-decl nil language nil)
        (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
         integers nil)
        (posint_plus_nnint_is_posint application-judgement "posint"
         integers nil)
        (nnint_plus_posint_is_posint application-judgement "posint"
         integers nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (rest shared-adt-accessor-decl
              "[{x: syntaxic |     type_decl?(x) OR type_var?(x) OR type_def?(x) OR const_decl?(x) OR const_var?(x) OR const_def?(x) OR theory_def?(x) OR itype?(x) OR iconst?(x)} -> syntaxic]"
              language nil)
        (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (itype? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (theory_def? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (const_def? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (const_var? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (const_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (type_var? adt-recognizer-decl "[syntaxic -> boolean]" language
         nil)
        (type_decl? adt-recognizer-decl "[syntaxic -> boolean]"
         language nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (NOT const-decl "[bool -> bool]" booleans nil))
       shostak)))

