init_context: THEORY
BEGIN
  IMPORTING language

  AUTO_REWRITE+ sexpr?
  T, p: VAR (sexpr?)
  a, b: VAR (sexpr?)
  t1, t2: VAR (sexpr?)


  % A context is admissible if it is of the form Γ, Δ where: 
  % (cf begining of chapter 3)
  % Γ = [ bool_theory: THEORY BEGIN bool: TYPE ext, 
  %	  	       	      	    TRUE: bool = ext, 
  %			      	    FALSE: bool = ext 
  %				    boolop: [[bool, bool] -> bool]
  %				    not: [bool -> bool] = ext
  %				    and: boolop = ext
  %				    or:  boolop = ext END, 
  %	  equalities: THEORY BEGIN T: TYPE, =: [T, T -> bool] = ext END]
  bool_theory: (theory?) = theory_((#
    length := 7, 
    seq := LAMBDA (x: below[7]): COND
      x = 6 -> type_var,	 % bool: TYPE = ext
      x = 5 -> const_var(v(0)),	 % TRUE: bool = ext
      x = 4 -> const_var(v(1)),	 % FALSE: bool = ext
      % boolop: [[bool, bool] -> bool] 
      x = 3 -> type_def(fun(prod(v(2), v(3)), v(3))),
      % not: [bool -> bool]
      x = 2 -> const_var(fun(v(3), v(4))), 
      % and: boolop
      x = 1 -> const_var(v(1)),
      % or: boolop
      x = 0 -> const_var(v(2))
    ENDCOND #))
  bool_(len: above(0)): (sexpr?) = dot(v(len - 1), v(6))
  TRUE_(len: above(0)): (sexpr?) = dot(v(len - 1), v(5))
  FALSE_(len: above(0)): (sexpr?) = dot(v(len - 1), v(4))
  boolop(len: above(0)): (sexpr?) = dot(v(len - 1), v(3))
  not_(len: above(0)): (sexpr?) = dot(v(len - 1), v(2))
  and_(len: above(0)): (sexpr?) = dot(v(len - 1), v(1))
  or_(len: above(0)): (sexpr?) = dot(v(len - 1), v(0))

  ¬(b)(len: above(0)): (sexpr?) = app(not_(len), b)
  ;∧(a, b)(len: above(0)): (sexpr?) = app(and_(len), pair(a, b))
  ;∨(a, b)(len: above(0)): (sexpr?) = app(or_(len), pair(a, b))

  equalities: (theory?) = theory_((#
    length := 2,
    seq := LAMBDA (x: below[2]): COND
      % T: TYPE
      x = 1 -> type_decl,
      % =:	   [                [  T ,   T ] ->  bool   ] 
      x = 0 -> const_var( fun( prod( v(0), v(1)) , bool_(3)))	
    ENDCOND #))
   
  % =::[[T -> T] -> bool] ≡ equalities
  equal(T)(len: above(1)): (sexpr?) =
    LET σ = list2finseq((: ikeep, itype(T) :)) IN
    dot(interp(v(len - 2), ideep(σ)), v(0))
  ;≐(a, b)(T)(len: above(1)): (sexpr?) = app(equal(T)(len), pair(a, b))
  % 	     	 ∀(x: T): p(x) ≡                        (λ(x: T): p(x) = λx TRUE)
  forall_(T, p)(len: above(1)): (sexpr?) = app(equal(fun(T, bool_(len + 1)))(len), pair( lam(T, p), lam(T, TRUE_(len + 1))))
  % 	     	 ∃(x: T): p(x) ≡ ¬ ∀(x: T): ¬p(x)
  exists_(T, p)(len: above(1)): (sexpr?) = app(not_(len), forall_(T, (¬p)(len + 1))(len))


  init_context: (theory?) = theory_((# 
    length := 2, 
    seq := LAMBDA (x: below[2]): COND
      x = 1 -> theory_def(bool_theory),
      x = 0 -> theory_def(equalities)
    ENDCOND #))

  forall_(T, (t: (tcc?)))(len: above(1)): (tcc?) =
    tcc( expr(t) WITH [`seq := LAMBDA (x: below(length(expr(t)))): 
    	 forall_(T, (expr(t))(x))(len)])

  admissible?(Γ: finseq[(scontext?)]): bool =
    Γ = empty_seq OR
    Γ = rest(decls(init_context), 0) OR
    (length(Γ) > 1 AND
    Γ ^^ (length(Γ) - 2, length(Γ)) = decls(init_context))

END init_context



  % if_theory: (theory?) = theory_((#
  %   length := 2, 
  %   seq := LAMBDA (x: below[2]): COND
  %     % T: TYPE	       		  	    	  
  %     x = 1 -> type_decl,  
  %     % IF: 	   [	      bool    ->     (     {   c:  *    |   b } -> T  ) ->      (     {    c: *    |    ¬ b  }    ->   T)  ->  T   ] = ext
  %     x = 0 -> const_var( fun(bool_(5), fun( fun(subtype(star(6), v(1)) , v(2)) ,  fun( fun(subtype(star(7), (¬(v(2)))(7)) , v(3)) ,  v(3)))))
  %   ENDCOND #))
  % ifte_(T)(len: above(4)): (sexpr?) = dot(interp(v(len - 5), list2finseq((: ikeep, itype(T) :))), v(0))
  % if_(b, t1, t2)(T)(len: above(4)): (sexpr?) = app(app(app(ifte_(T)(len), b), lam(subtype(star(len), b ↑ 1), t1 ↑ 1)), lam(subtype(star(len), (¬(b ↑ 1))(len + 1)), t2 ↑ 1))

      % x = 3 -> const_def( fun(bool_(3), bool_(4)) , lam(bool_(3), ≐(v(0), FALSE_(4))(bool_(4))(4))),
      % x = 2 -> theory_def(if_theory),
      % %		       ∧:    [   [  bool   -> bool   ] -> bool   ]:  λ (b: [   bool   ,  bool ] ):   IF    b`1   THEN   b`2    ELSE FALSE   
      % x = 1 -> const_def( fun(prod(bool_(5), bool_(6)), bool_(6)) , lam( prod(bool_(5), bool_(6)) , if_(lproj(v(0)), rproj(v(0)), FALSE_(6))(bool_(6))(6))),
      % %		       ∨:    [   [  bool   -> bool   ] -> bool   ]:  λ (b: [   bool   ,  bool ] ):   IF    b`1   THEN   TRUE    ELSE b`2   
      % x = 0 -> const_def( fun(prod(bool_(5), bool_(6)), bool_(6)) , lam( prod(bool_(5), bool_(6)) , if_(lproj(v(0)), TRUE_(6), rproj(v(0)))(bool_(6))(6)))
