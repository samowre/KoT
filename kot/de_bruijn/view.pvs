view: THEORY
BEGIN
  IMPORTING language
  
  syntaxic_: DATATYPE
  BEGIN
    v_(i: nat): v?
    dot_(m: syntaxic_, x: syntaxic_): dot?
    interp_(m: syntaxic_, map: list[syntaxic_]): interp?
    theory__(decls: list[syntaxic_]): theory?

    fun_(dom: syntaxic_, range: syntaxic_): fun?
    prod_(left: syntaxic_, right: syntaxic_): prod?
    subtype_(supertype: syntaxic_, pred: syntaxic_): subtype?

    app_(op: syntaxic_, arg: syntaxic_): app?
    lam_(type_: syntaxic_, body: syntaxic_): lam?
    pair_(left: syntaxic_, right: syntaxic_): pair?
    lproj_(arg: syntaxic_): lproj?
    rproj_(arg: syntaxic_): rproj?

    type_decl_: type_decl?
    type_var_: type_var?
    type_def_(def: syntaxic_): type_def?
    const_decl_(type_: syntaxic_): const_decl?
    const_var_(type_: syntaxic_): const_var?
    const_def_(type_: syntaxic_, def: syntaxic_): const_def?
    theory_def_(def: syntaxic_): theory_def?

    ikeep_: ikeep?
    itype_(def: syntaxic_): itype?
    iterm_(def: syntaxic_): iterm?
  END syntaxic_

  language2view(S: syntaxic): RECURSIVE syntaxic_ =
    CASES S OF
      v(i): v_(i)
    , dot(m, x): dot_(language2view(m), language2view(x))
    , interp(m, map): interp_(language2view(m), finseq2list((# length := length(map), seq := LAMBDA (x: below[length(map)]): language2view(map(x)) #)))
    , theory_(decls): theory__(finseq2list((# length := length(decls), seq := LAMBDA (x: below[length(decls)]): language2view(decls(x)) #)))

    , fun(A, B): fun_(language2view(A), language2view(B))
    , prod(A, B): prod_(language2view(A), language2view(B))
    , subtype(T, a): subtype_(language2view(T), language2view(a))

    , app(f, a): app_(language2view(f), language2view(a))
    , lam(T, a): lam_(language2view(T), language2view(a))
    , pair(a, b): pair_(language2view(a), language2view(b))
    , lproj(a): lproj_(language2view(a))
    , rproj(a): rproj_(language2view(a))

    , type_decl: type_decl_
    , type_var: type_var_
    , type_def(T): type_def_(language2view(T))
    , const_decl(T): const_decl_(language2view(T))
    , const_var(T): const_var_(language2view(T))
    , const_def(T, a): const_def_(language2view(T), language2view(a))
    , theory_def(Th): theory_def_(language2view(Th))

    , ikeep: ikeep_
    , itype(T): itype_(language2view(T))
    , iterm(a): iterm_(language2view(a))
    ENDCASES
  MEASURE S BY <<
END view
