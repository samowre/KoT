delta: THEORY
BEGIN
  IMPORTING subst, interp
  AUTO_REWRITE+ sexpr?, scontext?, sinterp?


  Γ, Δ: VAR finseq[(scontext?)]
  Θ: VAR finseq[(scontext?)]
  U, V: VAR syntaxic
  x: VAR nat
  σ, τ: VAR finseq[(sinterp?)]
  n: VAR nat
  m: VAR (sexpr?)
  a: VAR (sexpr?)
  S: VAR finseq[(scontext?)]
  ths?: VAR bool
  


  η(m, n)(U): RECURSIVE same(U) =
    IF n = 0 THEN U
    ELSE η(m, n - 1)(subst(U, n - 1, dot(m ↑ (n - 1), v(n - 1))))
    ENDIF
  MEASURE n
  η(m, n)(l: list[(sexpr?)]): RECURSIVE list[(sexpr?)] =
    CASES l OF
      null: null
    , cons(h, t): cons(η(m, n)(h), η(m, n)(t))
    ENDCASES
  MEASURE length(l)


  externalize(m, U): same(U) =
    CASES U OF
      theory_(Θ):
        theory_(Θ WITH [ `seq := LAMBDA (x: below[length(Θ)]):
	  CASES Θ(x) OF
	    type_var: type_def(dot(m ↑ (length(Θ) - x - 1), v(x)))
	  , const_var(T): const_def(T, dot(m ↑ (length(Θ) - x - 1), v(x)))
	    ELSE Θ(x)
	  ENDCASES ])
      ELSE U
    ENDCASES

  AUTO_REWRITE- sexpr?, scontext?, sinterp?
  expandable?(Γ)(U): bool =
    (ikeep?(U) OR itype?(U) OR iterm?(U) IMPLIES length(Γ) > 0 AND compatible0?(Γ(0), U)) AND 
    (ideep?(U) IMPLIES LET σ = map(U) IN 
      length(Γ) >= length(σ) AND compatible?(Γ ^^ (0, length(σ)), σ))


  expand(ths?)(Γ, (U :(expandable?(Γ)))): RECURSIVE 
    { V | (sexpr?(U) IMPLIES sexpr?(V)) AND
      	  (scontext?(U) IMPLIES scontext?(V)) AND
	  (ideep?(U) IMPLIES theory?(V)) AND
	  (ikeep?(U) OR itype?(U) OR iterm?(U) IMPLIES scontext?(V)) } = 
    CASES U OF
      v(x):
        IF x < length(Γ) AND definition?(Γ(x)) AND (ths? OR NOT theory_def?(Γ(x)))
  	  THEN def(Γ(x)) ↑ (x + 1)
  	  ELSE U
  	ENDIF
    , dot(m, x):
        CASES expand(TRUE)(Γ, m) OF
  	  theory_(Θ): η(expand(FALSE)(Γ, m), length(Θ))(expand(ths?)(Γ ++ Θ, x))
  	  ELSE dot(expand(FALSE)(Γ, m), x)
  	ENDCASES
    , interp(m, σ):
        CASES expand(ths?)(Γ, m) OF
  	  theory_(Θ):
	    IF compatible?(Θ, map(σ)) THEN
	      externalize(interp(expand(FALSE)(Γ, m), σ), expand(ths?)(Γ ++ Θ, σ))
	    ELSE U ENDIF
  	  ELSE U % Doesn't happen until we have theory_{decl,var}
  	ENDCASES
    , theory_(Θ):
        IF length(Θ) = 0 THEN U ELSE
	LET pos = length(Θ) - 1,
	    epos = k(expand(ths?)(Γ, Θ(pos))) IN
	CASES expand(ths?)(Γ ++ epos, theory_(Θ ^^ (0, pos))) OF
	  theory_(Δ): theory_(epos ++ Δ)
	  ELSE U % Does not happen
 	ENDCASES
	ENDIF
    , fun(A, B):
        LET eA = expand(ths?)(Γ, A) IN
	fun(eA, expand(ths?)(Γ ++ k(const_var(eA)), B))
    , prod(A, B):
        LET eA = expand(ths?)(Γ, A) IN
	prod(eA, expand(ths?)(Γ ++ k(const_var(eA)), B))
    , subtype(T, a):
        LET eT = expand(ths?)(Γ, T) IN
	subtype(eT, expand(ths?)(Γ ++ k(const_var(eT)), a))

    , app(f, a): app(expand(ths?)(Γ, f), expand(ths?)(Γ, a))
    , lam(T, a):
        LET eT = expand(ths?)(Γ, T) IN
	lam(eT, expand(ths?)(Γ ++ k(const_decl(eT)), a))
    , pair(a, b): pair(expand(ths?)(Γ, a), expand(ths?)(Γ, b))
    , lproj(a): lproj(expand(ths?)(Γ, a))
    , rproj(a): lproj(expand(ths?)(Γ, a))

    , ikeep: Γ(0)
    , itype(T): type_def(expand(ths?)(rest(Γ, 0), T))
    , iterm(a): const_def(type_(Γ(0)), expand(ths?)(rest(Γ, 0), a))
    , ideep(σ):
       IF length(σ) = 0
         THEN theory_(empty_seq)
	 ELSE
	   CASES expand(ths?)(rest(Γ, 0), ideep(irest(σ, 0))) OF
	     theory_(Δ): theory_(Δ ++ k(expand(ths?)(rest(Γ, length(Δ)) ++ Δ ++ k(Γ(0)), σ(0))))
	     ELSE U
	   ENDCASES
	 ENDIF

	   % LET i = expand(ths?)(rest(Γ, pos) ++ k(Γ(pos)), σ(pos) ↑ 1) In
	   % rest(Γ, pos) ++ k(i) ++ 
	   
	   % CASES expand(ths?)(rest(Γ, 0), ideep(rest(σ, 0))) OF
	   %   theory_(Δ): theory_(Δ ++ k(expand(ths?)(rest(Γ, length(σ) - 1) ++ Δ ++ k(Γ(0)), σ(0))))
	       % theory_(Δ ++ k(
	       %   CASES expand(ths?)(rest(Γ, 0) ++ Δ, σ(0)) ↑ 1 OF
	       % 	   ikeep:
	       % 	     CASES Γ(0) OF
	       %         type_var: type_def(v(length(Δ)))
	       %       , const_var(T): const_def(T, v(length(Δ)))
	       %       , type_decl: type_decl
	       %       , const_decl(T): const_decl(T)
	       %       , theory_def(Th): theory_def(Th)
	       %       ENDCASES
	       % 	 , itype(T): type_def(T)
	       % 	 , iterm(a): const_def(type_(Γ(0)), a)
	       % 	 ENDCASES))
	 %     ELSE U % Does not happen :-)
	 %   ENDCASES
	 % ENDIF

    , type_decl: type_decl
    , type_var: type_var
    , type_def(T): type_def(expand(ths?)(Γ, T))
    , const_decl(T): const_decl(expand(ths?)(Γ, T))
    , const_var(T): const_var(expand(ths?)(Γ, T))
    , const_def(T, a): const_def(expand(ths?)(Γ, T), expand(ths?)(Γ, a))
    , theory_def(Th): theory_def(expand(ths?)(Γ, Th))
    ENDCASES
  MEASURE size(U)


  expand_preserves_theory: THEOREM
    theory?(expand(ths?)(Γ, theory_(Δ)))
  expand_size: THEOREM 
    length(decls(expand(ths?)(Γ, theory_(Δ)))) = length(Δ)
  expand_size_ideep: THEOREM
    expandable?(Γ)(ideep(σ)) IMPLIES
    length(decls(expand(ths?)(Γ, ideep(σ)))) = length(σ)
  expand_equiv: THEOREM
    decls(expand(ths?)(Γ, theory_(Δ))) ≡ Δ

  expand_ctx(Γ): { Δ | Δ ≡ Γ } =
    decls(expand(TRUE)(empty_seq, theory_(Γ)))
  
  δ0(Γ)(U: (expandable?(Γ))): syntaxic =
    expand(FALSE)(Γ, U)

  ρ0(Γ)(U: (expandable?(Γ))): syntaxic =
    expand(TRUE)(Γ, U)



  % % length for tccs
  % tlength(Γ)(U): nat = 
  %   CASES U OF
  %     v(i): 0
  %   , dot(m, x): 1
  %   , interp(m, σ): 
  %   , theory_(Θ):
      
  %   , fun(A, B): 1
  %   , prod(A, B): 1
  %   , subtype(T, a): 1
      
  %   , app(f, a): 1
  %   , lamb(T, a): 1
  %   , pair(a, b): 1
  %   , lproj(a): 1
  %   , rproj(a): 1

  %   , type_decl: 0
  %   , type_var: 0
  %   , type_def: 1
  %   , const_decl: 1
  %   , const_var: 1
  %   , const_def: 1
  %   , theory_def:

  %   , ikeep:
  %   , itype:
  %   , iterm:	
  %   , ideep:

END delta
