delta: THEORY
BEGIN
  IMPORTING subst, interp

  Γ: VAR finseq[(scontext?)]
  U, V: VAR syntaxic
  x: VAR nat
  σ: VAR finseq[(sinterp?)]
  n: VAR nat
  m: VAR (sexpr?)

  w: [finseq[(scontext?)], syntaxic -> ordinal]
  definition?: [syntaxic -> bool]
  var?: [syntaxic -> bool]
  ;rest[T: TYPE]: [finseq[T], nat -> finseq[T]]
  k: [(scontext?) -> finseq[(scontext?)]]
  ;++(s1, s2: finseq[(scontext?)]): finseq[(scontext?)] = s2 o s1

  η(m, n)(U): RECURSIVE syntaxic =
    IF n = 0 THEN U
    ELSE η(m, n - 1)(subst(U, n - 1, dot(m ↑ (n - 1), v(n - 1)))) ENDIF
  MEASURE n

  δ(Γ)(U): RECURSIVE syntaxic =
    CASES U OF
      v(x):
        IF definition?(Γ(x))
	  THEN δ(rest(Γ, x))(def(Γ(x)))
	  ELSE v(x)
	ENDIF
    , dot(m, x):
        CASES δ(Γ)(m) OF
	  theory_(Θ):
	    IF var?(Θ(i(x)))
	      THEN dot(m, x)
	      ELSE δ(Γ)(Θ(i(x)))
	    ENDIF
	  ELSE dot(δ(Γ)(m), x)
	ENDCASES
    , interp(m, σ):
        CASES δ(Γ)(m) OF
	  theory_(Θ): δ(Γ)(theory_(interpret(Θ, σ)))
	  ELSE interp(δ(Γ)(m), σ)
	ENDCASES

    , fun(A, B): fun(δ(Γ)(A), δ(Γ ++ k(const_var(δ(Γ)(A))))(B))
    , prod(A, B): prod(δ(Γ)(A), δ(Γ ++ k(const_var(δ(Γ)(A))))(B))
    , subtype(T, a): subtype(δ(Γ)(T), a)

      ELSE U
    ENDCASES
  MEASURE w(Γ, U)
END delta
