(|language|
 (|sum_TCC1| 0
  (|sum_TCC1-1| NIL 3583594641 ("" (SUBTYPE-TCC) NIL NIL)
   ((< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sum_TCC2| 0
  (|sum_TCC2-1| NIL 3583594641 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sum_TCC3| 0
  (|sum_TCC3-1| NIL 3583594641 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sum_TCC4| 0
  (|sum_TCC4-1| NIL 3583594641 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL))
 (|sum_TCC5| 0
  (|sum_TCC5-1| NIL 3583616733 ("" (TERMINATION-TCC) NIL NIL) NIL NIL))
 (|sum_TCC6| 0
  (|sum_TCC6-1| NIL 3583616733
   ("" (SKOSIMP*)
    (("" (ALL-TYPEPREDS)
      (("" (CASE "x!1 > 0")
        (("1" (INSTANTIATE -10 "x!1 - 1")
          (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)
         ("2" (GRIND) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even?| CONST-DECL "bool" |integers| NIL)
    (|total_order?| CONST-DECL "bool" |orders| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|strict_total_order?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|odd?| CONST-DECL "bool" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|reflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|preorder?| CONST-DECL "bool" |orders| NIL)
    (|antisymmetric?| CONST-DECL "bool" |relations| NIL)
    (|partial_order?| CONST-DECL "bool" |orders| NIL)
    (|dichotomous?| CONST-DECL "bool" |orders| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|trichotomous?| CONST-DECL "bool" |orders| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL)
    (|mult_divides2| APPLICATION-JUDGEMENT "(divides(m))" |divides| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|x!1| SKOLEM-CONST-DECL "below[len!1]" |language| NIL)
    (|len!1| SKOLEM-CONST-DECL "nat" |language| NIL))
   NIL))
 (|size_TCC1| 0
  (|size_TCC1-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC2| 0
  (|size_TCC2-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC3| 0
  (|size_TCC3-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|ideep?| ADT-RECOGNIZER-DECL "[syntaxic -> boolean]" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC4| 0
  (|size_TCC4-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|ideep?| ADT-RECOGNIZER-DECL "[syntaxic -> boolean]" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC5| 0
  (|size_TCC5-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (|scontext?| ADT-DEF-DECL "boolean" |language| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|subterm| ADT-DEF-DECL "boolean" |language| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL))
 (|size_TCC6| 0
  (|size_TCC6-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC7| 0
  (|size_TCC7-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC8| 0
  (|size_TCC8-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC9| 0
  (|size_TCC9-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC10| 0
  (|size_TCC10-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC11| 0
  (|size_TCC11-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC12| 0
  (|size_TCC12-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC13| 0
  (|size_TCC13-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC14| 0
  (|size_TCC14-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC15| 0
  (|size_TCC15-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC16| 0
  (|size_TCC16-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC17| 0
  (|size_TCC17-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC18| 0
  (|size_TCC18-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC19| 0
  (|size_TCC19-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC20| 0
  (|size_TCC20-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC21| 0
  (|size_TCC21-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC22| 0
  (|size_TCC22-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC23| 0
  (|size_TCC23-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC24| 0
  (|size_TCC24-1| NIL 3583528309 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC25| 0
  (|size_TCC25-1| NIL 3583692220 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC26| 0
  (|size_TCC26-1| NIL 3583692220 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC27| 0
  (|size_TCC27-1| NIL 3584471252 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|sexpr?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|size_TCC28| 0
  (|size_TCC28-1| NIL 3584890033 ("" (TERMINATION-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (|sinterp?| ADT-DEF-DECL "boolean" |language| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|subterm| ADT-DEF-DECL "boolean" |language| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[syntaxic])" |language| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL))
 (|equiv_TCC1| 0
  (|equiv_TCC1-1| NIL 3584974066 ("" (SUBTYPE-TCC) NIL NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (|scontext?| ADT-DEF-DECL "boolean" |language| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL))
   NIL))
 (|equiv_TCC2| 0
  (|equiv_TCC2-1| NIL 3584974066 ("" (SUBTYPE-TCC) NIL NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (|scontext?| ADT-DEF-DECL "boolean" |language| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL))
   NIL))
 (|equiv_TCC3| 0
  (|equiv_TCC3-1| NIL 3584974066 ("" (SUBTYPE-TCC) NIL NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (|scontext?| ADT-DEF-DECL "boolean" |language| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL))
   NIL))
 (|equiv_TCC4| 0
  (|equiv_TCC4-1| NIL 3584974066 ("" (SUBTYPE-TCC) NIL NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (|scontext?| ADT-DEF-DECL "boolean" |language| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL))
   NIL))
 (|equiv_TCC5| 0
  (|equiv_TCC5-1| NIL 3584974066 ("" (SUBTYPE-TCC) NIL NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (|scontext?| ADT-DEF-DECL "boolean" |language| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL))
   NIL))
 (|equiv_TCC6| 0
  (|equiv_TCC6-1| NIL 3584974066 ("" (SUBTYPE-TCC) NIL NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (|scontext?| ADT-DEF-DECL "boolean" |language| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL))
   NIL))
 (|equiv_TCC7| 0
  (|equiv_TCC7-1| NIL 3584974066 ("" (SUBTYPE-TCC) NIL NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (|scontext?| ADT-DEF-DECL "boolean" |language| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL))
   NIL))
 (|equiv_commut| 0
  (|equiv_commut-1| NIL 3586287860
   ("" (EXPAND "≡")
    (("" (REDUCE)
      (("1" (TYPEPRED "Γ!1`seq(x!1)")
        (("1" (EXPAND "scontext?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
       ("2" (TYPEPRED "Γ!1`seq(x!1)")
        (("2" (EXPAND "scontext?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)
       ("3" (TYPEPRED "Γ!1`seq(x!1)")
        (("3" (EXPAND "scontext?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)
       ("4" (TYPEPRED "Γ!1`seq(x!1)")
        (("4" (EXPAND "scontext?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)
       ("5" (TYPEPRED "Γ!1`seq(x!1)")
        (("5" (EXPAND "scontext?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)
       ("6" (TYPEPRED "Γ!1`seq(x!1)")
        (("6" (EXPAND "scontext?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)
       ("7" (TYPEPRED "Γ!1`seq(x!1)")
        (("7" (EXPAND "scontext?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)
       ("8" (TYPEPRED "Γ!1`seq(x!1)")
        (("8" (EXPAND "scontext?")
          (("8" (TYPEPRED "Γ!1`seq(x!1)")
            (("8" (EXPAND "scontext?")
              (("8" (TYPEPRED "Δ!1`seq(x!1)")
                (("8" (EXPAND "scontext?") (("8" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("9" (TYPEPRED "Δ!1`seq(x!1)")
        (("9" (EXPAND "scontext?") (("9" (PROPAX) NIL NIL)) NIL)) NIL)
       ("10" (TYPEPRED "Δ!1`seq(x!1)")
        (("10" (EXPAND "scontext?") (("10" (PROPAX) NIL NIL)) NIL)) NIL)
       ("11" (TYPEPRED "Δ!1`seq(x!1)")
        (("11" (EXPAND "scontext?") (("11" (PROPAX) NIL NIL)) NIL)) NIL)
       ("12" (TYPEPRED "Δ!1`seq(x!1)")
        (("12" (EXPAND "scontext?") (("12" (PROPAX) NIL NIL)) NIL)) NIL)
       ("13" (TYPEPRED "Δ!1`seq(x!1)")
        (("13" (EXPAND "scontext?") (("13" (PROPAX) NIL NIL)) NIL)) NIL)
       ("14" (TYPEPRED "Δ!1`seq(x!1)")
        (("14" (EXPAND "scontext?") (("14" (PROPAX) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (Δ!1 SKOLEM-CONST-DECL "finseq[(scontext?)]" |language| NIL)
    (Γ!1 SKOLEM-CONST-DECL "finseq[(scontext?)]" |language| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|scontext?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (≡ CONST-DECL "bool" |language| NIL))
   SHOSTAK))
 (|kind_TCC1| 0
  (|kind_TCC1-1| NIL 3584498672
   ("" (SKOSIMP* :PREDS? T) (("" (GRIND) NIL NIL)) NIL)
   ((|scontext?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|concat_empty| 0
  (|concat_empty-1| NIL 3583611560 ("" (GRIND-WITH-EXT) NIL NIL)
   ((++ CONST-DECL "finseq[(scontext?)]" |language| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|scontext?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|concat__empty| 0
  (|concat__empty-1| NIL 3583611565 ("" (GRIND-WITH-EXT) NIL NIL)
   ((++ CONST-DECL "finseq[(scontext?)]" |language| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|scontext?| ADT-DEF-DECL "boolean" |language| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|concat_assoc| 0
  (|concat_assoc-1| NIL 3583611568
   ("" (AUTO-REWRITE "++")
    (("" (AUTO-REWRITE "o")
      (("" (SKOSIMP* :PREDS? T)
        (("" (ASSERT) (("" (GRIND-WITH-EXT :IF-MATCH NIL) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (|scontext?| ADT-DEF-DECL "boolean" |language| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL)
    (|mult_divides2| APPLICATION-JUDGEMENT "(divides(m))" |divides| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (Γ!1 SKOLEM-CONST-DECL "finseq[(scontext?)]" |language| NIL)
    (Δ!1 SKOLEM-CONST-DECL "finseq[(scontext?)]" |language| NIL)
    (Θ!1 SKOLEM-CONST-DECL "finseq[(scontext?)]" |language| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (++ CONST-DECL "finseq[(scontext?)]" |language| NIL))
   SHOSTAK))
 (|rest_concat_TCC1| 0
  (|rest_concat_TCC1-1| NIL 3583611672 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|rest_concat| 0
  (|rest_concat-1| NIL 3583611672
   ("" (SKOSIMP* :PREDS? T) (("" (GRIND-WITH-EXT) NIL NIL)) NIL)
   ((|epsilon| CONST-DECL "T" |epsilons| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|x!1| SKOLEM-CONST-DECL "nat" |language| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (Δ!1 SKOLEM-CONST-DECL "finseq[(scontext?)]" |language| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (Γ!1 SKOLEM-CONST-DECL "finseq[(scontext?)]" |language| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (|scontext?| ADT-DEF-DECL "boolean" |language| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)
    (|minus_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|rest| CONST-DECL "finseq[(scontext?)]" |language| NIL)
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL)
    (++ CONST-DECL "finseq[(scontext?)]" |language| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|concat_rest| 0
  (|concat_rest-1| NIL 3586289544
   ("" (SKOSIMP* :PREDS? T)
    (("" (INST + "Γ!1 ^^ (0, x!1 + 1)")
      (("" (GRIND-WITH-EXT) (("" (TYPEPRED "x!2") (("" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL)
   SHOSTAK))
 (|size_extract| 0
  (|size_extract-2| NIL 3628059541
   ("" (MEASURE-INDUCT+ "length(Γ)" ("Γ"))
    (("" (SKOSIMP* :PREDS? T)
      (("" (ASSERT)
        (("" (INST - "rest(x!1, 0)")
          (("" (CASE "j!1 = 0")
            (("1" (GRIND) NIL NIL)
             ("2" (INST - "j!1 - 1")
              (("1" (ASSERT)
                (("1" (SPLIT -2)
                  (("1" (EXPAND "sum" 2)
                    (("1" (LIFT-IF)
                      (("1" (ASSERT)
                        (("1" (EXPAND "min")
                          (("1" (ASSERT)
                            (("1"
                              (CASE
                                  "(rest(x!1, 0) ^^ (0, j!1 - 1))`length = j!1 - 1")
                              (("1"
                                (CASE "rest(x!1, 0)`length = x!1`length - 1")
                                (("1"
                                  (CASE
                                      "(LAMBDA (x: below[(rest(x!1, 0) ^^ (0, j!1 - 1))`length]): size((rest(x!1, 0) ^^ (0, j!1 - 1))`seq(x))) = (LAMBDA (x_1: below[min(j!1, x!1`length) - 1]): size(x!1`seq(1 + x_1)))")
                                  (("1"
                                    (CASE
                                        "(LAMBDA (x: below[rest(x!1, 0)`length]): size(rest(x!1, 0)`seq(x))) = (LAMBDA (x_1: below[x!1`length - 1]): size(x!1`seq(1 + x_1)))")
                                    (("1" (REWRITE -1)
                                      (("1" (REWRITE -1)
                                        (("1" (REWRITE -1)
                                          (("1" (REWRITE -1)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 3 -4)
                                      (("2" (GRIND-WITH-EXT) NIL NIL)) NIL)
                                     ("3" (HIDE 3 -4) (("3" (GRIND) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 3 -4)
                                    (("2" (DECOMPOSE-EQUALITY 1)
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (GRIND) NIL NIL)
                                       ("3" (GRIND) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("3" (GRIND) NIL NIL)
                                   ("4" (HIDE 3 -4) (("4" (GRIND) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 3 -2) (("2" (GRIND) NIL NIL)) NIL))
                                NIL)
                               ("2" (HIDE 3 -1) (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                  NIL))
                NIL)
               ("2" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|size| DEF-DECL "posnat" |language| NIL)
    (|theory?| ADT-RECOGNIZER-DECL "[syntaxic -> boolean]" |language| NIL)
    (|theory_| ADT-CONSTRUCTOR-DECL "[finseq[(scontext?)] -> (theory?)]"
     |language| NIL)
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|scontext?| ADT-DEF-DECL "boolean" |language| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL)
    (|sum| DEF-DECL "{n: nat | FORALL (x: below[len]): f(x) <= n}" |language|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs|
     NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|x!1| SKOLEM-CONST-DECL "finseq[(scontext?)]" |language| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|j!1| SKOLEM-CONST-DECL "nat" |language| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|rest| CONST-DECL "finseq[(scontext?)]" |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL)
  (|size_extract-1| NIL 3584992569
   ("" (MEASURE-INDUCT+ "length(Γ)" ("Γ"))
    (("" (SKOSIMP* :PREDS? T)
      (("" (ASSERT)
        (("" (INST - "rest(x!1, 0)")
          (("" (CASE "j!1 = 0")
            (("1" (GRIND) NIL NIL)
             ("2" (INST - "j!1 - 1")
              (("1" (ASSERT)
                (("1" (SPLIT -2)
                  (("1" (EXPAND "sum" 2)
                    (("1" (LIFT-IF)
                      (("1" (ASSERT)
                        (("1" (EXPAND "min")
                          (("1" (ASSERT)
                            (("1"
                              (CASE
                                  "(rest(x!1, 0) ^^ (0, j!1 - 1))`length = j!1 - 1")
                              (("1"
                                (CASE "rest(x!1, 0)`length = x!1`length - 1")
                                (("1"
                                  (CASE
                                      "(LAMBDA (x: below[(rest(x!1, 0) ^^ (0, j!1 - 1))`length]): size((rest(x!1, 0) ^^ (0, j!1 - 1))`seq(x))) = (LAMBDA (x_1: below[min(j!1, x!1`length) - 1]): size(x!1`seq(1 + x_1)))")
                                  (("1"
                                    (CASE
                                        "(LAMBDA (x: below[rest(x!1, 0)`length]): size(rest(x!1, 0)`seq(x))) = (LAMBDA (x_1: below[x!1`length - 1]): size(x!1`seq(1 + x_1)))")
                                    (("1" (REWRITE -1)
                                      (("1" (REWRITE -1)
                                        (("1" (REWRITE -1)
                                          (("1" (REWRITE -1)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 3 -4)
                                      (("2" (GRIND-WITH-EXT) NIL NIL)) NIL)
                                     ("3" (HIDE 3 -4) (("3" (GRIND) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 3 -4)
                                    (("2" (DECOMPOSE-EQUALITY 1)
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (GRIND) NIL NIL)
                                       ("3" (GRIND) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("3" (GRIND) NIL NIL)
                                   ("4" (HIDE 3 -4) (("4" (GRIND) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 3 -2) (("2" (GRIND) NIL NIL)) NIL))
                                NIL)
                               ("2" (HIDE 3 -1) (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                  NIL))
                NIL)
               ("2" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
   SHOSTAK))
 (|size_iextract| 0
  (|size_iextract-4| NIL 3628059655
   ("" (MEASURE-INDUCT+ "length(σ)" ("σ"))
    (("" (SKOSIMP* :PREDS? T)
      (("" (ASSERT)
        (("" (INST - "irest(x!1, 0)")
          (("" (CASE "j!1 = 0")
            (("1" (GRIND) NIL NIL)
             ("2" (INST - "j!1 - 1")
              (("1" (ASSERT)
                (("1" (SPLIT -2)
                  (("1" (EXPAND "sum" 2)
                    (("1" (LIFT-IF)
                      (("1" (ASSERT)
                        (("1" (EXPAND "min")
                          (("1" (ASSERT)
                            (("1"
                              (CASE
                                  "(irest(x!1, 0) ^^ (0, j!1 - 1))`length = j!1 - 1")
                              (("1"
                                (CASE "irest(x!1, 0)`length = x!1`length - 1")
                                (("1"
                                  (CASE
                                      "(LAMBDA (x: below[(irest(x!1, 0) ^^ (0, j!1 - 1))`length]): size((irest(x!1, 0) ^^ (0, j!1 - 1))`seq(x))) = (LAMBDA (x_1: below[min(j!1, x!1`length) - 1]): size(x!1`seq(1 + x_1)))")
                                  (("1"
                                    (CASE
                                        "(LAMBDA (x: below[irest(x!1, 0)`length]): size(irest(x!1, 0)`seq(x))) = (LAMBDA (x_1: below[x!1`length - 1]): size(x!1`seq(1 + x_1)))")
                                    (("1" (REWRITE -1)
                                      (("1" (REWRITE -1)
                                        (("1" (REWRITE -1)
                                          (("1" (REWRITE -1)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 3 -4)
                                      (("2" (GRIND-WITH-EXT) NIL NIL)) NIL)
                                     ("3" (HIDE 3 -4) (("3" (GRIND) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 3 -4)
                                    (("2" (DECOMPOSE-EQUALITY 1)
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (GRIND) NIL NIL)
                                       ("3" (GRIND) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("3" (GRIND) NIL NIL)
                                   ("4" (HIDE 3 -4) (("4" (GRIND) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 3 -2) (("2" (GRIND) NIL NIL)) NIL))
                                NIL)
                               ("2" (HIDE 3 -1) (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                  NIL))
                NIL)
               ("2" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|size| DEF-DECL "posnat" |language| NIL)
    (|ideep?| ADT-RECOGNIZER-DECL "[syntaxic -> boolean]" |language| NIL)
    (|ideep| ADT-CONSTRUCTOR-DECL "[finseq[(sinterp?)] -> (ideep?)]" |language|
     NIL)
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|syntaxic| TYPE-DECL NIL |language| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|sinterp?| ADT-DEF-DECL "boolean" |language| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL)
    (|sum| DEF-DECL "{n: nat | FORALL (x: below[len]): f(x) <= n}" |language|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs|
     NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|x!1| SKOLEM-CONST-DECL "finseq[(sinterp?)]" |language| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|j!1| SKOLEM-CONST-DECL "nat" |language| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|irest| CONST-DECL "finseq[(sinterp?)]" |language| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL)
  (|size_iextract-3| NIL 3628059622 ("" (POSTPONE) NIL NIL) NIL NIL)
  (|size_iextract-2| NIL 3585427374
   ("" (MEASURE-INDUCT+ "length(σ)" ("σ"))
    (("" (SKOSIMP* :PREDS? T)
      (("" (ASSERT)
        (("" (INST - "irest(x!1, 0)")
          (("" (CASE "j!1 = 0")
            (("1" (GRIND) NIL NIL)
             ("2" (INST - "j!1 - 1")
              (("1" (ASSERT)
                (("1" (SPLIT -2)
                  (("1" (EXPAND "sum" 2)
                    (("1" (LIFT-IF)
                      (("1" (ASSERT)
                        (("1" (EXPAND "min")
                          (("1" (ASSERT)
                            (("1"
                              (CASE
                                  "(irest(x!1, 0) ^^ (0, j!1 - 1))`length = j!1 - 1")
                              (("1"
                                (CASE "irest(x!1, 0)`length = x!1`length - 1")
                                (("1"
                                  (CASE
                                      "(LAMBDA (x: below[(irest(x!1, 0) ^^ (0, j!1 - 1))`length]): size((irest(x!1, 0) ^^ (0, j!1 - 1))`seq(x))) = (LAMBDA (x_1: below[min(j!1, x!1`length) - 1]): size(x!1`seq(1 + x_1)))")
                                  (("1"
                                    (CASE
                                        "(LAMBDA (x: below[irest(x!1, 0)`length]): size(irest(x!1, 0)`seq(x))) = (LAMBDA (x_1: below[x!1`length - 1]): size(x!1`seq(1 + x_1)))")
                                    (("1" (REWRITE -1)
                                      (("1" (REWRITE -1)
                                        (("1" (REWRITE -1)
                                          (("1" (REWRITE -1)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (HIDE 3 -4)
                                      (("2" (GRIND-WITH-EXT) NIL NIL)) NIL)
                                     ("3" (HIDE 3 -4) (("3" (GRIND) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 3 -4)
                                    (("2" (DECOMPOSE-EQUALITY 1)
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (GRIND) NIL NIL)
                                       ("3" (GRIND) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("3" (GRIND) NIL NIL)
                                   ("4" (HIDE 3 -4) (("4" (GRIND) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 3 -2) (("2" (GRIND) NIL NIL)) NIL))
                                NIL)
                               ("2" (HIDE 3 -1) (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                  NIL))
                NIL)
               ("2" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
   NIL)
  (|size_iextract-1| NIL 3585426748
   ("" (MEASURE-INDUCT+ "length(σ)" ("σ"))
    (("1" (SKOSIMP* :PREDS? T)
      (("1" (ASSERT)
        (("1" (INST - "irest(x!1, 0)")
          (("1" (CASE "j!1 = 0")
            (("1" (GRIND) NIL NIL)
             ("2" (ASSERT)
              (("2" (EXPAND "sum" 2)
                (("2" (LIFT-IF)
                  (("2" (ASSERT)
                    (("2"
                      (CASE "(irest(x!1, 0) ^^ (0, j!1 - 1))`length = j!1 - 1")
                      (("1" (CASE "irest(x!1, 0)`length = x!1`length - 1")
                        (("1"
                          (CASE
                              "(LAMBDA (x: below[(irest(x!1, 0) ^^ (0, j!1 - 1))`length]): size((irest(x!1, 0) ^^ (0, j!1 - 1))`seq(x))) = (LAMBDA (x_1: below[min(j!1, x!1`length) - 1]): size(x!1`seq(1 + x_1)))")
                          (("1"
                            (CASE
                                "(LAMBDA (x: below[irest(x!1, 0)`length]): size(irest(x!1, 0)`seq(x))) = (LAMBDA (x_1: below[x!1`length - 1]): size(x!1`seq(1 + x_1)))")
                            (("1" (REWRITE -1)
                              (("1" (REWRITE -1)
                                (("1" (REWRITE -1)
                                  (("1" (REWRITE -1)
                                    (("1" (ASSERT) (("1" (POSTPONE) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE 3 -4) (("2" (GRIND-WITH-EXT) NIL NIL))
                              NIL)
                             ("3" (HIDE 3 -4) (("3" (GRIND) NIL NIL)) NIL))
                            NIL)
                           ("2" (HIDE 3 -4)
                            (("2" (DECOMPOSE-EQUALITY 1)
                              (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                               ("3" (GRIND) NIL NIL) ("4" (POSTPONE) NIL NIL))
                              NIL))
                            NIL)
                           ("3" (GRIND) NIL NIL)
                           ("4" (HIDE 3 -4) (("4" (GRIND) NIL NIL)) NIL)
                           ("5" (POSTPONE) NIL NIL))
                          NIL)
                         ("2" (HIDE 3 -2) (("2" (GRIND) NIL NIL)) NIL))
                        NIL)
                       ("2" (HIDE 3 -1) (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL))
    NIL)
   NIL SHOSTAK))
 (|size_rest| 0
  (|size_rest-2| NIL 3628059707 ("" (GRIND) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|rest| CONST-DECL "finseq[(scontext?)]" |language| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|sum| DEF-DECL "{n: nat | FORALL (x: below[len]): f(x) <= n}" |language|
     NIL)
    (|size| DEF-DECL "posnat" |language| NIL))
   NIL)
  (|size_rest-1| NIL 3584974133
   ("" (SKOSIMP* :PREDS? T)
    (("" (ASSERT)
      (("" (CASE "rest(Γ!1, 0)`length = Γ!1`length - 1")
        (("1" (REWRITE -1 :DONT-DELETE? T)
          (("1" (EXPAND "sum" 1 2)
            (("1"
              (CASE "(LAMBDA (x: below[rest(Γ!1, 0)`length]):
             size(rest(Γ!1, 0)`seq(x))) = (LAMBDA (x_1: below[Γ!1`length - 1]): size(Γ!1`seq(1 + x_1)))")
              (("1" (REWRITE -1) (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (HIDE 2)
                (("2" (GRIND-WITH-EXT)
                  (("2" (TYPEPRED "x!1") (("2" (GRIND) NIL NIL)) NIL)) NIL))
                NIL)
               ("3" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL)
         ("2" (GRIND) NIL NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
   SHOSTAK))
 (|size_irest| 0
  (|size_irest-1| NIL 3584975254
   ("" (SKOSIMP* :PREDS? T)
    (("" (ASSERT)
      (("" (CASE "irest(σ!1, 0)`length = σ!1`length - 1")
        (("1" (REWRITE -1 :DONT-DELETE? T)
          (("1" (EXPAND "sum" 1 2)
            (("1"
              (CASE "(LAMBDA (x: below[irest(σ!1, 0)`length]):
                      size(irest(σ!1, 0)`seq(x))) = (LAMBDA (x_1: below[σ!1`length - 1]): size(σ!1`seq(1 + x_1)))")
              (("1" (REWRITE -1) (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (HIDE 2)
                (("2" (GRIND-WITH-EXT)
                  (("2" (TYPEPRED "x!1") (("2" (GRIND) NIL NIL)) NIL)) NIL))
                NIL)
               ("3" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL)
         ("2" (GRIND) NIL NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
   SHOSTAK))
 (|extract_concat| 0
  (|extract_concat-1| NIL 3585413991
   ("" (GRIND-WITH-EXT) (("" (TYPEPRED "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL)
   SHOSTAK))
 (|doubleplus_TCC1| 0
  (|doubleplus_TCC1-1| NIL 3585317617 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL))
 (|doubleplus_TCC2| 0
  (|doubleplus_TCC2-1| NIL 3585317617 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL))
 (|doubleplus_TCC3| 0
  (|doubleplus_TCC3-1| NIL 3585317617 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL))
 (|doubleplus_TCC4| 0
  (|doubleplus_TCC4-1| NIL 3585317617 ("" (SUBTYPE-TCC) NIL NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL))
 (|tsize_TCC1| 0
  (|tsize_TCC1-1| NIL 3585620166 ("" (GRIND) NIL NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL)
   NIL))
 (|size_textract| 0
  (|size_textract-2| NIL 3585620200
   ("" (MEASURE-INDUCT+ "length(f)" ("f"))
    (("" (SKOSIMP* :PREDS? T)
      (("" (ASSERT)
        (("" (INST - "x!1 ^^ (1, length(x!1))")
          (("" (CASE "j!1 = 0")
            (("1" (GRIND) NIL NIL)
             ("2" (INST - "j!1 - 1")
              (("1" (ASSERT)
                (("1" (SPLIT -2)
                  (("1" (ASSERT)
                    (("1" (EXPAND "min")
                      (("1" (ASSERT)
                        (("1"
                          (CASE
                              "((x!1 ^^ (1, length(x!1))) ^^ (0, j!1 - 1))`length = j!1 - 1")
                          (("1"
                            (CASE
                                "(x!1 ^^ (1, length(x!1)))`length = x!1`length - 1")
                            (("1"
                              (CASE
                                  "(LAMBDA (x: below[((x!1 ^^ (1, length(x!1))) ^^ (0, j!1 - 1))`length]): tsize(((x!1 ^^ (1, length(x!1))) ^^ (0, j!1 - 1))`seq(x))) = (LAMBDA (x_1: below[min(j!1, x!1`length) - 1]): tsize(x!1`seq(1 + x_1)))")
                              (("1"
                                (CASE
                                    "(LAMBDA (x: below[(x!1 ^^ (1, length(x!1)))`length]): tsize((x!1 ^^ (1, length(x!1)))`seq(x))) = (LAMBDA (x_1: below[x!1`length - 1]): tsize(x!1`seq(1 + x_1)))")
                                (("1" (REWRITE -1)
                                  (("1" (REWRITE -1)
                                    (("1" (REWRITE -1)
                                      (("1" (REWRITE -1)
                                        (("1" (EXPAND ^^)
                                          (("1" (ASSERT)
                                            (("1" (LIFT-IF)
                                              (("1" (SPLIT -1)
                                                (("1" (FLATTEN)
                                                  (("1" (ASSERT)
                                                    (("1" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (FLATTEN)
                                                  (("2" (ASSERT)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 3 -4)
                                  (("2" (GRIND-WITH-EXT) NIL NIL)) NIL)
                                 ("3" (HIDE 3 -4) (("3" (GRIND) NIL NIL)) NIL))
                                NIL)
                               ("2" (HIDE 3 -4)
                                (("2" (DECOMPOSE-EQUALITY 1)
                                  (("1" (EXPAND ^^)
                                    (("1" (ASSERT)
                                      (("1" (LIFT-IF)
                                        (("1" (SPLIT 1)
                                          (("1" (FLATTEN)
                                            (("1" (ASSERT)
                                              (("1" (TYPEPRED "x!2")
                                                (("1" (EXPAND ^^)
                                                  (("1" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (PROPAX) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                                  NIL))
                                NIL)
                               ("3" (GRIND) NIL NIL)
                               ("4" (HIDE 3 -4) (("4" (GRIND) NIL NIL)) NIL))
                              NIL)
                             ("2" (HIDE 3 -2) (("2" (GRIND) NIL NIL)) NIL))
                            NIL)
                           ("2" (HIDE 3 -1) (("2" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                  NIL))
                NIL)
               ("2" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
   NIL)
  (|size_textract-1| NIL 3585619523
   ("" (MEASURE-INDUCT+ "length(f)" ("f"))
    (("" (SKOSIMP* :PREDS? T)
      (("" (ASSERT)
        (("" (INST - "x!1 ^^ (1, length(x!1))")
          (("" (CASE "j!1 = 0")
            (("1" (GRIND) (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL))
              NIL)
             ("2" (INST - "j!1 - 1")
              (("1" (ASSERT)
                (("1" (SPLIT -2)
                  (("1" (ASSERT)
                    (("1" (EXPAND "min")
                      (("1" (ASSERT)
                        (("1"
                          (CASE
                              "((x!1 ^^ (1, length(x!1))) ^^ (0, j!1 - 1))`length = j!1 - 1")
                          (("1"
                            (CASE
                                "(x!1 ^^ (1, length(x!1)))`length = x!1`length - 1")
                            (("1"
                              (CASE
                                  "(LAMBDA (x: below[((x!1 ^^ (1, length(x!1))) ^^ (0, j!1 - 1))`length]): size(((x!1 ^^ (1, length(x!1))) ^^ (0, j!1 - 1))`seq(x))) = (LAMBDA (x_1: below[min(j!1, x!1`length) - 1]): size(x!1`seq(1 + x_1)))")
                              (("1"
                                (CASE
                                    "(LAMBDA (x: below[(x!1 ^^ (1, length(x!1)))`length]): size((x!1 ^^ (1, length(x!1)))`seq(x))) = (LAMBDA (x_1: below[x!1`length - 1]): size(x!1`seq(1 + x_1)))")
                                (("1" (REWRITE -1)
                                  (("1" (REWRITE -1)
                                    (("1" (REWRITE -1)
                                      (("1" (REWRITE -1)
                                        (("1" (POSTPONE) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 3 -4)
                                  (("2" (GRIND-WITH-EXT) NIL NIL)) NIL)
                                 ("3" (HIDE 3 -4) (("3" (GRIND) NIL NIL)) NIL))
                                NIL)
                               ("2" (HIDE 3 -4)
                                (("2" (DECOMPOSE-EQUALITY 1)
                                  (("1" (POSTPONE) NIL NIL)
                                   ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                                  NIL))
                                NIL)
                               ("3" (GRIND) NIL NIL)
                               ("4" (HIDE 3 -4) (("4" (GRIND) NIL NIL)) NIL))
                              NIL)
                             ("2" (HIDE 3 -2) (("2" (GRIND) NIL NIL)) NIL))
                            NIL)
                           ("2" (HIDE 3 -1) (("2" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                  NIL))
                NIL)
               ("2" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)))

