(language
 (sum_TCC1 0
  (sum_TCC1-1 nil 3583594641 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil))
   nil))
 (sum_TCC2 0
  (sum_TCC2-1 nil 3583594641 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (sum_TCC3 0
  (sum_TCC3-1 nil 3583594641 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (sum_TCC4 0
  (sum_TCC4-1 nil 3583594641 ("" (subtype-tcc) nil nil) nil nil))
 (sum_TCC5 0
  (sum_TCC5-1 nil 3583616733 ("" (termination-tcc) nil nil) nil nil))
 (sum_TCC6 0
  (sum_TCC6-1 nil 3583616733 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil))
   nil))
 (size_TCC1 0
  (size_TCC1-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC2 0
  (size_TCC2-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC3 0
  (size_TCC3-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (ideep? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC4 0
  (size_TCC4-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (ideep? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC5 0
  (size_TCC5-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (size_TCC6 0
  (size_TCC6-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC7 0
  (size_TCC7-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC8 0
  (size_TCC8-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC9 0
  (size_TCC9-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC10 0
  (size_TCC10-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC11 0
  (size_TCC11-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC12 0
  (size_TCC12-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC13 0
  (size_TCC13-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC14 0
  (size_TCC14-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC15 0
  (size_TCC15-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC16 0
  (size_TCC16-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC17 0
  (size_TCC17-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC18 0
  (size_TCC18-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC19 0
  (size_TCC19-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC20 0
  (size_TCC20-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC21 0
  (size_TCC21-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC22 0
  (size_TCC22-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC23 0
  (size_TCC23-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC24 0
  (size_TCC24-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC25 0
  (size_TCC25-1 nil 3583692220 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC26 0
  (size_TCC26-1 nil 3583692220 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC27 0
  (size_TCC27-1 nil 3584471252 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC28 0
  (size_TCC28-1 nil 3584890033 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (equiv_TCC1 0
  (equiv_TCC1-1 nil 3584974066 ("" (subtype-tcc) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (equiv_TCC2 0
  (equiv_TCC2-1 nil 3584974066 ("" (subtype-tcc) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (equiv_TCC3 0
  (equiv_TCC3-1 nil 3584974066 ("" (subtype-tcc) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (equiv_TCC4 0
  (equiv_TCC4-1 nil 3584974066 ("" (subtype-tcc) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (equiv_TCC5 0
  (equiv_TCC5-1 nil 3584974066 ("" (subtype-tcc) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (equiv_TCC6 0
  (equiv_TCC6-1 nil 3584974066 ("" (subtype-tcc) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (equiv_TCC7 0
  (equiv_TCC7-1 nil 3584974066 ("" (subtype-tcc) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (kind_TCC1 0
  (kind_TCC1-1 nil 3584498672
   ("" (skosimp* :preds? t) (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (concat_empty 0
  (concat_empty-1 nil 3583611560 ("" (grind-with-ext) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "finseq[(scontext?)]" language nil))
   shostak))
 (concat__empty 0
  (concat__empty-1 nil 3583611565 ("" (grind-with-ext) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "finseq[(scontext?)]" language nil))
   shostak))
 (concat_assoc 0
  (concat_assoc-1 nil 3583611568
   ("" (auto-rewrite "++")
    (("" (auto-rewrite "o")
      (("" (skosimp* :preds? t)
        (("" (assert) (("" (grind-with-ext :if-match nil) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "finseq[(scontext?)]" language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (rest_concat_TCC1 0
  (rest_concat_TCC1-1 nil 3583611672 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (rest_concat 0
  (rest_concat-1 nil 3583611672
   ("" (skosimp* :preds? t) (("" (grind-with-ext) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "finseq[(scontext?)]" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (rest const-decl "finseq[(scontext?)]" language nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (size_extract 0
  (size_extract-1 nil 3584992569
   ("" (measure-induct+ "length(Γ)" ("Γ"))
    (("" (skosimp* :preds? t)
      (("" (assert)
        (("" (inst - "rest(x!1, 0)")
          (("" (case "j!1 = 0")
            (("1" (grind) nil nil)
             ("2" (inst - "j!1 - 1")
              (("1" (assert)
                (("1" (split -2)
                  (("1" (expand sum 2)
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (expand min)
                          (("1" (assert)
                            (("1"
                              (case "(rest(x!1, 0) ^^ (0, j!1 - 1))`length = j!1 - 1")
                              (("1"
                                (case
                                 "rest(x!1, 0)`length = x!1`length - 1")
                                (("1"
                                  (case
                                   "(LAMBDA (x: below[(rest(x!1, 0) ^^ (0, j!1 - 1))`length]): size((rest(x!1, 0) ^^ (0, j!1 - 1))`seq(x))) = (LAMBDA (x_1: below[min(j!1, x!1`length) - 1]): size(x!1`seq(1 + x_1)))")
                                  (("1"
                                    (case
                                     "(LAMBDA (x: below[rest(x!1, 0)`length]): size(rest(x!1, 0)`seq(x))) = (LAMBDA (x_1: below[x!1`length - 1]): size(x!1`seq(1 + x_1)))")
                                    (("1"
                                      (rewrite -1)
                                      (("1"
                                        (rewrite -1)
                                        (("1"
                                          (rewrite -1)
                                          (("1"
                                            (rewrite -1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 3 -4)
                                      (("2" (grind-with-ext) nil nil))
                                      nil)
                                     ("3"
                                      (hide 3 -4)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 3 -4)
                                    (("2"
                                      (decompose-equality 1)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil)
                                       ("3" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("3" (grind) nil nil)
                                   ("4"
                                    (hide 3 -4)
                                    (("4" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 3 -2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3 -1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (rest const-decl "finseq[(scontext?)]" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (sum def-decl "{n: nat | FORALL (x: below[len]): f(x) <= n}"
     language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (theory_ adt-constructor-decl "[finseq[(scontext?)] -> (theory?)]"
     language nil)
    (theory? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (size def-decl "posnat" language nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (size_iextract 0
  (size_iextract-2 nil 3585427374
   ("" (measure-induct+ "length(σ)" ("σ"))
    (("" (skosimp* :preds? t)
      (("" (assert)
        (("" (inst - "irest(x!1, 0)")
          (("" (case "j!1 = 0")
            (("1" (grind) nil nil)
             ("2" (inst - "j!1 - 1")
              (("1" (assert)
                (("1" (split -2)
                  (("1" (expand sum 2)
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (expand min)
                          (("1" (assert)
                            (("1"
                              (case "(irest(x!1, 0) ^^ (0, j!1 - 1))`length = j!1 - 1")
                              (("1"
                                (case
                                 "irest(x!1, 0)`length = x!1`length - 1")
                                (("1"
                                  (case
                                   "(LAMBDA (x: below[(irest(x!1, 0) ^^ (0, j!1 - 1))`length]): size((irest(x!1, 0) ^^ (0, j!1 - 1))`seq(x))) = (LAMBDA (x_1: below[min(j!1, x!1`length) - 1]): size(x!1`seq(1 + x_1)))")
                                  (("1"
                                    (case
                                     "(LAMBDA (x: below[irest(x!1, 0)`length]): size(irest(x!1, 0)`seq(x))) = (LAMBDA (x_1: below[x!1`length - 1]): size(x!1`seq(1 + x_1)))")
                                    (("1"
                                      (rewrite -1)
                                      (("1"
                                        (rewrite -1)
                                        (("1"
                                          (rewrite -1)
                                          (("1"
                                            (rewrite -1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 3 -4)
                                      (("2" (grind-with-ext) nil nil))
                                      nil)
                                     ("3"
                                      (hide 3 -4)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 3 -4)
                                    (("2"
                                      (decompose-equality 1)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil)
                                       ("3" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("3" (grind) nil nil)
                                   ("4"
                                    (hide 3 -4)
                                    (("4" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 3 -2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3 -1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (size def-decl "posnat" language nil)
    (ideep? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (ideep adt-constructor-decl "[finseq[(sinterp?)] -> (ideep?)]"
     language nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sum def-decl "{n: nat | FORALL (x: below[len]): f(x) <= n}"
     language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (irest const-decl "finseq[(sinterp?)]" language nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil)
  (size_iextract-1 nil 3585426748
   ("" (measure-induct+ "length(σ)" ("σ"))
    (("1" (skosimp* :preds? t)
      (("1" (assert)
        (("1" (inst - "irest(x!1, 0)")
          (("1" (case "j!1 = 0")
            (("1" (grind) nil nil)
             ("2" (assert)
              (("2" (expand sum 2)
                (("2" (lift-if)
                  (("2" (assert)
                    (("2"
                      (case "(irest(x!1, 0) ^^ (0, j!1 - 1))`length = j!1 - 1")
                      (("1"
                        (case "irest(x!1, 0)`length = x!1`length - 1")
                        (("1"
                          (case "(LAMBDA (x: below[(irest(x!1, 0) ^^ (0, j!1 - 1))`length]): size((irest(x!1, 0) ^^ (0, j!1 - 1))`seq(x))) = (LAMBDA (x_1: below[min(j!1, x!1`length) - 1]): size(x!1`seq(1 + x_1)))")
                          (("1"
                            (case "(LAMBDA (x: below[irest(x!1, 0)`length]): size(irest(x!1, 0)`seq(x))) = (LAMBDA (x_1: below[x!1`length - 1]): size(x!1`seq(1 + x_1)))")
                            (("1" (rewrite -1)
                              (("1"
                                (rewrite -1)
                                (("1"
                                  (rewrite -1)
                                  (("1"
                                    (rewrite -1)
                                    (("1"
                                      (assert)
                                      (("1" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3 -4)
                              (("2" (grind-with-ext) nil nil)) nil)
                             ("3" (hide 3 -4) (("3" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide 3 -4)
                            (("2" (decompose-equality 1)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil)
                               ("3" (grind) nil nil)
                               ("4" (postpone) nil nil))
                              nil))
                            nil)
                           ("3" (grind) nil nil)
                           ("4" (hide 3 -4) (("4" (grind) nil nil))
                            nil)
                           ("5" (postpone) nil nil))
                          nil)
                         ("2" (hide 3 -2) (("2" (grind) nil nil)) nil))
                        nil)
                       ("2" (hide 3 -1) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (postpone) nil nil) ("3" (postpone) nil nil))
    nil)
   nil shostak))
 (size_rest 0
  (size_rest-1 nil 3584974133
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (case "rest(Γ!1, 0)`length = Γ!1`length - 1")
        (("1" (rewrite -1 :dont-delete? t)
          (("1" (expand sum 1 2)
            (("1"
              (case "(LAMBDA (x: below[rest(Γ!1, 0)`length]):
             size(rest(Γ!1, 0)`seq(x))) = (LAMBDA (x_1: below[Γ!1`length - 1]): size(Γ!1`seq(1 + x_1)))")
              (("1" (rewrite -1) (("1" (assert) nil nil)) nil)
               ("2" (hide 2)
                (("2" (grind-with-ext)
                  (("2" (typepred x!1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (grind) nil nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (size def-decl "posnat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (sum def-decl "{n: nat | FORALL (x: below[len]): f(x) <= n}"
     language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rest const-decl "finseq[(scontext?)]" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (size_irest 0
  (size_irest-1 nil 3584975254
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (case "irest(σ!1, 0)`length = σ!1`length - 1")
        (("1" (rewrite -1 :dont-delete? t)
          (("1" (expand sum 1 2)
            (("1"
              (case "(LAMBDA (x: below[irest(σ!1, 0)`length]):
                      size(irest(σ!1, 0)`seq(x))) = (LAMBDA (x_1: below[σ!1`length - 1]): size(σ!1`seq(1 + x_1)))")
              (("1" (rewrite -1) (("1" (assert) nil nil)) nil)
               ("2" (hide 2)
                (("2" (grind-with-ext)
                  (("2" (typepred x!1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (grind) nil nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size def-decl "posnat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (sum def-decl "{n: nat | FORALL (x: below[len]): f(x) <= n}"
     language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (irest const-decl "finseq[(sinterp?)]" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (extract_concat 0
  (extract_concat-1 nil 3585413991
   ("" (grind-with-ext)
    (("" (typepred x!1) (("" (grind) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (++ const-decl "finseq[(scontext?)]" language nil)
    (O const-decl "finseq" finite_sequences nil))
   shostak))
 (doubleplus_TCC1 0
  (doubleplus_TCC1-1 nil 3585317617 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (tccs type-decl nil language nil)
    (tcc? adt-recognizer-decl "[tccs -> boolean]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (tccs? adt-recognizer-decl "[tccs -> boolean]" language nil))
   nil))
 (doubleplus_TCC2 0
  (doubleplus_TCC2-1 nil 3585317617 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (tccs type-decl nil language nil)
    (tcc? adt-recognizer-decl "[tccs -> boolean]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (tccs? adt-recognizer-decl "[tccs -> boolean]" language nil)
    (O const-decl "finseq" finite_sequences nil))
   nil))
 (doubleplus_TCC3 0
  (doubleplus_TCC3-1 nil 3585317617 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (tccs type-decl nil language nil)
    (tcc? adt-recognizer-decl "[tccs -> boolean]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (tccs? adt-recognizer-decl "[tccs -> boolean]" language nil))
   nil))
 (doubleplus_TCC4 0
  (doubleplus_TCC4-1 nil 3585317617 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (tccs type-decl nil language nil)
    (tcc? adt-recognizer-decl "[tccs -> boolean]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (tccs? adt-recognizer-decl "[tccs -> boolean]" language nil)
    (O const-decl "finseq" finite_sequences nil))
   nil))
 (tsize_TCC1 0
  (tsize_TCC1-1 nil 3585620166 ("" (subtype-tcc) nil nil) nil nil))
 (tsize_TCC2 0
  (tsize_TCC2-1 nil 3585620166 ("" (termination-tcc) nil nil) nil nil))
 (size_textract 0
  (size_textract-2 nil 3585620200
   ("" (measure-induct+ "length(f)" ("f"))
    (("" (skosimp* :preds? t)
      (("" (assert)
        (("" (inst - "x!1 ^^ (1, length(x!1))")
          (("" (case "j!1 = 0")
            (("1" (grind) nil nil)
             ("2" (inst - "j!1 - 1")
              (("1" (assert)
                (("1" (split -2)
                  (("1" (assert)
                    (("1" (expand min)
                      (("1" (assert)
                        (("1"
                          (case "((x!1 ^^ (1, length(x!1))) ^^ (0, j!1 - 1))`length = j!1 - 1")
                          (("1"
                            (case "(x!1 ^^ (1, length(x!1)))`length = x!1`length - 1")
                            (("1"
                              (case "(LAMBDA (x: below[((x!1 ^^ (1, length(x!1))) ^^ (0, j!1 - 1))`length]): tsize(((x!1 ^^ (1, length(x!1))) ^^ (0, j!1 - 1))`seq(x))) = (LAMBDA (x_1: below[min(j!1, x!1`length) - 1]): tsize(x!1`seq(1 + x_1)))")
                              (("1"
                                (case
                                 "(LAMBDA (x: below[(x!1 ^^ (1, length(x!1)))`length]): tsize((x!1 ^^ (1, length(x!1)))`seq(x))) = (LAMBDA (x_1: below[x!1`length - 1]): tsize(x!1`seq(1 + x_1)))")
                                (("1"
                                  (rewrite -1)
                                  (("1"
                                    (rewrite -1)
                                    (("1"
                                      (rewrite -1)
                                      (("1"
                                        (rewrite -1)
                                        (("1"
                                          (expand ^^)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 3 -4)
                                  (("2" (grind-with-ext) nil nil))
                                  nil)
                                 ("3"
                                  (hide 3 -4)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3 -4)
                                (("2"
                                  (decompose-equality 1)
                                  (("1"
                                    (expand ^^)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred x!2)
                                                (("1"
                                                  (expand ^^)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil)
                                   ("3" (grind) nil nil))
                                  nil))
                                nil)
                               ("3" (grind) nil nil)
                               ("4"
                                (hide 3 -4)
                                (("4" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide 3 -2) (("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide 3 -1) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (tccs type-decl nil language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (tsize def-decl "posnat" language nil)
    (tccs? adt-recognizer-decl "[tccs -> boolean]" language nil)
    (tccs adt-constructor-decl "[finseq[tccs] -> (tccs?)]" language
     nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sum def-decl "{n: nat | FORALL (x: below[len]): f(x) <= n}"
     language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (x!1 skolem-const-decl "finseq[tccs]" language nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (j!1 skolem-const-decl "nat" language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil)
  (size_textract-1 nil 3585619523
   ("" (measure-induct+ "length(f)" ("f"))
    (("" (skosimp* :preds? t)
      (("" (assert)
        (("" (inst - "x!1 ^^ (1, length(x!1))")
          (("" (case "j!1 = 0")
            (("1" (grind)
              (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)
             ("2" (inst - "j!1 - 1")
              (("1" (assert)
                (("1" (split -2)
                  (("1" (assert)
                    (("1" (expand min)
                      (("1" (assert)
                        (("1"
                          (case "((x!1 ^^ (1, length(x!1))) ^^ (0, j!1 - 1))`length = j!1 - 1")
                          (("1"
                            (case "(x!1 ^^ (1, length(x!1)))`length = x!1`length - 1")
                            (("1"
                              (case "(LAMBDA (x: below[((x!1 ^^ (1, length(x!1))) ^^ (0, j!1 - 1))`length]): size(((x!1 ^^ (1, length(x!1))) ^^ (0, j!1 - 1))`seq(x))) = (LAMBDA (x_1: below[min(j!1, x!1`length) - 1]): size(x!1`seq(1 + x_1)))")
                              (("1"
                                (case
                                 "(LAMBDA (x: below[(x!1 ^^ (1, length(x!1)))`length]): size((x!1 ^^ (1, length(x!1)))`seq(x))) = (LAMBDA (x_1: below[x!1`length - 1]): size(x!1`seq(1 + x_1)))")
                                (("1"
                                  (rewrite -1)
                                  (("1"
                                    (rewrite -1)
                                    (("1"
                                      (rewrite -1)
                                      (("1"
                                        (rewrite -1)
                                        (("1" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 3 -4)
                                  (("2" (grind-with-ext) nil nil))
                                  nil)
                                 ("3"
                                  (hide 3 -4)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3 -4)
                                (("2"
                                  (decompose-equality 1)
                                  (("1" (postpone) nil nil)
                                   ("2" (grind) nil nil)
                                   ("3" (grind) nil nil))
                                  nil))
                                nil)
                               ("3" (grind) nil nil)
                               ("4"
                                (hide 3 -4)
                                (("4" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide 3 -2) (("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide 3 -1) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

