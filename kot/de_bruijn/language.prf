(language
 (sum_TCC1 0
  (sum_TCC1-1 nil 3583594641 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil))
   nil))
 (sum_TCC2 0
  (sum_TCC2-1 nil 3583594641 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (sum_TCC3 0
  (sum_TCC3-1 nil 3583594641 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (sum_TCC4 0
  (sum_TCC4-1 nil 3583594641 ("" (subtype-tcc) nil nil) nil nil))
 (sum_TCC5 0
  (sum_TCC5-1 nil 3583616733 ("" (termination-tcc) nil nil) nil nil))
 (sum_TCC6 0
  (sum_TCC6-1 nil 3583616733 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil))
   nil))
 (size_TCC1 0
  (size_TCC1-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC2 0
  (size_TCC2-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC3 0
  (size_TCC3-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC4 0
  (size_TCC4-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (size_TCC5 0
  (size_TCC5-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC6 0
  (size_TCC6-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC7 0
  (size_TCC7-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC8 0
  (size_TCC8-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC9 0
  (size_TCC9-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC10 0
  (size_TCC10-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC11 0
  (size_TCC11-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC12 0
  (size_TCC12-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC13 0
  (size_TCC13-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC14 0
  (size_TCC14-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC15 0
  (size_TCC15-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC16 0
  (size_TCC16-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC17 0
  (size_TCC17-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC18 0
  (size_TCC18-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC19 0
  (size_TCC19-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC20 0
  (size_TCC20-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC21 0
  (size_TCC21-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC22 0
  (size_TCC22-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC23 0
  (size_TCC23-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC24 0
  (size_TCC24-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC25 0
  (size_TCC25-1 nil 3583692220 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC26 0
  (size_TCC26-1 nil 3583692220 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (signature_TCC1 0
  (signature_TCC1-1 nil 3583780019
   ("" (skosimp* :preds? t)
    (("" (expand "finseq_appl")
      (("" (assert)
        (("" (assert)
          (("" (typepred "sum")
            (("" (inst?)
              (("" (inst?)
                (("1" (assert) (("1" (grind) nil nil)) nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (<= const-decl "bool" reals nil)
    (sum def-decl "{n: nat | FORALL (x: below[len]): f(x) <= n}"
     language nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    nil nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (def adt-accessor-decl "[(theory_def?) -> finseq[(scontext?)]]"
     language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (size def-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (signature_TCC2 0
  (signature_TCC2-1 nil 3583780019
   ("" (cases-tcc)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil) ("11" (grind) nil nil)
     ("12" (grind) nil nil) ("13" (grind) nil nil)
     ("14" (grind) nil nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (empty_TCC1 0
  (empty_TCC1-1 nil 3583695729
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((scontext? adt-def-decl "boolean" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (apply_TCC1 0
  (apply_TCC1-1 nil 3583780019 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil)
   nil))
 (sapply_TCC1 0
  (sapply_TCC1-1 nil 3583780019 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil)
   nil))
 (concat_empty_TCC1 0
  (concat_empty_TCC1-1 nil 3583780211 ("" (subtype-tcc) nil nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)) nil))
 (concat_empty 0
  (concat_empty-1 nil 3583611560 ("" (grind-with-ext) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic_theory_def_extensionality formula-decl nil language nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (def adt-accessor-decl "[(theory_def?) -> finseq[(scontext?)]]"
     language nil)
    (theory_def adt-constructor-decl
     "[finseq[(scontext?)] -> (theory_def?)]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(theory_def?)" language nil))
   shostak))
 (concat__empty 0
  (concat__empty-1 nil 3583611565 ("" (grind-with-ext) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic_theory_def_extensionality formula-decl nil language nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (def adt-accessor-decl "[(theory_def?) -> finseq[(scontext?)]]"
     language nil)
    (theory_def adt-constructor-decl
     "[finseq[(scontext?)] -> (theory_def?)]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(theory_def?)" language nil))
   shostak))
 (concat_assoc 0
  (concat_assoc-1 nil 3583611568
   ("" (auto-rewrite "++")
    (("" (auto-rewrite "o")
      (("" (skosimp* :preds? t)
        (("" (assert) (("" (grind-with-ext :if-match nil) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(theory_def?)" language nil)
    (syntaxic_theory_def_extensionality formula-decl nil language nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (theory_def adt-constructor-decl
     "[finseq[(scontext?)] -> (theory_def?)]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (def adt-accessor-decl "[(theory_def?) -> finseq[(scontext?)]]"
     language nil)
    nil nil nil
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil))
   shostak))
 (rest_concat_TCC1 0
  (rest_concat_TCC1-1 nil 3583611672 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(theory_def?)" language nil) nil)
   nil))
 (rest_concat_TCC2 0
  (rest_concat_TCC2-1 nil 3583611672 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil nil)
   nil))
 (rest_concat_TCC3 0
  (rest_concat_TCC3-1 nil 3583786514 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil)
   nil))
 (rest_concat 0
  (rest_concat-1 nil 3583611672
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (lift-if)
        (("" (bddsimp)
          (("1" (expand "rest")
            (("1" (assert)
              (("1" (expand "^^")
                (("1" (assert)
                  (("1" (expand "++")
                    (("1" (assert)
                      (("1" (expand "o")
                        (("1" (assert)
                          (("1" (expand "min")
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (decompose-equality 1)
                                        (("1"
                                          (decompose-equality 1)
                                          (("1"
                                            (decompose-equality 1)
                                            (("1"
                                              (grind-with-ext)
                                              nil
                                              nil)
                                             ("2"
                                              (grind-with-ext)
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (grind-with-ext)
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (grind-with-ext)
                                          nil
                                          nil))
                                        nil)
                                       ("2" (grind-with-ext) nil nil)
                                       ("3"
                                        (assert)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (decompose-equality +)
                                            (("1"
                                              (expand "empty_seq")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (decompose-equality
                                                   +)
                                                  (("1"
                                                    (expand "++")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "o")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "min")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "empty_seq")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skosimp*
                                                                     :preds?
                                                                     t)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("4"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("5"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil)
                                             ("4" (grind) nil nil)
                                             ("5" (grind) nil nil)
                                             ("6" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (assert)
                                        (("4"
                                          (assert)
                                          (("4"
                                            (decompose-equality +)
                                            (("1"
                                              (decompose-equality +)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil)
                                               ("3" (grind) nil nil)
                                               ("4" (grind) nil nil)
                                               ("5" (grind) nil nil)
                                               ("6" (grind) nil nil)
                                               ("7" (grind) nil nil)
                                               ("8" (grind) nil nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil)
                                             ("4" (grind) nil nil)
                                             ("5" (grind) nil nil)
                                             ("6" (grind) nil nil)
                                             ("7" (grind) nil nil)
                                             ("8" (grind) nil nil)
                                             ("9" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "++")
              (("2" (assert)
                (("2" (expand "o")
                  (("2" (assert)
                    (("2" (expand "rest")
                      (("2" (assert)
                        (("2" (decompose-equality +)
                          (("1" (decompose-equality +)
                            (("1" (expand "^^")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "min")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "empty_seq")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (decompose-equality +)
                              (("1"
                                (expand "^^")
                                (("1"
                                  (expand "empty_seq")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("3" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (syntaxic_theory_def_extensionality formula-decl nil language nil)
    (theory_def adt-constructor-decl
     "[finseq[(scontext?)] -> (theory_def?)]" language nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil) nil
    (below type-eq-decl nil nat_types nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (def adt-accessor-decl "[(theory_def?) -> finseq[(scontext?)]]"
     language nil)
    nil (empty_seq const-decl "finseq" finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(theory_def?)" language nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rest const-decl "(theory_def?)" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (sconcat_sempty 0
  (sconcat_sempty-1 nil 3583780289 ("" (grind-with-ext) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (signature_stheory_extensionality formula-decl nil language nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sig adt-accessor-decl "[(stheory?) -> finseq[signature]]" language
         nil)
    (stheory adt-constructor-decl "[finseq[signature] -> (stheory?)]"
     language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(stheory?)" language nil))
   shostak))
 (sconcat__sempty 0
  (sconcat__sempty-1 nil 3583780294 ("" (grind-with-ext) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (signature_stheory_extensionality formula-decl nil language nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sig adt-accessor-decl "[(stheory?) -> finseq[signature]]" language
         nil)
    (stheory adt-constructor-decl "[finseq[signature] -> (stheory?)]"
     language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(stheory?)" language nil))
   shostak))
 (sconcat_assoc 0
  (sconcat_assoc-1 nil 3583780297
   ("" (skosimp* :preds? t)
    (("" (expand "++")
      (("" (lemma "o_assoc[signature]")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((++ const-decl "(stheory?)" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sig adt-accessor-decl "[(stheory?) -> finseq[signature]]" language
         nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil))
   shostak))
 (srest_sconcat_TCC1 0
  (srest_sconcat_TCC1-1 nil 3583780451 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    nil (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(stheory?)" language nil) nil)
   nil))
 (srest_sconcat_TCC2 0
  (srest_sconcat_TCC2-1 nil 3583780451 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    nil nil)
   nil))
 (srest_sconcat_TCC3 0
  (srest_sconcat_TCC3-1 nil 3583786514 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil)
   nil))
 (srest_sconcat 0
  (srest_sconcat-1 nil 3583780552
   ("" (skosimp* :preds? t)
    (("" (expand "rest")
      (("" (expand "^^")
        (("" (expand "++")
          (("" (expand "o")
            (("" (expand "min")
              (("" (assert)
                (("" (assert)
                  (("" (lift-if)
                    (("" (lift-if)
                      (("" (lift-if)
                        (("" (bddsimp)
                          (("1" (assert)
                            (("1" (assert)
                              (("1" (grind-with-ext) nil nil)) nil))
                            nil)
                           ("2" (assert) nil nil)
                           ("3" (assert) nil nil)
                           ("4" (assert)
                            (("4" (grind-with-ext) nil nil)) nil)
                           ("5" (assert)
                            (("5" (grind-with-ext) nil nil)) nil)
                           ("6" (assert) nil nil)
                           ("7" (assert)
                            (("7" (grind-with-ext) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rest const-decl "(stheory?)" language nil)
    (++ const-decl "(stheory?)" language nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (signature_stheory_extensionality formula-decl nil language nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (stheory adt-constructor-decl "[finseq[signature] -> (stheory?)]"
     language nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sig adt-accessor-decl "[(stheory?) -> finseq[signature]]" language
         nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (FALSE const-decl "bool" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (O const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil))
   shostak))
 (length_concat 0
  (length_concat-1 nil 3583683847 ("" (grind) nil nil)
   ((O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(theory_def?)" language nil) nil)
   shostak))
 (length_k 0
  (length_k-1 nil 3583683851 ("" (grind) nil nil)
   ((k const-decl "(theory_def?)" language nil) nil) shostak))
 (slength_concat 0
  (slength_concat-1 nil 3583780619 ("" (grind-with-ext) nil nil)
   ((O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(stheory?)" language nil) nil)
   shostak))
 (slength_k 0
  (slength_k-1 nil 3583780625 ("" (grind-with-ext) nil nil)
   ((k const-decl "(stheory?)" language nil) nil) shostak))
 (length_signature_TCC1 0
  (length_signature_TCC1-1 nil 3583873616 ("" (grind) nil nil)
   ((scontext? adt-def-decl "boolean" language nil)) nil))
 (length_signature_TCC2 0
  (length_signature_TCC2-1 nil 3583873616 ("" (grind) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (signature def-decl "signature" language nil))
   nil))
 (length_signature 0
  (length_signature-1 nil 3583873617 ("" (grind) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (signature def-decl "signature" language nil) nil nil)
   shostak))
 (prefix_size_TCC1 0
  (prefix_size_TCC1-1 nil 3583596761 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prefix_size 0
  (prefix_size-1 nil 3583594193
   ("" (measure-induct+ "g`length" "g")
    (("1" (skosimp* :preds? t)
      (("1" (assert)
        (("1" (expand "sum" +)
          (("1" (assert)
            (("1" (lift-if)
              (("1" (bddsimp)
                (("1" (assert) nil nil)
                 ("2" (assert)
                  (("2" (expand "finseq_appl")
                    (("2" (assert)
                      (("2"
                        (inst -
                         "(# length := x!1`length - 1, seq := LAMBDA (x: below[x!1`length - 1]): x!1(x) #)")
                        (("2"
                          (inst -
                           "(# length := f!1`length - 1, seq := LAMBDA (x: below[f!1`length - 1]): f!1(x) #)")
                          (("2" (assert)
                            (("2" (split -)
                              (("1"
                                (expand "finseq_appl")
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp* :preds? t)
                                (("2"
                                  (expand "finseq_appl")
                                  (("2"
                                    (inst - "x!2")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind-with-ext) nil nil) ("3" (grind-with-ext) nil nil))
    nil)
   ((even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (size def-decl "nat" language nil)
    (sum def-decl "{n: nat | FORALL (x: below[len]): f(x) <= n}"
     language nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (pretau_TCC1 0
  (pretau_TCC1-1 nil 3583780019 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil nil)
   nil))
 (pretau_TCC2 0
  (pretau_TCC2-1 nil 3583780019
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (expand "signature") (("" (grind) nil nil)) nil)) nil))
    nil)
   (nil nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (pretau_TCC3 0
  (pretau_TCC3-1 nil 3583780019
   ("" (skosimp* :preds? t) (("" (assert) (("" (grind) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil))
 (pretau_TCC4 0
  (pretau_TCC4-1 nil 3583786514 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (signature def-decl "signature" language nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil)
   nil))
 (pretau_TCC5 0
  (pretau_TCC5-1 nil 3583789855 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (signature def-decl "signature" language nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil nil)
   nil))
 (pretau_TCC6 0
  (pretau_TCC6-1 nil 3583863190 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil)
   nil))
 (pretau_TCC7 0
  (pretau_TCC7-1 nil 3583863190 ("" (subtype-tcc) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil nil)
   nil))
 (in_TCC1 0
  (in_TCC1-1 nil 3584208369 ("" (termination-tcc) nil nil)
   ((size def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (signature type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (in_TCC2 0
  (in_TCC2-1 nil 3584208369 ("" (termination-tcc) nil nil)
   ((size def-decl "nat" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (sfollow_name_TCC1 0
  (sfollow_name_TCC1-1 nil 3584207590 ("" (subtype-tcc) nil nil)
   ((∈ const-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (∈ def-decl "bool" language nil)
    (syntaxic type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (signature type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (sfollow_name_TCC2 0
  (sfollow_name_TCC2-1 nil 3584207590 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (∈ def-decl "bool" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (sfollow_name_TCC3 0
  (sfollow_name_TCC3-1 nil 3584207590 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil) nil
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (pretau def-decl "bool" language nil))
   nil))
 (sfollow_name_TCC4 0
  (sfollow_name_TCC4-1 nil 3584207590
   ("" (skosimp* :preds? t) (("" (lazy-grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    nil (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (rest const-decl "(stheory?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(stheory?)" language nil)
    (sapply const-decl "signature" language nil)
    (pretau def-decl "bool" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil) nil
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (kw_pretau_expr 0
  (measure-induct "measure induct" 3583865009
   ("" (induct e)
    (("1" (grind) nil nil)
     ("2" (skosimp* :preds? t)
      (("2" (assert) (("2" (grind) nil nil)) nil)) nil)
     ("3" (skosimp* :preds? t)
      (("3" (assert)
        (("3" (hide -5)
          (("3" (inst - S1!1 S2!1 dot2_var!1) (("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp* :preds? t)
      (("4" (assert)
        (("4" (split 1)
          (("1" (flatten)
            (("1" (inst -7 S1!1 S2!1 Sig!1) (("1" (assert) nil nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (split 1)
              (("1" (assert)
                (("1" (expand kw -1)
                  (("1" (lift-if)
                    (("1" (bddsimp -1)
                      (("1" (assert) nil nil) ("2" (assert) nil nil)
                       ("3" (assert) nil nil) ("4" (assert) nil nil)
                       ("5" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst - S1!1 S2!1 Sig!1) (("2" (assert) nil nil))
                nil)
               ("3" (assert)
                (("3" (expand kw -1)
                  (("3" (lift-if)
                    (("3" (bddsimp -1)
                      (("1" (assert) nil nil) ("2" (assert) nil nil)
                       ("3" (assert) nil nil) ("4" (assert) nil nil)
                       ("5" (assert)
                        (("5" (decompose-equality -1)
                          (("5" (decompose-equality -1)
                            (("5" (decompose-equality -1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (assert)
                (("4" (expand kw -1)
                  (("4" (assert)
                    (("4" (lift-if)
                      (("4" (bddsimp -1)
                        (("1" (assert) nil nil) ("2" (assert) nil nil)
                         ("3" (assert) nil nil) ("4" (assert) nil nil)
                         ("5" (assert)
                          (("5" (decompose-equality -1)
                            (("5" (decompose-equality -1)
                              (("5"
                                (decompose-equality -1)
                                (("5"
                                  (expand sapply)
                                  (("5"
                                    (skosimp* :preds? t)
                                    (("5"
                                      (assert)
                                      (("5"
                                        (inst -12 "x!1")
                                        (("5"
                                          (assert)
                                          (("5"
                                            (decompose-equality -3)
                                            (("5"
                                              (assert)
                                              (("5"
                                                (copy -1)
                                                (("5"
                                                  (inst - "x!1")
                                                  (("5"
                                                    (rewrite -1)
                                                    (("5"
                                                      (case
                                                       "rest(S1!1, x!1) = rest(S2!1, x!1)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "rest"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "^^")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (bddsimp
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (decompose-equality
                                                                           3)
                                                                          (("1"
                                                                            (decompose-equality
                                                                             1)
                                                                            (("1"
                                                                              (skosimp*
                                                                               :preds?
                                                                               t)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "min")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     -4)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "min")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (expand
                                                                               "min")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "min")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (expand
                                                                             "min")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp* :preds? t)
      (("5" (assert)
        (("5" (inst - S1!1 S2!1 Sig!1)
          (("5" (inst - S1!1 S2!1 "Sig!1 ++ k(sconst_def)")
            (("5" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (skosimp* :preds? t)
      (("6" (assert)
        (("6" (inst - S1!1 S2!1 Sig!1)
          (("6" (inst - S1!1 S2!1 "Sig!1 ++ k(sconst_def)")
            (("6" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("7" (skosimp* :preds? t)
      (("7" (assert)
        (("7" (inst - S1!1 S2!1 Sig!1)
          (("7" (inst - S1!1 S2!1 "Sig!1 ++ k(sconst_def)")
            (("7" (skosimp* :preds? t)
              (("7" (assert) (("7" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (skosimp* :preds? t)
      (("8" (assert)
        (("8" (inst - S1!1 S2!1 Sig!1)
          (("8" (inst - S1!1 S2!1 Sig!1) (("8" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("9" (skosimp* :preds? t)
      (("9" (assert)
        (("9" (hide -4)
          (("9" (inst - S1!1 S2!1 "Sig!1 ++ k(sconst_def)")
            (("9" (flatten)
              (("9" (assert) (("9" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("10" (skosimp* :preds? t)
      (("10" (assert)
        (("10" (inst - S1!1 S2!1 Sig!1)
          (("10" (inst - S1!1 S2!1 Sig!1) (("10" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("11" (skosimp* :preds? t)
      (("11" (assert)
        (("11" (inst - S1!1 S2!1 Sig!1) (("11" (grind) nil nil)) nil))
        nil))
      nil)
     ("12" (skosimp* :preds? t)
      (("12" (assert)
        (("12" (inst - S1!1 S2!1 Sig!1) (("12" (grind) nil nil)) nil))
        nil))
      nil)
     ("13" (skosimp* :preds? t)
      (("13" (assert) (("13" (grind :rewrites sexpr?) nil nil)) nil))
      nil)
     ("14" (grind :rewrites sexpr?) nil nil)
     ("15" (grind :rewrites sexpr?) nil nil)
     ("16" (grind :rewrites sexpr?) nil nil)
     ("17" (grind :rewrites sexpr?) nil nil)
     ("18" (grind :rewrites sexpr?) nil nil)
     ("19" (grind :rewrites sexpr?) nil nil)
     ("20" (grind :rewrites sexpr?) nil nil)
     ("21" (grind :rewrites sexpr?) nil nil)
     ("22" (grind :rewrites sexpr?) nil nil))
    nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (signature def-decl "signature" language nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(stheory?)" language nil)
    (k const-decl "(stheory?)" language nil)
    (sconst_def? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (sconst_def adt-constructor-decl "(sconst_def?)" language nil)
    (sig adt-accessor-decl "[(stheory?) -> finseq[signature]]" language
         nil)
    (stheory adt-constructor-decl "[finseq[signature] -> (stheory?)]"
     language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (PRECONTEXT adt-constructor-decl "[signature -> (PRECONTEXT?)]"
     language nil)
    (SIG adt-accessor-decl "[(PRECONTEXT?) -> signature]" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (rest const-decl "(stheory?)" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil nil nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (signature_stheory_extensionality formula-decl nil language nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sapply const-decl "signature" language nil) nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (syntaxic_induction formula-decl nil language nil)
    (kw const-decl "prekeyword" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (prekeyword type-decl nil language nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pretau def-decl "bool" language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (signature type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (syntaxic type-decl nil language nil))
   shostak)
  (kw_pretau_expr-1 nil 3583855074
   ("" (induct e)
    (("1" (skosimp* :preds? t) (("1" (assert) nil nil)) nil)
     ("2" (skosimp* :preds? t)
      (("2" (assert)
        (("2" (expand sapply) (("2" (grind) nil nil)) nil)) nil))
      nil)
     ("3" (skosimp* :preds? t)
      (("3" (assert)
        (("3" (hide -5)
          (("3" (inst - S1!1 S2!1 dot2_var!1) (("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp* :preds? t)
      (("4" (assert)
        (("4" (split 1)
          (("1" (flatten)
            (("1" (inst - S1!1 S2!1 Sig!1) (("1" (assert) nil nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (split 1)
              (("1" (assert) (("1" (grind) nil nil)) nil)
               ("2" (inst - S1!1 S2!1 Sig!1) (("2" (assert) nil nil))
                nil)
               ("3" (assert)
                (("3" (expand kw -1)
                  (("3" (lift-if)
                    (("3" (bddsimp -1)
                      (("1" (assert) nil nil) ("2" (assert) nil nil)
                       ("3" (assert) nil nil) ("4" (assert) nil nil)
                       ("5" (assert)
                        (("5" (decompose-equality -1)
                          (("5" (decompose-equality -1)
                            (("5" (decompose-equality -1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (skosimp* :preds? t)
                (("4" (inst - x!1)
                  (("4" (inst -11 x!1)
                    (("4" (typepred "interp2_var!1`seq(x!1)")
                      (("4" (split -7)
                        (("1"
                          (inst - "sapply(S1!1)(x!1)"
                           "sapply(S2!1)(x!1)" Sig!1)
                          (("1" (assert)
                            (("1" (expand sapply)
                              (("1"
                                (expand kw -3)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (bddsimp -3)
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil)
                                     ("3" (assert) nil nil)
                                     ("4" (assert) nil nil)
                                     ("5"
                                      (assert)
                                      (("5"
                                        (decompose-equality -1)
                                        (("5"
                                          (decompose-equality -1)
                                          (("5" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skosimp* :preds? t)
      (("5" (assert) (("5" (postpone) nil nil)) nil)) nil)
     ("6" (skosimp* :preds? t)
      (("6" (assert) (("6" (postpone) nil nil)) nil)) nil)
     ("7" (skosimp* :preds? t)
      (("7" (assert) (("7" (postpone) nil nil)) nil)) nil)
     ("8" (skosimp* :preds? t)
      (("8" (assert) (("8" (postpone) nil nil)) nil)) nil)
     ("9" (skosimp* :preds? t)
      (("9" (assert) (("9" (postpone) nil nil)) nil)) nil)
     ("10" (skosimp* :preds? t)
      (("10" (assert) (("10" (postpone) nil nil)) nil)) nil)
     ("11" (skosimp* :preds? t)
      (("11" (assert) (("11" (postpone) nil nil)) nil)) nil)
     ("12" (skosimp* :preds? t)
      (("12" (assert) (("12" (postpone) nil nil)) nil)) nil)
     ("13" (skosimp* :preds? t)
      (("13" (assert) (("13" (postpone) nil nil)) nil)) nil)
     ("14" (skosimp* :preds? t)
      (("14" (assert) (("14" (postpone) nil nil)) nil)) nil)
     ("15" (skosimp* :preds? t)
      (("15" (assert) (("15" (postpone) nil nil)) nil)) nil)
     ("16" (skosimp* :preds? t)
      (("16" (assert) (("16" (postpone) nil nil)) nil)) nil)
     ("17" (skosimp* :preds? t)
      (("17" (assert) (("17" (postpone) nil nil)) nil)) nil)
     ("18" (skosimp* :preds? t)
      (("18" (assert) (("18" (postpone) nil nil)) nil)) nil)
     ("19" (skosimp* :preds? t)
      (("19" (assert) (("19" (postpone) nil nil)) nil)) nil)
     ("20" (skosimp* :preds? t)
      (("20" (assert) (("20" (postpone) nil nil)) nil)) nil)
     ("21" (skosimp* :preds? t)
      (("21" (assert) (("21" (postpone) nil nil)) nil)) nil)
     ("22" (skosimp* :preds? t)
      (("22" (assert) (("22" (postpone) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (signature_pretau 0
  (signature_pretau-1 nil 3583781347
   ("" (induct "Γ")
    (("1" (assert) nil nil) ("2" (assert) (("2" (grind) nil nil)) nil)
     ("3" (assert) (("3" (grind) nil nil)) nil)
     ("4" (assert) (("4" (grind) nil nil)) nil)
     ("5" (assert) (("5" (grind) nil nil)) nil)
     ("6" (assert) (("6" (grind) nil nil)) nil)
     ("7" (assert) (("7" (grind) nil nil)) nil)
     ("8" (assert) (("8" (grind) nil nil)) nil)
     ("9" (assert) (("9" (grind) nil nil)) nil)
     ("10" (assert) (("10" (grind) nil nil)) nil)
     ("11" (assert) (("11" (grind) nil nil)) nil)
     ("12" (assert) (("12" (grind) nil nil)) nil)
     ("13" (assert)
      (("13" (skosimp* :preds? t)
        (("13" (assert) (("13" (grind) nil nil)) nil)) nil))
      nil)
     ("14" (grind) nil nil) ("15" (grind) nil nil)
     ("16" (grind) nil nil) ("17" (grind) nil nil)
     ("18" (grind) nil nil)
     ("19" (skosimp* :preds? t)
      (("19" (assert)
        (("19" (flatten)
          (("19" (assert)
            (("19" (expand signature 1)
              (("19" (decompose-equality 1)
                (("19" (decompose-equality 1)
                  (("19" (decompose-equality 1)
                    (("1" (inst - x!1)
                      (("1" (inst -6 x!1)
                        (("1" (expand (finseq_appl apply))
                          (("1"
                            (inst - "sig(S1!1)`seq(x!1)"
                             "Sig!1 ++ rest(signature(theory_def(theory_def1_var!1)), x!1)")
                            (("1" (assert)
                              (("1"
                                (expand sapply)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("20" (grind) nil nil) ("21" (grind) nil nil)
     ("22" (grind) nil nil))
    nil)
   ((sig adt-accessor-decl "[(stheory?) -> finseq[signature]]" language
         nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (theory_def adt-constructor-decl
     "[finseq[(scontext?)] -> (theory_def?)]" language nil)
    nil nil (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (signature_stheory_extensionality formula-decl nil language nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (stheory adt-constructor-decl "[finseq[signature] -> (stheory?)]"
     language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (k const-decl "(stheory?)" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (++ const-decl "(stheory?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (rest const-decl "(stheory?)" language nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil) nil
    (sapply const-decl "signature" language nil)
    (kw const-decl "prekeyword" language nil)
    (syntaxic_induction formula-decl nil language nil)
    (signature def-decl "signature" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pretau def-decl "bool" language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (signature type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (syntaxic type-decl nil language nil))
   shostak)))

