(language
 (decls_TCC1 0
  (decls_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (syntaxic type-decl nil language nil)
    (length const-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (apply_TCC1 0
  (apply_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil) nil nil))
 (apply_TCC2 0
  (apply_TCC2-1 nil 3583504303 ("" (subtype-tcc) nil nil) nil nil))
 (doubleplus_TCC1 0
  (doubleplus_TCC1-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length const-decl "nat" language nil))
   nil))
 (first_TCC1 0
  (first_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil) nil nil))
 (rest_TCC1 0
  (rest_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil) nil nil))
 (rest_TCC2 0
  (rest_TCC2-1 nil 3583504303 ("" (subtype-tcc) nil nil) nil nil))
 (compatible?_TCC1 0
  (compatible?_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (length const-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (compatible?_TCC2 0
  (compatible?_TCC2-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil))
   nil))
 (compatible?_TCC3 0
  (compatible?_TCC3-1 nil 3583504303 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (subterm adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length const-decl "nat" language nil))
   nil))
 (interp_TCC1 0
  (interp_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (compatible? def-decl "bool" language nil)
    (length const-decl "nat" language nil))
   nil))
 (interp_TCC2 0
  (interp_TCC2-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (compatible? def-decl "bool" language nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (first const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (interp_TCC3 0
  (interp_TCC3-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (compatible? def-decl "bool" language nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (first const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil))
   nil))
 (interp_TCC4 0
  (interp_TCC4-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (compatible? def-decl "bool" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (interp_TCC5 0
  (interp_TCC5-1 nil 3583504303 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (compatible? def-decl "bool" language nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (subterm adt-def-decl "boolean" language nil)
    (first const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (interp_TCC6 0
  (interp_TCC6-1 nil 3583504303 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (compatible? def-decl "bool" language nil))
   nil))
 (semantic?_TCC1 0
  (semantic?_TCC1-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil))
   nil))
 (semantic?_TCC2 0
  (semantic?_TCC2-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil))
   nil))
 (semantic?_TCC3 0
  (semantic?_TCC3-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (kind? const-decl "bool" language nil))
   nil))
 (semantic?_TCC4 0
  (semantic?_TCC4-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (compatible? def-decl "bool" language nil)
    (kind? const-decl "bool" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (semantic?_TCC5 0
  (semantic?_TCC5-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (compatible? def-decl "bool" language nil)
    (kind? const-decl "bool" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (semantic?_TCC6 0
  (semantic?_TCC6-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC7 0
  (semantic?_TCC7-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC8 0
  (semantic?_TCC8-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC9 0
  (semantic?_TCC9-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC10 0
  (semantic?_TCC10-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC11 0
  (semantic?_TCC11-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC12 0
  (semantic?_TCC12-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC13 0
  (semantic?_TCC13-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC14 0
  (semantic?_TCC14-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC15 0
  (semantic?_TCC15-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC16 0
  (semantic?_TCC16-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC17 0
  (semantic?_TCC17-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC18 0
  (semantic?_TCC18-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC19 0
  (semantic?_TCC19-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC20 0
  (semantic?_TCC20-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC21 0
  (semantic?_TCC21-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC22 0
  (semantic?_TCC22-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC23 0
  (semantic?_TCC23-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC24 0
  (semantic?_TCC24-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC25 0
  (semantic?_TCC25-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC26 0
  (semantic?_TCC26-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC27 0
  (semantic?_TCC27-1 nil 3583303509
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (semantic?_TCC28 0
  (semantic?_TCC28-1 nil 3583505773 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length const-decl "nat" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (semantic?_TCC29 0
  (semantic?_TCC29-1 nil 3583505773 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil))
   nil))
 (semantic?_TCC30 0
  (semantic?_TCC30-1 nil 3583507033 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (subterm adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)))

