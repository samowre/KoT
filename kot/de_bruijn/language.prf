(language
 (sinterp?_TCC1 0
  (sinterp?_TCC1-1 nil 3583604542 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (sinterp?_TCC2 0
  (sinterp?_TCC2-1 nil 3583604542 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (k_TCC1 0
  (k_TCC1-1 nil 3583605177 ("" (subtype-tcc) nil nil)
   ((scontext? const-decl "bool" language nil)) nil))
 (empty_TCC1 0
  (empty_TCC1-1 nil 3583604542 ("" (subtype-tcc) nil nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (sdecl? const-decl "bool" language nil)
    (scontext? const-decl "bool" language nil))
   nil))
 (length_TCC1 0
  (length_TCC1-1 nil 3583604542 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (apply_TCC1 0
  (apply_TCC1-1 nil 3583602849 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (rest_TCC1 0
  (rest_TCC1-1 nil 3583601974
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (expand "scontext?" 1)
        (("" (assert)
          (("" (expand "^^")
            (("" (expand "scontext?")
              (("" (assert)
                (("" (flatten)
                  (("" (skosimp* :preds? t)
                    (("" (assert)
                      (("" (bddsimp)
                        (("1" (assert)
                          (("1" (expand "^^")
                            (("1" (assert)
                              (("1"
                                (expand "empty_seq")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "^^")
                            (("2" (assert)
                              (("2"
                                (expand "min")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst - "1 + x!1 + x!2")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil))
   nil))
 (doubleplus_TCC1 0
  (doubleplus_TCC1-1 nil 3583603546 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (doubleplus_TCC2 0
  (doubleplus_TCC2-1 nil 3583603546 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (x!1 skolem-const-decl
     "below[run_map(M!1)`length + run_map(N!1)`length]" language nil)
    (N!1 skolem-const-decl "(scontext?)" language nil)
    (M!1 skolem-const-decl "(scontext?)" language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (sdecl? const-decl "bool" language nil)
    (scontext? const-decl "bool" language nil))
   nil))
 (concat_empty 0
  (concat_empty-1 nil 3583611560 ("" (grind-with-ext) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (syntaxic_map_extensionality formula-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (sdecl? const-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (map adt-constructor-decl "[finseq[syntaxic] -> (map?)]" language
         nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (empty const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil))
   shostak))
 (concat__empty 0
  (concat__empty-1 nil 3583611565 ("" (grind-with-ext) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (syntaxic_map_extensionality formula-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (sdecl? const-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (map adt-constructor-decl "[finseq[syntaxic] -> (map?)]" language
         nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (empty const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil))
   shostak))
 (concat_assoc 0
  (concat_assoc-1 nil 3583611568
   ("" (skosimp* :preds? t)
    (("" (expand "++")
      (("" (lemma "o_assoc[syntaxic]")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((++ const-decl "(scontext?)" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil))
   shostak))
 (rest_concat_TCC1 0
  (rest_concat_TCC1-1 nil 3583611672 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (rest_concat_TCC2 0
  (rest_concat_TCC2-1 nil 3583611672 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil))
   nil))
 (rest_concat_TCC3 0
  (rest_concat_TCC3-1 nil 3583611672 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (rest_concat_TCC4 0
  (rest_concat_TCC4-1 nil 3583611672 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sdecl? const-decl "bool" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (rest_concat 0
  (rest_concat-1 nil 3583611672
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (lift-if)
        (("" (bddsimp)
          (("1" (expand "rest")
            (("1" (assert)
              (("1" (expand "^^")
                (("1" (assert)
                  (("1" (expand "++")
                    (("1" (assert)
                      (("1" (expand "o")
                        (("1" (assert)
                          (("1" (expand "min")
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (decompose-equality 1)
                                        (("1"
                                          (decompose-equality 1)
                                          (("1"
                                            (decompose-equality 1)
                                            (("1"
                                              (grind-with-ext)
                                              nil
                                              nil)
                                             ("2"
                                              (grind-with-ext)
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (grind-with-ext)
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (grind-with-ext)
                                          nil
                                          nil))
                                        nil)
                                       ("2" (grind-with-ext) nil nil)
                                       ("3"
                                        (assert)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (decompose-equality +)
                                            (("1"
                                              (expand "empty_seq")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (decompose-equality
                                                   +)
                                                  (("1"
                                                    (expand "++")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "o")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "min")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "empty_seq")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skosimp*
                                                                     :preds?
                                                                     t)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("4"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("5"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil)
                                             ("4" (grind) nil nil)
                                             ("5" (grind) nil nil)
                                             ("6" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (assert)
                                        (("4"
                                          (assert)
                                          (("4"
                                            (decompose-equality +)
                                            (("1"
                                              (decompose-equality +)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil)
                                               ("3" (grind) nil nil)
                                               ("4" (grind) nil nil)
                                               ("5" (grind) nil nil)
                                               ("6" (grind) nil nil)
                                               ("7" (grind) nil nil)
                                               ("8" (grind) nil nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil)
                                             ("4" (grind) nil nil)
                                             ("5" (grind) nil nil)
                                             ("6" (grind) nil nil)
                                             ("7" (grind) nil nil)
                                             ("8" (grind) nil nil)
                                             ("9" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "++")
              (("2" (assert)
                (("2" (expand "o")
                  (("2" (assert)
                    (("2" (expand "rest")
                      (("2" (assert)
                        (("2" (decompose-equality +)
                          (("1" (decompose-equality +)
                            (("1" (expand "^^")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "min")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "empty_seq")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (decompose-equality +)
                              (("1"
                                (expand "^^")
                                (("1"
                                  (expand "empty_seq")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("3" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (sdecl? const-decl "bool" language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (syntaxic_map_extensionality formula-decl nil language nil)
    (map adt-constructor-decl "[finseq[syntaxic] -> (map?)]" language
         nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "nat" language nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (N!1 skolem-const-decl "(scontext?)" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (M!1 skolem-const-decl "(scontext?)" language nil)
    (x!2 skolem-const-decl
     "below[min(run_map(M!1 ++ N!1)`length - 1 - x!1, run_map(M!1 ++ N!1)`length - 1 - x!1)]"
     language nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rest const-decl "(scontext?)" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (sum_TCC1 0
  (sum_TCC1-1 nil 3583594641 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (sum_TCC2 0
  (sum_TCC2-1 nil 3583594641 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (sum_TCC3 0
  (sum_TCC3-1 nil 3583594641 ("" (subtype-tcc) nil nil) nil nil))
 (sum_TCC4 0
  (sum_TCC4-1 nil 3583594641 ("" (subtype-tcc) nil nil) nil nil))
 (size_TCC1 0
  (size_TCC1-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC2 0
  (size_TCC2-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC3 0
  (size_TCC3-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC4 0
  (size_TCC4-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC5 0
  (size_TCC5-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC6 0
  (size_TCC6-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC7 0
  (size_TCC7-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC8 0
  (size_TCC8-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC9 0
  (size_TCC9-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC10 0
  (size_TCC10-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC11 0
  (size_TCC11-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC12 0
  (size_TCC12-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC13 0
  (size_TCC13-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC14 0
  (size_TCC14-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC15 0
  (size_TCC15-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC16 0
  (size_TCC16-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC17 0
  (size_TCC17-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC18 0
  (size_TCC18-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC19 0
  (size_TCC19-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC20 0
  (size_TCC20-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC21 0
  (size_TCC21-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC22 0
  (size_TCC22-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC23 0
  (size_TCC23-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC24 0
  (size_TCC24-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC25 0
  (size_TCC25-1 nil 3583610655 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC26 0
  (size_TCC26-1 nil 3583610655 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (subterm adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (prefix_size_TCC1 0
  (prefix_size_TCC1-1 nil 3583596761 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prefix_size 0
  (prefix_size-1 nil 3583594193
   ("" (measure-induct+ "g`length" "g")
    (("1" (skosimp* :preds? t)
      (("1" (assert)
        (("1" (expand "sum" +)
          (("1" (assert)
            (("1" (lift-if)
              (("1" (bddsimp)
                (("1" (assert) nil nil)
                 ("2" (assert)
                  (("2" (expand "finseq_appl")
                    (("2" (assert)
                      (("2"
                        (inst -
                         "(# length := x!1`length - 1, seq := LAMBDA (x: below[x!1`length - 1]): x!1(x) #)")
                        (("2"
                          (inst -
                           "(# length := f!1`length - 1, seq := LAMBDA (x: below[f!1`length - 1]): f!1(x) #)")
                          (("2" (assert)
                            (("2" (split -)
                              (("1"
                                (expand "finseq_appl")
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp* :preds? t)
                                (("2"
                                  (expand "finseq_appl")
                                  (("2"
                                    (inst - "x!2")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind-with-ext) nil nil) ("3" (grind-with-ext) nil nil))
    nil)
   ((even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (size def-decl "nat" language nil)
    (sum def-decl "nat" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (interpret?_TCC1 0
  (interpret?_TCC1-1 nil 3583603786 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (interpret?_TCC2 0
  (interpret?_TCC2-1 nil 3583603786 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (compatible?_TCC1 0
  (compatible?_TCC1-1 nil 3583613237 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (compatible?_TCC2 0
  (compatible?_TCC2-1 nil 3583613237 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (compatible_interp_TCC1 0
  (compatible_interp_TCC1-1 nil 3583606794 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (compatible_interp_TCC2 0
  (compatible_interp_TCC2-1 nil 3583613237 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (compatible_interp 0
  (compatible_interp-1 nil 3583606796
   ("" (induct "U")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert) nil nil) ("4" (assert) nil nil)
     ("5" (assert) nil nil) ("6" (assert) nil nil)
     ("7" (assert) nil nil) ("8" (assert) nil nil)
     ("9" (assert) nil nil) ("10" (assert) nil nil)
     ("11" (assert) nil nil) ("12" (assert) nil nil)
     ("13" (assert) nil nil) ("14" (assert) nil nil)
     ("15" (assert) nil nil) ("16" (assert) nil nil)
     ("17" (assert) nil nil) ("18" (assert) nil nil)
     ("19" (assert)
      (("19" (skosimp* :preds? t)
        (("19" (assert)
          (("19" (bddsimp)
            (("1" (assert)
              (("1" (expand "interpret?" 1)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (inst - "M!1" "N!1" "M!1" "i!1")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (inst - "M!1" "N!1" "M!1" "i!1")
                (("2" (assert)
                  (("2" (expand "interpret?" 1)
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (bddsimp)
                          (("2" (assert)
                            (("2" (inst - "itype2_var!1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (assert) nil nil)
             ("4" (assert)
              (("4" (expand "interpret?" 1)
                (("4" (flatten)
                  (("4" (assert)
                    (("4" (inst - "M!1" "N!1" "M!1" "i!1")
                      (("4" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (assert)
              (("5" (expand "interpret?" 1)
                (("5" (flatten)
                  (("5" (assert)
                    (("5" (inst - "M!1" "N!1" "M!1" "i!1")
                      (("5" (assert)
                        (("5" (bddsimp)
                          (("5" (assert)
                            (("5" (inst - "itype2_var!1")
                              (("5" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("6" (expand "interpret?" 1) (("6" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("20" (assert)
      (("20" (skosimp* :preds? t)
        (("20" (assert)
          (("20" (bddsimp)
            (("1" (assert)
              (("1" (expand "interpret?" 1)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (inst - "M!1" "N!1" "M!1" "i!1")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst - "M!1" "N!1" "M!1" "i!1")
              (("2" (assert)
                (("2" (bddsimp)
                  (("1" (assert)
                    (("1" (expand "interpret?" 1)
                      (("1" (propax) nil nil)) nil))
                    nil)
                   ("2" (expand "interpret?" 1)
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (inst - "iconst2_var!1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (assert) nil nil)
             ("4" (assert)
              (("4" (expand "interpret?" 1)
                (("4" (flatten)
                  (("4" (inst - "iconst2_var!1")
                    (("4" (inst - "M!1" "N!1" "M!1" "i!1")
                      (("4" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (assert)
              (("5" (expand "interpret?" 1)
                (("5" (flatten)
                  (("5" (inst - "M!1" "N!1" "M!1" "i!1")
                    (("5" (assert)
                      (("5" (bddsimp)
                        (("5" (assert)
                          (("5" (inst - "iconst2_var!1")
                            (("5" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("6" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("21" (assert) nil nil)
     ("22" (assert) (("22" (delete 2) (("22" (grind) nil nil)) nil))
      nil)
     ("23" (assert) (("23" (delete 2) (("23" (grind) nil nil)) nil))
      nil)
     ("24" (assert) (("24" (delete 2) (("24" (grind) nil nil)) nil))
      nil)
     ("25" (assert) (("25" (delete 2) (("25" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (interpret? def-decl "bool" language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic_induction formula-decl nil language nil)
    (iconst adt-constructor-decl
     "[[syntaxic, nat, syntaxic] -> (iconst?)]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (itype adt-constructor-decl
     "[[syntaxic, nat, syntaxic] -> (itype?)]" language nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (compatible? def-decl "bool" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (apply const-decl "(sdecl?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (syntaxic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (scontext? const-decl "bool" language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil))
   shostak))
 (interp_TCC1 0
  (interp_TCC1-1 nil 3583605876 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (compatible? def-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (apply const-decl "(sdecl?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (interp_TCC2 0
  (interp_TCC2-1 nil 3583605876
   ("" (grind :if-match nil)
    (("" (inst - "x!1") (("" (grind) nil nil)) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (apply const-decl "(sdecl?)" language nil)
    (< const-decl "bool" reals nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (compatible? def-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (scontext? const-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (interp_TCC3 0
  (interp_TCC3-1 nil 3583605876
   ("" (use "compatible_interp")
    (("" (skosimp* :preds? t)
      ((""
        (invoke (inst - "M!1" "%1" "τ!1" "T!1" "i!1")
         (~ + "compatible?(%1, τ!1)"))
        (("1" (assert)
          (("1" (assert)
            (("1" (flatten)
              (("1" (assert)
                (("1" (skosimp* :preds? t)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (compatible? def-decl "bool" language nil)
    (scontext? const-decl "bool" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sdecl? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (M!1 skolem-const-decl "(scontext?)" language nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (i!1 skolem-const-decl "nat" language nil)
    (< const-decl "bool" reals nil)
    (map adt-constructor-decl "[finseq[syntaxic] -> (map?)]" language
         nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (type_def adt-constructor-decl "[syntaxic -> (type_def?)]" language
     nil)
    (compatible_interp formula-decl nil language nil))
   nil))
 (interp_TCC4 0
  (interp_TCC4-1 nil 3583605876 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (compatible? def-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (apply const-decl "(sdecl?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (interp_TCC5 0
  (interp_TCC5-1 nil 3583605876 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (compatible? def-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sdecl? const-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (apply const-decl "(sdecl?)" language nil))
   nil))
 (interp_TCC6 0
  (interp_TCC6-1 nil 3583605876 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (compatible? def-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (< const-decl "bool" reals nil)
    (apply const-decl "(sdecl?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (scontext? const-decl "bool" language nil))
   nil))
 (interp_TCC7 0
  (interp_TCC7-1 nil 3583605876
   ("" (use "compatible_interp")
    (("" (skosimp* :preds? t)
      ((""
        (invoke (inst - "M!1" "%1" "τ!1" "a!1" "i!1")
         (~ + "compatible?(%1, τ!1)"))
        (("" (grind :if-match nil) nil nil)) nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (compatible? def-decl "bool" language nil)
    (scontext? const-decl "bool" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (map adt-constructor-decl "[finseq[syntaxic] -> (map?)]" language
         nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def adt-constructor-decl
     "[[syntaxic, syntaxic] -> (const_def?)]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lam? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (const_decl? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_var? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (type_ shared-adt-accessor-decl
     "[{x: syntaxic | lam?(x) OR const_decl?(x) OR const_var?(x) OR const_def?(x)} -> syntaxic]"
     language nil)
    (< const-decl "bool" reals nil)
    (sdecl? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (compatible_interp formula-decl nil language nil))
   nil))
 (interp_TCC8 0
  (interp_TCC8-1 nil 3583605876 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (compatible? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (prekind?_TCC1 0
  (prekind?_TCC1-1 nil 3583601974 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (apply const-decl "(sdecl?)" language nil)
    (kind? const-decl "bool" language nil))
   nil))
 (prekind?_TCC2 0
  (prekind?_TCC2-1 nil 3583601974 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (kind? const-decl "bool" language nil)
    (def shared-adt-accessor-decl
     "[{x: syntaxic |     type_def?(x) OR const_def?(x) OR theory_def?(x) OR itype?(x) OR iconst?(x)} -> syntaxic]"
     language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (apply const-decl "(sdecl?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (scontext? const-decl "bool" language nil))
   nil))
 (prekind?_TCC3 0
  (prekind?_TCC3-1 nil 3583601974 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sdecl? const-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (apply const-decl "(sdecl?)" language nil)
    (kind? const-decl "bool" language nil))
   nil))
 (prekind?_TCC4 0
  (prekind?_TCC4-1 nil 3583601974 ("" (subtype-tcc) nil nil)
   ((sdecl? const-decl "bool" language nil)) nil))
 (prekind?_TCC5 0
  (prekind?_TCC5-1 nil 3583601974 ("" (grind) nil nil)
   ((sdecl? const-decl "bool" language nil)) nil))
 (prekind?_TCC6 0
  (prekind?_TCC6-1 nil 3583613766 ("" (subtype-tcc) nil nil)
   ((sdecl? const-decl "bool" language nil)) nil))
 (prekind?_TCC7 0
  (prekind?_TCC7-1 nil 3583613766 ("" (subtype-tcc) nil nil)
   ((sdecl? const-decl "bool" language nil)) nil))
 (prekind?_TCC8 0
  (prekind?_TCC8-1 nil 3583613766 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sdecl? const-decl "bool" language nil)
    (scontext? const-decl "bool" language nil))
   nil))
 (prekind?_TCC9 0
  (prekind?_TCC9-1 nil 3583613766 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (U!1 skolem-const-decl "syntaxic" language nil)
    (f!1 skolem-const-decl "finseq[syntaxic]" language nil)
    (x!1 skolem-const-decl "below[f!1`length]" language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (M!1 skolem-const-decl "(scontext?)" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (subterm adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sdecl? const-decl "bool" language nil)
    (scontext? const-decl "bool" language nil))
   nil))
 (precontext_is_map 0
  (precontext_is_map-1 nil 3583604986
   ("" (grind)
    (("" (grind) (("" (expand "prekind?") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((apply const-decl "(sdecl?)" language nil)
    (kind? const-decl "bool" language nil)
    (k const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (empty const-decl "(scontext?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (precontext type-eq-decl nil language nil))
   nil))
 (pretheory_is_map 0
  (pretheory_is_map-1 nil 3583604986
   ("" (grind) (("" (expand "prekind?") (("" (grind) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (pretheory type-eq-decl nil language nil))
   nil))
 (precontext_is_scontext 0
  (precontext_is_scontext-1 nil 3583604986
   ("" (grind)
    (("1" (expand "prekind?") (("1" (grind) nil nil)) nil)
     ("2" (expand "prekind?") (("2" (grind) nil nil)) nil))
    nil)
   ((rest const-decl "(scontext?)" language nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (prekeyword type-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (empty const-decl "(scontext?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (precontext type-eq-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (pretheory_is_scontext 0
  (pretheory_is_scontext-1 nil 3583604986
   ("" (skosimp* :preds? t)
    (("" (expand prekind?) (("" (grind) nil nil)) nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (apply const-decl "(sdecl?)" language nil)
    (kind? const-decl "bool" language nil)
    (k const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (rest const-decl "(scontext?)" language nil)
    (M!1 skolem-const-decl "(scontext?)" language nil)
    (x!1 skolem-const-decl "pretheory(M)" language nil)
    (x!2 skolem-const-decl "below[run_map(x!1)`length]" language nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sdecl? const-decl "bool" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (pretheory type-eq-decl nil language nil))
   nil))
 (pretheory_as_precontext_TCC1 0
  (pretheory_as_precontext_TCC1-1 nil 3583610111
   ("" (skosimp* :preds? t)
    (("" (expand "prekind?" -2)
      (("" (expand "scontext?" +)
        (("" (assert) (("" (grind :if-match nil) nil nil)) nil)) nil))
      nil))
    nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (sdecl? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (rest const-decl "(scontext?)" language nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (empty const-decl "(scontext?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (precontext type-eq-decl nil language nil))
   nil))
 (pretheory_as_precontext 0
  (pretheory_as_precontext-1 nil 3583610240
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (use "precontext_is_scontext")
        (("" (lemma "pretheory_is_scontext")
          (("" (inst - "Γ!1" "U!1")
            (("" (assert)
              (("" (expand "scontext?")
                (("" (flatten)
                  (("" (assert)
                    (("" (typepred "++")
                      (("" (inst?)
                        (("" (expand "scontext?" -1)
                          (("" (flatten)
                            (("" (assert)
                              ((""
                                (skosimp* :preds? t)
                                ((""
                                  (assert)
                                  ((""
                                    (expand "++" -1)
                                    ((""
                                      (assert)
                                      ((""
                                        (expand "o" -1)
                                        ((""
                                          (assert)
                                          ((""
                                            (rewrite "rest_concat")
                                            ((""
                                              (assert)
                                              ((""
                                                (bddsimp)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -9 "x!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -8
                                                     "x!1 - run_map(U!1)`length")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pretheory_is_scontext judgement-tcc nil language nil)
    (++ const-decl "(scontext?)" language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (rest const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (rest_concat formula-decl nil language nil)
    (O const-decl "finseq" finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (concat_empty formula-decl nil language nil)
    (pretheory type-eq-decl nil language nil)
    (precontext_is_scontext judgement-tcc nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (empty const-decl "(scontext?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (precontext type-eq-decl nil language nil))
   shostak))
 (precontext_as_pretheory 0
  (precontext_as_pretheory-1 nil 3583614052 ("" (postpone) nil nil) nil
   shostak)))

