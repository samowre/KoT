(language
 (k_TCC1 0
  (k_TCC1-1 nil 3583693859
   ("" (grind !!) (("" (grind :rewrites (sdecl? scontext?)) nil nil))
    nil)
   ((scontext? adt-def-decl "boolean" language nil)) nil))
 (empty_TCC1 0
  (empty_TCC1-1 nil 3583695729 ("" (subtype-tcc) nil nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (length_TCC1 0
  (length_TCC1-1 nil 3583695729 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (rest_TCC1 0
  (rest_TCC1-1 nil 3583695729 ("" (subtype-tcc) nil nil)
   ((scontext? adt-def-decl "boolean" language nil)) nil))
 (doubleplus_TCC1 0
  (doubleplus_TCC1-1 nil 3583695729 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (doubleplus_TCC2 0
  (doubleplus_TCC2-1 nil 3583695729 ("" (subtype-tcc) nil nil)
   ((O const-decl "finseq" finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (concat_empty 0
  (concat_empty-1 nil 3583611560 ("" (grind-with-ext) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic_map_extensionality formula-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (scontext? type-eq-decl nil language nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil))
   shostak))
 (concat__empty 0
  (concat__empty-1 nil 3583611565 ("" (grind-with-ext) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic_map_extensionality formula-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (scontext? type-eq-decl nil language nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil))
   shostak))
 (concat_assoc 0
  (concat_assoc-1 nil 3583611568
   ("" (auto-rewrite "++")
    (("" (auto-rewrite "o")
      (("" (skosimp* :preds? t)
        (("" (assert) (("" (grind-with-ext :if-match nil) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil)
    (syntaxic_map_extensionality formula-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (M!1 skolem-const-decl "(scontext?)" language nil)
    (N!1 skolem-const-decl "(scontext?)" language nil)
    (P!1 skolem-const-decl "(scontext?)" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil))
   shostak))
 (rest_concat_TCC1 0
  (rest_concat_TCC1-1 nil 3583611672 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil))
   nil))
 (rest_concat_TCC2 0
  (rest_concat_TCC2-1 nil 3583611672 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (rest_concat 0
  (rest_concat-1 nil 3583611672
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (lift-if)
        (("" (bddsimp)
          (("1" (expand "rest")
            (("1" (assert)
              (("1" (expand "^^")
                (("1" (assert)
                  (("1" (expand "++")
                    (("1" (assert)
                      (("1" (expand "o")
                        (("1" (assert)
                          (("1" (expand "min")
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (bddsimp)
                                      (("1"
                                        (decompose-equality 1)
                                        (("1"
                                          (decompose-equality 1)
                                          (("1"
                                            (decompose-equality 1)
                                            (("1"
                                              (grind-with-ext)
                                              nil
                                              nil)
                                             ("2"
                                              (grind-with-ext)
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (grind-with-ext)
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (grind-with-ext)
                                          nil
                                          nil))
                                        nil)
                                       ("2" (grind-with-ext) nil nil)
                                       ("3"
                                        (assert)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (decompose-equality +)
                                            (("1"
                                              (expand "empty_seq")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (decompose-equality
                                                   +)
                                                  (("1"
                                                    (expand "++")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "o")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "min")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "empty_seq")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skosimp*
                                                                     :preds?
                                                                     t)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("4"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("5"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil)
                                             ("4" (grind) nil nil)
                                             ("5" (grind) nil nil)
                                             ("6" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (assert)
                                        (("4"
                                          (assert)
                                          (("4"
                                            (decompose-equality +)
                                            (("1"
                                              (decompose-equality +)
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil)
                                               ("3" (grind) nil nil)
                                               ("4" (grind) nil nil)
                                               ("5" (grind) nil nil)
                                               ("6" (grind) nil nil)
                                               ("7" (grind) nil nil)
                                               ("8" (grind) nil nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3" (grind) nil nil)
                                             ("4" (grind) nil nil)
                                             ("5" (grind) nil nil)
                                             ("6" (grind) nil nil)
                                             ("7" (grind) nil nil)
                                             ("8" (grind) nil nil)
                                             ("9" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "++")
              (("2" (assert)
                (("2" (expand "o")
                  (("2" (assert)
                    (("2" (expand "rest")
                      (("2" (assert)
                        (("2" (decompose-equality +)
                          (("1" (decompose-equality +)
                            (("1" (expand "^^")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "min")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "empty_seq")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (decompose-equality +)
                              (("1"
                                (expand "^^")
                                (("1"
                                  (expand "empty_seq")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("3" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (syntaxic_map_extensionality formula-decl nil language nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "nat" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (N!1 skolem-const-decl "(scontext?)" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (M!1 skolem-const-decl "(scontext?)" language nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rest const-decl "(scontext?)" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (length_concat_TCC1 0
  (length_concat_TCC1-1 nil 3583695729 ("" (subtype-tcc) nil nil)
   ((O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil))
   nil))
 (length_concat 0
  (length_concat-1 nil 3583683847 ("" (grind) nil nil)
   ((O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil))
   shostak))
 (length_k_TCC1 0
  (length_k_TCC1-1 nil 3583695729 ("" (subtype-tcc) nil nil)
   ((k const-decl "(scontext?)" language nil)) nil))
 (length_k 0
  (length_k-1 nil 3583683851 ("" (grind) nil nil)
   ((k const-decl "(scontext?)" language nil)) shostak))
 (sum_TCC1 0
  (sum_TCC1-1 nil 3583594641 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil))
   nil))
 (sum_TCC2 0
  (sum_TCC2-1 nil 3583594641 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (sum_TCC3 0
  (sum_TCC3-1 nil 3583594641 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (sum_TCC4 0
  (sum_TCC4-1 nil 3583594641 ("" (subtype-tcc) nil nil) nil nil))
 (sum_TCC5 0
  (sum_TCC5-1 nil 3583616733 ("" (termination-tcc) nil nil) nil nil))
 (sum_TCC6 0
  (sum_TCC6-1 nil 3583616733 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil))
   nil))
 (size_TCC1 0
  (size_TCC1-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (syntaxic type-decl nil language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC2 0
  (size_TCC2-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC3 0
  (size_TCC3-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC4 0
  (size_TCC4-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC5 0
  (size_TCC5-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC6 0
  (size_TCC6-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC7 0
  (size_TCC7-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC8 0
  (size_TCC8-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC9 0
  (size_TCC9-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC10 0
  (size_TCC10-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC11 0
  (size_TCC11-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC12 0
  (size_TCC12-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC13 0
  (size_TCC13-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC14 0
  (size_TCC14-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC15 0
  (size_TCC15-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC16 0
  (size_TCC16-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC17 0
  (size_TCC17-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC18 0
  (size_TCC18-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC19 0
  (size_TCC19-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC20 0
  (size_TCC20-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC21 0
  (size_TCC21-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC22 0
  (size_TCC22-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC23 0
  (size_TCC23-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC24 0
  (size_TCC24-1 nil 3583528309 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC25 0
  (size_TCC25-1 nil 3583692220 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC26 0
  (size_TCC26-1 nil 3583692220 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (subterm adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
                 nil))
   nil))
 (prefix_size_TCC1 0
  (prefix_size_TCC1-1 nil 3583596761 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prefix_size 0
  (prefix_size-1 nil 3583594193
   ("" (measure-induct+ "g`length" "g")
    (("1" (skosimp* :preds? t)
      (("1" (assert)
        (("1" (expand "sum" +)
          (("1" (assert)
            (("1" (lift-if)
              (("1" (bddsimp)
                (("1" (assert) nil nil)
                 ("2" (assert)
                  (("2" (expand "finseq_appl")
                    (("2" (assert)
                      (("2"
                        (inst -
                         "(# length := x!1`length - 1, seq := LAMBDA (x: below[x!1`length - 1]): x!1(x) #)")
                        (("2"
                          (inst -
                           "(# length := f!1`length - 1, seq := LAMBDA (x: below[f!1`length - 1]): f!1(x) #)")
                          (("2" (assert)
                            (("2" (split -)
                              (("1"
                                (expand "finseq_appl")
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp* :preds? t)
                                (("2"
                                  (expand "finseq_appl")
                                  (("2"
                                    (inst - "x!2")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (grind-with-ext) nil nil) ("3" (grind-with-ext) nil nil))
    nil)
   ((even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
                 nil)
    (size def-decl "nat" language nil)
    (sum def-decl "{n: nat | FORALL (x: below[len]): f(x) <= n}"
     language nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (interpret?_TCC1 0
  (interpret?_TCC1-1 nil 3583603786 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (syntaxic type-decl nil language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (interpret?_TCC2 0
  (interpret?_TCC2-1 nil 3583603786 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (syntaxic type-decl nil language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (interpret_TCC1 0
  (interpret_TCC1-1 nil 3583690355
   ("" (skosimp* :preds? t)
    (("" (rewrite -5)
      (("" (expand "interpret?" -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (interpret? def-decl "bool" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (interpret_TCC2 0
  (interpret_TCC2-1 nil 3583690355
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -5)
        (("" (expand "interpret?" -1) (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (interpret? def-decl "bool" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (interpret_TCC3 0
  (interpret_TCC3-1 nil 3583690355
   ("" (skosimp* :preds? t) (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (interpret? def-decl "bool" language nil))
   nil))
 (compatible_interp_TCC1 0
  (compatible_interp_TCC1-1 nil 3583606794 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (scontext? type-eq-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (< const-decl "bool" reals nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (compatible_interp 0
  (compatible_interp-1 nil 3583606796
   ("" (induct U)
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert) nil nil) ("4" (assert) nil nil)
     ("5" (assert) nil nil) ("6" (assert) nil nil)
     ("7" (assert) nil nil) ("8" (assert) nil nil)
     ("9" (assert) nil nil) ("10" (assert) nil nil)
     ("11" (assert) nil nil) ("12" (assert) nil nil)
     ("13" (assert) nil nil) ("14" (assert) nil nil)
     ("15" (assert) nil nil) ("16" (assert) nil nil)
     ("17" (assert) nil nil) ("18" (assert) nil nil)
     ("19" (assert)
      (("19" (skosimp* :preds? t)
        (("19" (assert)
          (("19" (delete -8)
            (("19" (bddsimp)
              (("1" (expand interpret? 1)
                (("1" (assert)
                  (("1" (inst -7 M!1 N!1 "itype3_var!1" i!1)
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (expand interpret? 1)
                (("2" (assert)
                  (("2" (flatten)
                    (("2" (inst -11 "itype2_var!1")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (assert) nil nil)
               ("4" (expand interpret? 1)
                (("4" (inst -7 M!1 N!1 "itype3_var!1" i!1)
                  (("4" (grind) nil nil)) nil))
                nil)
               ("5" (inst -11 "itype2_var!1")
                (("5" (expand interpret? 1) (("5" (grind) nil nil))
                  nil))
                nil)
               ("6" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("20" (assert)
      (("20" (skosimp* :preds? t)
        (("20" (assert)
          (("20" (delete -8)
            (("20" (bddsimp)
              (("1" (expand interpret? 1)
                (("1" (assert)
                  (("1" (inst -7 M!1 N!1 "iconst3_var!1" i!1)
                    (("1" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (expand interpret? 1)
                (("2" (assert)
                  (("2" (inst -11 "iconst2_var!1")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (expand interpret? 1) (("3" (assert) nil nil)) nil)
               ("4" (expand interpret? 1)
                (("4" (assert)
                  (("4" (inst -7 M!1 N!1 "iconst3_var!1" i!1)
                    (("4" (grind) nil nil)) nil))
                  nil))
                nil)
               ("5" (expand interpret? 1)
                (("5" (assert)
                  (("5" (inst -11 "iconst2_var!1")
                    (("5" (grind) nil nil)) nil))
                  nil))
                nil)
               ("6" (expand interpret? 1) (("6" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("21" (assert) nil nil)
     ("22" (assert) (("22" (hide 2) (("22" (grind) nil nil)) nil)) nil)
     ("23" (assert) (("23" (hide 2) (("23" (grind) nil nil)) nil)) nil)
     ("24" (assert) (("24" (hide 2) (("24" (grind) nil nil)) nil)) nil)
     ("25" (assert) (("25" (hide 2) (("25" (grind) nil nil)) nil))
      nil))
    nil)
   ((map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (syntaxic type-decl nil language nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (scontext? type-eq-decl nil language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (compatible? def-decl "bool" language nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (itype adt-constructor-decl
     "[[(sinterp?), nat, (sexpr?)] -> (itype?)]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iconst adt-constructor-decl
     "[[(sinterp?), nat, (sexpr?)] -> (iconst?)]" language nil)
    (syntaxic_induction formula-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (interpret? def-decl "bool" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (interp_TCC1 0
  (interp_TCC1-1 nil 3583605876 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (compatible? def-decl "bool" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (interp_TCC2 0
  (interp_TCC2-1 nil 3583605876
   ("" (grind :if-match nil)
    (("" (inst - "x!1") (("" (grind) nil nil)) nil)) nil)
   ((sdecl? adt-def-decl "boolean" language nil)) nil))
 (interp_TCC3 0
  (interp_TCC3-1 nil 3583605876
   ("" (lemma "compatible_interp")
    (("" (skosimp* :preds? t)
      (("" (assert)
        ((""
          (inst - "M!1"
           "map(run_map(M!1) WITH [`seq(i!1) := type_def(T!1)])" "τ!1"
           "T!1" "i!1")
          (("1" (assert) (("1" (grind-with-ext) nil nil)) nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((sexpr? adt-def-decl "boolean" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (compatible? def-decl "bool" language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (compatible_interp formula-decl nil language nil))
   nil))
 (interp_TCC4 0
  (interp_TCC4-1 nil 3583605876
   ("" (lemma "compatible_interp")
    (("" (skosimp* :preds? t)
      (("" (assert)
        ((""
          (inst - "M!1"
           "map(run_map(M!1) WITH [`seq(i!1) := type_def(T!1)])" "τ!1"
           "T!1" "i!1")
          (("1" (assert) (("1" (grind-with-ext) nil nil)) nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((compatible_interp formula-decl nil language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (apply const-decl "(sdecl?)" language nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (T!1 skolem-const-decl "(sexpr?)" language nil)
    (type_def adt-constructor-decl "[(sexpr?) -> (type_def?)]" language
     nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (< const-decl "bool" reals nil)
    (i!1 skolem-const-decl "nat" language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (M!1 skolem-const-decl "(scontext?)" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (compatible? def-decl "bool" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (interp_TCC5 0
  (interp_TCC5-1 nil 3583605876 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (compatible? def-decl "bool" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (interp_TCC6 0
  (interp_TCC6-1 nil 3583605876
   ("" (skosimp* :preds? t) (("" (assert) (("" (grind) nil nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (apply const-decl "(sdecl?)" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (compatible? def-decl "bool" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (interp_TCC7 0
  (interp_TCC7-1 nil 3583693859
   ("" (lemma "compatible_interp")
    (("" (assert)
      (("" (skosimp* :preds? t)
        ((""
          (inst - "M!1"
           "map(run_map(M!1) WITH [`seq(i!1) := const_def(type_(apply(M!1)(i!1)), a!1)])"
           "τ!1" "a!1" "i!1")
          (("1" (grind-with-ext) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((compatible? def-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (compatible_interp formula-decl nil language nil))
   nil))
 (interp_TCC8 0
  (interp_TCC8-1 nil 3583693859 ("" (cases-tcc) nil nil)
   ((apply const-decl "(sdecl?)" language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (interp_TCC9 0
  (interp_TCC9-1 nil 3583695729
   ("" (lemma "compatible_interp")
    (("" (assert)
      (("" (skosimp* :preds? t)
        ((""
          (inst - "M!1"
           "map(run_map(M!1) WITH [`seq(i!1) := const_def(type_(apply(M!1)(i!1)), a!1)])"
           "τ!1" "a!1" "i!1")
          (("1" (grind-with-ext) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((compatible_interp formula-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def adt-constructor-decl
     "[[(sexpr?), (sexpr?)] -> (const_def?)]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const_var? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_decl? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (lam? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (type_ shared-adt-accessor-decl "[{x: syntaxic |
          const_def?(x) OR const_var?(x) OR const_decl?(x) OR lam?(x)} ->
   (sexpr?)]" language nil)
    (< const-decl "bool" reals nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (apply const-decl "(sdecl?)" language nil)
    (M!1 skolem-const-decl "(scontext?)" language nil)
    (i!1 skolem-const-decl "nat" language nil)
    (a!1 skolem-const-decl "(sexpr?)" language nil)
    (compatible? def-decl "bool" language nil))
   nil))
 (interp_TCC10 0
  (interp_TCC10-1 nil 3583695729 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (compatible? def-decl "bool" language nil))
   nil))
 (prekind?_TCC1 0
  (prekind?_TCC1-1 nil 3583601974 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (kind? const-decl "bool" language nil))
   nil))
 (prekind?_TCC2 0
  (prekind?_TCC2-1 nil 3583601974
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (typepred "def(apply(M!1)(i!1))")
        (("" (assert)
          (("" (typepred "apply(M!1)(i!1)")
            (("" (typepred! "apply(M!1)(i!1)")
              (("" (typepred! "apply(M!1)(i!1)" :implicit? t)
                (("" (assert)
                  (("" (typepred "def(apply(M!1)(i!1))")
                    (("" (expand "scontext?") (("" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (kind? const-decl "bool" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (< const-decl "bool" reals nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (apply const-decl "(sdecl?)" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (def shared-adt-accessor-decl "[d:
   {x: syntaxic |
                iconst?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x)
             OR type_def?(x)} ->
   {x: syntaxic | IF type_def?(d) THEN sexpr?(x) ELSE scontext?(x) ENDIF}]"
     language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (prekind?_TCC3 0
  (prekind?_TCC3-1 nil 3583601974 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (apply const-decl "(sdecl?)" language nil)
    (kind? const-decl "bool" language nil))
   nil))
 (prekind?_TCC4 0
  (prekind?_TCC4-1 nil 3583601974 ("" (grind :rewrites sdecl?) nil nil)
   ((sdecl? adt-def-decl "boolean" language nil)) nil))
 (prekind?_TCC5 0
  (prekind?_TCC5-1 nil 3583601974 ("" (grind) nil nil)
   ((sdecl? adt-def-decl "boolean" language nil)) nil))
 (prekind?_TCC6 0
  (prekind?_TCC6-1 nil 3583613766
   ("" (skosimp* :preds? t) (("" (assert) (("" (grind) nil nil)) nil))
    nil)
   ((sdecl? adt-def-decl "boolean" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (prekind?_TCC7 0
  (prekind?_TCC7-1 nil 3583695729 ("" (grind :rewrites sdecl?) nil nil)
   ((sdecl? adt-def-decl "boolean" language nil)) nil))
 (prekind?_TCC8 0
  (prekind?_TCC8-1 nil 3583695729 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (prekind?_TCC9 0
  (prekind?_TCC9-1 nil 3583695729 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (subterm adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (precontext_is_map 0
  (precontext_is_map-1 nil 3583604986
   ("" (grind)
    (("" (grind) (("" (expand "prekind?") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((apply const-decl "(sdecl?)" language nil)
    (kind? const-decl "bool" language nil)
    (k const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (prekeyword type-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (precontext type-eq-decl nil language nil))
   nil))
 (pretheory_is_map 0
  (pretheory_is_map-1 nil 3583604986
   ("" (grind) (("" (expand "prekind?") (("" (grind) nil nil)) nil))
    nil)
   ((++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (prekeyword type-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (pretheory type-eq-decl nil language nil))
   nil))
 (precontext_is_scontext 0
  (precontext_is_scontext-1 nil 3583695729
   ("" (grind) (("" (expand prekind?) (("" (grind) nil nil)) nil)) nil)
   ((++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (prekeyword type-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (precontext type-eq-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (pretheory_is_scontext 0
  (pretheory_is_scontext-1 nil 3583695729
   ("" (grind) (("" (expand prekind?) (("" (grind) nil nil)) nil)) nil)
   ((++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (prekeyword type-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (pretheory type-eq-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (prekind_concat 0
  (prekind_concat-1 nil 3583683865
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (typepred "N!1 ++ P!1")
        (("" (assert)
          (("" (bddsimp)
            (("1" (assert)
              (("1" (skosimp* :preds? t)
                (("1" (inst -6 "x!1")
                  (("1"
                    (invoke (case "%1 = %3 AND %2 = %4")
                     (~ - "prekind?(%1)(%2)(%)")
                     (~ + "prekind?(%1)(%2)(%)"))
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (delete (-6 2))
                      (("2" (assert)
                        (("2" (split +)
                          (("1" (assert) nil nil)
                           ("2" (grind-with-ext) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp* :preds? t)
              (("2" (inst - "x!1 + length(P!1)")
                (("2" (assert) (("2" (grind-with-ext) nil nil)) nil))
                nil))
              nil)
             ("3" (skosimp* :preds? t)
              (("3" (expand "++" -1)
                (("3" (expand "++" 1 3)
                  (("3" (expand "o")
                    (("3" (assert)
                      (("3" (bddsimp)
                        (("1" (assert) (("1" (inst -8 "x!1") nil nil))
                          nil)
                         ("2" (inst -6 "x!1 - length(P!1)")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prekind? def-decl "bool" language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "below[run_map(N!1 ++ P!1)`length]" language
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (N!1 skolem-const-decl "(scontext?)" language nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (x!1 skolem-const-decl "below[run_map(P!1)`length]" language nil)
    (P!1 skolem-const-decl "(scontext?)" language nil)
    (length_concat formula-decl nil language nil)
    (O const-decl "finseq" finite_sequences nil)
    (rest_concat formula-decl nil language nil)
    (concat_assoc formula-decl nil language nil)
    (rest const-decl "(scontext?)" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (++ const-decl "(scontext?)" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil))
   shostak))
 (pretheory_as_precontext_TCC1 0
  (pretheory_as_precontext_TCC1-1 nil 3583610111
   ("" (skosimp* :preds? t)
    (("" (expand "scontext?" 1)
      (("" (assert)
        (("" (expand "prekind?" -2)
          (("" (lift-if)
            (("" (assert)
              (("" (bddsimp -)
                (("" (assert)
                  (("" (expand "scontext?" -2) (("" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (prekeyword type-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (precontext type-eq-decl nil language nil))
   nil))
 (pretheory_as_precontext 0
  (pretheory_as_precontext-1 nil 3583610240
   ("" (lemma "prekind_concat")
    (("" (skosimp* :preds? t)
      (("" (inst - "empty" "Γ!1" "U!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (concat_empty formula-decl nil language nil)
    (prekind_concat formula-decl nil language nil))
   shostak))
 (precontext_as_pretheory 0
  (precontext_as_pretheory-1 nil 3583614052
   ("" (skosimp* :preds? t)
    (("" (lemma "prekind_concat")
      (("" (inst - "empty" "Γ!1" "M!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((prekind_concat formula-decl nil language nil)
    (concat_empty formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (prekeyword type-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (precontext type-eq-decl nil language nil))
   shostak))
 (semantic_pretheory 0
  (semantic_pretheory-1 nil 3583690359
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (flatten)
        (("" (expand "scontext?")
          (("" (assert) (("" (grind-with-ext) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (prekind? def-decl "bool" language nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (scontext? type-eq-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (< const-decl "bool" reals nil)
    (semantic? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (rest const-decl "(scontext?)" language nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak)))

