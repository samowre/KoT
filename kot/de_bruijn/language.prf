(language
 (decls_TCC1 0
  (decls_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (syntaxic type-decl nil language nil)
    (length const-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (apply_TCC1 0
  (apply_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil) nil nil))
 (apply_TCC2 0
  (apply_TCC2-1 nil 3583504303 ("" (subtype-tcc) nil nil) nil nil))
 (doubleplus_TCC1 0
  (doubleplus_TCC1-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length const-decl "nat" language nil))
   nil))
 (first_TCC1 0
  (first_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil) nil nil))
 (rest_TCC1 0
  (rest_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil) nil nil))
 (rest_TCC2 0
  (rest_TCC2-1 nil 3583504303 ("" (subtype-tcc) nil nil) nil nil))
 (compatible?_TCC1 0
  (compatible?_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (length const-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (compatible?_TCC2 0
  (compatible?_TCC2-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil))
   nil))
 (compatible?_TCC3 0
  (compatible?_TCC3-1 nil 3583504303 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length const-decl "nat" language nil))
   nil))
 (interp_TCC1 0
  (interp_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (compatible? def-decl "bool" language nil)
    (length const-decl "nat" language nil))
   nil))
 (interp_TCC2 0
  (interp_TCC2-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (compatible? def-decl "bool" language nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (first const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (interp_TCC3 0
  (interp_TCC3-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (compatible? def-decl "bool" language nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (first const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil))
   nil))
 (interp_TCC4 0
  (interp_TCC4-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (compatible? def-decl "bool" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (interp_TCC5 0
  (interp_TCC5-1 nil 3583504303 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (compatible? def-decl "bool" language nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (first const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (interp_TCC6 0
  (interp_TCC6-1 nil 3583504303 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (compatible? def-decl "bool" language nil))
   nil))
 (length_interp 0
  (length_interp-1 nil 3583508655
   ("" (induct-and-simplify "V") nil nil)
   ((syntaxic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (compatible? def-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "nat" language nil)
    (interp def-decl "syntaxic" language nil)
    (syntaxic_induction formula-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil))
   shostak))
 (prekind_TCC1 0
  (prekind_TCC1-1 nil 3583508654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil))
   nil))
 (prekind_TCC2 0
  (prekind_TCC2-1 nil 3583508654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil))
   nil))
 (prekind_TCC3 0
  (prekind_TCC3-1 nil 3583508654 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (kind? const-decl "bool" language nil))
   nil))
 (prekind_TCC4 0
  (prekind_TCC4-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (compatible? def-decl "bool" language nil)
    (kind? const-decl "bool" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prekind_TCC5 0
  (prekind_TCC5-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (compatible? def-decl "bool" language nil)
    (kind? const-decl "bool" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prekind_TCC6 0
  (prekind_TCC6-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC7 0
  (prekind_TCC7-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC8 0
  (prekind_TCC8-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC9 0
  (prekind_TCC9-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC10 0
  (prekind_TCC10-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC11 0
  (prekind_TCC11-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC12 0
  (prekind_TCC12-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC13 0
  (prekind_TCC13-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC14 0
  (prekind_TCC14-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC15 0
  (prekind_TCC15-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC16 0
  (prekind_TCC16-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC17 0
  (prekind_TCC17-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC18 0
  (prekind_TCC18-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC19 0
  (prekind_TCC19-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC20 0
  (prekind_TCC20-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC21 0
  (prekind_TCC21-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC22 0
  (prekind_TCC22-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC23 0
  (prekind_TCC23-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC24 0
  (prekind_TCC24-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC25 0
  (prekind_TCC25-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC26 0
  (prekind_TCC26-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC27 0
  (prekind_TCC27-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC28 0
  (prekind_TCC28-1 nil 3583508654 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length const-decl "nat" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (prekind_TCC29 0
  (prekind_TCC29-1 nil 3583508654 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil))
   nil))
 (prekind_TCC30 0
  (prekind_TCC30-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil))
   nil))
 (length_pretype 0
  (length_pretype-1 nil 3583513919
   ("" (induct-and-simplify "V") (("" (postpone) nil nil)) nil)
   ((syntaxic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pretype? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "nat" language nil)
    (syntaxic_induction formula-decl nil language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (compatible? def-decl "bool" language nil)
    (++ const-decl "syntaxic" language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rest const-decl "syntaxic" language nil))
   shostak))
 (length_preterm 0
  (length_preterm-1 nil 3583514054
   ("" (induct-and-simplify "V") nil nil)
   ((syntaxic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (preterm? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "nat" language nil)
    (syntaxic_induction formula-decl nil language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (compatible? def-decl "bool" language nil)
    (++ const-decl "syntaxic" language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rest const-decl "syntaxic" language nil))
   shostak))
 (empty_prekind 0
  (empty_prekind-1 nil 3583514769
   ("" (induct-and-simplify "V") nil nil)
   ((syntaxic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "nat" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
    (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
    (syntaxic_induction formula-decl nil language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (compatible? def-decl "bool" language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (++ const-decl "syntaxic" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rest const-decl "syntaxic" language nil))
   shostak))
 (fold_TCC1 0
  (fold_TCC1-1 nil 3583509195 ("" (subtype-tcc) nil nil) nil nil))
 (fold_TCC2 0
  (fold_TCC2-1 nil 3583509195 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (fold_TCC3 0
  (fold_TCC3-1 nil 3583509757 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (fold_TCC4 0
  (fold_TCC4-1 nil 3583509757 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (weight_TCC1 0
  (weight_TCC1-1 nil 3583508030 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (kind? const-decl "bool" language nil)
    (prekind def-decl "bool" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length const-decl "nat" language nil))
   nil))
 (weight_TCC2 0
  (weight_TCC2-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind def-decl "bool" language nil)
    (compatible? def-decl "bool" language nil)
    (first const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (apply const-decl "syntaxic" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (weight_TCC3 0
  (weight_TCC3-1 nil 3583508030
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (expand "semantic?")
        (("" (assert)
          (("" (skosimp* :preds? t)
            (("" (assert)
              (("" (rewrite -9)
                (("" (assert)
                  (("" (expand "prekind" -6)
                    (("" (assert)
                      (("" (flatten)
                        (("" (assert)
                          (("" (rewrite "length_interp")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (compatible? def-decl "bool" language nil)
    (prekind def-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (apply const-decl "syntaxic" language nil)
    (< const-decl "bool" reals nil)
    (first const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (> const-decl "bool" reals nil)
    (def shared-adt-accessor-decl
     "[{x: syntaxic |     type_def?(x) OR const_def?(x) OR theory_def?(x) OR itype?(x) OR iconst?(x)} -> syntaxic]"
     language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (length_interp formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (weight_TCC4 0
  (weight_TCC4-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
    (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC5 0
  (weight_TCC5-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (weight_TCC6 0
  (weight_TCC6-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
    (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC7 0
  (weight_TCC7-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (weight_TCC8 0
  (weight_TCC8-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
    (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC9 0
  (weight_TCC9-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (weight_TCC10 0
  (weight_TCC10-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
    (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC11 0
  (weight_TCC11-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (weight_TCC12 0
  (weight_TCC12-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
    (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC13 0
  (weight_TCC13-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (weight_TCC14 0
  (weight_TCC14-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
    (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC15 0
  (weight_TCC15-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (weight_TCC16 0
  (weight_TCC16-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
    (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC17 0
  (weight_TCC17-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC18 0
  (weight_TCC18-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
    (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC19 0
  (weight_TCC19-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC20 0
  (weight_TCC20-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
    (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC21 0
  (weight_TCC21-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (weight_TCC22 0
  (weight_TCC22-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
    (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC23 0
  (weight_TCC23-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (weight_TCC24 0
  (weight_TCC24-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
    (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC25 0
  (weight_TCC25-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC26 0
  (weight_TCC26-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
    (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC27 0
  (weight_TCC27-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC28 0
  (weight_TCC28-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
    (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC29 0
  (weight_TCC29-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC30 0
  (weight_TCC30-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
    (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC31 0
  (weight_TCC31-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC32 0
  (weight_TCC32-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
    (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC33 0
  (weight_TCC33-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC34 0
  (weight_TCC34-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
    (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC35 0
  (weight_TCC35-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC36 0
  (weight_TCC36-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
    (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC37 0
  (weight_TCC37-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC38 0
  (weight_TCC38-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
    (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC39 0
  (weight_TCC39-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC40 0
  (weight_TCC40-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
    (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC41 0
  (weight_TCC41-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC42 0
  (weight_TCC42-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC43 0
  (weight_TCC43-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC44 0
  (weight_TCC44-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
    (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC45 0
  (weight_TCC45-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC46 0
  (weight_TCC46-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
    (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC47 0
  (weight_TCC47-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC48 0
  (weight_TCC48-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (weight_TCC49 0
  (weight_TCC49-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil))
   nil))
 (weight_TCC50 0
  (weight_TCC50-1 nil 3583508030
   ("" (skosimp* :preds? t)
    (("" (expand "semantic?")
      (("" (skosimp* :preds? t)
        (("" (inst + "k!1")
          (("" (assert)
            (("" (rewrite -3 :dont-delete? t)
              (("" (assert)
                (("" (inst - "x!1")
                  (("" (assert)
                    (("" (expand "length") (("" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prekeyword type-decl nil language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (prekind def-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "nat" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC51 0
  (weight_TCC51-1 nil 3583508030
   ("" (skosimp* :preds? t) (("" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (rest const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "nat" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC52 0
  (weight_TCC52-1 nil 3583509757 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prekind def-decl "bool" language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (size_TCC1 0
  (size_TCC1-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC2 0
  (size_TCC2-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC3 0
  (size_TCC3-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC4 0
  (size_TCC4-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC5 0
  (size_TCC5-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC6 0
  (size_TCC6-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC7 0
  (size_TCC7-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC8 0
  (size_TCC8-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC9 0
  (size_TCC9-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC10 0
  (size_TCC10-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC11 0
  (size_TCC11-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC12 0
  (size_TCC12-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC13 0
  (size_TCC13-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC14 0
  (size_TCC14-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC15 0
  (size_TCC15-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC16 0
  (size_TCC16-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC17 0
  (size_TCC17-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC18 0
  (size_TCC18-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC19 0
  (size_TCC19-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC20 0
  (size_TCC20-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC21 0
  (size_TCC21-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC22 0
  (size_TCC22-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC23 0
  (size_TCC23-1 nil 3583512903 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (size_TCC24 0
  (size_TCC24-1 nil 3583512903 ("" (subtype-tcc) nil nil)
   ((apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil))
   nil))
 (size_TCC25 0
  (size_TCC25-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil))
   nil))
 (size_TCC26 0
  (size_TCC26-1 nil 3583512903 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length const-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (weight_definition_TCC1 0
  (weight_definition_TCC1-1 nil 3583516226 ("" (subtype-tcc) nil nil)
   nil nil))
 (weight_definition_TCC2 0
  (weight_definition_TCC2-1 nil 3583516226 ("" (subtype-tcc) nil nil)
   nil nil))
 (weight_definition_TCC3 0
  (weight_definition_TCC3-1 nil 3583516226 ("" (subtype-tcc) nil nil)
   nil nil))
 (weight_definition_TCC4 0
  (weight_definition_TCC4-1 nil 3583516226 ("" (subtype-tcc) nil nil)
   nil nil))
 (weight_definition 0
  (weight_definition-1 nil 3583516227
   ("" (induct "V")
    (("1" (skosimp* :preds? t)
      (("1" (assert)
        (("1" (auto-rewrite "apply" "rest" " decls")
          (("1"
            (auto-rewrite "length" "weight" "size" "apply" "decls"
                          "first" "lex2" "rest")
            (("1" (assert)
              (("1" (assert) (("1" (postpone) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (postpone) nil nil) ("3" (postpone) nil nil)
     ("4" (postpone) nil nil) ("5" (postpone) nil nil)
     ("6" (postpone) nil nil) ("7" (postpone) nil nil)
     ("8" (postpone) nil nil) ("9" (postpone) nil nil)
     ("10" (postpone) nil nil) ("11" (postpone) nil nil)
     ("12" (postpone) nil nil) ("13" (postpone) nil nil)
     ("14" (postpone) nil nil) ("15" (postpone) nil nil)
     ("16" (postpone) nil nil) ("17" (postpone) nil nil)
     ("18" (postpone) nil nil) ("19" (postpone) nil nil)
     ("20" (postpone) nil nil) ("21" (postpone) nil nil)
     ("22" (postpone) nil nil) ("23" (postpone) nil nil)
     ("24" (postpone) nil nil) ("25" (postpone) nil nil)
     ("26" (postpone) nil nil) ("27" (postpone) nil nil)
     ("28" (postpone) nil nil))
    nil)
   nil shostak)))

