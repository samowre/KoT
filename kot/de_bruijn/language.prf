(language
 (decls_TCC1 0
  (decls_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (syntaxic type-decl nil language nil)
    (length const-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (apply_TCC1 0
  (apply_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil) nil nil))
 (apply_TCC2 0
  (apply_TCC2-1 nil 3583504303 ("" (subtype-tcc) nil nil) nil nil))
 (doubleplus_TCC1 0
  (doubleplus_TCC1-1 nil 3583303509 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length const-decl "nat" language nil))
   nil))
 (concat_assoc_TCC1 0
  (concat_assoc_TCC1-1 nil 3583522417 ("" (subtype-tcc) nil nil)
   ((length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil))
   nil))
 (concat_assoc 0
  (concat_assoc-1 nil 3583518121
   ("" (skosimp* :preds? t)
    (("" (expand "++")
      (("" (assert)
        (("" (decompose-equality)
          (("1" (grind) (("1" (grind-with-ext) nil nil)) nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil)
           ("4" (grind) nil nil) ("5" (grind) nil nil)
           ("6" (grind) nil nil) ("7" (grind) nil nil)
           ("8" (grind) nil nil) ("9" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((++ const-decl "syntaxic" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (U!1 skolem-const-decl "syntaxic" language nil)
    (N!1 skolem-const-decl "(map?)" language nil)
    (length const-decl "nat" language nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (M!1 skolem-const-decl "(map?)" language nil)
    (decls const-decl "syntaxic" language nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (map adt-constructor-decl "[finseq[syntaxic] -> (map?)]" language
         nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic_map_extensionality formula-decl nil language nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil))
   shostak))
 (length_concat 0
  (length_concat-1 nil 3583518224 ("" (grind) nil nil)
   ((length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil))
   shostak))
 (concat_empty_TCC1 0
  (concat_empty_TCC1-1 nil 3583522417 ("" (subtype-tcc) nil nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (〈〉 const-decl "syntaxic" language nil))
   nil))
 (concat_empty 0
  (concat_empty-1 nil 3583521026
   ("" (grind)
    (("1" (grind-with-ext) nil nil) ("2" (grind-with-ext) nil nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (U!1 skolem-const-decl "syntaxic" language nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (FALSE const-decl "bool" booleans nil)
    (map adt-constructor-decl "[finseq[syntaxic] -> (map?)]" language
         nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (syntaxic type-decl nil language nil)
    (syntaxic_map_extensionality formula-decl nil language nil)
    (++ const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   shostak))
 (concat__empty 0
  (concat__empty-1 nil 3583521156
   ("" (grind-with-ext)
    (("1" (typepred! "x!1") (("1" (grind) nil nil)) nil)
     ("2" (grind) (("2" (typepred! "x!1") (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (map adt-constructor-decl "[finseq[syntaxic] -> (map?)]" language
         nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FALSE const-decl "bool" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (TRUE const-decl "bool" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (syntaxic_map_extensionality formula-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (++ const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   shostak))
 (first_TCC1 0
  (first_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil) nil nil))
 (rest_TCC1 0
  (rest_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil) nil nil))
 (rest_TCC2 0
  (rest_TCC2-1 nil 3583504303 ("" (subtype-tcc) nil nil) nil nil))
 (compatible?_TCC1 0
  (compatible?_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (length const-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (compatible?_TCC2 0
  (compatible?_TCC2-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil))
   nil))
 (compatible?_TCC3 0
  (compatible?_TCC3-1 nil 3583504303 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (subterm adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length const-decl "nat" language nil))
   nil))
 (interp_TCC1 0
  (interp_TCC1-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (compatible? def-decl "bool" language nil)
    (length const-decl "nat" language nil))
   nil))
 (interp_TCC2 0
  (interp_TCC2-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (compatible? def-decl "bool" language nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (first const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (interp_TCC3 0
  (interp_TCC3-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (compatible? def-decl "bool" language nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (first const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil))
   nil))
 (interp_TCC4 0
  (interp_TCC4-1 nil 3583504303 ("" (subtype-tcc) nil nil)
   ((syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (compatible? def-decl "bool" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (interp_TCC5 0
  (interp_TCC5-1 nil 3583504303 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (compatible? def-decl "bool" language nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (subterm adt-def-decl "boolean" language nil)
    (first const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (interp_TCC6 0
  (interp_TCC6-1 nil 3583504303 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (compatible? def-decl "bool" language nil))
   nil))
 (length_interp 0
  (length_interp-1 nil 3583508655
   ("" (induct-and-simplify "V") nil nil)
   ((syntaxic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (compatible? def-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "nat" language nil)
    (interp def-decl "syntaxic" language nil)
    (syntaxic_induction formula-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil))
   shostak))
 (prekind_TCC1 0
  (prekind_TCC1-1 nil 3583508654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil))
   nil))
 (prekind_TCC2 0
  (prekind_TCC2-1 nil 3583508654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil))
   nil))
 (prekind_TCC3 0
  (prekind_TCC3-1 nil 3583508654 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (kind? const-decl "bool" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prekind_TCC4 0
  (prekind_TCC4-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (compatible? def-decl "bool" language nil)
    (kind? const-decl "bool" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prekind_TCC5 0
  (prekind_TCC5-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (compatible? def-decl "bool" language nil)
    (kind? const-decl "bool" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prekind_TCC6 0
  (prekind_TCC6-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (compatible? def-decl "bool" language nil)
    (kind? const-decl "bool" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prekind_TCC7 0
  (prekind_TCC7-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC8 0
  (prekind_TCC8-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil))
   nil))
 (prekind_TCC9 0
  (prekind_TCC9-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC10 0
  (prekind_TCC10-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC11 0
  (prekind_TCC11-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil))
   nil))
 (prekind_TCC12 0
  (prekind_TCC12-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC13 0
  (prekind_TCC13-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC14 0
  (prekind_TCC14-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil))
   nil))
 (prekind_TCC15 0
  (prekind_TCC15-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC16 0
  (prekind_TCC16-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC17 0
  (prekind_TCC17-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC18 0
  (prekind_TCC18-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC19 0
  (prekind_TCC19-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil))
   nil))
 (prekind_TCC20 0
  (prekind_TCC20-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC21 0
  (prekind_TCC21-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC22 0
  (prekind_TCC22-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC23 0
  (prekind_TCC23-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC24 0
  (prekind_TCC24-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC25 0
  (prekind_TCC25-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC26 0
  (prekind_TCC26-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC27 0
  (prekind_TCC27-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC28 0
  (prekind_TCC28-1 nil 3583508654
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC29 0
  (prekind_TCC29-1 nil 3583508654
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil))
   nil))
 (prekind_TCC30 0
  (prekind_TCC30-1 nil 3583508654 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC31 0
  (prekind_TCC31-1 nil 3583522515 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC32 0
  (prekind_TCC32-1 nil 3583522515 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (prekind_TCC33 0
  (prekind_TCC33-1 nil 3583522515 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length const-decl "nat" language nil))
   nil))
 (prekind_TCC34 0
  (prekind_TCC34-1 nil 3583522515 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil))
   nil))
 (prekind_TCC35 0
  (prekind_TCC35-1 nil 3583522515 ("" (subtype-tcc) nil nil)
   ((apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prekind_TCC36 0
  (prekind_TCC36-1 nil 3583522515
   ("" (subtype-tcc) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (subterm adt-def-decl "boolean" language nil))
   nil))
 (Γ_TCC1 0
  (Γ_TCC1-1 nil 3583523695 ("" (subtype-tcc) nil nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (〈〉 const-decl "syntaxic" language nil))
   nil))
 (length_pretype 0
  (length_pretype-1 nil 3583513919
   ("" (induct-and-simplify "V")
    (("" (induct-and-simplify "U") nil nil)) nil)
   ((rest const-decl "syntaxic" language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (++ const-decl "syntaxic" language nil)
    (compatible? def-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (first const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (syntaxic_induction formula-decl nil language nil)
    (length const-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (pretype? const-decl "bool" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (〈〉 const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (prekeyword type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (syntaxic type-decl nil language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   shostak))
 (length_preterm 0
  (length_preterm-1 nil 3583514054
   ("" (induct-and-simplify "V")
    (("" (induct-and-simplify "U") nil nil)) nil)
   ((rest const-decl "syntaxic" language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (++ const-decl "syntaxic" language nil)
    (compatible? def-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (first const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (syntaxic_induction formula-decl nil language nil)
    (length const-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (preterm? const-decl "bool" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (〈〉 const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (prekeyword type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (syntaxic type-decl nil language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   shostak))
 (empty_prekind 0
  (empty_prekind-1 nil 3583514769
   ("" (induct-and-simplify "U") nil nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "nat" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
    (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
    (syntaxic_induction formula-decl nil language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (compatible? def-decl "bool" language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (++ const-decl "syntaxic" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rest const-decl "syntaxic" language nil))
   shostak))
 (fold_TCC1 0
  (fold_TCC1-1 nil 3583509195 ("" (subtype-tcc) nil nil) nil nil))
 (fold_TCC2 0
  (fold_TCC2-1 nil 3583509195 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (fold_TCC3 0
  (fold_TCC3-1 nil 3583509757 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (fold_TCC4 0
  (fold_TCC4-1 nil 3583509757 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (weight_TCC1 0
  (weight_TCC1-1 nil 3583508030 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (kind? const-decl "bool" language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length const-decl "nat" language nil))
   nil))
 (weight_TCC2 0
  (weight_TCC2-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (compatible? def-decl "bool" language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (weight_TCC3 0
  (weight_TCC3-1 nil 3583508030
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (expand "semantic?")
        (("" (stop-rewrite)
          (("" (expand "prekind" -4)
            (("" (assert)
              (("" (expand "compatible?")
                (("" (bddsimp)
                  (("1" (rewrite -13)
                    (("1" (assert)
                      (("1" (expand "prekind" -10)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (rewrite -13 :dont-delete? t)
                    (("2" (assert)
                      (("2" (expand "prekind" -11)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (rewrite -13 :dont-delete? t)
                    (("3" (expand "prekind" -11)
                      (("3" (assert) nil nil)) nil))
                    nil)
                   ("4" (rewrite -13 :dont-delete? t)
                    (("4" (assert)
                      (("4" (expand "prekind" -11)
                        (("4" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (concat_empty formula-decl nil language nil)
    (compatible? def-decl "bool" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil))
   nil))
 (weight_TCC4 0
  (weight_TCC4-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC5 0
  (weight_TCC5-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (weight_TCC6 0
  (weight_TCC6-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (〈〉 const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC7 0
  (weight_TCC7-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (first const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC8 0
  (weight_TCC8-1 nil 3583508030
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil))
   nil))
 (weight_TCC9 0
  (weight_TCC9-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC10 0
  (weight_TCC10-1 nil 3583508030
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil))
   nil))
 (weight_TCC11 0
  (weight_TCC11-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (〈〉 const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC12 0
  (weight_TCC12-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (first const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC13 0
  (weight_TCC13-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (weight_TCC14 0
  (weight_TCC14-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC15 0
  (weight_TCC15-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (weight_TCC16 0
  (weight_TCC16-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (〈〉 const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC17 0
  (weight_TCC17-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (first const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC18 0
  (weight_TCC18-1 nil 3583508030
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((semantic type-eq-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (〈〉 const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (++ const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (weight_TCC19 0
  (weight_TCC19-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC20 0
  (weight_TCC20-1 nil 3583508030
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil))
   nil))
 (weight_TCC21 0
  (weight_TCC21-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC22 0
  (weight_TCC22-1 nil 3583508030
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil))
   nil))
 (weight_TCC23 0
  (weight_TCC23-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC24 0
  (weight_TCC24-1 nil 3583508030
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((semantic type-eq-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (〈〉 const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (++ const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (weight_TCC25 0
  (weight_TCC25-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (〈〉 const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil))
   nil))
 (weight_TCC26 0
  (weight_TCC26-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (first const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC27 0
  (weight_TCC27-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (weight_TCC28 0
  (weight_TCC28-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC29 0
  (weight_TCC29-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (weight_TCC30 0
  (weight_TCC30-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC31 0
  (weight_TCC31-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (weight_TCC32 0
  (weight_TCC32-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC33 0
  (weight_TCC33-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (weight_TCC34 0
  (weight_TCC34-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC35 0
  (weight_TCC35-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (weight_TCC36 0
  (weight_TCC36-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC37 0
  (weight_TCC37-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (weight_TCC38 0
  (weight_TCC38-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC39 0
  (weight_TCC39-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (weight_TCC40 0
  (weight_TCC40-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC41 0
  (weight_TCC41-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (weight_TCC42 0
  (weight_TCC42-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC43 0
  (weight_TCC43-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (weight_TCC44 0
  (weight_TCC44-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC45 0
  (weight_TCC45-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (weight_TCC46 0
  (weight_TCC46-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC47 0
  (weight_TCC47-1 nil 3583508030 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (weight_TCC48 0
  (weight_TCC48-1 nil 3583508030 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC49 0
  (weight_TCC49-1 nil 3583508030
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil))
   nil))
 (weight_TCC50 0
  (weight_TCC50-1 nil 3583508030
   ("" (skosimp* :preds? t)
    (("" (expand "semantic?")
      (("" (skosimp* :preds? t)
        (("" (assert)
          (("" (rewrite -3 :dont-delete? t) (("" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((concat_empty formula-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil))
   nil))
 (weight_TCC51 0
  (weight_TCC51-1 nil 3583508030
   ("" (skosimp* :preds? t) (("" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil))
   nil))
 (weight_TCC52 0
  (weight_TCC52-1 nil 3583509757 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   nil))
 (weight_TCC53 0
  (weight_TCC53-1 nil 3583522515 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (length const-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (weight_TCC54 0
  (weight_TCC54-1 nil 3583522515 ("" (subtype-tcc) nil nil)
   ((apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil))
   nil))
 (weight_TCC55 0
  (weight_TCC55-1 nil 3583522515 ("" (subtype-tcc) nil nil)
   ((apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (〈〉 const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (weight_TCC56 0
  (weight_TCC56-1 nil 3583522515 ("" (subtype-tcc) nil nil) nil nil))
 (weight_TCC57 0
  (weight_TCC57-1 nil 3583522515 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (rest const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (subterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Γ!1 skolem-const-decl "{M | prekind(〈〉, M)(PRECONTEXT)}" language
     nil)
    (U!1 skolem-const-decl "semantic(Γ!1)" language nil)
    (x!1 skolem-const-decl "{x | x < length(U!1)}" language nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil))
   nil))
 (weight_TCC58 0
  (weight_TCC58-1 nil 3583522515 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (first const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (decls const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (weight_map_TCC1 0
  (weight_map_TCC1-1 nil 3583520520 ("" (subtype-tcc) nil nil)
   ((length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (weight_map_TCC2 0
  (weight_map_TCC2-1 nil 3583520520 ("" (subtype-tcc) nil nil)
   ((length const-decl "nat" language nil)) nil))
 (weight_map_TCC3 0
  (weight_map_TCC3-1 nil 3583520520 ("" (subtype-tcc) nil nil)
   ((length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil))
   nil))
 (weight_map_TCC4 0
  (weight_map_TCC4-1 nil 3583520520 ("" (subtype-tcc) nil nil)
   ((length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (〈〉 const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (weight_map_TCC5 0
  (weight_map_TCC5-1 nil 3583522515 ("" (subtype-tcc) nil nil) nil
   nil))
 (weight_map_TCC6 0
  (weight_map_TCC6-1 nil 3583522515 ("" (subtype-tcc) nil nil) nil
   nil))
 (weight_map_TCC7 0
  (weight_map_TCC7-1 nil 3583522515 ("" (subtype-tcc) nil nil) nil
   nil))
 (weight_map 0
  (weight_map-1 nil 3583523696 ("" (postpone) nil nil) nil shostak))
 (size_TCC1 0
  (size_TCC1-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC2 0
  (size_TCC2-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC3 0
  (size_TCC3-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC4 0
  (size_TCC4-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC5 0
  (size_TCC5-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC6 0
  (size_TCC6-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC7 0
  (size_TCC7-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC8 0
  (size_TCC8-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC9 0
  (size_TCC9-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC10 0
  (size_TCC10-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC11 0
  (size_TCC11-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC12 0
  (size_TCC12-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC13 0
  (size_TCC13-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC14 0
  (size_TCC14-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC15 0
  (size_TCC15-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC16 0
  (size_TCC16-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC17 0
  (size_TCC17-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC18 0
  (size_TCC18-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC19 0
  (size_TCC19-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC20 0
  (size_TCC20-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC21 0
  (size_TCC21-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC22 0
  (size_TCC22-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
   nil))
 (size_TCC23 0
  (size_TCC23-1 nil 3583512903 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (size_TCC24 0
  (size_TCC24-1 nil 3583512903 ("" (subtype-tcc) nil nil)
   ((apply const-decl "syntaxic" language nil)
    (length const-decl "nat" language nil))
   nil))
 (size_TCC25 0
  (size_TCC25-1 nil 3583512903 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil))
   nil))
 (size_TCC26 0
  (size_TCC26-1 nil 3583512903 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length const-decl "nat" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (weight_definition_TCC1 0
  (weight_definition_TCC1-1 nil 3583516226 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (syntaxic type-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekeyword type-decl nil language nil)
    (prekind def-decl "bool" language nil)
    (〈〉 const-decl "syntaxic" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (rest const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (first const-decl "syntaxic" language nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil))
   nil))
 (weight_definition_TCC2 0
  (weight_definition_TCC2-1 nil 3583516226 ("" (subtype-tcc) nil nil)
   ((length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (weight_definition_TCC3 0
  (weight_definition_TCC3-1 nil 3583522515 ("" (subtype-tcc) nil nil)
   ((length const-decl "nat" language nil)
    (decls const-decl "syntaxic" language nil)
    (apply const-decl "syntaxic" language nil)
    (rest const-decl "syntaxic" language nil)
    (++ const-decl "syntaxic" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (〈〉 const-decl "syntaxic" language nil)
    (prekind def-decl "bool" language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (weight_definition_TCC4 0
  (weight_definition_TCC4-1 nil 3583522515 ("" (subtype-tcc) nil nil)
   nil nil))
 (weight_definition 0
  (weight_definition-1 nil 3583516227
   (""
    (auto-rewrite "length" "weight" "pretype?" "prekind" "semantic?"
                  "concat_assoc" "length_concat")
    (("" (induct "V")
      (("1" (grind) nil nil)
       ("2" (skosimp* :preds? t)
        (("2" (expand "weight" +)
          (("2" (stop-rewrite)
            (("2" (assert)
              (("2" (expand "semantic?" -7)
                (("2" (assert)
                  (("2" (expand "prekind" -7)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (bddsimp)
                          (("1" (assert) nil nil)
                           ("2" (rewrite "length_concat" -7)
                            (("2" (expand "apply" -7)
                              (("2"
                                (expand "rest" -7)
                                (("2"
                                  (expand "length" -7 1)
                                  (("2"
                                    (expand "length" -7 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "apply" 2)
                                        (("2"
                                          (expand "rest" 2)
                                          (("2"
                                            (expand "length" 2 1)
                                            (("2"
                                              (expand "length" 2 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   -5
                                                   "interp(def(first(apply(rest(apply(U!1)(x!1)) ++ Δ!1)(dot1_var!1))), dot2_var!1)"
                                                   "0"
                                                   "i(dot3_var!1)"
                                                   "〈〉")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "semantic?"
                                                       -5)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (bddsimp)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (auto-rewrite
                                                               "concat__empty")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -5
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "〈〉")
                                                                        (("1"
                                                                          (expand
                                                                           "empty_seq")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (postpone)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (postpone)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (assert) nil nil)
                           ("4" (postpone) nil nil)
                           ("5" (assert) nil nil)
                           ("6" (postpone) nil nil)
                           ("7" (assert) nil nil)
                           ("8" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skosimp* :preds? t)
        (("3" (assert)
          (("3" (assert)
            (("3" (skosimp* :preds? t)
              (("3" (inst - "U!1" "n!1" "x!1" "Δ!1")
                (("3"
                  (inst - "U!1" "n!1" "x!1"
                   "Δ!1 ++ const_var(fun1_var!1)")
                  (("3" (assert)
                    (("3" (expand "max" +)
                      (("3" (lift-if) (("3" (bddsimp) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skosimp* :preds? t)
        (("4" (inst - "U!1" "n!1" "x!1" "Δ!1")
          (("4" (assert)
            (("4" (flatten)
              (("4" (assert)
                (("4"
                  (inst - "U!1" "n!1" "x!1"
                   "Δ!1 ++ const_var(prod1_var!1)")
                  (("4" (assert)
                    (("4" (expand "max")
                      (("4" (lift-if) (("4" (bddsimp) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skosimp* :preds? t)
        (("5" (inst - "U!1" "n!1" "x!1" "Δ!1")
          (("5"
            (inst - "U!1" "n!1" "x!1"
             "Δ!1 ++ const_var(subtype1_var!1)")
            (("5" (assert)
              (("5" (assert)
                (("5" (flatten)
                  (("5" (assert)
                    (("5" (expand "max")
                      (("5" (lift-if) (("5" (bddsimp) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skosimp* :preds? t)
        (("6" (inst - "U!1" "n!1" "x!1" "Δ!1")
          (("6" (inst - "U!1" "n!1" "x!1" "Δ!1")
            (("6" (assert)
              (("6" (flatten)
                (("6" (assert)
                  (("6" (expand "max")
                    (("6" (lift-if) (("6" (bddsimp) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("7" (skosimp* :preds? t)
        (("7" (inst - "U!1" "n!1" "x!1" "Δ!1")
          (("7"
            (inst - "U!1" "n!1" "x!1" "Δ!1 ++ const_var(lam1_var!1)")
            (("7" (assert)
              (("7" (flatten)
                (("7" (assert)
                  (("7" (expand "max")
                    (("7" (lift-if) (("7" (bddsimp) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("8" (skosimp* :preds? t)
        (("8" (inst - "U!1" "n!1" "x!1" "Δ!1")
          (("8" (inst - "U!1" "n!1" "x!1" "Δ!1")
            (("8" (assert)
              (("8" (flatten)
                (("8" (assert)
                  (("8" (expand "max")
                    (("8" (lift-if) (("8" (bddsimp) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("9" (skosimp* :preds? t)
        (("9" (inst - "U!1" "n!1" "x!1" "Δ!1") (("9" (assert) nil nil))
          nil))
        nil)
       ("10" (skosimp* :preds? t)
        (("10" (inst - "U!1" "n!1" "x!1" "Δ!1")
          (("10" (assert) nil nil)) nil))
        nil)
       ("11" (skosimp* :preds? t) (("11" (grind) nil nil)) nil)
       ("12" (skosimp* :preds? t) (("12" (assert) nil nil)) nil)
       ("13" (skosimp* :preds? t)
        (("13" (assert)
          (("13" (inst - "U!1" "n!1" "x!1" "Δ!1")
            (("13" (assert) nil nil)) nil))
          nil))
        nil)
       ("14" (skosimp* :preds? t)
        (("14" (inst - "U!1" "n!1" "x!1" "Δ!1")
          (("14" (assert) nil nil)) nil))
        nil)
       ("15" (skosimp* :preds? t)
        (("15" (assert)
          (("15" (inst - "U!1" "n!1" "x!1" "Δ!1")
            (("15" (assert) nil nil)) nil))
          nil))
        nil)
       ("16" (skosimp* :preds? t)
        (("16" (inst - "U!1" "n!1" "x!1" "Δ!1")
          (("16" (assert)
            (("16" (inst - "U!1" "n!1" "x!1" "Δ!1")
              (("16" (assert)
                (("16" (flatten)
                  (("16" (assert)
                    (("16" (expand "max")
                      (("16" (lift-if) (("16" (bddsimp) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("17" (assert)
        (("17" (skosimp* :preds? t)
          (("17" (inst - "U!1" "n!1" "x!1" "Δ!1")
            (("17" (assert) nil nil)) nil))
          nil))
        nil)
       ("18" (skosimp* :preds? t) (("18" (assert) nil nil)) nil)
       ("19" (skosimp* :preds? t)
        (("19" (assert)
          (("19" (inst - "U!1" "n!1" "x!1" "Δ!1")
            (("19" (assert) nil nil)) nil))
          nil))
        nil)
       ("20" (skosimp* :preds? t)
        (("20" (inst - "U!1" "n!1" "x!1" "Δ!1")
          (("20" (assert) nil nil)) nil))
        nil)
       ("21" (postpone) nil nil)
       ("22" (skosimp* :preds? t)
        (("22" (assert)
          (("22" (assert) (("22" (postpone) nil nil)) nil)) nil))
        nil)
       ("23" (hide 2) (("23" (grind) nil nil)) nil)
       ("24" (hide 2) (("24" (grind) nil nil)) nil))
      nil))
    nil)
   nil shostak)))

