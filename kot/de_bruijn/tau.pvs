tau: THEORY
BEGIN
  IMPORTING subst, interp, supertype, delta, init_context

  AUTO_REWRITE+ sexpr?

  % Variable declaration
  Γ, Δ, Θ: VAR finseq[(scontext?)]
  M, N: VAR (scontext?)
  U, V: VAR syntaxic
  A, B, T: VAR (sexpr?)
  %n, m: VAR name
  x, y, z: VAR nat
  a, b, f, g: VAR (sexpr?)
  %S: VAR semantic
  S: VAR finseq[(scontext?)]
  n: VAR nat
  m: VAR (sexpr?)
  nb: VAR [nat, nat]
  t: VAR (sexpr?)
  k: VAR keyword

  π(A)(a)(n: above(1)): (tcc?) =
    t(app(π(A)(n), a))
    
  η(m, n)(k): keyword = 
    CASES k OF
      KTERM(T): KTERM(η(m, n)(T))
      ELSE k
    ENDCASES
  externalize(m, k): keyword = 
    CASES k OF
      KTERM(T): KTERM(externalize(m, T))
      ELSE k
    ENDCASES


  over_keyword(f: [U: syntaxic -> same(U)], k): keyword = 
    CASES k OF
      KTERM(T): KTERM(f(T))
      ELSE k
    ENDCASES




  ;↑(Δ, nb): MACRO finseq[(scontext?)] = decls(theory_(Δ) ↑ nb)
  ;↑(k, nb): MACRO keyword = over_keyword(LAMBDA (U: syntaxic): U ↑ nb, k)
  subst(Δ, x, t): MACRO finseq[(scontext?)] = decls(subst(theory_(Δ), x, t))
  subst(k, x, t): MACRO keyword = over_keyword(LAMBDA U: subst(U, x, t), k)


  typecheckable?(Γ)(U): bool = 
    (ikeep?(U) OR itype?(U) OR iterm?(U) IMPLIES length(Γ) > 0) AND 
    (ideep?(U) IMPLIES length(Γ) >= length(map(U)))

  % type rules : 2.4, 2.17, 3.10, 4.9, 5.1, 5.3, 5.7, 5.12, 5.14, 5.15, + some modifications
  τ0(Γ)(U: (typecheckable?(Γ))): RECURSIVE 
    { x: [keyword, tccs] | LET (k, t) = x IN
      (KTHEORY?(k) IMPLIES sexpr?(U) AND theory?(ρ0(Γ)(U)) AND tccs?(t) AND length(decls(ρ0(Γ)(U))) = length(map(t))) AND
      (KDECL?(k) IMPLIES scontext?(U)) AND
      (KINTERP?(k) AND ideep?(U) IMPLIES compatible?(Γ ^^ (0, length(map(U))), map(U)) AND tccs?(t) AND length(map(U)) = length(map(t))) AND
      (KINTERP?(k) AND (ikeep?(U) OR itype?(U) OR iterm?(U)) IMPLIES compatible0?(Γ(0), U)) AND
      (KTYPE?(k) IMPLIES sexpr?(U) AND tcc?(t)) AND
      (KTERM?(k) IMPLIES sexpr?(U) AND tcc?(t)) } =
  CASES U OF

  %% Names
    % τ0(Γ)(s) = TYPE if kind(Γ(s)) = TYPE
    % τ0(Γ)(s) = δ0(Γ)(type(Γ(s))) if kind(Γ(s)) = CONSTANT
    % τ0(Γ)(s) = δ0(Γ)(type(Γ(s))) if kind(Γ(s)) = VARIABLE
    v(s):
      IF s ∈ Γ THEN CASES kind(Γ(s)) OF
	PRETYPE: (KTYPE, notcc )
	% Γ is supposed to be fully expanded already, so there is no need
	% to call δ0 again.
      , PRETERM: (KTERM( type_(Γ(s)) ↑ (s + 1) ), notcc)
      % TODO: δ0(rest(Γ, s))(type_(Γ(s))) ↑ (s + 1) ), null)
      , PRETHEORY: IF theory?(ρ0(Γ)(v(s))) THEN % Useless check for typepred
      		   (KTHEORY, notccth(length(decls(ρ0(Γ)(v(s))))))
		   ELSE fail ENDIF
      ENDCASES ELSE fail ENDIF
  , dot(i, x):
      IF v?(i) THEN % We lose chomsky here, we don't allow inlined theories in the dot
      LET (kwi, tccsi) = τ0(Γ)(i)
        , S = ρ0(Γ)(i)
      IN IF KTHEORY?(kwi) AND v?(x) AND i(x) < length(decls(S)) THEN  % The assumption theory?(S) can now be proved
        LET (kwx, tccsx) = τ0(Γ ++ decls(S))(x) IN % We know for sure that tccsx = notcc
  	% TODO:     IF KTERM?(kwx) THEN KTERM(η(i, length(decls(S)))(δ0(Γ)(TYPEOF(kw)))) ELSE kw ENDIF,
	CASES kwx OF
	  KTYPE: (KTYPE, notcc),
	  KTERM(T): (KTERM(η(i, length(decls(S)))(T)), notcc)
	  ELSE fail % Nested theories are allowed but we can't access a nested theory
	ENDCASES
      ELSE fail ENDIF
      ELSE fail ENDIF
  , interp(m, σ):
      % Nested theories are allowed but we can't interpret a theory containg a nested theory
      LET (kwm, tccsm) = τ0(Γ)(m)
        , sigM = ρ0(Γ)(m)
      IN IF KTHEORY?(kwm) AND length(decls(sigM)) = length(map(σ)) AND % theory?(SigM) can now be proved        
      	 (FORALL (j: below(length(map(tccsm)))): tcc?((map(tccsm))(j))) THEN % Useless check to prove typepred
        LET (kwi, tccsi) = τ0(Γ ++ decls(sigM))(σ)
	IN IF KINTERP?(kwi) AND (FORALL (j: below(length(map(tccsi)))): tcc?((map(tccsi))(j))) % Useless check to prove typepred
	  THEN (KTHEORY, tccs( (# length := length(map(tccsm)), 
    	       		 seq := LAMBDA (z: below(length(map(tccsm)))): 
			 (map(tccsm))(z) ++ (map(tccsi))(z) #)))
	  ELSE fail ENDIF
      ELSE fail ENDIF
  , theory_(Θ):
      IF length(Θ) = 0 THEN (KTHEORY, notccth(0)) ELSE
      LET pos = length(Θ) - 1 IN
      LET (kwD, tccsD) = τ0(Γ)(Θ(pos)) IN
      IF KDECL?(kwD) THEN
        LET epos = ρ0(Γ)(Θ(pos)) IN
        LET (kwΘ, tccsΘ) = τ0(Γ ++ k(epos))(theory_(Θ ^^ (0, pos))) IN
	IF KTHEORY?(kwΘ) THEN
	  (KTHEORY, k(tccsD) ++ tccsΘ)
	ELSE fail ENDIF
      ELSE fail ENDIF ENDIF
		       
  %% Types
    % τ0(Γ)([x: A -> B]) = TYPE if τ0(Γ)(A) = TYPE 
    % 	       	    	       and τ0(Γ, x: VAR A) = TYPE
  , fun(A, B):
      LET (kwA, tccsA) = τ0(Γ)(A)
      IN IF KTYPE?(kwA) THEN
        LET (kwB, tccsB) = τ0(Γ ++ k(const_var(ρ0(Γ)(A))))(B)
	IN IF KTYPE?(kwB) AND length(Γ) > 1 THEN
	  (KTYPE, tccsA ++ forall_(A, tccsB)(length(Γ)))
	ELSE fail ENDIF
      ELSE fail ENDIF
    % τ0(Γ)([x: A, B]) = TYPE if τ0(Γ)(A) = TYPE 
    % 	       	    	       and τ0(Γ, x: VAR A) = TYPE
  , prod(A, B):
      LET (kwA, tccsA) = τ0(Γ)(A)
      IN IF KTYPE?(kwA) THEN
        LET (kwB, tccsB) = τ0(Γ ++ k(const_var(ρ0(Γ)(A))))(B)
	IN IF KTYPE?(kwB) AND length(Γ) > 1 THEN
	  (KTYPE, tccsA ++ forall_(A, tccsB)(length(Γ)))
	ELSE fail ENDIF
      ELSE fail ENDIF
    % τ0(Γ)({x:T | a}) = TYPE if τ0(Γ)(T) = TYPE
    % 		      	     and τ0(Γ, x: VAR T)(a) = bool
  , subtype(T, a):
      LET (kwT, tccsT) = τ0(Γ)(T)
      IN IF KTYPE?(kwT) THEN
        LET (kwa, tccsa) = τ0(Γ ++ k(const_var(ρ0(Γ)(T))))(a)
	IN IF KTERM?(kwa) AND length(Γ) > 1 AND
	      TYPEOF(kwa) = bool_(length(Γ) + 1) THEN
	  (KTYPE, tccsT ++ forall_(T, tccsa)(length(Γ)))
	ELSE fail ENDIF
      ELSE fail ENDIF

  %% Terms
    % τ0(Γ)(f a) = B' where μ0(τ0(Γ)(f)) = [x: A -> B]
    % 	     	     and   τ0(Γ)(a) = A'
    %		     and   (A ∼a A')_Γ
    %		     and   B' = B[a/x]
%%%%%		     and   Γ ⊢ π(A)(a)
  , app(f, a):
      LET (kwf, tccsf) = τ0(Γ)(f)
      IN IF KTERM?(kwf) THEN
        CASES μ0(TYPEOF(kwf)) OF
	  fun(A, B):
	    LET (kwa, tccsa) = τ0(Γ)(a)
	    IN IF KTERM?(kwa) AND length(Γ) > 1 THEN
	      (KTERM(subst(B, 0, a)), tccsf ++ tccsa ++ (A ∼ TYPEOF(kwa))(a)(length(Γ)) ++ π(A)(a)(length(Γ)))
	    ELSE fail ENDIF
	  ELSE fail
	ENDCASES
      ELSE fail ENDIF
    % τ0(Γ)(λ(x: A): a) = [x: A -> B] where
    % 		       	 B = τ0(Γ, x: VAR A)(a)
    %			 τ0(Γ)(A) = TYPE
  , lam(A, a):
      LET (kwA, tccsA) = τ0(Γ)(A)
      IN IF KTYPE?(kwA) THEN
        LET (kwa, tccsa) = τ0(Γ ++ k(const_var(ρ0(Γ)(A))))(a)
	IN IF KTERM?(kwa) AND length(Γ) > 1 THEN
	  (KTERM(fun(A, TYPEOF(kwa))), tccsA ++ forall_(A, tccsa)(length(Γ)))
	ELSE fail ENDIF
      ELSE fail ENDIF
    % τ0(Γ)((a1, a2)) = [x: τ0(Γ)(a1), τ0(Γ)(a2)]
    % 		x doesn't appear in τ0(Γ)(a2)
  , pair(a1, a2):
      LET (kwa1, tccsa1) = τ0(Γ)(a1)
        , (kwa2, tccsa2) = τ0(Γ)(a2)
      IN IF KTERM?(kwa1) AND KTERM?(kwa2) THEN
        (KTERM(prod(TYPEOF(kwa1), TYPEOF(kwa2) ↑ 1)), tccsa1 ++ tccsa2)
      ELSE fail ENDIF
    % τ0(Γ)(p1 a) = A1, where μ0(τ0(Γ)(a)) = [x: A1, A2]
  , lproj(a):
      LET (kwa, tccsa) = τ0(Γ)(a)
      IN IF KTERM?(kwa) THEN
        CASES μ0(TYPEOF(kwa)) OF
	  prod(A1, A2): (KTERM(A1), tccsa)
	  ELSE fail
	ENDCASES
      ELSE fail ENDIF
    % τ0(Γ)(p2 a) = A2[(p1 a)/x], where μ0(τ0(Γ)(a)) = [x: A1, A2]
  , rproj(a): 
      LET (kwa, tccsa) = τ0(Γ)(a)
      IN IF KTERM?(kwa) THEN
        CASES μ0(TYPEOF(kwa)) OF
	  prod(A1, A2): (KTERM(subst(A2, 0, lproj(a))), tccsa)
	  ELSE fail
	ENDCASES
      ELSE fail ENDIF    
	   
  %% Contexts: thanks to De Bruijn representation, we never have to check
   % that s is not already defined before.
     
    % τ0(Θ)(s: TYPE) = CONTEXT
  , type_decl: (KDECL, notcc)
    % For τ0 : var <-> decl
  , type_var: (KDECL, notcc)
    % τ0(Θ)(s: TYPE = T) = CONTEXT if τ0(Θ)(T) = TYPE
  , type_def(T):
      LET (kwT, tccsT) = τ0(Γ)(T) IN
      IF KTYPE?(kwT) THEN (KDECL, tccsT) ELSE fail ENDIF
    % τ0(Θ)(c: T) = CONTEXT if τ0(Θ)(T) = TYPE
  , const_decl(T):
      LET (kwT, tccsT) = τ0(Γ)(T) IN
      IF KTYPE?(kwT) THEN (KDECL, tccsT) ELSE fail ENDIF
    % For τ0 : var <-> decl
  , const_var(T):
      LET (kwT, tccsT) = τ0(Γ)(T) IN
      IF KTYPE?(kwT) THEN (KDECL, tccsT) ELSE fail ENDIF
    % τ0(Θ)(c: T = a) = CONTEXT if τ0(Θ, Γ)(T) = TYPE
    %		       	      and τ0(Θ, Γ)(a) = T'
    %			      and (T ∼ T')_Γ
%%%%%			      and Γ ⊢ π(T)(a)    
  , const_def(T, a):
      LET (kwT, tccsT) = τ0(Γ)(T)
        , (kwa, tccsa) = τ0(Γ)(a)
      IN IF KTYPE?(kwT) AND KTERM?(kwa) AND length(Γ) > 1 THEN
        (KDECL, tccsT ++ tccsa ++ (T ≃ TYPEOF(kwa))(length(Γ)) ++ π(T)(a)(length(Γ)))
      ELSE fail ENDIF
    % τ0(θ)(rest(Δ0), decl(Δ0)) = CONTEXT  τ0(Θ)(rest(Δ0)) = CONTEXT
    %				    and τ0(Θ, rest(Δ0))(decl(Δ0)) = THEORY 
    %	(THEORY = context without theory declarations)
  , theory_def(Th):
      LET (kwTh, tccsTh) = τ0(Γ)(Th)
      IN IF KTHEORY?(kwTh) THEN (KDECL, tccsTh) ELSE fail ENDIF
  , ikeep: IF 0 < length(Γ) THEN (KINTERP, notcc) ELSE fail ENDIF
  , itype(T):
      IF 0 < length(Γ) AND type_decl?(Γ(0)) THEN
        LET (kwT, tccsT) = τ0(rest(Γ, 0))(T) IN
	IF KTYPE?(kwT) THEN (KINTERP, tccsT) ELSE fail ENDIF
      ELSE fail ENDIF
  , iterm(a):
      IF 0 < length(Γ) AND const_decl?(Γ(0)) THEN
        LET (kwa, tccsa) = τ0(rest(Γ, 0))(a) IN
	IF KTERM?(kwa) AND length(Γ) > 2 THEN
	  (KINTERP, tccsa ++ (type_(Γ(0)) ≃ TYPEOF(kwa))(length(Γ) - 1) ++ π(type_(Γ(0)))(a)(length(Γ) - 1))
	ELSE fail ENDIF
      ELSE fail ENDIF
  , ideep(σ):
      IF length(σ) = 0 THEN (KINTERP, notccth(0)) ELSE
      LET pos = length(σ) - 1 IN
      IF NOT ideep?(σ(pos)) THEN
      LET (kwI, tccsI) = τ0(Γ ^^ (pos, length(Γ)))(σ(pos)) IN
      IF KINTERP?(kwI) THEN
        LET (kwσ, tccsσ) = τ0((Γ WITH [ `seq(pos) := ρ0(Γ ^^ (pos, length(Γ)))(σ(pos)) ]))(ideep(σ ^^ (0, pos))) IN
	IF KINTERP?(kwσ) THEN
	  (KINTERP, k(tccsI) ++ tccsσ)
	ELSE fail ENDIF
      ELSE fail ENDIF 
      ELSE fail ENDIF
      ENDIF
  ENDCASES
  MEASURE size(U)

  % Important invariants of τ0 to prove :
  %  - τ0(Θ)(_) occurs in the definition of τ0 only if τ0(〈〉)(Θ) = CONTEXT
  %    -> done implicitely with type context in every theorems of tau_props.pvs
  %  - KTERM(T) is written only if τ0(Θ)(T) = TYPE
  %    -> see thm 2.11
  %  - KTERM(T) is written only if μ0(T) = T (T is not a subtype)
  %  - KTERM(T) is written only if δ0(Γ)(T) = T (T is fully expanded)
  %    -> both checked in tau_props (type expansion)
  %  - τ0(Γ)(_) generates tccs that are correct (typecheckable) in the context Γ
  %    i.e τ0(Γ)(tcc) = KTERM for each tcc generated.
  %    -> see tcc_correctness in tau_props

  % Definitions without assumptions over the contexts
  δ(Γ)(U: (expandable?(Γ))): syntaxic =
    δ0(expand_ctx(Γ))(U)

  ρ(Γ)(U: (expandable?(Γ))): syntaxic =
    ρ0(expand_ctx(Γ))(U)

  τ(Γ)(U: (typecheckable?(Γ))): [keyword, tccs] =
    τ0(expand_ctx(Γ))(U)

END tau
