(supertype (wedge_TCC1 0
            (wedge_TCC1-1 nil 3584291454
             ("" (existence-tcc)
              (("" (grind)
                ((""
                  (inst +
                   "LAMBDA (x, y: (sexpr?)): LAMBDA (z: finseq[(scontext?)]): x")
                  nil nil))
                nil))
              nil)
             ((finseq type-eq-decl nil finite_sequences nil)
              (scontext? adt-def-decl "boolean" language nil)
              (below type-eq-decl nil nat_types nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (boolean nonempty-type-decl nil booleans nil)
              (syntaxic type-decl nil language nil))
             nil))
           (TRUE__TCC1 0
            (TRUE__TCC1-1 nil 3584292541 ("" (existence-tcc) nil nil)
             nil nil))
           (type_size_TCC1 0
            (type_size_TCC1-1 nil 3584291454
             ("" (termination-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (<< adt-def-decl "(strict_well_founded?[syntaxic])"
               language nil))
             nil))
           (type_size_TCC2 0
            (type_size_TCC2-1 nil 3584291454
             ("" (termination-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (<< adt-def-decl "(strict_well_founded?[syntaxic])"
               language nil))
             nil))
           (type_size_TCC3 0
            (type_size_TCC3-1 nil 3584291454
             ("" (termination-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (<< adt-def-decl "(strict_well_founded?[syntaxic])"
               language nil))
             nil))
           (type_size_TCC4 0
            (type_size_TCC4-1 nil 3584291454
             ("" (termination-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (<< adt-def-decl "(strict_well_founded?[syntaxic])"
               language nil))
             nil))
           (type_size_TCC5 0
            (type_size_TCC5-1 nil 3584291454
             ("" (termination-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (<< adt-def-decl "(strict_well_founded?[syntaxic])"
               language nil))
             nil))
           (μ0_TCC1 0
            (μ0_TCC1-1 nil 3584294473 ("" (termination-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (<< adt-def-decl "(strict_well_founded?[syntaxic])"
               language nil))
             nil))
           (divide_TCC1 0
            (divide_TCC1-1 nil 3584291454 ("" (subtype-tcc) nil nil)
             nil nil))
           (divide_TCC2 0
            (divide_TCC2-1 nil 3584291454
             ("" (termination-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (>= const-decl "bool" reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (sinterp? adt-def-decl "boolean" language nil)
              (scontext? adt-def-decl "boolean" language nil))
             nil))
           (divide_TCC3 0
            (divide_TCC3-1 nil 3584291454 ("" (subtype-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (real_lt_is_strict_total_order name-judgement
               "(strict_total_order?[real])" real_props nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (nnint_plus_nnint_is_nnint application-judgement
               "nonneg_int" integers nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil)
              (type_size def-decl "nat" supertype nil))
             nil))
           (divide_TCC4 0
            (divide_TCC4-1 nil 3584291454
             ("" (subtype-tcc)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind)
                (("3" (expand "sexpr?") (("3" (propax) nil nil)) nil))
                nil))
              nil)
             nil nil))
           (divide_TCC5 0
            (divide_TCC5-1 nil 3584291454
             ("" (termination-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (real_lt_is_strict_total_order name-judgement
               "(strict_total_order?[real])" real_props nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (nnint_plus_nnint_is_nnint application-judgement
               "nonneg_int" integers nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil)
              (type_size def-decl "nat" supertype nil))
             nil))
           (divide_TCC6 0
            (divide_TCC6-1 nil 3584291454 ("" (subtype-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (< const-decl "bool" reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (type_size def-decl "nat" supertype nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
              (real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (sinterp? adt-def-decl "boolean" language nil)
              (scontext? adt-def-decl "boolean" language nil))
             nil))
           (divide_TCC7 0
            (divide_TCC7-1 nil 3584291454
             ("" (termination-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (real_lt_is_strict_total_order name-judgement
               "(strict_total_order?[real])" real_props nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (nnint_plus_nnint_is_nnint application-judgement
               "nonneg_int" integers nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil)
              (type_size def-decl "nat" supertype nil))
             nil))
           (divide_TCC8 0
            (divide_TCC8-1 nil 3584291454 ("" (subtype-tcc) nil nil)
             nil nil))
           (divide_TCC9 0
            (divide_TCC9-1 nil 3584291454 ("" (subtype-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (real_lt_is_strict_total_order name-judgement
               "(strict_total_order?[real])" real_props nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (nnint_plus_nnint_is_nnint application-judgement
               "nonneg_int" integers nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil)
              (type_size def-decl "nat" supertype nil))
             nil))
           (divide_TCC10 0
            (divide_TCC10-1 nil 3584291454
             ("" (termination-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (< const-decl "bool" reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (type_size def-decl "nat" supertype nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
              (real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (sinterp? adt-def-decl "boolean" language nil)
              (scontext? adt-def-decl "boolean" language nil))
             nil))
           (divide_TCC11 0
            (divide_TCC11-1 nil 3584291454 ("" (subtype-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (sinterp? adt-def-decl "boolean" language nil)
              (scontext? adt-def-decl "boolean" language nil))
             nil))
           (mubody_TCC1 0
            (mubody_TCC1-1 nil 3584292541 ("" (subtype-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (pred type-eq-decl nil defined_types nil)
              (strict_well_founded? const-decl "bool" orders nil)
              (<< adt-def-decl "(strict_well_founded?[syntaxic])"
               language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
              (same type-eq-decl nil supertype nil)
              (lam? adt-recognizer-decl "[syntaxic -> boolean]"
               language nil)
              (real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (sinterp? adt-def-decl "boolean" language nil)
              (scontext? adt-def-decl "boolean" language nil))
             nil))
           (mubody_TCC2 0
            (mubody_TCC2-1 nil 3584292541 ("" (subtype-tcc) nil nil)
             ((↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (sexpr? adt-def-decl "boolean" language nil))
             nil))
           (mubody_TCC3 0
            (mubody_TCC3-1 nil 3584292541 ("" (subtype-tcc) nil nil)
             ((sexpr? adt-def-decl "boolean" language nil)) nil))
           (mubody_TCC4 0
            (mubody_TCC4-1 nil 3584292541 ("" (subtype-tcc) nil nil)
             ((↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (sexpr? adt-def-decl "boolean" language nil))
             nil))
           (mubody_TCC5 0
            (mubody_TCC5-1 nil 3584292541 ("" (subtype-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (pred type-eq-decl nil defined_types nil)
              (strict_well_founded? const-decl "bool" orders nil)
              (<< adt-def-decl "(strict_well_founded?[syntaxic])"
               language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
              (same type-eq-decl nil supertype nil)
              (lam? adt-recognizer-decl "[syntaxic -> boolean]"
               language nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil)
              (real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (sinterp? adt-def-decl "boolean" language nil)
              (scontext? adt-def-decl "boolean" language nil))
             nil))
           (mubody_TCC6 0
            (mubody_TCC6-1 nil 3584292541
             ("" (termination-tcc) nil nil)
             ((↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (sexpr? adt-def-decl "boolean" language nil))
             nil))
           (mubody_TCC7 0
            (mubody_TCC7-1 nil 3584292541 ("" (subtype-tcc) nil nil)
             ((sexpr? adt-def-decl "boolean" language nil)) nil))
           (mubody_TCC8 0
            (mubody_TCC8-1 nil 3584292541 ("" (subtype-tcc) nil nil)
             ((sexpr? adt-def-decl "boolean" language nil)) nil))
           (mubody_TCC9 0
            (mubody_TCC9-1 nil 3584292541 ("" (subtype-tcc) nil nil)
             ((sexpr? adt-def-decl "boolean" language nil)) nil))
           (mubody_TCC10 0
            (mubody_TCC10-1 nil 3584292541 ("" (subtype-tcc) nil nil)
             ((↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (sexpr? adt-def-decl "boolean" language nil))
             nil))
           (mubody_TCC11 0
            (mubody_TCC11-1 nil 3584292541
             ("" (skosimp* :preds? t)
              (("" (assert)
                (("" (rewrite -3)
                  (("" (expand "<<") (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
               language nil)
              (boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil))
             nil))
           (mubody_TCC12 0
            (mubody_TCC12-1 nil 3584292541
             ("" (skosimp* :preds? t)
              (("" (rewrite -9)
                (("" (expand "<<") (("" (propax) nil nil)) nil)) nil))
              nil)
             ((same type-eq-decl nil supertype nil)
              (scontext? adt-def-decl "boolean" language nil)
              (sinterp? adt-def-decl "boolean" language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (>= const-decl "bool" reals nil)
              (int nonempty-type-eq-decl nil integers nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (real nonempty-type-from-decl nil reals nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number nonempty-type-decl nil numbers nil)
              (<< adt-def-decl "(strict_well_founded?[syntaxic])"
               language nil)
              (strict_well_founded? const-decl "bool" orders nil)
              (pred type-eq-decl nil defined_types nil)
              (syntaxic type-decl nil language nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (boolean nonempty-type-decl nil booleans nil))
             nil))
           (mubody_TCC13 0
            (mubody_TCC13-1 nil 3584292541 ("" (subtype-tcc) nil nil)
             ((↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (sexpr? adt-def-decl "boolean" language nil))
             nil))
           (mubody_TCC14 0
            (mubody_TCC14-1 nil 3584292541
             ("" (termination-tcc) nil nil)
             ((sexpr? adt-def-decl "boolean" language nil)) nil))
           (mubody_TCC15 0
            (mubody_TCC15-1 nil 3584292541
             ("" (termination-tcc) nil nil)
             ((↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (sexpr? adt-def-decl "boolean" language nil))
             nil))
           (mubody_TCC16 0
            (mubody_TCC16-1 nil 3584292541
             ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
             ((↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (lam? adt-recognizer-decl "[syntaxic -> boolean]"
               language nil)
              (boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (pred type-eq-decl nil defined_types nil)
              (strict_well_founded? const-decl "bool" orders nil)
              (<< adt-def-decl "(strict_well_founded?[syntaxic])"
               language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (sinterp? adt-def-decl "boolean" language nil)
              (scontext? adt-def-decl "boolean" language nil)
              (same type-eq-decl nil supertype nil))
             nil))
           (mubody_TCC17 0
            (mubody_TCC17-1 nil 3584292541
             ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
             ((nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (lam? adt-recognizer-decl "[syntaxic -> boolean]"
               language nil)
              (boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (pred type-eq-decl nil defined_types nil)
              (strict_well_founded? const-decl "bool" orders nil)
              (<< adt-def-decl "(strict_well_founded?[syntaxic])"
               language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (sinterp? adt-def-decl "boolean" language nil)
              (scontext? adt-def-decl "boolean" language nil)
              (same type-eq-decl nil supertype nil))
             nil))
           (mubody_TCC18 0
            (mubody_TCC18-1 nil 3584292541
             ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
             ((↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (lam? adt-recognizer-decl "[syntaxic -> boolean]"
               language nil)
              (boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (pred type-eq-decl nil defined_types nil)
              (strict_well_founded? const-decl "bool" orders nil)
              (<< adt-def-decl "(strict_well_founded?[syntaxic])"
               language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (sinterp? adt-def-decl "boolean" language nil)
              (scontext? adt-def-decl "boolean" language nil)
              (same type-eq-decl nil supertype nil))
             nil))
           (mubody_TCC19 0
            (mubody_TCC19-1 nil 3584292541
             ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
             ((↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (subst def-decl
                     "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
                     subst
                nil)
              (real_lt_is_strict_total_order name-judgement
               "(strict_total_order?[real])" real_props nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (lam? adt-recognizer-decl "[syntaxic -> boolean]"
               language nil)
              (boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (pred type-eq-decl nil defined_types nil)
              (strict_well_founded? const-decl "bool" orders nil)
              (<< adt-def-decl "(strict_well_founded?[syntaxic])"
               language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (sinterp? adt-def-decl "boolean" language nil)
              (scontext? adt-def-decl "boolean" language nil)
              (same type-eq-decl nil supertype nil))
             nil))
           (mubody_TCC20 0
            (mubody_TCC20-1 nil 3584292541
             ("" (skosimp* :preds? t)
              (("" (expand "sexpr?" +)
                (("" (expand "sinterp?" +)
                  (("" (expand "scontext?" +)
                    (("" (assert) (("" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ((lam? adt-recognizer-decl "[syntaxic -> boolean]"
               language nil)
              (boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (pred type-eq-decl nil defined_types nil)
              (strict_well_founded? const-decl "bool" orders nil)
              (<< adt-def-decl "(strict_well_founded?[syntaxic])"
               language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (>= const-decl "bool" reals nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (sinterp? adt-def-decl "boolean" language nil)
              (scontext? adt-def-decl "boolean" language nil)
              (same type-eq-decl nil supertype nil))
             nil))
           (mubody_TCC21 0
            (mubody_TCC21-1 nil 3584294473 ("" (subtype-tcc) nil nil)
             ((↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (subst def-decl
                     "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
                     subst
                nil)
              (sexpr? adt-def-decl "boolean" language nil))
             nil))
           (mubody_TCC22 0
            (mubody_TCC22-1 nil 3584294473
             ("" (termination-tcc) nil nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (<< adt-def-decl "(strict_well_founded?[syntaxic])"
               language nil))
             nil))
           (mubody_TCC23 0
            (mubody_TCC23-1 nil 3584294473 ("" (subtype-tcc) nil nil)
             ((sexpr? adt-def-decl "boolean" language nil)
              (sinterp? adt-def-decl "boolean" language nil)
              (scontext? adt-def-decl "boolean" language nil))
             nil))
           (divide_size 0
            (divide_size-1 nil 3584291729
             ("" (induct "U")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (grind) nil nil) ("6" (grind) nil nil)
               ("7" (grind) nil nil) ("8" (grind) nil nil)
               ("9" (grind) nil nil) ("10" (grind) nil nil)
               ("11" (grind) nil nil) ("12" (grind) nil nil)
               ("13" (grind) nil nil) ("14" (grind) nil nil)
               ("15" (grind) nil nil) ("16" (grind) nil nil)
               ("17" (grind) nil nil) ("18" (grind) nil nil)
               ("19" (grind) nil nil) ("20" (grind) nil nil)
               ("21" (grind) nil nil) ("22" (grind) nil nil))
              nil)
             ((posint_plus_nnint_is_posint application-judgement
               "posint" integers nil)
              (+ const-decl "[numfield, numfield -> numfield]"
                 number_fields nil)
              (numfield nonempty-type-eq-decl nil number_fields nil)
              (↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (IFF const-decl "[bool, bool -> bool]" booleans nil)
              (real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (nnint_plus_nnint_is_nnint application-judgement
               "nonneg_int" integers nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic_induction formula-decl nil language nil)
              (/ def-decl
                 "{V | (sexpr?(U) => sexpr?(V)) AND (sinterp?(U) => sinterp?(V)) AND (scontext?(U) => scontext?(V))}"
                 supertype nil)
              (scontext? adt-def-decl "boolean" language nil)
              (sinterp? adt-def-decl "boolean" language nil)
              (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (type_size def-decl "nat" supertype nil)
              (= const-decl "[T, T -> boolean]" equalities nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (>= const-decl "bool" reals nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (int nonempty-type-eq-decl nil integers nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (real nonempty-type-from-decl nil reals nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number nonempty-type-decl nil numbers nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (boolean nonempty-type-decl nil booleans nil)
              (syntaxic type-decl nil language nil))
             nil))
           (π_TCC1 0
            (π_TCC1-1 nil 3584293159
             ("" (subtype-tcc)
              (("1" (grind)
                (("1" (expand "sexpr?") (("1" (propax) nil nil)) nil))
                nil)
               ("2" (expand "sexpr?") (("2" (propax) nil nil)) nil)
               ("3" (expand "sexpr?") (("3" (propax) nil nil)) nil)
               ("4" (expand "sexpr?") (("4" (propax) nil nil)) nil))
              nil)
             ((real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (>= const-decl "bool" reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
              (sinterp? adt-def-decl "boolean" language nil)
              (scontext? adt-def-decl "boolean" language nil)
              (same type-eq-decl nil supertype nil))
             nil))
           (mu_TCC1 0
            (mu_TCC1-1 nil 3584293256
             ("" (subtype-tcc)
              (("" (expand "sexpr?" +) (("" (propax) nil nil)) nil))
              nil)
             ((real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (>= const-decl "bool" reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (π const-decl "(sexpr?)" supertype nil))
             nil))
           (mu_TCC2 0
            (mu_TCC2-1 nil 3584293256
             ("" (skosimp* :preds? t)
              (("" (expand "sexpr?" +) (("" (propax) nil nil)) nil))
              nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil))
             nil))
           (mu_TCC3 0
            (mu_TCC3-1 nil 3584293256
             ("" (skosimp* :preds? t)
              (("" (expand "sexpr?" +) (("" (propax) nil nil)) nil))
              nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (>= const-decl "bool" reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil))
             nil))
           (mu 0
            (mu-1 nil 3584293280
             ("" (skosimp* :preds? t)
              (("" (assert)
                (("" (lift-if)
                  (("" (assert)
                    (("" (bddsimp)
                      (("1" (assert)
                        (("1" (expand "mubody" 1 1)
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "mubody" 1 1)
                          (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (expand "mubody" 1 1)
                        (("3" (assert) nil nil)) nil)
                       ("4" (assert) (("4" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ((real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (μ const-decl "(sexpr?)" supertype nil)
              (mubody def-decl "[same(U), (sexpr?)]" supertype nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil)
              (divide_size application-judgement
               "{V | type_size(V) = type_size(U)}" supertype nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (π const-decl "(sexpr?)" supertype nil)
              (boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (>= const-decl "bool" reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil))
             shostak))
           (pi_TCC1 0
            (pi_TCC1-1 nil 3584294172
             ("" (subtype-tcc)
              (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil)
             ((real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (>= const-decl "bool" reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil)
              (↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (π const-decl "(sexpr?)" supertype nil))
             nil))
           (pi_TCC2 0
            (pi_TCC2-1 nil 3584294172
             ("" (skosimp* :preds? t)
              (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil))
             nil))
           (pi_TCC3 0
            (pi_TCC3-1 nil 3584294172
             ("" (skosimp* :preds? t)
              (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (>= const-decl "bool" reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil))
             nil))
           (pi_TCC4 0
            (pi_TCC4-1 nil 3584294172
             ("" (skosimp* :preds? t)
              (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (>= const-decl "bool" reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil))
             nil))
           (pi_TCC5 0
            (pi_TCC5-1 nil 3584294172
             ("" (skosimp* :preds? t)
              (("" (assert)
                (("" (expand "sexpr?") (("" (propax) nil nil)) nil))
                nil))
              nil)
             ((posint_plus_nnint_is_posint application-judgement
               "posint" integers nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (π const-decl "(sexpr?)" supertype nil)
              (↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (>= const-decl "bool" reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil))
             nil))
           (pi_TCC6 0
            (pi_TCC6-1 nil 3584294172
             ("" (skosimp* :preds? t)
              (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil))
             nil))
           (pi_TCC7 0
            (pi_TCC7-1 nil 3584294172
             ("" (skosimp* :preds? t)
              (("" (assert)
                (("" (expand "sexpr?") (("" (propax) nil nil)) nil))
                nil))
              nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil))
             nil))
           (pi_TCC8 0
            (pi_TCC8-1 nil 3584294172
             ("" (skosimp* :preds? t)
              (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil))
             nil))
           (pi_TCC9 0
            (pi_TCC9-1 nil 3584294172
             ("" (skosimp* :preds? t)
              (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (>= const-decl "bool" reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil))
             nil))
           (pi_TCC10 0
            (pi_TCC10-1 nil 3584294172
             ("" (skosimp* :preds? t)
              (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (>= const-decl "bool" reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil))
             nil))
           (pi_TCC11 0
            (pi_TCC11-1 nil 3584294172
             ("" (skosimp* :preds? t)
              (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil))
             nil))
           (pi_TCC12 0
            (pi_TCC12-1 nil 3584294172
             ("" (skosimp* :preds? t)
              (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (>= const-decl "bool" reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil))
             nil))
           (pi_TCC13 0
            (pi_TCC13-1 nil 3584294172
             ("" (skosimp* :preds? t)
              (("" (assert)
                (("" (expand "sexpr?") (("" (propax) nil nil)) nil))
                nil))
              nil)
             ((real_lt_is_strict_total_order name-judgement
               "(strict_total_order?[real])" real_props nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (π const-decl "(sexpr?)" supertype nil)
              (↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (subst def-decl
                     "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
                     subst
                nil)
              (boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (>= const-decl "bool" reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil))
             nil))
           (pi_TCC14 0
            (pi_TCC14-1 nil 3584294172
             ("" (skosimp* :preds? t)
              (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil)
             ((boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil))
             nil))
           (pi_TCC15 0
            (pi_TCC15-1 nil 3584294172
             ("" (skosimp* :preds? t)
              (("" (assert)
                (("" (expand "sexpr?") (("" (propax) nil nil)) nil))
                nil))
              nil)
             ((real_lt_is_strict_total_order name-judgement
               "(strict_total_order?[real])" real_props nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil)
              (π const-decl "(sexpr?)" supertype nil)
              (↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (subst def-decl
                     "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
                     subst
                nil)
              (boolean nonempty-type-decl nil booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (syntaxic type-decl nil language nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (number nonempty-type-decl nil numbers nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (real nonempty-type-from-decl nil reals nil)
              (>= const-decl "bool" reals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (int nonempty-type-eq-decl nil integers nil)
              (nat nonempty-type-eq-decl nil naturalnumbers nil))
             nil))
           (pi 0
            (pi-1 nil 3584294359
             ("" (skosimp* :preds? t)
              (("" (assert)
                (("" (lift-if)
                  (("" (bddsimp)
                    (("1" (assert)
                      (("1" (decompose-equality +)
                        (("1" (expand "mubody" 1 1)
                          (("1" (propax) nil nil)) nil)
                         ("2" (expand "mubody" 1 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "mubody" 1 2)
                        (("2" (expand "mubody" 1 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (assert)
                      (("3" (expand "mubody" 1 2)
                        (("3" (expand "mubody" 1 1)
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("4" (assert) (("4" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ((nat nonempty-type-eq-decl nil naturalnumbers nil)
              (int nonempty-type-eq-decl nil integers nil)
              (integer_pred const-decl "[rational -> boolean]" integers
                            nil)
              (rational nonempty-type-from-decl nil rationals nil)
              (rational_pred const-decl "[real -> boolean]" rationals
                             nil)
              (>= const-decl "bool" reals nil)
              (real nonempty-type-from-decl nil reals nil)
              (real_pred const-decl "[number_field -> boolean]" reals
                         nil)
              (number_field nonempty-type-from-decl nil number_fields
               nil)
              (number_field_pred const-decl "[number -> boolean]"
               number_fields nil)
              (number nonempty-type-decl nil numbers nil)
              (sexpr? adt-def-decl "boolean" language nil)
              (syntaxic type-decl nil language nil)
              (NOT const-decl "[bool -> bool]" booleans nil)
              (bool nonempty-type-eq-decl nil booleans nil)
              (boolean nonempty-type-decl nil booleans nil)
              (real_lt_is_strict_total_order name-judgement
               "(strict_total_order?[real])" real_props nil)
              (divide_size application-judgement
               "{V | type_size(V) = type_size(U)}" supertype nil)
              (subst def-decl
                     "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
                     subst
                nil)
              (nnint_plus_posint_is_posint application-judgement
               "posint" integers nil)
              (μ const-decl "(sexpr?)" supertype nil)
              (↑ def-decl
               "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
               subst nil)
              (lam? adt-recognizer-decl "[syntaxic -> boolean]"
               language nil)
              (syntaxic_lam_extensionality formula-decl nil language
               nil)
              (+ const-decl "[numfield, numfield -> numfield]"
                 number_fields nil)
              (numfield nonempty-type-eq-decl nil number_fields nil)
              (pred adt-accessor-decl "[(subtype?) -> (sexpr?)]"
               language nil)
              (v adt-constructor-decl "[nat -> (v?)]" language nil)
              (v? adt-recognizer-decl "[syntaxic -> boolean]" language
               nil)
              (IFF const-decl "[bool, bool -> bool]" booleans nil)
              (app adt-constructor-decl
               "[[(sexpr?), (sexpr?)] -> (app?)]" language nil)
              (app? adt-recognizer-decl "[syntaxic -> boolean]"
               language nil)
              (∧ const-decl "[(sexpr?), (sexpr?) -> [nat -> (sexpr?)]]"
               supertype nil)
              (supertype adt-accessor-decl "[(subtype?) -> (sexpr?)]"
                         language nil)
              (subtype? adt-recognizer-decl "[syntaxic -> boolean]"
                        language nil)
              (mubody def-decl "[same(U), (sexpr?)]" supertype nil)
              (same type-eq-decl nil supertype nil)
              (scontext? adt-def-decl "boolean" language nil)
              (sinterp? adt-def-decl "boolean" language nil)
              (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
              (AND const-decl "[bool, bool -> bool]" booleans nil)
              (lam adt-constructor-decl
                   "[[(sexpr?), (sexpr?)] -> (lam?)]" language nil)
              (posint_plus_nnint_is_posint application-judgement
               "posint" integers nil)
              (π const-decl "(sexpr?)" supertype nil)
              (real_ge_is_total_order name-judgement
               "(total_order?[real])" real_props nil))
             shostak)))

