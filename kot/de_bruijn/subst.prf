(subst
   (size_TCC1 0
    (size_TCC1-1 nil 3583528655 ("" (well-founded-tcc) nil nil) nil
     nil))
   (size_TCC2 0
    (size_TCC2-1 nil 3583528655 ("" (subtype-tcc) nil nil)
     ((boolean nonempty-type-decl nil booleans nil)
      (bool nonempty-type-eq-decl nil booleans nil)
      (NOT const-decl "[bool -> bool]" booleans nil)
      (syntaxic type-decl nil language nil)
      (prekeyword type-decl nil language nil)
      (parsed? def-decl "bool" language nil)
      (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
       nil)
      (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
      (pretype type-eq-decl nil language nil))
     nil))
   (size_TCC3 0
    (size_TCC3-1 nil 3583528655 ("" (termination-tcc) nil nil)
     ((boolean nonempty-type-decl nil booleans nil)
      (bool nonempty-type-eq-decl nil booleans nil)
      (NOT const-decl "[bool -> bool]" booleans nil)
      (syntaxic type-decl nil language nil)
      (prekeyword type-decl nil language nil)
      (parsed? def-decl "bool" language nil)
      (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
       nil)
      (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
      (pretype type-eq-decl nil language nil)
      (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
      (restrict const-decl "R" restrict nil))
     nil))
  (size_TCC4 0
   (size_TCC4-1 nil 3583528655 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (prekeyword type-decl nil language nil)
     (parsed? def-decl "bool" language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (pretype type-eq-decl nil language nil))
    nil)) (size_TCC5 0
           (size_TCC5-1 nil 3583528655 ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (prekeyword type-decl nil language nil)
             (parsed? def-decl "bool" language nil)
             (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
             (pretype type-eq-decl nil language nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (restrict const-decl "R" restrict nil))
            nil))
  (size_TCC6 0
   (size_TCC6-1 nil 3583528655 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (prekeyword type-decl nil language nil)
     (parsed? def-decl "bool" language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (pretype type-eq-decl nil language nil))
    nil)) (size_TCC7 0
           (size_TCC7-1 nil 3583528655 ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (prekeyword type-decl nil language nil)
             (parsed? def-decl "bool" language nil)
             (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
             (pretype type-eq-decl nil language nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (restrict const-decl "R" restrict nil))
            nil))
  (size_TCC8 0
   (size_TCC8-1 nil 3583528655 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (prekeyword type-decl nil language nil)
     (parsed? def-decl "bool" language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (pretype type-eq-decl nil language nil))
    nil)) (size_TCC9 0
           (size_TCC9-1 nil 3583528655 ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (prekeyword type-decl nil language nil)
             (parsed? def-decl "bool" language nil)
             (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
             (pretype type-eq-decl nil language nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (restrict const-decl "R" restrict nil))
            nil))
  (size_TCC10 0
   (size_TCC10-1 nil 3583528655 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (prekeyword type-decl nil language nil)
     (parsed? def-decl "bool" language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (pretype type-eq-decl nil language nil))
    nil)) (size_TCC11 0
           (size_TCC11-1 nil 3583528655 ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (prekeyword type-decl nil language nil)
             (parsed? def-decl "bool" language nil)
             (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
             (pretype type-eq-decl nil language nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (restrict const-decl "R" restrict nil))
            nil))
  (size_TCC12 0
   (size_TCC12-1 nil 3583528655 ("" (cases-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (prekeyword type-decl nil language nil)
     (parsed? def-decl "bool" language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (pretype type-eq-decl nil language nil))
    nil)) (uparrow_TCC1 0
           (uparrow_TCC1-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (parsed? def-decl "bool" language nil))
            nil))
  (uparrow_TCC2 0
   (uparrow_TCC2-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (parsed? def-decl "bool" language nil))
    nil)) (uparrow_TCC3 0
           (uparrow_TCC3-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC4 0
   (uparrow_TCC4-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (prekeyword type-decl nil language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (parsed? def-decl "bool" language nil))
    nil)) (uparrow_TCC5 0
           (uparrow_TCC5-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC6 0
   (uparrow_TCC6-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (prekeyword type-decl nil language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (parsed? def-decl "bool" language nil))
    nil)) (uparrow_TCC7 0
           (uparrow_TCC7-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC8 0
   (uparrow_TCC8-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC9 0
           (uparrow_TCC9-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (pred type-eq-decl nil defined_types nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (prekeyword type-decl nil language nil)
             (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
             (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
             (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PREINTERP adt-constructor-decl "(PREINTERP?)" language
              nil)
             (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language
              nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (parsed? def-decl "bool" language nil))
            nil))
  (uparrow_TCC10 0
   (uparrow_TCC10-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC11 0
           (uparrow_TCC11-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC12 0
   (uparrow_TCC12-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (prekeyword type-decl nil language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (parsed? def-decl "bool" language nil))
    nil)) (uparrow_TCC13 0
           (uparrow_TCC13-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC14 0
   (uparrow_TCC14-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC15 0
           (uparrow_TCC15-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (pred type-eq-decl nil defined_types nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (prekeyword type-decl nil language nil)
             (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
             (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
             (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PREINTERP adt-constructor-decl "(PREINTERP?)" language
              nil)
             (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language
              nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (parsed? def-decl "bool" language nil))
            nil))
  (uparrow_TCC16 0
   (uparrow_TCC16-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC17 0
           (uparrow_TCC17-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC18 0
   (uparrow_TCC18-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (prekeyword type-decl nil language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (parsed? def-decl "bool" language nil))
    nil)) (uparrow_TCC19 0
           (uparrow_TCC19-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC20 0
   (uparrow_TCC20-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC21 0
           (uparrow_TCC21-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (pred type-eq-decl nil defined_types nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (prekeyword type-decl nil language nil)
             (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
             (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
             (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PREINTERP adt-constructor-decl "(PREINTERP?)" language
              nil)
             (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language
              nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (posint_plus_nnint_is_posint application-judgement
              "posint" integers nil)
             (parsed? def-decl "bool" language nil))
            nil))
  (uparrow_TCC22 0
   (uparrow_TCC22-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC23 0
           (uparrow_TCC23-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC24 0
   (uparrow_TCC24-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (prekeyword type-decl nil language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (parsed? def-decl "bool" language nil))
    nil)) (uparrow_TCC25 0
           (uparrow_TCC25-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC26 0
   (uparrow_TCC26-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (prekeyword type-decl nil language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (parsed? def-decl "bool" language nil))
    nil)) (uparrow_TCC27 0
           (uparrow_TCC27-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC28 0
   (uparrow_TCC28-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (prekeyword type-decl nil language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (parsed? def-decl "bool" language nil))
    nil)) (uparrow_TCC29 0
           (uparrow_TCC29-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((parsed? def-decl "bool" language nil)) nil))
  (uparrow_TCC30 0
   (uparrow_TCC30-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC31 0
           (uparrow_TCC31-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (pred type-eq-decl nil defined_types nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (prekeyword type-decl nil language nil)
             (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
             (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
             (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PREINTERP adt-constructor-decl "(PREINTERP?)" language
              nil)
             (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language
              nil)
             (parsed? def-decl "bool" language nil))
            nil))
  (uparrow_TCC32 0
   (uparrow_TCC32-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC33 0
           (uparrow_TCC33-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (pred type-eq-decl nil defined_types nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (prekeyword type-decl nil language nil)
             (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
             (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
             (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PREINTERP adt-constructor-decl "(PREINTERP?)" language
              nil)
             (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language
              nil)
             (parsed? def-decl "bool" language nil))
            nil))
  (uparrow_TCC34 0
   (uparrow_TCC34-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC35 0
           (uparrow_TCC35-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC36 0
   (uparrow_TCC36-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (prekeyword type-decl nil language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (length def-decl "nat" language nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (parsed? def-decl "bool" language nil))
    nil)) (uparrow_TCC37 0
           (uparrow_TCC37-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC38 0
   (uparrow_TCC38-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC39 0
           (uparrow_TCC39-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (pred type-eq-decl nil defined_types nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (prekeyword type-decl nil language nil)
             (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
             (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
             (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PREINTERP adt-constructor-decl "(PREINTERP?)" language
              nil)
             (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language
              nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (length def-decl "nat" language nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (parsed? def-decl "bool" language nil))
            nil))
  (uparrow_TCC40 0
   (uparrow_TCC40-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC41 0
           (uparrow_TCC41-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC42 0
   (uparrow_TCC42-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (prekeyword type-decl nil language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (length def-decl "nat" language nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (parsed? def-decl "bool" language nil))
    nil)) (uparrow_TCC43 0
           (uparrow_TCC43-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC44 0
   (uparrow_TCC44-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC45 0
           (uparrow_TCC45-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC46 0
   (uparrow_TCC46-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (prekeyword type-decl nil language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (length def-decl "nat" language nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (parsed? def-decl "bool" language nil))
    nil)) (uparrow_TCC47 0
           (uparrow_TCC47-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC48 0
   (uparrow_TCC48-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC49 0
           (uparrow_TCC49-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (pred type-eq-decl nil defined_types nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (prekeyword type-decl nil language nil)
             (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
             (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
             (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PREINTERP adt-constructor-decl "(PREINTERP?)" language
              nil)
             (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language
              nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (length def-decl "nat" language nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (parsed? def-decl "bool" language nil))
            nil))
  (uparrow_TCC50 0
   (uparrow_TCC50-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((parsed? def-decl "bool" language nil)) nil)) (uparrow_TCC51
                                                    0
                                                    (uparrow_TCC51-1
                                                     nil
                                                     3583528800
                                                     (""
                                                      (termination-tcc)
                                                      nil
                                                      nil)
                                                     ((<<
                                                       adt-def-decl
                                                       "(strict_well_founded?[syntaxic])"
                                                       language
                                                       nil))
                                                     nil))
  (uparrow_TCC52 0
   (uparrow_TCC52-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (prekeyword type-decl nil language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (parsed? def-decl "bool" language nil))
    nil)) (uparrow_TCC53 0
           (uparrow_TCC53-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC54 0
   (uparrow_TCC54-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC55 0
           (uparrow_TCC55-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (pred type-eq-decl nil defined_types nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (prekeyword type-decl nil language nil)
             (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
             (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
             (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PREINTERP adt-constructor-decl "(PREINTERP?)" language
              nil)
             (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language
              nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (length def-decl "nat" language nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (parsed? def-decl "bool" language nil))
            nil))
  (uparrow_TCC56 0
   (uparrow_TCC56-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC57 0
           (uparrow_TCC57-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC58 0
   (uparrow_TCC58-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (prekeyword type-decl nil language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (length def-decl "nat" language nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (parsed? def-decl "bool" language nil))
    nil)) (shift_pretype 0
           (shift_pretype-1 nil 3583528859
            ("" (grind)
             (("" (typepred "T!1 ↑ nb!1") (("" (grind) nil nil)) nil))
             nil)
            ((↑ def-decl "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
              subst nil)
             (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language
              nil)
             (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PREINTERP adt-constructor-decl "(PREINTERP?)" language
              nil)
             (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
             (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (>= const-decl "bool" reals nil)
             (int nonempty-type-eq-decl nil integers nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (real nonempty-type-from-decl nil reals nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number nonempty-type-decl nil numbers nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (prekeyword type-decl nil language nil)
             (parsed? def-decl "bool" language nil)
             (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
             (pretype type-eq-decl nil language nil))
            shostak))
  (shift_preterm 0
   (shift_preterm-1 nil 3583528897
    ("" (skosimp* :preds? t)
     (("" (grind)
       (("" (typepred "a!1 ↑ nb!1") (("" (grind) nil nil)) nil)) nil))
     nil)
    ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (↑ def-decl "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
      subst nil)
     (boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (prekeyword type-decl nil language nil)
     (parsed? def-decl "bool" language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (preterm type-eq-decl nil language nil))
    shostak)) (shift_interp 0
               (shift_interp-1 nil 3583528929
                ("" (skosimp* :preds? t)
                 (("" (invoke (typepred "%1") (~ + "parsed?(%1)(%)"))
                   (("" (grind) nil nil)) nil))
                 nil)
                ((IMPLIES const-decl "[bool, bool -> bool]" booleans
                  nil)
                 (PRETYPE? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (PRETYPE adt-constructor-decl "(PRETYPE?)" language
                  nil)
                 (number nonempty-type-decl nil numbers nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (>= const-decl "bool" reals nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (PRETERM? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (PRETERM adt-constructor-decl "(PRETERM?)" language
                  nil)
                 (PRECONTEXT? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)"
                  language nil)
                 (↑ def-decl "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
                  subst nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (syntaxic type-decl nil language nil)
                 (prekeyword type-decl nil language nil)
                 (parsed? def-decl "bool" language nil)
                 (PREINTERP? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (PREINTERP adt-constructor-decl "(PREINTERP?)"
                  language nil)
                 (preinterp type-eq-decl nil language nil))
                shostak))
  (shift_precontext 0
   (shift_precontext-1 nil 3583528957
    ("" (skosimp* :preds? t)
     (("" (invoke (typepred "%1") (~ + "parsed?(%1)(%)"))
       (("" (grind) nil nil)) nil))
     nil)
    ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (↑ def-decl "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
      subst nil)
     (boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (prekeyword type-decl nil language nil)
     (parsed? def-decl "bool" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (precontext type-eq-decl nil language nil))
    shostak)) (shift_size 0
               (shift_size-1 nil 3583528800
                ("" (induct-and-simplify A)
                 (("1" (grind)
                   (("1"
                     (invoke (typepred "%1") (~ + "parsed?(%1)(%)"))
                     (("1" (grind) nil nil)) nil))
                   nil)
                  ("2" (grind)
                   (("2"
                     (invoke (typepred "%1") (~ 2 "parsed?(%1)(%)"))
                     (("2" (grind) nil nil)) nil))
                   nil)
                  ("3" (grind)
                   (("3"
                     (invoke (typepred "%1") (~ + "parsed?(%1)(%)"))
                     (("3" (grind) nil nil)) nil))
                   nil)
                  ("4" (grind)
                   (("4" (grind)
                     (("4"
                       (invoke (typepred "%1") (~ 2 "parsed?(%1)(%)"))
                       (("4" (grind) nil nil)) nil))
                     nil))
                   nil))
                 nil)
                ((NOT const-decl "[bool -> bool]" booleans nil)
                 (real_lt_is_strict_total_order name-judgement
                  "(strict_total_order?[real])" real_props nil)
                 (nnint_plus_nnint_is_nnint application-judgement
                  "nonneg_int" integers nil)
                 (+ const-decl "[numfield, numfield -> numfield]"
                    number_fields nil)
                 (numfield nonempty-type-eq-decl nil number_fields nil)
                 (nnint_plus_posint_is_posint application-judgement
                  "posint" integers nil)
                 (posint_plus_nnint_is_posint application-judgement
                  "posint" integers nil)
                 (syntaxic type-decl nil language nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (IMPLIES const-decl "[bool, bool -> bool]" booleans
                  nil)
                 (prekeyword type-decl nil language nil)
                 (parsed? def-decl "bool" language nil)
                 (PRETYPE? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (PRETYPE adt-constructor-decl "(PRETYPE?)" language
                  nil)
                 (number nonempty-type-decl nil numbers nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (>= const-decl "bool" reals nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (PRETERM? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (PRETERM adt-constructor-decl "(PRETERM?)" language
                  nil)
                 (PREINTERP? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (PREINTERP adt-constructor-decl "(PREINTERP?)"
                  language nil)
                 (PRECONTEXT? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)"
                  language nil)
                 (↑ def-decl "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
                  subst nil)
                 (= const-decl "[T, T -> boolean]" equalities nil)
                 (pretype type-eq-decl nil language nil)
                 (size def-decl "nat" subst nil)
                 (syntaxic_induction formula-decl nil language nil))
                nil))
  (shift_zero 0
   (shift_zero-1 nil 3583529098 ("" (induct-and-simplify S) nil nil)
    ((syntaxic type-decl nil language nil)
     (boolean nonempty-type-decl nil booleans nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (prekeyword type-decl nil language nil)
     (parsed? def-decl "bool" language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (↑ def-decl "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
      subst nil)
     (syntaxic_induction formula-decl nil language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (length def-decl "nat" language nil))
    shostak)) (length_shift 0
               (length_shift-1 nil 3583530058
                ("" (induct-and-simplify Γ) nil nil)
                ((syntaxic type-decl nil language nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (IMPLIES const-decl "[bool, bool -> bool]" booleans
                  nil)
                 (prekeyword type-decl nil language nil)
                 (parsed? def-decl "bool" language nil)
                 (PRECONTEXT? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)"
                  language nil)
                 (number nonempty-type-decl nil numbers nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (>= const-decl "bool" reals nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (= const-decl "[T, T -> boolean]" equalities nil)
                 (length def-decl "nat" language nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (PRETYPE? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (PRETYPE adt-constructor-decl "(PRETYPE?)" language
                  nil)
                 (PRETERM? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (PRETERM adt-constructor-decl "(PRETERM?)" language
                  nil)
                 (PREINTERP? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (PREINTERP adt-constructor-decl "(PREINTERP?)"
                  language nil)
                 (↑ def-decl "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
                  subst nil)
                 (syntaxic_induction formula-decl nil language nil)
                 (precontext type-eq-decl nil language nil)
                 (real_lt_is_strict_total_order name-judgement
                  "(strict_total_order?[real])" real_props nil)
                 (posint_plus_nnint_is_posint application-judgement
                  "posint" integers nil)
                 (nnint_plus_nnint_is_nnint application-judgement
                  "nonneg_int" integers nil))
                shostak))
  (shift_plus 0
   (shift_plus-1 nil 3583529119
    ("" (induct S)
     (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
      ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
      ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
      ("10" (grind) nil nil) ("11" (grind) nil nil)
      ("12" (grind) nil nil) ("13" (grind) nil nil)
      ("14" (skosimp* :preds? t)
       (("14" (inst - i!1 j!1 n!1)
         (("14" (inst - i!1 j!1 "n!1 + length(type_def1_var!1)")
           (("14" (assert)
             (("14" (grind :rewrites length_shift)
               (("14" (rewrite length_shift)
                 (("1" (grind) nil nil)
                  ("2" (grind) (("2" (postpone) nil nil)) nil))
                 nil))
               nil))
             nil))
           nil))
         nil))
       nil)
      ("15" (postpone) nil nil) ("16" (postpone) nil nil)
      ("17" (postpone) nil nil) ("18" (postpone) nil nil)
      ("19" (grind) nil nil) ("20" (grind) nil nil)
      ("21" (postpone) nil nil) ("22" (postpone) nil nil))
     nil)
    nil shostak)) (subst_TCC1 0
                   (subst_TCC1-1 nil 3583528800
                    ("" (subtype-tcc) nil nil)
                    ((boolean nonempty-type-decl nil booleans nil)
                     (bool nonempty-type-eq-decl nil booleans nil)
                     (NOT const-decl "[bool -> bool]" booleans nil)
                     (number nonempty-type-decl nil numbers nil)
                     (number_field_pred const-decl
                      "[number -> boolean]" number_fields nil)
                     (number_field nonempty-type-from-decl nil
                      number_fields nil)
                     (real_pred const-decl "[number_field -> boolean]"
                                reals nil)
                     (real nonempty-type-from-decl nil reals nil)
                     (>= const-decl "bool" reals nil)
                     (rational_pred const-decl "[real -> boolean]"
                                    rationals nil)
                     (rational nonempty-type-from-decl nil rationals
                               nil)
                     (integer_pred const-decl "[rational -> boolean]"
                                   integers nil)
                     (int nonempty-type-eq-decl nil integers nil)
                     (nat nonempty-type-eq-decl nil naturalnumbers nil)
                     (syntaxic type-decl nil language nil)
                     (prekeyword type-decl nil language nil)
                     (parsed? def-decl "bool" language nil)
                     (PRETERM? adt-recognizer-decl
                      "[prekeyword -> boolean]" language nil)
                     (PRETERM adt-constructor-decl "(PRETERM?)"
                      language nil)
                     (preterm type-eq-decl nil language nil)
                     (int_minus_int_is_int application-judgement "int"
                      integers nil)
                     (real_gt_is_strict_total_order name-judgement
                      "(strict_total_order?[real])" real_props nil)
                     (real_ge_is_total_order name-judgement
                      "(total_order?[real])" real_props nil))
                    nil))
  (subst_TCC2 0
   (subst_TCC2-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (syntaxic type-decl nil language nil)
     (prekeyword type-decl nil language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (preterm type-eq-decl nil language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (real_gt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (parsed? def-decl "bool" language nil))
    nil)) (subst_TCC3 0
           (subst_TCC3-1 nil 3583528800 ("" (subtype-tcc) nil nil) nil
            nil))
  (subst_TCC4 0
   (subst_TCC4-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (syntaxic type-decl nil language nil)
     (prekeyword type-decl nil language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (preterm type-eq-decl nil language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (real_gt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (parsed? def-decl "bool" language nil))
    nil)) (subst_TCC5 0
           (subst_TCC5-1 nil 3583528800 ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (prekeyword type-decl nil language nil)
             (parsed? def-decl "bool" language nil)
             (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
             (preterm type-eq-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (subst_TCC6 0
   (subst_TCC6-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (prekeyword type-decl nil language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (preterm type-eq-decl nil language nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (parsed? def-decl "bool" language nil))
    nil)) (subst_TCC7 0
           (subst_TCC7-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((shift_preterm formula-decl nil subst nil)) nil))
  (subst_TCC8 0
   (subst_TCC8-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (prekeyword type-decl nil language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (preterm type-eq-decl nil language nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (↑ def-decl "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
      subst nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (parsed? def-decl "bool" language nil)
     (shift_preterm formula-decl nil subst nil))
    nil)) (subst_TCC9 0
           (subst_TCC9-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((shift_preterm formula-decl nil subst nil)) nil))
  (subst_TCC10 0
   (subst_TCC10-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (prekeyword type-decl nil language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (preterm type-eq-decl nil language nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (↑ def-decl "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
      subst nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (parsed? def-decl "bool" language nil)
     (shift_preterm formula-decl nil subst nil))
    nil)) (subst_TCC11 0
           (subst_TCC11-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((shift_preterm formula-decl nil subst nil)) nil))
  (subst_TCC12 0
   (subst_TCC12-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (prekeyword type-decl nil language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (preterm type-eq-decl nil language nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (↑ def-decl "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
      subst nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (parsed? def-decl "bool" language nil)
     (shift_preterm formula-decl nil subst nil))
    nil)) (subst_TCC13 0
           (subst_TCC13-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (prekeyword type-decl nil language nil)
             (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
             (preterm type-eq-decl nil language nil)
             (pred type-eq-decl nil defined_types nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
             (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PREINTERP adt-constructor-decl "(PREINTERP?)" language
              nil)
             (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language
              nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (parsed? def-decl "bool" language nil))
            nil))
  (subst_TCC14 0
   (subst_TCC14-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((shift_preterm formula-decl nil subst nil)) nil)) (subst_TCC15
                                                        0
                                                        (subst_TCC15-1
                                                         nil
                                                         3583528800
                                                         (""
                                                          (subtype-tcc)
                                                          nil
                                                          nil)
                                                         ((boolean
                                                           nonempty-type-decl
                                                           nil
                                                           booleans
                                                           nil)
                                                          (bool
                                                           nonempty-type-eq-decl
                                                           nil
                                                           booleans
                                                           nil)
                                                          (NOT
                                                           const-decl
                                                           "[bool -> bool]"
                                                           booleans
                                                           nil)
                                                          (syntaxic
                                                           type-decl
                                                           nil
                                                           language
                                                           nil)
                                                          (number
                                                           nonempty-type-decl
                                                           nil
                                                           numbers
                                                           nil)
                                                          (number_field_pred
                                                           const-decl
                                                           "[number -> boolean]"
                                                           number_fields
                                                           nil)
                                                          (number_field
                                                           nonempty-type-from-decl
                                                           nil
                                                           number_fields
                                                           nil)
                                                          (real_pred
                                                           const-decl
                                                           "[number_field -> boolean]"
                                                           reals
                                                           nil)
                                                          (real
                                                           nonempty-type-from-decl
                                                           nil
                                                           reals
                                                           nil)
                                                          (rational_pred
                                                           const-decl
                                                           "[real -> boolean]"
                                                           rationals
                                                           nil)
                                                          (rational
                                                           nonempty-type-from-decl
                                                           nil
                                                           rationals
                                                           nil)
                                                          (integer_pred
                                                           const-decl
                                                           "[rational -> boolean]"
                                                           integers
                                                           nil)
                                                          (int
                                                           nonempty-type-eq-decl
                                                           nil
                                                           integers
                                                           nil)
                                                          (>=
                                                           const-decl
                                                           "bool"
                                                           reals
                                                           nil)
                                                          (nat
                                                           nonempty-type-eq-decl
                                                           nil
                                                           naturalnumbers
                                                           nil)
                                                          (prekeyword
                                                           type-decl
                                                           nil
                                                           language
                                                           nil)
                                                          (PRETERM?
                                                           adt-recognizer-decl
                                                           "[prekeyword -> boolean]"
                                                           language
                                                           nil)
                                                          (PRETERM
                                                           adt-constructor-decl
                                                           "(PRETERM?)"
                                                           language
                                                           nil)
                                                          (preterm
                                                           type-eq-decl
                                                           nil
                                                           language
                                                           nil)
                                                          (pred
                                                           type-eq-decl
                                                           nil
                                                           defined_types
                                                           nil)
                                                          (strict_well_founded?
                                                           const-decl
                                                           "bool"
                                                           orders
                                                           nil)
                                                          (<<
                                                           adt-def-decl
                                                           "(strict_well_founded?[syntaxic])"
                                                           language
                                                           nil)
                                                          (AND
                                                           const-decl
                                                           "[bool, bool -> bool]"
                                                           booleans
                                                           nil)
                                                          (IMPLIES
                                                           const-decl
                                                           "[bool, bool -> bool]"
                                                           booleans
                                                           nil)
                                                          (PRETYPE?
                                                           adt-recognizer-decl
                                                           "[prekeyword -> boolean]"
                                                           language
                                                           nil)
                                                          (PRETYPE
                                                           adt-constructor-decl
                                                           "(PRETYPE?)"
                                                           language
                                                           nil)
                                                          (PREINTERP?
                                                           adt-recognizer-decl
                                                           "[prekeyword -> boolean]"
                                                           language
                                                           nil)
                                                          (PREINTERP
                                                           adt-constructor-decl
                                                           "(PREINTERP?)"
                                                           language
                                                           nil)
                                                          (PRECONTEXT?
                                                           adt-recognizer-decl
                                                           "[prekeyword -> boolean]"
                                                           language
                                                           nil)
                                                          (PRECONTEXT
                                                           adt-constructor-decl
                                                           "(PRECONTEXT?)"
                                                           language
                                                           nil)
                                                          (↑
                                                           def-decl
                                                           "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
                                                           subst
                                                           nil)
                                                          (+
                                                           const-decl
                                                           "[numfield, numfield -> numfield]"
                                                           number_fields
                                                           nil)
                                                          (numfield
                                                           nonempty-type-eq-decl
                                                           nil
                                                           number_fields
                                                           nil)
                                                          (posint_plus_nnint_is_posint
                                                           application-judgement
                                                           "posint"
                                                           integers
                                                           nil)
                                                          (real_ge_is_total_order
                                                           name-judgement
                                                           "(total_order?[real])"
                                                           real_props
                                                           nil)
                                                          (parsed?
                                                           def-decl
                                                           "bool"
                                                           language
                                                           nil)
                                                          (shift_preterm
                                                           formula-decl
                                                           nil
                                                           subst
                                                           nil))
                                                         nil))
  (subst_TCC16 0
   (subst_TCC16-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (prekeyword type-decl nil language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (preterm type-eq-decl nil language nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (parsed? def-decl "bool" language nil))
    nil)) (subst_TCC17 0
           (subst_TCC17-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (prekeyword type-decl nil language nil)
             (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
             (preterm type-eq-decl nil language nil)
             (pred type-eq-decl nil defined_types nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
             (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PREINTERP adt-constructor-decl "(PREINTERP?)" language
              nil)
             (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language
              nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (parsed? def-decl "bool" language nil))
            nil))
  (subst_TCC18 0
   (subst_TCC18-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (prekeyword type-decl nil language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (preterm type-eq-decl nil language nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (parsed? def-decl "bool" language nil))
    nil)) (subst_TCC19 0
           (subst_TCC19-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (prekeyword type-decl nil language nil)
             (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
             (preterm type-eq-decl nil language nil)
             (pred type-eq-decl nil defined_types nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
             (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PREINTERP adt-constructor-decl "(PREINTERP?)" language
              nil)
             (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language
              nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (parsed? def-decl "bool" language nil))
            nil))
  (subst_TCC20 0
   (subst_TCC20-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (prekeyword type-decl nil language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (preterm type-eq-decl nil language nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (parsed? def-decl "bool" language nil))
    nil)) (subst_TCC21 0
           (subst_TCC21-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((shift_preterm formula-decl nil subst nil)) nil))
  (subst_TCC22 0
   (subst_TCC22-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (prekeyword type-decl nil language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (preterm type-eq-decl nil language nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (↑ def-decl "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
      subst nil)
     (length def-decl "nat" language nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (parsed? def-decl "bool" language nil)
     (shift_preterm formula-decl nil subst nil))
    nil)) (subst_TCC23 0
           (subst_TCC23-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((shift_preterm formula-decl nil subst nil)) nil))
  (subst_TCC24 0
   (subst_TCC24-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (prekeyword type-decl nil language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (preterm type-eq-decl nil language nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (↑ def-decl "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
      subst nil)
     (length def-decl "nat" language nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (parsed? def-decl "bool" language nil)
     (shift_preterm formula-decl nil subst nil))
    nil)) (subst_TCC25 0
           (subst_TCC25-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((shift_preterm formula-decl nil subst nil)) nil))
  (subst_TCC26 0
   (subst_TCC26-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (prekeyword type-decl nil language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (preterm type-eq-decl nil language nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (↑ def-decl "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
      subst nil)
     (length def-decl "nat" language nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (parsed? def-decl "bool" language nil)
     (shift_preterm formula-decl nil subst nil))
    nil)) (subst_TCC27 0
           (subst_TCC27-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((shift_preterm formula-decl nil subst nil)) nil))
  (subst_TCC28 0
   (subst_TCC28-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (prekeyword type-decl nil language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (preterm type-eq-decl nil language nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (↑ def-decl "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
      subst nil)
     (length def-decl "nat" language nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (parsed? def-decl "bool" language nil)
     (shift_preterm formula-decl nil subst nil))
    nil)) (subst_TCC29 0
           (subst_TCC29-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((shift_preterm formula-decl nil subst nil)) nil))
  (subst_TCC30 0
   (subst_TCC30-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (prekeyword type-decl nil language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (preterm type-eq-decl nil language nil)
     (pred type-eq-decl nil defined_types nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (↑ def-decl "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
      subst nil)
     (length def-decl "nat" language nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (parsed? def-decl "bool" language nil)
     (shift_preterm formula-decl nil subst nil))
    nil)) (subst_TCC31 0
           (subst_TCC31-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (prekeyword type-decl nil language nil)
             (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
             (preterm type-eq-decl nil language nil)
             (pred type-eq-decl nil defined_types nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
             (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PREINTERP adt-constructor-decl "(PREINTERP?)" language
              nil)
             (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
              language nil)
             (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language
              nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (parsed? def-decl "bool" language nil))
            nil))
  (subst_TCC32 0
   (subst_TCC32-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((shift_preterm formula-decl nil subst nil)) nil)) (subst_TCC33
                                                        0
                                                        (subst_TCC33-1
                                                         nil
                                                         3583528800
                                                         (""
                                                          (subtype-tcc)
                                                          nil
                                                          nil)
                                                         ((boolean
                                                           nonempty-type-decl
                                                           nil
                                                           booleans
                                                           nil)
                                                          (bool
                                                           nonempty-type-eq-decl
                                                           nil
                                                           booleans
                                                           nil)
                                                          (NOT
                                                           const-decl
                                                           "[bool -> bool]"
                                                           booleans
                                                           nil)
                                                          (syntaxic
                                                           type-decl
                                                           nil
                                                           language
                                                           nil)
                                                          (number
                                                           nonempty-type-decl
                                                           nil
                                                           numbers
                                                           nil)
                                                          (number_field_pred
                                                           const-decl
                                                           "[number -> boolean]"
                                                           number_fields
                                                           nil)
                                                          (number_field
                                                           nonempty-type-from-decl
                                                           nil
                                                           number_fields
                                                           nil)
                                                          (real_pred
                                                           const-decl
                                                           "[number_field -> boolean]"
                                                           reals
                                                           nil)
                                                          (real
                                                           nonempty-type-from-decl
                                                           nil
                                                           reals
                                                           nil)
                                                          (rational_pred
                                                           const-decl
                                                           "[real -> boolean]"
                                                           rationals
                                                           nil)
                                                          (rational
                                                           nonempty-type-from-decl
                                                           nil
                                                           rationals
                                                           nil)
                                                          (integer_pred
                                                           const-decl
                                                           "[rational -> boolean]"
                                                           integers
                                                           nil)
                                                          (int
                                                           nonempty-type-eq-decl
                                                           nil
                                                           integers
                                                           nil)
                                                          (>=
                                                           const-decl
                                                           "bool"
                                                           reals
                                                           nil)
                                                          (nat
                                                           nonempty-type-eq-decl
                                                           nil
                                                           naturalnumbers
                                                           nil)
                                                          (prekeyword
                                                           type-decl
                                                           nil
                                                           language
                                                           nil)
                                                          (PRETERM?
                                                           adt-recognizer-decl
                                                           "[prekeyword -> boolean]"
                                                           language
                                                           nil)
                                                          (PRETERM
                                                           adt-constructor-decl
                                                           "(PRETERM?)"
                                                           language
                                                           nil)
                                                          (preterm
                                                           type-eq-decl
                                                           nil
                                                           language
                                                           nil)
                                                          (pred
                                                           type-eq-decl
                                                           nil
                                                           defined_types
                                                           nil)
                                                          (strict_well_founded?
                                                           const-decl
                                                           "bool"
                                                           orders
                                                           nil)
                                                          (<<
                                                           adt-def-decl
                                                           "(strict_well_founded?[syntaxic])"
                                                           language
                                                           nil)
                                                          (AND
                                                           const-decl
                                                           "[bool, bool -> bool]"
                                                           booleans
                                                           nil)
                                                          (IMPLIES
                                                           const-decl
                                                           "[bool, bool -> bool]"
                                                           booleans
                                                           nil)
                                                          (PRETYPE?
                                                           adt-recognizer-decl
                                                           "[prekeyword -> boolean]"
                                                           language
                                                           nil)
                                                          (PRETYPE
                                                           adt-constructor-decl
                                                           "(PRETYPE?)"
                                                           language
                                                           nil)
                                                          (PREINTERP?
                                                           adt-recognizer-decl
                                                           "[prekeyword -> boolean]"
                                                           language
                                                           nil)
                                                          (PREINTERP
                                                           adt-constructor-decl
                                                           "(PREINTERP?)"
                                                           language
                                                           nil)
                                                          (PRECONTEXT?
                                                           adt-recognizer-decl
                                                           "[prekeyword -> boolean]"
                                                           language
                                                           nil)
                                                          (PRECONTEXT
                                                           adt-constructor-decl
                                                           "(PRECONTEXT?)"
                                                           language
                                                           nil)
                                                          (↑
                                                           def-decl
                                                           "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
                                                           subst
                                                           nil)
                                                          (length
                                                           def-decl
                                                           "nat"
                                                           language
                                                           nil)
                                                          (+
                                                           const-decl
                                                           "[numfield, numfield -> numfield]"
                                                           number_fields
                                                           nil)
                                                          (numfield
                                                           nonempty-type-eq-decl
                                                           nil
                                                           number_fields
                                                           nil)
                                                          (nnint_plus_nnint_is_nnint
                                                           application-judgement
                                                           "nonneg_int"
                                                           integers
                                                           nil)
                                                          (real_ge_is_total_order
                                                           name-judgement
                                                           "(total_order?[real])"
                                                           real_props
                                                           nil)
                                                          (parsed?
                                                           def-decl
                                                           "bool"
                                                           language
                                                           nil)
                                                          (shift_preterm
                                                           formula-decl
                                                           nil
                                                           subst
                                                           nil))
                                                         nil))
  (subst_TCC34 0
   (subst_TCC34-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((shift_preterm formula-decl nil subst nil)) nil)) (subst_TCC35
                                                        0
                                                        (subst_TCC35-1
                                                         nil
                                                         3583528800
                                                         (""
                                                          (subtype-tcc)
                                                          nil
                                                          nil)
                                                         ((boolean
                                                           nonempty-type-decl
                                                           nil
                                                           booleans
                                                           nil)
                                                          (bool
                                                           nonempty-type-eq-decl
                                                           nil
                                                           booleans
                                                           nil)
                                                          (NOT
                                                           const-decl
                                                           "[bool -> bool]"
                                                           booleans
                                                           nil)
                                                          (syntaxic
                                                           type-decl
                                                           nil
                                                           language
                                                           nil)
                                                          (number
                                                           nonempty-type-decl
                                                           nil
                                                           numbers
                                                           nil)
                                                          (number_field_pred
                                                           const-decl
                                                           "[number -> boolean]"
                                                           number_fields
                                                           nil)
                                                          (number_field
                                                           nonempty-type-from-decl
                                                           nil
                                                           number_fields
                                                           nil)
                                                          (real_pred
                                                           const-decl
                                                           "[number_field -> boolean]"
                                                           reals
                                                           nil)
                                                          (real
                                                           nonempty-type-from-decl
                                                           nil
                                                           reals
                                                           nil)
                                                          (rational_pred
                                                           const-decl
                                                           "[real -> boolean]"
                                                           rationals
                                                           nil)
                                                          (rational
                                                           nonempty-type-from-decl
                                                           nil
                                                           rationals
                                                           nil)
                                                          (integer_pred
                                                           const-decl
                                                           "[rational -> boolean]"
                                                           integers
                                                           nil)
                                                          (int
                                                           nonempty-type-eq-decl
                                                           nil
                                                           integers
                                                           nil)
                                                          (>=
                                                           const-decl
                                                           "bool"
                                                           reals
                                                           nil)
                                                          (nat
                                                           nonempty-type-eq-decl
                                                           nil
                                                           naturalnumbers
                                                           nil)
                                                          (prekeyword
                                                           type-decl
                                                           nil
                                                           language
                                                           nil)
                                                          (PRETERM?
                                                           adt-recognizer-decl
                                                           "[prekeyword -> boolean]"
                                                           language
                                                           nil)
                                                          (PRETERM
                                                           adt-constructor-decl
                                                           "(PRETERM?)"
                                                           language
                                                           nil)
                                                          (preterm
                                                           type-eq-decl
                                                           nil
                                                           language
                                                           nil)
                                                          (pred
                                                           type-eq-decl
                                                           nil
                                                           defined_types
                                                           nil)
                                                          (strict_well_founded?
                                                           const-decl
                                                           "bool"
                                                           orders
                                                           nil)
                                                          (<<
                                                           adt-def-decl
                                                           "(strict_well_founded?[syntaxic])"
                                                           language
                                                           nil)
                                                          (AND
                                                           const-decl
                                                           "[bool, bool -> bool]"
                                                           booleans
                                                           nil)
                                                          (IMPLIES
                                                           const-decl
                                                           "[bool, bool -> bool]"
                                                           booleans
                                                           nil)
                                                          (PRETYPE?
                                                           adt-recognizer-decl
                                                           "[prekeyword -> boolean]"
                                                           language
                                                           nil)
                                                          (PRETYPE
                                                           adt-constructor-decl
                                                           "(PRETYPE?)"
                                                           language
                                                           nil)
                                                          (PREINTERP?
                                                           adt-recognizer-decl
                                                           "[prekeyword -> boolean]"
                                                           language
                                                           nil)
                                                          (PREINTERP
                                                           adt-constructor-decl
                                                           "(PREINTERP?)"
                                                           language
                                                           nil)
                                                          (PRECONTEXT?
                                                           adt-recognizer-decl
                                                           "[prekeyword -> boolean]"
                                                           language
                                                           nil)
                                                          (PRECONTEXT
                                                           adt-constructor-decl
                                                           "(PRECONTEXT?)"
                                                           language
                                                           nil)
                                                          (↑
                                                           def-decl
                                                           "{R |
         (parsed?(S)(PRETYPE) IMPLIES parsed?(R)(PRETYPE)) AND
          (parsed?(S)(PRETERM) IMPLIES parsed?(R)(PRETERM)) AND
           (parsed?(S)(PREINTERP) IMPLIES parsed?(R)(PREINTERP)) AND
            (parsed?(S)(PRECONTEXT) IMPLIES parsed?(R)(PRECONTEXT))}"
                                                           subst
                                                           nil)
                                                          (length
                                                           def-decl
                                                           "nat"
                                                           language
                                                           nil)
                                                          (+
                                                           const-decl
                                                           "[numfield, numfield -> numfield]"
                                                           number_fields
                                                           nil)
                                                          (numfield
                                                           nonempty-type-eq-decl
                                                           nil
                                                           number_fields
                                                           nil)
                                                          (nnint_plus_nnint_is_nnint
                                                           application-judgement
                                                           "nonneg_int"
                                                           integers
                                                           nil)
                                                          (real_ge_is_total_order
                                                           name-judgement
                                                           "(total_order?[real])"
                                                           real_props
                                                           nil)
                                                          (parsed?
                                                           def-decl
                                                           "bool"
                                                           language
                                                           nil)
                                                          (shift_preterm
                                                           formula-decl
                                                           nil
                                                           subst
                                                           nil))
                                                         nil))
  (subst_size 0
   (subst_size-1 nil 3583528800 ("" (judgement-tcc) nil nil) nil nil)))

