(subst
   (type_size_TCC1 0
    (type_size_TCC1-1 nil 3583692485 ("" (termination-tcc) nil nil)
     ((boolean nonempty-type-decl nil booleans nil)
      (bool nonempty-type-eq-decl nil booleans nil)
      (NOT const-decl "[bool -> bool]" booleans nil)
      (syntaxic type-decl nil language nil)
      (sexpr? adt-def-decl "boolean" language nil)
      (<< adt-def-decl "(strict_well_founded?[syntaxic])" language
       nil))
     nil))
   (type_size_TCC2 0
    (type_size_TCC2-1 nil 3583692485 ("" (termination-tcc) nil nil)
     ((boolean nonempty-type-decl nil booleans nil)
      (bool nonempty-type-eq-decl nil booleans nil)
      (NOT const-decl "[bool -> bool]" booleans nil)
      (syntaxic type-decl nil language nil)
      (sexpr? adt-def-decl "boolean" language nil)
      (<< adt-def-decl "(strict_well_founded?[syntaxic])" language
       nil))
     nil))
   (type_size_TCC3 0
    (type_size_TCC3-1 nil 3583692485 ("" (termination-tcc) nil nil)
     ((boolean nonempty-type-decl nil booleans nil)
      (bool nonempty-type-eq-decl nil booleans nil)
      (NOT const-decl "[bool -> bool]" booleans nil)
      (syntaxic type-decl nil language nil)
      (sexpr? adt-def-decl "boolean" language nil)
      (<< adt-def-decl "(strict_well_founded?[syntaxic])" language
       nil))
     nil))
  (type_size_TCC4 0
   (type_size_TCC4-1 nil 3583692485 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (type_size_TCC5 0
           (type_size_TCC5-1 nil 3583692485
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC1 0
   (uparrow_TCC1-1 nil 3583528800 ("" (grind) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (sdecl? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (scontext? adt-def-decl "boolean" language nil))
    nil)) (uparrow_TCC2 0
           (uparrow_TCC2-1 nil 3583528800
            ("" (grind :rewrites sexpr?) nil nil)
            ((scontext? adt-def-decl "boolean" language nil)
             (sinterp? adt-def-decl "boolean" language nil)
             (sdecl? adt-def-decl "boolean" language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (int nonempty-type-eq-decl nil integers nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (>= const-decl "bool" reals nil)
             (real nonempty-type-from-decl nil reals nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number nonempty-type-decl nil numbers nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (boolean nonempty-type-decl nil booleans nil))
            nil))
  (uparrow_TCC3 0
   (uparrow_TCC3-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC4 0
           (uparrow_TCC4-1 nil 3583528800 ("" (grind) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (sinterp? adt-def-decl "boolean" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC5 0
   (uparrow_TCC5-1 nil 3583528800 ("" (grind :rewrites sexpr?) nil nil)
    ((scontext? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (sdecl? adt-def-decl "boolean" language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (syntaxic type-decl nil language nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    nil)) (uparrow_TCC6 0
           (uparrow_TCC6-1 nil 3583528800 ("" (grind) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC7 0
   (uparrow_TCC7-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC8 0
           (uparrow_TCC8-1 nil 3583528800
            ("" (grind :rewrites sexpr?) nil nil)
            ((scontext? adt-def-decl "boolean" language nil)
             (sinterp? adt-def-decl "boolean" language nil)
             (sdecl? adt-def-decl "boolean" language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (pred type-eq-decl nil defined_types nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (>= const-decl "bool" reals nil)
             (int nonempty-type-eq-decl nil integers nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (real nonempty-type-from-decl nil reals nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number nonempty-type-decl nil numbers nil)
             (syntaxic type-decl nil language nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (boolean nonempty-type-decl nil booleans nil))
            nil))
  (uparrow_TCC9 0
   (uparrow_TCC9-1 nil 3583528800 ("" (grind) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC10 0
           (uparrow_TCC10-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC11 0
   (uparrow_TCC11-1 nil 3583528800
    ("" (grind :rewrites sexpr?) nil nil)
    ((scontext? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (sdecl? adt-def-decl "boolean" language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (syntaxic type-decl nil language nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    nil)) (uparrow_TCC12 0
           (uparrow_TCC12-1 nil 3583528800 ("" (grind) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC13 0
   (uparrow_TCC13-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC14 0
           (uparrow_TCC14-1 nil 3583528800
            ("" (grind :rewrites sexpr?) nil nil)
            ((scontext? adt-def-decl "boolean" language nil)
             (sinterp? adt-def-decl "boolean" language nil)
             (sdecl? adt-def-decl "boolean" language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (pred type-eq-decl nil defined_types nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (>= const-decl "bool" reals nil)
             (int nonempty-type-eq-decl nil integers nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (real nonempty-type-from-decl nil reals nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number nonempty-type-decl nil numbers nil)
             (syntaxic type-decl nil language nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (boolean nonempty-type-decl nil booleans nil))
            nil))
  (uparrow_TCC15 0
   (uparrow_TCC15-1 nil 3583528800 ("" (grind) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC16 0
           (uparrow_TCC16-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC17 0
   (uparrow_TCC17-1 nil 3583528800
    ("" (grind :rewrites sexpr?) nil nil)
    ((scontext? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (sdecl? adt-def-decl "boolean" language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (syntaxic type-decl nil language nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    nil)) (uparrow_TCC18 0
           (uparrow_TCC18-1 nil 3583528800 ("" (grind) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC19 0
   (uparrow_TCC19-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC20 0
           (uparrow_TCC20-1 nil 3583528800
            ("" (grind :rewrites sexpr?) nil nil)
            ((scontext? adt-def-decl "boolean" language nil)
             (sinterp? adt-def-decl "boolean" language nil)
             (sdecl? adt-def-decl "boolean" language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (pred type-eq-decl nil defined_types nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (>= const-decl "bool" reals nil)
             (int nonempty-type-eq-decl nil integers nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (real nonempty-type-from-decl nil reals nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number nonempty-type-decl nil numbers nil)
             (syntaxic type-decl nil language nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (boolean nonempty-type-decl nil booleans nil))
            nil))
  (uparrow_TCC21 0
   (uparrow_TCC21-1 nil 3583528800 ("" (grind) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC22 0
           (uparrow_TCC22-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC23 0
   (uparrow_TCC23-1 nil 3583528800
    ("" (grind :rewrites sexpr?) nil nil)
    ((scontext? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (sdecl? adt-def-decl "boolean" language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (syntaxic type-decl nil language nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    nil)) (uparrow_TCC24 0
           (uparrow_TCC24-1 nil 3583686669
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC25 0
   (uparrow_TCC25-1 nil 3583686669
    ("" (grind :rewrites sexpr?) nil nil)
    ((scontext? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (sdecl? adt-def-decl "boolean" language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (syntaxic type-decl nil language nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    nil)) (uparrow_TCC26 0
           (uparrow_TCC26-1 nil 3583686669
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC27 0
   (uparrow_TCC27-1 nil 3583686669
    ("" (grind :rewrites sexpr?) nil nil)
    ((scontext? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (sdecl? adt-def-decl "boolean" language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (syntaxic type-decl nil language nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    nil)) (uparrow_TCC28 0
           (uparrow_TCC28-1 nil 3583686669
            ("" (termination-tcc) nil nil)
            ((sdecl? adt-def-decl "boolean" language nil)
             (sinterp? adt-def-decl "boolean" language nil)
             (scontext? adt-def-decl "boolean" language nil))
            nil))
  (uparrow_TCC29 0
   (uparrow_TCC29-1 nil 3583694874
    ("" (skosimp* :preds? t) (("" (grind) nil nil)) nil)
    ((scontext? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (sdecl? adt-def-decl "boolean" language nil))
    nil)) (uparrow_TCC30 0
           (uparrow_TCC30-1 nil 3583694874
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC31 0
   (uparrow_TCC31-1 nil 3583694874
    ("" (grind :rewrites sexpr?) nil nil)
    ((scontext? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (sdecl? adt-def-decl "boolean" language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (syntaxic type-decl nil language nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    nil)) (uparrow_TCC32 0
           (uparrow_TCC32-1 nil 3583694874
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC33 0
   (uparrow_TCC33-1 nil 3583694874
    ("" (grind :rewrites sexpr?) nil nil)
    ((scontext? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (sdecl? adt-def-decl "boolean" language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (syntaxic type-decl nil language nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    nil)) (uparrow_TCC34 0
           (uparrow_TCC34-1 nil 3583694874 ("" (grind) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC35 0
   (uparrow_TCC35-1 nil 3583694874
    ("" (grind :rewrites sexpr?) nil nil)
    ((scontext? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (sdecl? adt-def-decl "boolean" language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (syntaxic type-decl nil language nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    nil)) (uparrow_TCC36 0
           (uparrow_TCC36-1 nil 3583694874 ("" (grind) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC37 0
   (uparrow_TCC37-1 nil 3583694874
    ("" (grind :rewrites sexpr?) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (syntaxic type-decl nil language nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    nil)) (uparrow_TCC38 0
           (uparrow_TCC38-1 nil 3583694874
            ("" (grind :rewrites sexpr?) nil nil)
            ((scontext? adt-def-decl "boolean" language nil)
             (sinterp? adt-def-decl "boolean" language nil)
             (sdecl? adt-def-decl "boolean" language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (pred type-eq-decl nil defined_types nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (>= const-decl "bool" reals nil)
             (int nonempty-type-eq-decl nil integers nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (real nonempty-type-from-decl nil reals nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number nonempty-type-decl nil numbers nil)
             (syntaxic type-decl nil language nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (boolean nonempty-type-decl nil booleans nil))
            nil))
  (uparrow_TCC39 0
   (uparrow_TCC39-1 nil 3583694874 ("" (grind) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (scontext? adt-def-decl "boolean" language nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC40 0
           (uparrow_TCC40-1 nil 3583694874
            ("" (grind :rewrites sexpr?) nil nil)
            ((scontext? adt-def-decl "boolean" language nil)
             (sinterp? adt-def-decl "boolean" language nil)
             (sdecl? adt-def-decl "boolean" language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (pred type-eq-decl nil defined_types nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (>= const-decl "bool" reals nil)
             (int nonempty-type-eq-decl nil integers nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (real nonempty-type-from-decl nil reals nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number nonempty-type-decl nil numbers nil)
             (syntaxic type-decl nil language nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (boolean nonempty-type-decl nil booleans nil))
            nil))
  (uparrow_TCC41 0
   (uparrow_TCC41-1 nil 3583694874 ("" (termination-tcc) nil nil)
    ((int_plus_int_is_int application-judgement "int" integers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (finseq type-eq-decl nil finite_sequences nil)
     (sdecl? adt-def-decl "boolean" language nil)
     (syntaxic type-decl nil language nil)
     (below type-eq-decl nil nat_types nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (< const-decl "bool" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (int_minus_int_is_int application-judgement "int" integers nil))
    nil)) (uparrow_TCC42 0
           (uparrow_TCC42-1 nil 3583694874
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (subterm adt-def-decl "boolean" language nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (finseq type-eq-decl nil finite_sequences nil)
             (sdecl? adt-def-decl "boolean" language nil)
             (syntaxic type-decl nil language nil)
             (below type-eq-decl nil nat_types nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (>= const-decl "bool" reals nil)
             (int nonempty-type-eq-decl nil integers nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (< const-decl "bool" reals nil)
             (real nonempty-type-from-decl nil reals nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number nonempty-type-decl nil numbers nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (boolean nonempty-type-decl nil booleans nil)
             (finseq_appl const-decl "[below[length(fs)] -> T]"
                          finite_sequences nil))
            nil))
  (uparrow_TCC43 0
   (uparrow_TCC43-1 nil 3583694874
    ("" (grind :rewrites sexpr?) nil nil)
    ((int_minus_int_is_int application-judgement "int" integers nil)
     (scontext? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (sdecl? adt-def-decl "boolean" language nil)
     (finseq_appl const-decl "[below[length(fs)] -> T]"
                  finite_sequences nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (syntaxic type-decl nil language nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    nil)) (uparrow_TCC44 0
           (uparrow_TCC44-1 nil 3583694874
            ("" (termination-tcc) nil nil)
            ((sdecl? adt-def-decl "boolean" language nil)
             (sinterp? adt-def-decl "boolean" language nil)
             (scontext? adt-def-decl "boolean" language nil))
            nil))
  (uparrow_TCC45 0
   (uparrow_TCC45-1 nil 3583694874 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC46 0
           (uparrow_TCC46-1 nil 3583694874 ("" (grind) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (sinterp? adt-def-decl "boolean" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC47 0
   (uparrow_TCC47-1 nil 3583764323
    ("" (grind :rewrites sexpr?) nil nil)
    ((scontext? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (sdecl? adt-def-decl "boolean" language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (strict_well_founded? const-decl "bool" orders nil)
     (pred type-eq-decl nil defined_types nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (syntaxic type-decl nil language nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil))
    nil)) (uparrow_TCC48 0
           (uparrow_TCC48-1 nil 3583764323
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (sinterp? adt-def-decl "boolean" language nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC49 0
   (uparrow_TCC49-1 nil 3583764323 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC50 0
           (uparrow_TCC50-1 nil 3583764323
            ("" (grind :rewrites sexpr?) nil nil)
            ((scontext? adt-def-decl "boolean" language nil)
             (sinterp? adt-def-decl "boolean" language nil)
             (sdecl? adt-def-decl "boolean" language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil)
             (strict_well_founded? const-decl "bool" orders nil)
             (pred type-eq-decl nil defined_types nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (>= const-decl "bool" reals nil)
             (int nonempty-type-eq-decl nil integers nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (real nonempty-type-from-decl nil reals nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number nonempty-type-decl nil numbers nil)
             (syntaxic type-decl nil language nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (boolean nonempty-type-decl nil booleans nil))
            nil))
  (shift_zero 0
   (shift_zero-1 nil 3583529098
    ("" (induct U)
     (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
      ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
      ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
      ("10" (grind) nil nil) ("11" (grind) nil nil)
      ("12" (grind) nil nil) ("13" (grind) nil nil)
      ("14" (grind) nil nil) ("15" (grind) nil nil)
      ("16" (grind) nil nil) ("17" (grind) nil nil)
      ("18" (grind) nil nil) ("19" (grind) nil nil)
      ("20" (grind) nil nil)
      ("21" (skosimp* :preds? t)
       (("21" (assert)
         (("21" (decompose-equality 1)
           (("21" (decompose-equality 1)
             (("21" (decompose-equality 1)
               (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
             nil))
           nil))
         nil))
       nil))
     nil)
    ((int_plus_int_is_int application-judgement "int" integers nil)
     (below type-eq-decl nil nat_types nil)
     (finseq type-eq-decl nil finite_sequences nil)
     (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
          nil)
     (< const-decl "bool" reals nil)
     (- const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (syntaxic_map_extensionality formula-decl nil language nil)
     (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
     (map1_var!1 skolem-const-decl "finseq[(sdecl?)]" subst nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (n!1 skolem-const-decl "nat" subst nil)
     (finseq_appl const-decl "[below[length(fs)] -> T]"
                  finite_sequences nil)
     (int_minus_int_is_int application-judgement "int" integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic_induction formula-decl nil language nil)
     (↑ def-decl "{V |
         (sexpr?(U) IMPLIES sexpr?(V)) AND
          (sdecl?(U) IMPLIES sdecl?(V)) AND
           (sinterp?(U) IMPLIES sinterp?(V)) AND
            (scontext?(U) IMPLIES scontext?(V))}" subst nil)
     (scontext? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (sdecl? adt-def-decl "boolean" language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (boolean nonempty-type-decl nil booleans nil)
     (syntaxic type-decl nil language nil))
    shostak)) (length_shift_TCC1 0
               (length_shift_TCC1-1 nil 3583588165
                ("" (subtype-tcc) nil nil)
                ((boolean nonempty-type-decl nil booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (syntaxic type-decl nil language nil)
                 (scontext? adt-def-decl "boolean" language nil)
                 (↑ def-decl "{V |
         (sexpr?(U) IMPLIES sexpr?(V)) AND
          (sdecl?(U) IMPLIES sdecl?(V)) AND
           (sinterp?(U) IMPLIES sinterp?(V)) AND
            (scontext?(U) IMPLIES scontext?(V))}" subst nil)
                 (finseq_appl const-decl "[below[length(fs)] -> T]"
                              finite_sequences nil))
                nil))
  (length_shift_TCC2 0
   (length_shift_TCC2-1 nil 3583609445 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (scontext? adt-def-decl "boolean" language nil))
    nil)) (length_shift 0
           (length_shift-1 nil 3583530058
            ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
            ((↑ def-decl "{V |
         (sexpr?(U) IMPLIES sexpr?(V)) AND
          (sdecl?(U) IMPLIES sdecl?(V)) AND
           (sinterp?(U) IMPLIES sinterp?(V)) AND
            (scontext?(U) IMPLIES scontext?(V))}" subst nil)
             (boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (scontext? adt-def-decl "boolean" language nil))
            shostak))
  (shift_plus 0
   (shift_plus-1 nil 3583529119
    ("" (induct U)
     (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
      ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
      ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
      ("10" (grind) nil nil) ("11" (grind) nil nil)
      ("12" (grind) nil nil) ("13" (grind) nil nil)
      ("14" (grind) nil nil) ("15" (grind) nil nil)
      ("16" (grind) nil nil) ("17" (grind) nil nil)
      ("18" (grind) nil nil) ("19" (grind) nil nil)
      ("20" (grind) nil nil)
      ("21" (skosimp* :preds? t)
       (("21" (assert)
         (("21" (decompose-equality 1)
           (("21" (decompose-equality 1)
             (("21" (decompose-equality 1)
               (("1" (grind) nil nil)
                ("2" (skosimp* :preds? t)
                 (("2" (assert)
                   (("2" (expand finseq_appl)
                     (("2" (inst - x!1)
                       (("2"
                         (inst - i!1 j!1
                          "map1_var!1`length - 1 - x!1 + n!1")
                         (("2" (grind-with-ext)
                           (("2" (grind :rewrites sexpr?) nil nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil))
       nil))
     nil)
    ((int_plus_int_is_int application-judgement "int" integers nil)
     (- const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (< const-decl "bool" reals nil)
     (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
          nil)
     (finseq type-eq-decl nil finite_sequences nil)
     (below type-eq-decl nil nat_types nil)
     (syntaxic_map_extensionality formula-decl nil language nil)
     (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
     (map1_var!1 skolem-const-decl "finseq[(sdecl?)]" subst nil)
     (i!1 skolem-const-decl "nat" subst nil)
     (n!1 skolem-const-decl "nat" subst nil)
     (j!1 skolem-const-decl "nat" subst nil)
     (finseq_appl const-decl "[below[length(fs)] -> T]"
                  finite_sequences nil)
     (int_minus_int_is_int application-judgement "int" integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (syntaxic_induction formula-decl nil language nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (↑ def-decl "{V |
         (sexpr?(U) IMPLIES sexpr?(V)) AND
          (sdecl?(U) IMPLIES sdecl?(V)) AND
           (sinterp?(U) IMPLIES sinterp?(V)) AND
            (scontext?(U) IMPLIES scontext?(V))}" subst nil)
     (scontext? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (sdecl? adt-def-decl "boolean" language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (boolean nonempty-type-decl nil booleans nil)
     (syntaxic type-decl nil language nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil))
    shostak)) (shift_k 0
               (shift_k-1 nil 3583679383
                ("" (skosimp* :preds? t)
                 (("" (expand "↑" 1 1)
                   (("" (assert)
                     (("" (expand "k")
                       (("" (assert)
                         (("" (decompose-equality 1)
                           (("1" (decompose-equality 1)
                             (("1" (decompose-equality 1)
                               (("1"
                                 (expand "finseq_appl")
                                 (("1"
                                   (assert)
                                   (("1"
                                     (typepred "x!1")
                                     (("1"
                                       (assert)
                                       (("1"
                                         (case
                                          "nb!1 = (nb!1`1, nb!1`2 - x!1)")
                                         (("1"
                                           (rewrite -1)
                                           (("1" (assert) nil nil))
                                           nil)
                                          ("2" (assert) nil nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil)
                                ("2"
                                 (grind)
                                 (("1"
                                   (grind)
                                   (("1"
                                     (grind)
                                     (("1"
                                       (expand "sexpr?")
                                       (("1" (propax) nil nil))
                                       nil))
                                     nil))
                                   nil)
                                  ("2"
                                   (expand "sexpr?")
                                   (("2" (propax) nil nil))
                                   nil)
                                  ("3"
                                   (expand "sexpr?")
                                   (("3" (propax) nil nil))
                                   nil)
                                  ("4"
                                   (expand "sexpr?")
                                   (("4" (propax) nil nil))
                                   nil)
                                  ("5"
                                   (expand "sexpr?")
                                   (("5" (propax) nil nil))
                                   nil))
                                 nil)
                                ("3" (grind) nil nil))
                               nil)
                              ("2" (grind) nil nil))
                             nil)
                            ("2" (grind) nil nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ((↑ def-decl "{V |
         (sexpr?(U) IMPLIES sexpr?(V)) AND
          (sdecl?(U) IMPLIES sdecl?(V)) AND
           (sinterp?(U) IMPLIES sinterp?(V)) AND
            (scontext?(U) IMPLIES scontext?(V))}" subst nil)
                 (k const-decl "(scontext?)" language nil)
                 (int_minus_int_is_int application-judgement "int"
                  integers nil)
                 (nb!1 skolem-const-decl "[nat, nat]" subst nil)
                 (- const-decl "[numfield, numfield -> numfield]"
                    number_fields nil)
                 (numfield nonempty-type-eq-decl nil number_fields nil)
                 (below type-eq-decl nil nat_types nil)
                 (< const-decl "bool" reals nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (finseq type-eq-decl nil finite_sequences nil)
                 (map adt-constructor-decl
                      "[finseq[(sdecl?)] -> (map?)]" language nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (IMPLIES const-decl "[bool, bool -> bool]" booleans
                  nil)
                 (sexpr? adt-def-decl "boolean" language nil)
                 (sinterp? adt-def-decl "boolean" language nil)
                 (scontext? adt-def-decl "boolean" language nil)
                 (finseq_appl const-decl "[below[length(fs)] -> T]"
                              finite_sequences nil)
                 (syntaxic_map_extensionality formula-decl nil language
                  nil)
                 (map? adt-recognizer-decl "[syntaxic -> boolean]"
                  language nil)
                 (d!1 skolem-const-decl "(sdecl?)" subst nil)
                 (real_lt_is_strict_total_order name-judgement
                  "(strict_total_order?[real])" real_props nil)
                 (nnint_times_nnint_is_nnint application-judgement
                  "nonneg_int" integers nil)
                 (even_times_int_is_even application-judgement
                  "even_int" integers nil)
                 (mult_divides1 application-judgement "(divides(n))"
                  divides nil)
                 (mult_divides2 application-judgement "(divides(m))"
                  divides nil)
                 (= const-decl "[T, T -> boolean]" equalities nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (posint nonempty-type-eq-decl nil integers nil)
                 (> const-decl "bool" reals nil)
                 (nonneg_int nonempty-type-eq-decl nil integers nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (syntaxic type-decl nil language nil)
                 (sdecl? adt-def-decl "boolean" language nil))
                shostak))
  (shift_concat 0
   (shift_concat-1 nil 3583678716
    ("" (skosimp* :preds? t)
     (("" (expand ++)
       (("" (expand o)
         (("" (assert)
           (("" (decompose-equality 1)
             (("1" (decompose-equality 1)
               (("1" (grind) nil nil)
                ("2" (skosimp* :preds? t)
                 (("2" (assert)
                   (("2" (split 2)
                     (("1" (flatten)
                       (("1" (grind :rewrites sexpr?) nil nil)) nil)
                      ("2" (flatten) (("2" (grind) nil nil)) nil)
                      ("3" (grind) nil nil))
                     nil))
                   nil))
                 nil)
                ("3" (grind) nil nil) ("4" (grind) nil nil)
                ("5" (grind) (("5" (grind :rewrites sexpr?) nil nil))
                 nil)
                ("6" (grind) nil nil) ("7" (grind) nil nil))
               nil)
              ("2" (grind) nil nil) ("3" (grind) nil nil)
              ("4" (grind) nil nil) ("5" (grind) nil nil))
             nil))
           nil))
         nil))
       nil))
     nil)
    ((++ const-decl "(scontext?)" language nil)
     (int_minus_int_is_int application-judgement "int" integers nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (↑ def-decl "{V |
         (sexpr?(U) IMPLIES sexpr?(V)) AND
          (sdecl?(U) IMPLIES sdecl?(V)) AND
           (sinterp?(U) IMPLIES sinterp?(V)) AND
            (scontext?(U) IMPLIES scontext?(V))}" subst nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
     (syntaxic_map_extensionality formula-decl nil language nil)
     (IF const-decl "[boolean, T, T -> T]" if_def nil)
     (finseq_appl const-decl "[below[length(fs)] -> T]"
                  finite_sequences nil)
     (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
          nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (nb!1 skolem-const-decl "[nat, nat]" subst nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (< const-decl "bool" reals nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (scontext? type-eq-decl nil language nil)
     (below type-eq-decl nil nat_types nil)
     (sdecl? adt-def-decl "boolean" language nil)
     (finseq type-eq-decl nil finite_sequences nil)
     (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
      language nil)
     (M!1 skolem-const-decl "(scontext?)" subst nil)
     (N!1 skolem-const-decl "(scontext?)" subst nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (- const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (int_plus_int_is_int application-judgement "int" integers nil)
     (O const-decl "finseq" finite_sequences nil)
     (boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (scontext? adt-def-decl "boolean" language nil))
    shostak)) (kind_shift 0
               (kind_shift-1 nil 3583686501
                ("" (induct U)
                 (("1" (grind) nil nil) ("2" (grind) nil nil)
                  ("3" (grind) nil nil) ("4" (grind) nil nil)
                  ("5" (grind) nil nil) ("6" (grind) nil nil)
                  ("7" (grind) nil nil) ("8" (grind) nil nil)
                  ("9" (grind) nil nil) ("10" (grind) nil nil)
                  ("11" (grind) nil nil) ("12" (grind) nil nil)
                  ("13" (grind) nil nil) ("14" (grind) nil nil)
                  ("15" (grind) nil nil) ("16" (grind) nil nil)
                  ("17" (grind) nil nil) ("18" (grind) nil nil)
                  ("19" (grind) nil nil) ("20" (grind) nil nil)
                  ("21" (grind) nil nil))
                 nil)
                ((finseq_appl const-decl "[below[length(fs)] -> T]"
                              finite_sequences nil)
                 (int_minus_int_is_int application-judgement "int"
                  integers nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (real_lt_is_strict_total_order name-judgement
                  "(strict_total_order?[real])" real_props nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (syntaxic_induction formula-decl nil language nil)
                 (↑ def-decl "{V |
         (sexpr?(U) IMPLIES sexpr?(V)) AND
          (sdecl?(U) IMPLIES sdecl?(V)) AND
           (sinterp?(U) IMPLIES sinterp?(V)) AND
            (scontext?(U) IMPLIES scontext?(V))}" subst nil)
                 (scontext? adt-def-decl "boolean" language nil)
                 (sinterp? adt-def-decl "boolean" language nil)
                 (sdecl? adt-def-decl "boolean" language nil)
                 (sexpr? adt-def-decl "boolean" language nil)
                 (IMPLIES const-decl "[bool, bool -> bool]" booleans
                  nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (kind? const-decl "bool" language nil)
                 (IFF const-decl "[bool, bool -> bool]" booleans nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (prekeyword type-decl nil language nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (syntaxic type-decl nil language nil))
                shostak))
  (interpret_shift 0
   (interpret_shift-1 nil 3583700348
    ("" (induct U)
     (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
      ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
      ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
      ("10" (grind) nil nil) ("11" (grind) nil nil)
      ("12" (grind) nil nil) ("13" (grind) nil nil)
      ("14" (grind) nil nil) ("15" (grind) nil nil)
      ("16" (grind) nil nil) ("17" (grind) nil nil)
      ("18" (grind) nil nil) ("19" (grind) nil nil)
      ("20" (grind) nil nil) ("21" (grind) nil nil))
     nil)
    ((finseq_appl const-decl "[below[length(fs)] -> T]"
                  finite_sequences nil)
     (int_minus_int_is_int application-judgement "int" integers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic_induction formula-decl nil language nil)
     (↑ def-decl "{V |
         (sexpr?(U) IMPLIES sexpr?(V)) AND
          (sdecl?(U) IMPLIES sdecl?(V)) AND
           (sinterp?(U) IMPLIES sinterp?(V)) AND
            (scontext?(U) IMPLIES scontext?(V))}" subst nil)
     (scontext? adt-def-decl "boolean" language nil)
     (sinterp? adt-def-decl "boolean" language nil)
     (sdecl? adt-def-decl "boolean" language nil)
     (sexpr? adt-def-decl "boolean" language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (interpret? def-decl "bool" language nil)
     (IFF const-decl "[bool, bool -> bool]" booleans nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (boolean nonempty-type-decl nil booleans nil)
     (syntaxic type-decl nil language nil))
    shostak)) (compatible_shift 0
               (compatible_shift-1 nil 3583699902
                ("" (induct U)
                 (("1" (grind) nil nil) ("2" (grind) nil nil)
                  ("3" (grind) nil nil) ("4" (grind) nil nil)
                  ("5" (grind) nil nil) ("6" (grind) nil nil)
                  ("7" (grind) nil nil) ("8" (grind) nil nil)
                  ("9" (grind) nil nil) ("10" (grind) nil nil)
                  ("11" (grind) nil nil) ("12" (grind) nil nil)
                  ("13" (grind) nil nil) ("14" (grind) nil nil)
                  ("15" (grind) nil nil) ("16" (grind) nil nil)
                  ("17" (grind) nil nil) ("18" (grind) nil nil)
                  ("19" (skosimp* :preds? t)
                   (("19" (assert)
                     (("19" (split 1)
                       (("1" (flatten)
                         (("1" (assert)
                           (("1" (split 2)
                             (("1" (expand apply)
                               (("1"
                                 (expand finseq_appl)
                                 (("1"
                                   (hide -3)
                                   (("1"
                                     (assert)
                                     (("1"
                                       (expand ↑ -2)
                                       (("1"
                                         (lift-if)
                                         (("1"
                                           (bddsimp -2)
                                           (("1" (assert) nil nil)
                                            ("2" (assert) nil nil)
                                            ("3" (assert) nil nil)
                                            ("4" (assert) nil nil)
                                            ("5" (assert) nil nil)
                                            ("6" (assert) nil nil)
                                            ("7" (assert) nil nil)
                                            ("8" (assert) nil nil)
                                            ("9" (assert) nil nil)
                                            ("10" (assert) nil nil)
                                            ("11" (assert) nil nil)
                                            ("12" (propax) nil nil)
                                            ("13" (assert) nil nil)
                                            ("14" (assert) nil nil)
                                            ("15" (assert) nil nil)
                                            ("16" (assert) nil nil)
                                            ("17" (assert) nil nil)
                                            ("18" (assert) nil nil)
                                            ("19" (assert) nil nil)
                                            ("20" (assert) nil nil)
                                            ("21" (assert) nil nil)
                                            ("22" (assert) nil nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil)
                              ("2" (assert)
                               (("2"
                                 (rewrite interpret_shift)
                                 nil
                                 nil))
                               nil)
                              ("3" (inst - M!1 c!1 nb!1)
                               (("3" (grind) nil nil)) nil))
                             nil))
                           nil))
                         nil)
                        ("2" (flatten)
                         (("2" (split 2)
                           (("1" (propax) nil nil)
                            ("2" (assert)
                             (("2" (expand apply)
                               (("2"
                                 (expand finseq_appl)
                                 (("2" (grind) nil nil))
                                 nil))
                               nil))
                             nil)
                            ("3" (rewrite interpret_shift) nil nil)
                            ("4" (inst - M!1 c!1 nb!1)
                             (("4" (grind) nil nil)) nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil)
                  ("20" (skosimp* :preds? t)
                   (("20" (assert)
                     (("20" (split 1)
                       (("1" (flatten)
                         (("1" (split 2)
                           (("1" (propax) nil nil)
                            ("2" (expand apply)
                             (("2" (expand finseq_appl)
                               (("2"
                                 (hide -3)
                                 (("2"
                                   (assert)
                                   (("2"
                                     (expand ↑ -2)
                                     (("2"
                                       (lift-if)
                                       (("2"
                                         (bddsimp)
                                         (("1" (assert) nil nil)
                                          ("2" (assert) nil nil)
                                          ("3" (assert) nil nil)
                                          ("4" (assert) nil nil)
                                          ("5" (assert) nil nil)
                                          ("6" (assert) nil nil)
                                          ("7" (assert) nil nil)
                                          ("8" (assert) nil nil)
                                          ("9" (assert) nil nil)
                                          ("10" (assert) nil nil)
                                          ("11" (assert) nil nil)
                                          ("12" (assert) nil nil)
                                          ("13" (assert) nil nil)
                                          ("14" (assert) nil nil)
                                          ("15" (assert) nil nil)
                                          ("16" (assert) nil nil)
                                          ("17" (assert) nil nil)
                                          ("18" (assert) nil nil)
                                          ("19" (assert) nil nil)
                                          ("20" (assert) nil nil)
                                          ("21" (assert) nil nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil)
                            ("3" (rewrite interpret_shift) nil nil)
                            ("4" (inst - M!1 c!1 nb!1)
                             (("4" (grind) nil nil)) nil))
                           nil))
                         nil)
                        ("2" (flatten)
                         (("2" (split 2)
                           (("1" (propax) nil nil)
                            ("2" (expand apply)
                             (("2" (expand finseq_appl)
                               (("2" (grind) nil nil)) nil))
                             nil)
                            ("3" (rewrite interpret_shift) nil nil)
                            ("4" (inst - M!1 c!1 nb!1)
                             (("4" (grind) nil nil)) nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil)
                  ("21" (grind) nil nil))
                 nil)
                ((interpret_shift formula-decl nil subst nil)
                 (apply const-decl "(sdecl?)" language nil)
                 (int_plus_int_is_int application-judgement "int"
                  integers nil)
                 (nnint_plus_nnint_is_nnint application-judgement
                  "nonneg_int" integers nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (real_lt_is_strict_total_order name-judgement
                  "(strict_total_order?[real])" real_props nil)
                 (int_minus_int_is_int application-judgement "int"
                  integers nil)
                 (finseq_appl const-decl "[below[length(fs)] -> T]"
                              finite_sequences nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (syntaxic_induction formula-decl nil language nil)
                 (↑ def-decl "{V |
         (sexpr?(U) IMPLIES sexpr?(V)) AND
          (sdecl?(U) IMPLIES sdecl?(V)) AND
           (sinterp?(U) IMPLIES sinterp?(V)) AND
            (scontext?(U) IMPLIES scontext?(V))}" subst nil)
                 (sinterp? adt-def-decl "boolean" language nil)
                 (sdecl? adt-def-decl "boolean" language nil)
                 (sexpr? adt-def-decl "boolean" language nil)
                 (IMPLIES const-decl "[bool, bool -> bool]" booleans
                  nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (compatible? def-decl "bool" language nil)
                 (IFF const-decl "[bool, bool -> bool]" booleans nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (scontext? adt-def-decl "boolean" language nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (syntaxic type-decl nil language nil))
                shostak))
  (strong_shift_prekind_TCC1 0
   (strong_shift_prekind_TCC1-1 nil 3583692542 ("" (grind) nil nil) nil
    nil)) (strong_shift_prekind 0
           (strong_shift_prekind-1 nil 3583692550
            ("" (induct U)
             (("1" (skosimp* :preds? t)
               (("1" (split 1)
                 (("1" (flatten)
                   (("1" (assert)
                     (("1" (flatten)
                       (("1" (split 1)
                         (("1" (flatten)
                           (("1" (split 1)
                             (("1" (propax) nil nil)
                              ("2" (assert) nil nil)
                              ("3" (assert)
                               (("3"
                                 (expand ++)
                                 (("3"
                                   (expand o)
                                   (("3"
                                     (expand apply)
                                     (("3"
                                       (assert)
                                       (("3"
                                         (expand finseq_appl)
                                         (("3" (propax) nil nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("2" (flatten)
                           (("2" (split 2)
                             (("1" (propax) nil nil)
                              ("2" (assert) nil nil)
                              ("3" (expand apply)
                               (("3"
                                 (expand ++)
                                 (("3"
                                   (expand o)
                                   (("3" (assert) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil)
                  ("2" (flatten)
                   (("2" (assert)
                     (("2" (split -1)
                       (("1" (flatten)
                         (("1" (split 1)
                           (("1" (propax) nil nil)
                            ("2" (assert) nil nil)
                            ("3" (assert)
                             (("3" (expand (apply ++))
                               (("3"
                                 (expand o)
                                 (("3"
                                   (assert)
                                   (("3"
                                     (use kind_shift)
                                     (("3" (grind) nil nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2" (flatten)
                         (("2" (split 2)
                           (("1" (propax) nil nil)
                            ("2" (assert) nil nil)
                            ("3" (expand (apply ++))
                             (("3" (expand o) (("3" (assert) nil nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ("2" (skosimp* :preds? t)
               (("2" (assert)
                 (("2" (split 1)
                   (("1" (flatten)
                     (("1" (split 1)
                       (("1" (propax) nil nil)
                        ("2" (inst -16 M!1 N!1 P!1 PREINTERP)
                         (("2" (grind) nil nil)) nil)
                        ("3" (assert) (("3" (grind) nil nil)) nil)
                        ("4" (assert)
                         (("4" (expand ↑ 1)
                           (("4" (assert) (("4" (grind) nil nil)) nil))
                           nil))
                         nil)
                        ("5" (assert)
                         (("5" (expand (apply ++))
                           (("5" (expand o -5)
                             (("5" (lift-if)
                               (("5"
                                 (bddsimp -5)
                                 (("1"
                                   (expand o 1)
                                   (("1"
                                     (assert)
                                     (("1"
                                       (expand finseq_appl)
                                       (("1" (propax) nil nil))
                                       nil))
                                     nil))
                                   nil)
                                  ("2"
                                   (expand o 2)
                                   (("2" (assert) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("6" (expand apply)
                         (("6" (expand ++)
                           (("6" (expand o -6)
                             (("6" (lift-if)
                               (("6"
                                 (bddsimp -6)
                                 (("1"
                                   (expand o 1)
                                   (("1"
                                     (assert)
                                     (("1"
                                       (expand finseq_appl)
                                       (("1"
                                         (use
                                          compatible_shift
                                          :polarity?
                                          t)
                                         (("1"
                                           (inst
                                            -
                                            "def(run_map(N!1)`seq(i(dot1_var!1)))"
                                            "dot2_var!1"
                                            "(run_map(P!1)`length, run_map(N!1)`length - 1 - i(dot1_var!1))"
                                            "(run_map(P!1)`length, run_map(N!1)`length)")
                                           (("1"
                                             (flatten)
                                             (("1"
                                               (rewrite -4)
                                               (("1"
                                                 (hide -16)
                                                 (("1"
                                                   (assert)
                                                   (("1"
                                                     (expand o -7)
                                                     (("1"
                                                       (expand
                                                        kind?
                                                        -7)
                                                       (("1"
                                                         (lift-if)
                                                         (("1"
                                                           (bddsimp -7)
                                                           (("1"
                                                             (assert)
                                                             nil
                                                             nil)
                                                            ("2"
                                                             (assert)
                                                             nil
                                                             nil)
                                                            ("3"
                                                             (assert)
                                                             nil
                                                             nil)
                                                            ("4"
                                                             (assert)
                                                             nil
                                                             nil)
                                                            ("5"
                                                             (assert)
                                                             nil
                                                             nil)
                                                            ("6"
                                                             (assert)
                                                             nil
                                                             nil)
                                                            ("7"
                                                             (assert)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil)
                                  ("2"
                                   (expand o 2)
                                   (("2"
                                     (assert)
                                     (("2"
                                       (use
                                        compatible_shift
                                        :polarity?
                                        t)
                                       (("2"
                                         (hide -16)
                                         (("2"
                                           (inst
                                            -
                                            "def(run_map(M!1)`seq(i(dot1_var!1) - run_map(N!1)`length))"
                                            dot2_var!1
                                            "(0,0)"
                                            "(run_map(P!1)`length, run_map(N!1)`length)")
                                           (("2" (assert) nil nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("7" (expand (apply ++))
                         (("7" (expand o -7)
                           (("7" (lift-if)
                             (("7" (bddsimp -7)
                               (("1"
                                 (expand o 1)
                                 (("1"
                                   (assert)
                                   (("1"
                                     (hide -16)
                                     (("1"
                                       (expand finseq_appl)
                                       (("1"
                                         (assert)
                                         (("1"
                                           (expand o -7)
                                           (("1"
                                             (expand kind? -7)
                                             (("1"
                                               (lift-if)
                                               (("1"
                                                 (bddsimp -7)
                                                 (("1"
                                                   (assert)
                                                   nil
                                                   nil)
                                                  ("2"
                                                   (assert)
                                                   nil
                                                   nil)
                                                  ("3"
                                                   (assert)
                                                   nil
                                                   nil)
                                                  ("4"
                                                   (assert)
                                                   nil
                                                   nil)
                                                  ("5"
                                                   (assert)
                                                   nil
                                                   nil)
                                                  ("6"
                                                   (assert)
                                                   nil
                                                   nil)
                                                  ("7"
                                                   (assert)
                                                   (("7"
                                                     (assert)
                                                     (("7"
                                                       (rewrite
                                                        length_shift)
                                                       (("7"
                                                         (hide-all-but
                                                          (1 -1))
                                                         (("7"
                                                           (grind)
                                                           (("7"
                                                             (all-typepreds)
                                                             (("7"
                                                               (assert)
                                                               nil
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil)
                                ("2"
                                 (expand o 2)
                                 (("2" (assert) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("8" (expand (apply ++))
                         (("8" (expand o -8)
                           (("8" (lift-if)
                             (("8" (bddsimp -8)
                               (("1"
                                 (assert)
                                 (("1"
                                   (expand o 1)
                                   (("1"
                                     (assert)
                                     (("1"
                                       (hide -16)
                                       (("1"
                                         (expand finseq_appl)
                                         (("1"
                                           (use
                                            kind_shift
                                            :polarity?
                                            t)
                                           (("1"
                                             (inst
                                              -
                                              "run_map(def(run_map(N!1)`seq(i(dot1_var!1))))`seq(dot3_var!1)"
                                              k!1
                                              "(run_map(P!1)`length,
                          run_map(N!1)`length - 1 - i(dot1_var!1))")
                                             (("1"
                                               (flatten)
                                               (("1"
                                                 (rewrite -4)
                                                 (("1"
                                                   (assert)
                                                   (("1"
                                                     (expand o -7)
                                                     (("1"
                                                       (expand
                                                        kind?
                                                        -7)
                                                       (("1"
                                                         (lift-if)
                                                         (("1"
                                                           (bddsimp -7)
                                                           (("1"
                                                             (assert)
                                                             nil
                                                             nil)
                                                            ("2"
                                                             (assert)
                                                             nil
                                                             nil)
                                                            ("3"
                                                             (assert)
                                                             nil
                                                             nil)
                                                            ("4"
                                                             (assert)
                                                             nil
                                                             nil)
                                                            ("5"
                                                             (assert)
                                                             nil
                                                             nil)
                                                            ("6"
                                                             (assert)
                                                             nil
                                                             nil)
                                                            ("7"
                                                             (assert)
                                                             (("7"
                                                               (postpone)
                                                               nil
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil)
                                ("2"
                                 (assert)
                                 (("2" (postpone) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil)
                    ("2" (postpone) nil nil))
                   nil))
                 nil))
               nil)
              ("3" (postpone) nil nil) ("4" (postpone) nil nil)
              ("5" (postpone) nil nil) ("6" (postpone) nil nil)
              ("7" (postpone) nil nil) ("8" (postpone) nil nil)
              ("9" (postpone) nil nil) ("10" (postpone) nil nil)
              ("11" (postpone) nil nil) ("12" (postpone) nil nil)
              ("13" (postpone) nil nil) ("14" (postpone) nil nil)
              ("15" (postpone) nil nil) ("16" (postpone) nil nil)
              ("17" (postpone) nil nil) ("18" (postpone) nil nil)
              ("19" (postpone) nil nil) ("20" (postpone) nil nil)
              ("21" (postpone) nil nil) ("22" (postpone) nil nil)
              ("23" (postpone) nil nil))
             nil)
            nil shostak))
  (shift_prekind 0
   (shift_prekind-1 nil 3583682133
    ("" (induct U)
     (("1" (skosimp* :preds? t)
       (("1" (assert)
         (("1" (split 1)
           (("1" (flatten)
             (("1" (assert)
               (("1" (split 1)
                 (("1" (propax) nil nil)
                  ("2" (assert)
                   (("2" (expand ++)
                     (("2" (expand o)
                       (("2" (expand apply)
                         (("2" (assert)
                           (("2" (use kind_shift :polarity? t)
                             (("2"
                               (inst
                                -
                                "run_map(Θ!1)`seq(v1_var!1)"
                                k!1
                                "(run_map(Δ!1)`length, 0)")
                               (("2" (postpone) nil nil)) nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ("2" (postpone) nil nil))
           nil))
         nil))
       nil)
      ("2" (postpone) nil nil) ("3" (postpone) nil nil)
      ("4" (postpone) nil nil) ("5" (postpone) nil nil)
      ("6" (postpone) nil nil) ("7" (postpone) nil nil)
      ("8" (postpone) nil nil) ("9" (postpone) nil nil)
      ("10" (postpone) nil nil) ("11" (postpone) nil nil)
      ("12" (postpone) nil nil) ("13" (postpone) nil nil)
      ("14" (postpone) nil nil) ("15" (postpone) nil nil)
      ("16" (postpone) nil nil) ("17" (postpone) nil nil)
      ("18" (postpone) nil nil) ("19" (postpone) nil nil)
      ("20" (postpone) nil nil) ("21" (postpone) nil nil)
      ("22" (postpone) nil nil) ("23" (postpone) nil nil)
      ("24" (postpone) nil nil) ("25" (postpone) nil nil)
      ("26" (postpone) nil nil))
     nil)
    nil shostak)) (shift_pretype_TCC1 0
                   (shift_pretype_TCC1-1 nil 3583758589
                    ("" (subtype-tcc) nil nil) nil nil))
  (shift_pretype_TCC2 0
   (shift_pretype_TCC2-1 nil 3583764323 ("" (subtype-tcc) nil nil) nil
    nil)) (shift_pretype_TCC3 0
           (shift_pretype_TCC3-1 nil 3583764323
            ("" (subtype-tcc) nil nil) nil nil))
  (shift_pretype_TCC4 0
   (shift_pretype_TCC4-1 nil 3583764323 ("" (subtype-tcc) nil nil) nil
    nil)) (shift_pretype_TCC5 0
           (shift_pretype_TCC5-1 nil 3583764323
            ("" (subtype-tcc) nil nil) nil nil))
  (shift_pretype 0
   (shift_pretype-1 nil 3583528859
    ("" (grind)
     (("" (typepred "T!1 ↑ nb!1") (("" (grind) nil nil)) nil)) nil)
    ((pretype type-eq-decl nil language nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (prekeyword type-decl nil language nil)
     (syntaxic type-decl nil language nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (semantic type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (↑ def-decl "{V |
         (sexpr?(U) IMPLIES sexpr?(V)) AND
          (sdecl?(U) IMPLIES sdecl?(V)) AND
           (sinterp?(U) IMPLIES sinterp?(V)) AND
            (scontext?(U) IMPLIES scontext?(V))}" subst nil))
    shostak)) (shift_preterm 0
               (shift_preterm-1 nil 3583528897
                ("" (skosimp* :preds? t)
                 (("" (grind)
                   (("" (typepred "a!1 ↑ nb!1") (("" (grind) nil nil))
                     nil))
                   nil))
                 nil)
                ((preterm type-eq-decl nil language nil)
                 (PRETERM adt-constructor-decl "(PRETERM?)" language
                  nil)
                 (PRETERM? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (prekeyword type-decl nil language nil)
                 (syntaxic type-decl nil language nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (↑ def-decl "{V |
         (sexpr?(U) IMPLIES sexpr?(V)) AND
          (sdecl?(U) IMPLIES sdecl?(V)) AND
           (sinterp?(U) IMPLIES sinterp?(V)) AND
            (scontext?(U) IMPLIES scontext?(V))}" subst nil)
                 (IMPLIES const-decl "[bool, bool -> bool]" booleans
                  nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (semantic type-eq-decl nil language nil)
                 (PRETYPE adt-constructor-decl "(PRETYPE?)" language
                  nil)
                 (PRETYPE? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (PREINTERP adt-constructor-decl "(PREINTERP?)"
                  language nil)
                 (PREINTERP? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)"
                  language nil)
                 (PRECONTEXT? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil))
                shostak))
  (subst_TCC1 0
   (subst_TCC1-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (int_minus_int_is_int application-judgement "int" integers nil)
     (real_gt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil))
    nil)) (subst_TCC2 0
           (subst_TCC2-1 nil 3583528800 ("" (grind) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (syntaxic type-decl nil language nil)
             (sinterp? adt-def-decl "boolean" language nil)
             (sexpr? adt-def-decl "boolean" language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (subst_TCC3 0
   (subst_TCC3-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (int_minus_int_is_int application-judgement "int" integers nil))
    nil)) (subst_TCC4 0
           (subst_TCC4-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((int_minus_int_is_int application-judgement "int" integers
              nil))
            nil))
  (subst_TCC5 0
   (subst_TCC5-1 nil 3583694874 ("" (subtype-tcc) nil nil) nil nil)) (subst_TCC6
                                                                      0
                                                                      (subst_TCC6-1
                                                                       nil
                                                                       3583694874
                                                                       (""
                                                                        (subtype-tcc)
                                                                        nil
                                                                        nil)
                                                                       nil
                                                                       nil))
  (subst_TCC7 0
   (subst_TCC7-1 nil 3583694874 ("" (subtype-tcc) nil nil) nil nil)) (subst_TCC8
                                                                      0
                                                                      (subst_TCC8-1
                                                                       nil
                                                                       3583694874
                                                                       (""
                                                                        (subtype-tcc)
                                                                        nil
                                                                        nil)
                                                                       nil
                                                                       nil))
  (subst_TCC9 0
   (subst_TCC9-1 nil 3583694874 ("" (subtype-tcc) nil nil) nil nil)) (subst_TCC10
                                                                      0
                                                                      (subst_TCC10-1
                                                                       nil
                                                                       3583694874
                                                                       (""
                                                                        (subtype-tcc)
                                                                        nil
                                                                        nil)
                                                                       nil
                                                                       nil))
  (subst_TCC11 0
   (subst_TCC11-1 nil 3583694874 ("" (subtype-tcc) nil nil) nil nil)) (subst_TCC12
                                                                       0
                                                                       (subst_TCC12-1
                                                                        nil
                                                                        3583694874
                                                                        (""
                                                                         (subtype-tcc)
                                                                         nil
                                                                         nil)
                                                                        nil
                                                                        nil))
  (subst_TCC13 0
   (subst_TCC13-1 nil 3583694874 ("" (subtype-tcc) nil nil) nil nil)) (subst_TCC14
                                                                       0
                                                                       (subst_TCC14-1
                                                                        nil
                                                                        3583694874
                                                                        (""
                                                                         (subtype-tcc)
                                                                         nil
                                                                         nil)
                                                                        nil
                                                                        nil))
  (subst_TCC15 0
   (subst_TCC15-1 nil 3583694874 ("" (subtype-tcc) nil nil) nil nil)) (subst_TCC16
                                                                       0
                                                                       (subst_TCC16-1
                                                                        nil
                                                                        3583694874
                                                                        (""
                                                                         (subtype-tcc)
                                                                         nil
                                                                         nil)
                                                                        nil
                                                                        nil))
  (subst_TCC17 0
   (subst_TCC17-1 nil 3583694874 ("" (subtype-tcc) nil nil) nil nil)) (subst_TCC18
                                                                       0
                                                                       (subst_TCC18-1
                                                                        nil
                                                                        3583694874
                                                                        (""
                                                                         (subtype-tcc)
                                                                         nil
                                                                         nil)
                                                                        nil
                                                                        nil))
  (subst_TCC19 0
   (subst_TCC19-1 nil 3583694874 ("" (subtype-tcc) nil nil) nil nil)) (subst_TCC20
                                                                       0
                                                                       (subst_TCC20-1
                                                                        nil
                                                                        3583694874
                                                                        (""
                                                                         (subtype-tcc)
                                                                         nil
                                                                         nil)
                                                                        nil
                                                                        nil))
  (subst_TCC21 0
   (subst_TCC21-1 nil 3583694874 ("" (subtype-tcc) nil nil) nil nil)) (subst_TCC22
                                                                       0
                                                                       (subst_TCC22-1
                                                                        nil
                                                                        3583694874
                                                                        (""
                                                                         (subtype-tcc)
                                                                         nil
                                                                         nil)
                                                                        nil
                                                                        nil))
  (subst_TCC23 0
   (subst_TCC23-1 nil 3583694874 ("" (subtype-tcc) nil nil) nil nil)) (subst_TCC24
                                                                       0
                                                                       (subst_TCC24-1
                                                                        nil
                                                                        3583694874
                                                                        (""
                                                                         (subtype-tcc)
                                                                         nil
                                                                         nil)
                                                                        ((nnint_plus_nnint_is_nnint
                                                                          application-judgement
                                                                          "nonneg_int"
                                                                          integers
                                                                          nil)
                                                                         (int_minus_int_is_int
                                                                          application-judgement
                                                                          "int"
                                                                          integers
                                                                          nil))
                                                                        nil))
  (subst_TCC25 0
   (subst_TCC25-1 nil 3583694874 ("" (subtype-tcc) nil nil)
    ((int_minus_int_is_int application-judgement "int" integers nil))
    nil)) (subst_TCC26 0
           (subst_TCC26-1 nil 3583694874 ("" (subtype-tcc) nil nil) nil
            nil))
  (subst_TCC27 0
   (subst_TCC27-1 nil 3583694874 ("" (subtype-tcc) nil nil) nil nil)) (subst_TCC28
                                                                       0
                                                                       (subst_TCC28-1
                                                                        nil
                                                                        3583694874
                                                                        (""
                                                                         (subtype-tcc)
                                                                         nil
                                                                         nil)
                                                                        nil
                                                                        nil))
  (subst_TCC29 0
   (subst_TCC29-1 nil 3583694874 ("" (subtype-tcc) nil nil) nil nil)) (subst_TCC30
                                                                       0
                                                                       (subst_TCC30-1
                                                                        nil
                                                                        3583694874
                                                                        (""
                                                                         (subtype-tcc)
                                                                         nil
                                                                         nil)
                                                                        nil
                                                                        nil))
  (subst_subtype_TCC1 0
   (subst_subtype_TCC1-1 nil 3583614241 ("" (subtype-tcc) nil nil)
    ((O const-decl "finseq" finite_sequences nil)
     (++ const-decl "(scontext?)" language nil))
    nil)) (subst_subtype_TCC2 0
           (subst_subtype_TCC2-1 nil 3583614241
            ("" (subtype-tcc) nil nil) nil nil))
  (subst_subtype_TCC3 0
   (subst_subtype_TCC3-1 nil 3583614241 ("" (subtype-tcc) nil nil) nil
    nil)) (subst_subtype_TCC4 0
           (subst_subtype_TCC4-1 nil 3583614241
            ("" (subtype-tcc) nil nil) nil nil))
  (subst_subtype_TCC5 0
   (subst_subtype_TCC5-1 nil 3583696953 ("" (subtype-tcc) nil nil) nil
    nil)) (subst_subtype_TCC6 0
           (subst_subtype_TCC6-1 nil 3583764323
            ("" (subtype-tcc) nil nil) nil nil))
  (subst_subtype_TCC7 0
   (subst_subtype_TCC7-1 nil 3583764323 ("" (subtype-tcc) nil nil) nil
    nil)) (subst_subtype_TCC8 0
           (subst_subtype_TCC8-1 nil 3583764323
            ("" (subtype-tcc) nil nil) nil nil))
  (subst_pretype_TCC1 0
   (subst_pretype_TCC1-1 nil 3583609445 ("" (subtype-tcc) nil nil) nil
    nil)) (subst_pretype_TCC2 0
           (subst_pretype_TCC2-1 nil 3583696953
            ("" (subtype-tcc) nil nil) nil nil))
  (subst_preterm_TCC1 0
   (subst_preterm_TCC1-1 nil 3583609445 ("" (subtype-tcc) nil nil) nil
    nil)) (subst_preterm_TCC2 0
           (subst_preterm_TCC2-1 nil 3583764323
            ("" (subtype-tcc) nil nil) nil nil))
  (subst_preinterp_TCC1 0
   (subst_preinterp_TCC1-1 nil 3583609445 ("" (subtype-tcc) nil nil)
    nil nil)) (subst_preinterp_TCC2 0
               (subst_preinterp_TCC2-1 nil 3583764323
                ("" (subtype-tcc) nil nil) nil nil)))

