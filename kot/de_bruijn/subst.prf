(subst
   (size_TCC1 0
    (size_TCC1-1 nil 3583528655 ("" (grind) nil nil)
     ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language
       nil))
     nil))
   (size_TCC2 0
    (size_TCC2-1 nil 3583528655 ("" (grind) nil nil)
     ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language
       nil))
     nil))
   (size_TCC3 0
    (size_TCC3-1 nil 3583528655 ("" (termination-tcc) nil nil)
     ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language
       nil))
     nil))
  (size_TCC4 0
   (size_TCC4-1 nil 3583528655 ("" (grind) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (size_TCC5 0
           (size_TCC5-1 nil 3583528655 ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC1 0
   (uparrow_TCC1-1 nil 3583528800 ("" (grind) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC2 0
           (uparrow_TCC2-1 nil 3583528800 ("" (grind) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC3 0
   (uparrow_TCC3-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC4 0
           (uparrow_TCC4-1 nil 3583528800 ("" (grind) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC5 0
   (uparrow_TCC5-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC6 0
           (uparrow_TCC6-1 nil 3583528800 ("" (grind) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC7 0
   (uparrow_TCC7-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC8 0
           (uparrow_TCC8-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC9 0
   (uparrow_TCC9-1 nil 3583528800 ("" (grind) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC10 0
           (uparrow_TCC10-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC11 0
   (uparrow_TCC11-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC12 0
           (uparrow_TCC12-1 nil 3583528800 ("" (grind) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC13 0
   (uparrow_TCC13-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC14 0
           (uparrow_TCC14-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC15 0
   (uparrow_TCC15-1 nil 3583528800 ("" (grind) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC16 0
           (uparrow_TCC16-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC17 0
   (uparrow_TCC17-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC18 0
           (uparrow_TCC18-1 nil 3583528800 ("" (grind) nil nil)
            ((int_plus_int_is_int application-judgement "int" integers
              nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (finseq type-eq-decl nil finite_sequences nil)
             (syntaxic type-decl nil language nil)
             (below type-eq-decl nil nat_types nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (>= const-decl "bool" reals nil)
             (int nonempty-type-eq-decl nil integers nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (< const-decl "bool" reals nil)
             (real nonempty-type-from-decl nil reals nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number nonempty-type-decl nil numbers nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (boolean nonempty-type-decl nil booleans nil)
             (int_minus_int_is_int application-judgement "int" integers
              nil))
            nil))
  (uparrow_TCC19 0
   (uparrow_TCC19-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (finseq type-eq-decl nil finite_sequences nil)
     (syntaxic type-decl nil language nil)
     (below type-eq-decl nil nat_types nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (< const-decl "bool" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (finseq_appl const-decl "[below[length(fs)] -> T]"
                  finite_sequences nil))
    nil)) (uparrow_TCC20 0
           (uparrow_TCC20-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC21 0
   (uparrow_TCC21-1 nil 3583528800 ("" (grind) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC22 0
           (uparrow_TCC22-1 nil 3583528800
            ("" (termination-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (<< adt-def-decl "(strict_well_founded?[syntaxic])"
              language nil))
            nil))
  (uparrow_TCC23 0
   (uparrow_TCC23-1 nil 3583528800 ("" (termination-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (uparrow_TCC24 0
           (uparrow_TCC24-1 nil 3583686669
            ("" (termination-tcc) nil nil) nil nil))
  (uparrow_TCC25 0
   (uparrow_TCC25-1 nil 3583686669 ("" (termination-tcc) nil nil) nil
    nil)) (uparrow_TCC26 0
           (uparrow_TCC26-1 nil 3583686669
            ("" (termination-tcc) nil nil) nil nil))
  (uparrow_TCC27 0
   (uparrow_TCC27-1 nil 3583686669 ("" (termination-tcc) nil nil) nil
    nil)) (uparrow_TCC28 0
           (uparrow_TCC28-1 nil 3583686669
            ("" (termination-tcc) nil nil) nil nil))
  (shift_zero 0
   (shift_zero-1 nil 3583529098
    ("" (induct U)
     (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
      ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
      ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
      ("10" (grind) nil nil) ("11" (grind) nil nil)
      ("12" (grind) nil nil) ("13" (grind) nil nil)
      ("14" (grind) nil nil) ("15" (grind) nil nil)
      ("16" (grind) nil nil) ("17" (grind) nil nil)
      ("18" (grind) nil nil) ("19" (grind) nil nil)
      ("20" (grind) nil nil)
      ("21" (skosimp* :preds? t)
       (("21" (decompose-equality 1)
         (("21" (decompose-equality 1)
           (("21" (decompose-equality 1)
             (("21" (inst - x!1)
               (("21" (inst - "map1_var!1`length - 1 - x!1 + n!1")
                 (("21" (grind) nil nil)) nil))
               nil))
             nil))
           nil))
         nil))
       nil))
     nil)
    ((syntaxic type-decl nil language nil)
     (boolean nonempty-type-decl nil booleans nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (↑ def-decl "syntaxic" subst nil)
     (syntaxic_induction formula-decl nil language nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (int_minus_int_is_int application-judgement "int" integers nil)
     (map adt-constructor-decl "[finseq[syntaxic] -> (map?)]" language
          nil)
     (finseq type-eq-decl nil finite_sequences nil)
     (below type-eq-decl nil nat_types nil)
     (syntaxic_map_extensionality formula-decl nil language nil)
     (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
     (< const-decl "bool" reals nil)
     (finseq_appl const-decl "[below[length(fs)] -> T]"
                  finite_sequences nil)
     (- const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (int_plus_int_is_int application-judgement "int" integers nil))
    shostak)) (length_shift_TCC1 0
               (length_shift_TCC1-1 nil 3583588165
                ("" (subtype-tcc) nil nil)
                ((boolean nonempty-type-decl nil booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (syntaxic type-decl nil language nil)
                 (finseq_appl const-decl "[below[length(fs)] -> T]"
                              finite_sequences nil)
                 (real_lt_is_strict_total_order name-judgement
                  "(strict_total_order?[real])" real_props nil)
                 (int_minus_int_is_int application-judgement "int"
                  integers nil)
                 (int_plus_int_is_int application-judgement "int"
                  integers nil)
                 (nnint_plus_nnint_is_nnint application-judgement
                  "nonneg_int" integers nil)
                 (↑ def-decl "syntaxic" subst nil)
                 (run_map adt-accessor-decl
                  "[(map?) -> finseq[syntaxic]]" language nil)
                 (finseq type-eq-decl nil finite_sequences nil)
                 (below type-eq-decl nil nat_types nil)
                 (map? adt-recognizer-decl "[syntaxic -> boolean]"
                  language nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (< const-decl "bool" reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (sdecl? const-decl "bool" language nil)
                 (scontext? const-decl "bool" language nil))
                nil))
  (length_shift_TCC2 0
   (length_shift_TCC2-1 nil 3583609445 ("" (subtype-tcc) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (scontext? const-decl "bool" language nil)
     (↑ def-decl "syntaxic" subst nil)
     (finseq_appl const-decl "[below[length(fs)] -> T]"
                  finite_sequences nil)
     (sdecl? const-decl "bool" language nil))
    nil)) (length_shift_TCC3 0
           (length_shift_TCC3-1 nil 3583611386
            ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (syntaxic type-decl nil language nil)
             (scontext? const-decl "bool" language nil)
             (sdecl? const-decl "bool" language nil))
            nil))
  (length_shift 0
   (length_shift-1 nil 3583530058
    ("" (induct-and-simplify Γ)
     (("" (skosimp* :preds? t)
       (("" (assert)
         (("" (flatten) (("" (expand ↑) (("" (assert) nil nil)) nil))
           nil))
         nil))
       nil))
     nil)
    ((sdecl? const-decl "bool" language nil)
     (↑ def-decl "syntaxic" subst nil)
     (finseq_appl const-decl "[below[length(fs)] -> T]"
                  finite_sequences nil)
     (boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (syntaxic type-decl nil language nil)
     (scontext? const-decl "bool" language nil))
    shostak)) (shift_plus 0
               (shift_plus-1 nil 3583529119
                ("" (induct U)
                 (("1" (grind) nil nil) ("2" (grind) nil nil)
                  ("3" (grind) nil nil) ("4" (grind) nil nil)
                  ("5" (grind) nil nil) ("6" (grind) nil nil)
                  ("7" (grind) nil nil) ("8" (grind) nil nil)
                  ("9" (grind) nil nil) ("10" (grind) nil nil)
                  ("11" (grind) nil nil) ("12" (grind) nil nil)
                  ("13" (grind) nil nil) ("14" (grind) nil nil)
                  ("15" (grind) nil nil) ("16" (grind) nil nil)
                  ("17" (grind) nil nil) ("18" (grind) nil nil)
                  ("19" (grind) nil nil) ("20" (grind) nil nil)
                  ("21" (skosimp* :preds? t)
                   (("21" (assert)
                     (("21" (decompose-equality 1)
                       (("21" (decompose-equality 1)
                         (("21" (decompose-equality 1)
                           (("21" (expand finseq_appl)
                             (("21" (inst - x!1)
                               (("21"
                                 (inst
                                  -
                                  i!1
                                  j!1
                                  "map1_var!1`length - 1 - x!1 + n!1")
                                 nil
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ((int_plus_int_is_int application-judgement "int"
                  integers nil)
                 (below type-eq-decl nil nat_types nil)
                 (finseq type-eq-decl nil finite_sequences nil)
                 (map adt-constructor-decl
                      "[finseq[syntaxic] -> (map?)]" language nil)
                 (< const-decl "bool" reals nil)
                 (finseq_appl const-decl "[below[length(fs)] -> T]"
                              finite_sequences nil)
                 (- const-decl "[numfield, numfield -> numfield]"
                    number_fields nil)
                 (syntaxic_map_extensionality formula-decl nil language
                  nil)
                 (map? adt-recognizer-decl "[syntaxic -> boolean]"
                  language nil)
                 (int_minus_int_is_int application-judgement "int"
                  integers nil)
                 (posint_plus_nnint_is_posint application-judgement
                  "posint" integers nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (real_lt_is_strict_total_order name-judgement
                  "(strict_total_order?[real])" real_props nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (syntaxic_induction formula-decl nil language nil)
                 (+ const-decl "[numfield, numfield -> numfield]"
                    number_fields nil)
                 (numfield nonempty-type-eq-decl nil number_fields nil)
                 (↑ def-decl "syntaxic" subst nil)
                 (= const-decl "[T, T -> boolean]" equalities nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (syntaxic type-decl nil language nil)
                 (nnint_plus_nnint_is_nnint application-judgement
                  "nonneg_int" integers nil))
                shostak))
  (shift_k_TCC1 0
   (shift_k_TCC1-1 nil 3583679383 ("" (subtype-tcc) nil nil) nil nil)) (shift_k
                                                                        0
                                                                        (shift_k-1
                                                                         nil
                                                                         3583679383
                                                                         (""
                                                                          (skosimp*
                                                                           :preds?
                                                                           t)
                                                                          ((""
                                                                            (expand
                                                                             sdecl?)
                                                                            ((""
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (grind-with-ext)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (grind-with-ext)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (grind-with-ext)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     x!1)
                                                                                    (("3"
                                                                                      (grind)
                                                                                      (("3"
                                                                                        (grind-with-ext)
                                                                                        (("3"
                                                                                          (case
                                                                                           "nb!1 = (nb!1`1, nb!1`2 - x!1)")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (grind-with-ext)
                                                                                (("4"
                                                                                  (typepred
                                                                                   x!1)
                                                                                  (("4"
                                                                                    (case
                                                                                     "nb!1 = (nb!1`1, nb!1`2 - x!1)")
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (grind-with-ext)
                                                                                (("5"
                                                                                  (typepred
                                                                                   x!1)
                                                                                  (("5"
                                                                                    (case
                                                                                     "nb!1 = (nb!1`1, nb!1`2 - x!1)")
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (grind-with-ext)
                                                                                (("1"
                                                                                  (typepred
                                                                                   x!1)
                                                                                  (("1"
                                                                                    (case
                                                                                     "nb!1 = (nb!1`1, nb!1`2 - x!1)")
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   x!1)
                                                                                  (("2"
                                                                                    (case
                                                                                     "nb!1 = (nb!1`1, nb!1`2 - x!1)")
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("7"
                                                                                (grind-with-ext)
                                                                                (("7"
                                                                                  (typepred
                                                                                   x!1)
                                                                                  (("7"
                                                                                    (case
                                                                                     "nb!1 = (nb!1`1, nb!1`2 - x!1)")
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ((syntaxic_theory_def_extensionality
                                                                           formula-decl
                                                                           nil
                                                                           language
                                                                           nil)
                                                                          (theory_def
                                                                           adt-constructor-decl
                                                                           "[syntaxic -> (theory_def?)]"
                                                                           language
                                                                           nil)
                                                                          (syntaxic_const_def_extensionality
                                                                           formula-decl
                                                                           nil
                                                                           language
                                                                           nil)
                                                                          (const_def
                                                                           adt-constructor-decl
                                                                           "[[syntaxic, syntaxic] -> (const_def?)]"
                                                                           language
                                                                           nil)
                                                                          (syntaxic_const_var_extensionality
                                                                           formula-decl
                                                                           nil
                                                                           language
                                                                           nil)
                                                                          (const_var
                                                                           adt-constructor-decl
                                                                           "[syntaxic -> (const_var?)]"
                                                                           language
                                                                           nil)
                                                                          (type_
                                                                           shared-adt-accessor-decl
                                                                           "[{x: syntaxic |
          lam?(x) OR const_decl?(x) OR const_var?(x) OR const_def?(x)} ->
   syntaxic]"
                                                                           language
                                                                           nil)
                                                                          (const_var?
                                                                           adt-recognizer-decl
                                                                           "[syntaxic -> boolean]"
                                                                           language
                                                                           nil)
                                                                          (lam?
                                                                           adt-recognizer-decl
                                                                           "[syntaxic -> boolean]"
                                                                           language
                                                                           nil)
                                                                          (const_decl
                                                                           adt-constructor-decl
                                                                           "[syntaxic -> (const_decl?)]"
                                                                           language
                                                                           nil)
                                                                          (const_decl?
                                                                           adt-recognizer-decl
                                                                           "[syntaxic -> boolean]"
                                                                           language
                                                                           nil)
                                                                          (syntaxic_const_decl_extensionality
                                                                           formula-decl
                                                                           nil
                                                                           language
                                                                           nil)
                                                                          (mult_divides2
                                                                           application-judgement
                                                                           "(divides(m))"
                                                                           divides
                                                                           nil)
                                                                          (mult_divides1
                                                                           application-judgement
                                                                           "(divides(n))"
                                                                           divides
                                                                           nil)
                                                                          (even_times_int_is_even
                                                                           application-judgement
                                                                           "even_int"
                                                                           integers
                                                                           nil)
                                                                          (nnint_times_nnint_is_nnint
                                                                           application-judgement
                                                                           "nonneg_int"
                                                                           integers
                                                                           nil)
                                                                          (=
                                                                           const-decl
                                                                           "[T, T -> boolean]"
                                                                           equalities
                                                                           nil)
                                                                          (syntaxic_type_def_extensionality
                                                                           formula-decl
                                                                           nil
                                                                           language
                                                                           nil)
                                                                          (nonneg_int
                                                                           nonempty-type-eq-decl
                                                                           nil
                                                                           integers
                                                                           nil)
                                                                          (>
                                                                           const-decl
                                                                           "bool"
                                                                           reals
                                                                           nil)
                                                                          (posint
                                                                           nonempty-type-eq-decl
                                                                           nil
                                                                           integers
                                                                           nil)
                                                                          (real_lt_is_strict_total_order
                                                                           name-judgement
                                                                           "(strict_total_order?[real])"
                                                                           real_props
                                                                           nil)
                                                                          (real_ge_is_total_order
                                                                           name-judgement
                                                                           "(total_order?[real])"
                                                                           real_props
                                                                           nil)
                                                                          (int_minus_int_is_int
                                                                           application-judgement
                                                                           "int"
                                                                           integers
                                                                           nil)
                                                                          (-
                                                                           const-decl
                                                                           "[numfield, numfield -> numfield]"
                                                                           number_fields
                                                                           nil)
                                                                          (numfield
                                                                           nonempty-type-eq-decl
                                                                           nil
                                                                           number_fields
                                                                           nil)
                                                                          (below
                                                                           type-eq-decl
                                                                           nil
                                                                           nat_types
                                                                           nil)
                                                                          (<
                                                                           const-decl
                                                                           "bool"
                                                                           reals
                                                                           nil)
                                                                          (nat
                                                                           nonempty-type-eq-decl
                                                                           nil
                                                                           naturalnumbers
                                                                           nil)
                                                                          (>=
                                                                           const-decl
                                                                           "bool"
                                                                           reals
                                                                           nil)
                                                                          (int
                                                                           nonempty-type-eq-decl
                                                                           nil
                                                                           integers
                                                                           nil)
                                                                          (integer_pred
                                                                           const-decl
                                                                           "[rational -> boolean]"
                                                                           integers
                                                                           nil)
                                                                          (rational
                                                                           nonempty-type-from-decl
                                                                           nil
                                                                           rationals
                                                                           nil)
                                                                          (rational_pred
                                                                           const-decl
                                                                           "[real -> boolean]"
                                                                           rationals
                                                                           nil)
                                                                          (real
                                                                           nonempty-type-from-decl
                                                                           nil
                                                                           reals
                                                                           nil)
                                                                          (real_pred
                                                                           const-decl
                                                                           "[number_field -> boolean]"
                                                                           reals
                                                                           nil)
                                                                          (number_field
                                                                           nonempty-type-from-decl
                                                                           nil
                                                                           number_fields
                                                                           nil)
                                                                          (number_field_pred
                                                                           const-decl
                                                                           "[number -> boolean]"
                                                                           number_fields
                                                                           nil)
                                                                          (number
                                                                           nonempty-type-decl
                                                                           nil
                                                                           numbers
                                                                           nil)
                                                                          (finseq
                                                                           type-eq-decl
                                                                           nil
                                                                           finite_sequences
                                                                           nil)
                                                                          (map
                                                                           adt-constructor-decl
                                                                           "[finseq[syntaxic] -> (map?)]"
                                                                           language
                                                                           nil)
                                                                          (type_def?
                                                                           adt-recognizer-decl
                                                                           "[syntaxic -> boolean]"
                                                                           language
                                                                           nil)
                                                                          (type_def
                                                                           adt-constructor-decl
                                                                           "[syntaxic -> (type_def?)]"
                                                                           language
                                                                           nil)
                                                                          (OR
                                                                           const-decl
                                                                           "[bool, bool -> bool]"
                                                                           booleans
                                                                           nil)
                                                                          (const_def?
                                                                           adt-recognizer-decl
                                                                           "[syntaxic -> boolean]"
                                                                           language
                                                                           nil)
                                                                          (theory_def?
                                                                           adt-recognizer-decl
                                                                           "[syntaxic -> boolean]"
                                                                           language
                                                                           nil)
                                                                          (itype?
                                                                           adt-recognizer-decl
                                                                           "[syntaxic -> boolean]"
                                                                           language
                                                                           nil)
                                                                          (iconst?
                                                                           adt-recognizer-decl
                                                                           "[syntaxic -> boolean]"
                                                                           language
                                                                           nil)
                                                                          (def
                                                                           shared-adt-accessor-decl
                                                                           "[{x: syntaxic |
              type_def?(x) OR const_def?(x) OR theory_def?(x) OR itype?(x)
           OR iconst?(x)} ->
   syntaxic]"
                                                                           language
                                                                           nil)
                                                                          (map?
                                                                           adt-recognizer-decl
                                                                           "[syntaxic -> boolean]"
                                                                           language
                                                                           nil)
                                                                          (syntaxic_map_extensionality
                                                                           formula-decl
                                                                           nil
                                                                           language
                                                                           nil)
                                                                          (↑
                                                                           def-decl
                                                                           "syntaxic"
                                                                           subst
                                                                           nil)
                                                                          (finseq_appl
                                                                           const-decl
                                                                           "[below[length(fs)] -> T]"
                                                                           finite_sequences
                                                                           nil)
                                                                          (k
                                                                           const-decl
                                                                           "(scontext?)"
                                                                           language
                                                                           nil)
                                                                          (boolean
                                                                           nonempty-type-decl
                                                                           nil
                                                                           booleans
                                                                           nil)
                                                                          (bool
                                                                           nonempty-type-eq-decl
                                                                           nil
                                                                           booleans
                                                                           nil)
                                                                          (NOT
                                                                           const-decl
                                                                           "[bool -> bool]"
                                                                           booleans
                                                                           nil)
                                                                          (syntaxic
                                                                           type-decl
                                                                           nil
                                                                           language
                                                                           nil)
                                                                          (sdecl?
                                                                           const-decl
                                                                           "bool"
                                                                           language
                                                                           nil))
                                                                         shostak))
  (shift_concat_TCC1 0
   (shift_concat_TCC1-1 nil 3583678716 ("" (subtype-tcc) nil nil) nil
    nil)) (shift_concat 0
           (shift_concat-1 nil 3583678716
            ("" (skosimp* :preds? t)
             (("" (expand ++)
               (("" (expand o)
                 (("" (decompose-equality 1)
                   (("1" (rewrite* length_shift)
                     (("1" (decompose-equality 1)
                       (("1" (grind) nil nil) ("2" (grind) nil nil)
                        ("3" (grind) nil nil) ("4" (grind) nil nil)
                        ("5" (grind) nil nil) ("6" (grind) nil nil)
                        ("7" (grind) nil nil) ("8" (grind) nil nil)
                        ("9" (grind) nil nil) ("10" (grind) nil nil)
                        ("11" (grind) nil nil) ("12" (grind) nil nil)
                        ("13" (grind) nil nil) ("14" (grind) nil nil)
                        ("15" (grind) nil nil) ("16" (grind) nil nil)
                        ("17" (grind) nil nil) ("18" (grind) nil nil)
                        ("19" (grind) nil nil) ("20" (grind) nil nil))
                       nil)
                      ("2" (grind) nil nil))
                     nil)
                    ("2" (hide 2) (("2" (grind) nil nil)) nil)
                    ("3" (hide 2) (("3" (grind) nil nil)) nil))
                   nil))
                 nil))
               nil))
             nil)
            ((scontext? const-decl "bool" language nil)
             (syntaxic type-decl nil language nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (boolean nonempty-type-decl nil booleans nil)
             (O const-decl "finseq" finite_sequences nil)
             (length_shift formula-decl nil subst nil)
             (sdecl? const-decl "bool" language nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil)
             (finseq_appl const-decl "[below[length(fs)] -> T]"
                          finite_sequences nil)
             (IFF const-decl "[bool, bool -> bool]" booleans nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (int_plus_int_is_int application-judgement "int" integers
              nil)
             (real_lt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (map? adt-recognizer-decl "[syntaxic -> boolean]" language
              nil)
             (syntaxic_map_extensionality formula-decl nil language
              nil)
             (IF const-decl "[boolean, T, T -> T]" if_def nil)
             (map adt-constructor-decl "[finseq[syntaxic] -> (map?)]"
                  language nil)
             (↑ def-decl "syntaxic" subst nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (< const-decl "bool" reals nil)
             (numfield nonempty-type-eq-decl nil number_fields nil)
             (+ const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (below type-eq-decl nil nat_types nil)
             (finseq type-eq-decl nil finite_sequences nil)
             (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]"
              language nil)
             (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
             (- const-decl "[numfield, numfield -> numfield]"
                number_fields nil)
             (nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (int_minus_int_is_int application-judgement "int" integers
              nil)
             (++ const-decl "(scontext?)" language nil))
            shostak))
  (kind_shift 0
   (kind_shift-1 nil 3583686501
    ("" (induct U)
     (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
      ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
      ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
      ("10" (grind) nil nil) ("11" (grind) nil nil)
      ("12" (grind) nil nil) ("13" (grind) nil nil)
      ("14" (grind) nil nil) ("15" (grind) nil nil)
      ("16" (grind) nil nil) ("17" (grind) nil nil)
      ("18" (grind) nil nil) ("19" (grind) nil nil)
      ("20" (grind) nil nil) ("21" (grind) nil nil))
     nil)
    ((syntaxic type-decl nil language nil)
     (boolean nonempty-type-decl nil booleans nil)
     (prekeyword type-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (IFF const-decl "[bool, bool -> bool]" booleans nil)
     (kind? const-decl "bool" language nil)
     (↑ def-decl "syntaxic" subst nil)
     (syntaxic_induction formula-decl nil language nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (int_minus_int_is_int application-judgement "int" integers nil)
     (finseq_appl const-decl "[below[length(fs)] -> T]"
                  finite_sequences nil))
    shostak)) (shift_prekind_TCC1 0
               (shift_prekind_TCC1-1 nil 3583682119
                ("" (subtype-tcc) nil nil) nil nil))
  (shift_prekind 0
   (shift_prekind-1 nil 3583682133
    ("" (induct U)
     (("1" (skosimp* :preds? t)
       (("1" (assert)
         (("1" (split 1)
           (("1" (flatten)
             (("1" (assert)
               (("1" (split 1)
                 (("1" (propax) nil nil)
                  ("2" (assert)
                   (("2" (expand ++)
                     (("2" (expand o)
                       (("2" (expand apply)
                         (("2" (assert)
                           (("2" (use kind_shift :polarity? t)
                             (("2"
                               (inst
                                -
                                "run_map(Θ!1)`seq(v1_var!1)"
                                k!1
                                "(run_map(Δ!1)`length, 0)")
                               (("2" (postpone) nil nil)) nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ("2" (postpone) nil nil))
           nil))
         nil))
       nil)
      ("2" (postpone) nil nil) ("3" (postpone) nil nil)
      ("4" (postpone) nil nil) ("5" (postpone) nil nil)
      ("6" (postpone) nil nil) ("7" (postpone) nil nil)
      ("8" (postpone) nil nil) ("9" (postpone) nil nil)
      ("10" (postpone) nil nil) ("11" (postpone) nil nil)
      ("12" (postpone) nil nil) ("13" (postpone) nil nil)
      ("14" (postpone) nil nil) ("15" (postpone) nil nil)
      ("16" (postpone) nil nil) ("17" (postpone) nil nil)
      ("18" (postpone) nil nil) ("19" (postpone) nil nil)
      ("20" (postpone) nil nil) ("21" (postpone) nil nil)
      ("22" (postpone) nil nil) ("23" (postpone) nil nil)
      ("24" (postpone) nil nil) ("25" (postpone) nil nil)
      ("26" (postpone) nil nil))
     nil)
    nil shostak)) (shift_pretype_TCC1 0
                   (shift_pretype_TCC1-1 nil 3583614888
                    ("" (subtype-tcc) nil nil) nil nil))
  (shift_pretype 0
   (shift_pretype-1 nil 3583528859
    ("" (grind)
     (("" (typepred "T!1 ↑ nb!1") (("" (grind) nil nil)) nil)) nil)
    ((pretype type-eq-decl nil language nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (prekeyword type-decl nil language nil)
     (syntaxic type-decl nil language nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (semantic type-eq-decl nil language nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (>= const-decl "bool" reals nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (↑ def-decl "syntaxic" subst nil))
    shostak)) (shift_preterm 0
               (shift_preterm-1 nil 3583528897
                ("" (skosimp* :preds? t)
                 (("" (grind)
                   (("" (typepred "a!1 ↑ nb!1") (("" (grind) nil nil))
                     nil))
                   nil))
                 nil)
                ((preterm type-eq-decl nil language nil)
                 (PRETERM adt-constructor-decl "(PRETERM?)" language
                  nil)
                 (PRETERM? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (prekeyword type-decl nil language nil)
                 (syntaxic type-decl nil language nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (↑ def-decl "syntaxic" subst nil)
                 (IMPLIES const-decl "[bool, bool -> bool]" booleans
                  nil)
                 (AND const-decl "[bool, bool -> bool]" booleans nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (>= const-decl "bool" reals nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number nonempty-type-decl nil numbers nil)
                 (semantic type-eq-decl nil language nil)
                 (PRETYPE adt-constructor-decl "(PRETYPE?)" language
                  nil)
                 (PRETYPE? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (PREINTERP adt-constructor-decl "(PREINTERP?)"
                  language nil)
                 (PREINTERP? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)"
                  language nil)
                 (PRECONTEXT? adt-recognizer-decl
                  "[prekeyword -> boolean]" language nil)
                 (OR const-decl "[bool, bool -> bool]" booleans nil))
                shostak))
  (shift_size 0
   (shift_size-1 nil 3583528800
    ("" (induct-and-simplify A)
     (("1" (grind)
       (("1" (invoke (typepred "%1") (~ + "parsed?(%1)(%)"))
         (("1" (grind) nil nil)) nil))
       nil)
      ("2" (grind)
       (("2" (invoke (typepred "%1") (~ 2 "parsed?(%1)(%)"))
         (("2" (grind) nil nil)) nil))
       nil)
      ("3" (grind)
       (("3" (invoke (typepred "%1") (~ + "parsed?(%1)(%)"))
         (("3" (grind) nil nil)) nil))
       nil)
      ("4" (grind)
       (("4" (grind)
         (("4" (invoke (typepred "%1") (~ 2 "parsed?(%1)(%)"))
           (("4" (grind) nil nil)) nil))
         nil))
       nil))
     nil)
    ((NOT const-decl "[bool -> bool]" booleans nil)
     (real_lt_is_strict_total_order name-judgement
      "(strict_total_order?[real])" real_props nil)
     (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
      integers nil)
     (+ const-decl "[numfield, numfield -> numfield]" number_fields
        nil)
     (numfield nonempty-type-eq-decl nil number_fields nil)
     (nnint_plus_posint_is_posint application-judgement "posint"
      integers nil)
     (posint_plus_nnint_is_posint application-judgement "posint"
      integers nil)
     (PRETERM adt-constructor-decl "(PRETERM?)" language nil)
     (PRETERM? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
     (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
     (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]"
      language nil)
     (OR const-decl "[bool, bool -> bool]" booleans nil)
     (PRETYPE adt-constructor-decl "(PRETYPE?)" language nil)
     (PRETYPE? adt-recognizer-decl "[prekeyword -> boolean]" language
      nil)
     (prekeyword type-decl nil language nil)
     (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (boolean nonempty-type-decl nil booleans nil)
     (syntaxic type-decl nil language nil)
     (↑ def-decl "syntaxic" subst nil)
     (AND const-decl "[bool, bool -> bool]" booleans nil)
     (semantic type-eq-decl nil language nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (>= const-decl "bool" reals nil)
     (int nonempty-type-eq-decl nil integers nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (real nonempty-type-from-decl nil reals nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number nonempty-type-decl nil numbers nil)
     (= const-decl "[T, T -> boolean]" equalities nil)
     (pretype type-eq-decl nil language nil)
     (size def-decl "nat" subst nil)
     (syntaxic_induction formula-decl nil language nil))
    nil)) (subst_TCC1 0
           (subst_TCC1-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((boolean nonempty-type-decl nil booleans nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (NOT const-decl "[bool -> bool]" booleans nil)
             (number nonempty-type-decl nil numbers nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (>= const-decl "bool" reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (int_minus_int_is_int application-judgement "int" integers
              nil)
             (real_gt_is_strict_total_order name-judgement
              "(strict_total_order?[real])" real_props nil)
             (real_ge_is_total_order name-judgement
              "(total_order?[real])" real_props nil))
            nil))
  (subst_TCC2 0
   (subst_TCC2-1 nil 3583528800 ("" (grind) nil nil)
    ((boolean nonempty-type-decl nil booleans nil)
     (bool nonempty-type-eq-decl nil booleans nil)
     (NOT const-decl "[bool -> bool]" booleans nil)
     (number nonempty-type-decl nil numbers nil)
     (number_field_pred const-decl "[number -> boolean]" number_fields
      nil)
     (number_field nonempty-type-from-decl nil number_fields nil)
     (real_pred const-decl "[number_field -> boolean]" reals nil)
     (real nonempty-type-from-decl nil reals nil)
     (>= const-decl "bool" reals nil)
     (rational_pred const-decl "[real -> boolean]" rationals nil)
     (rational nonempty-type-from-decl nil rationals nil)
     (integer_pred const-decl "[rational -> boolean]" integers nil)
     (int nonempty-type-eq-decl nil integers nil)
     (nat nonempty-type-eq-decl nil naturalnumbers nil)
     (real_ge_is_total_order name-judgement "(total_order?[real])"
      real_props nil)
     (<< adt-def-decl "(strict_well_founded?[syntaxic])" language nil))
    nil)) (subst_TCC3 0
           (subst_TCC3-1 nil 3583528800 ("" (subtype-tcc) nil nil)
            ((nnint_plus_nnint_is_nnint application-judgement
              "nonneg_int" integers nil)
             (int_minus_int_is_int application-judgement "int" integers
              nil))
            nil))
  (subst_TCC4 0
   (subst_TCC4-1 nil 3583528800 ("" (subtype-tcc) nil nil)
    ((int_minus_int_is_int application-judgement "int" integers nil))
    nil)) (subst_subtype_TCC1 0
           (subst_subtype_TCC1-1 nil 3583614241
            ("" (subtype-tcc) nil nil)
            ((O const-decl "finseq" finite_sequences nil)
             (++ const-decl "(scontext?)" language nil)
             (sdecl? const-decl "bool" language nil))
            nil))
  (subst_subtype_TCC2 0
   (subst_subtype_TCC2-1 nil 3583614241 ("" (subtype-tcc) nil nil) nil
    nil)) (subst_subtype_TCC3 0
           (subst_subtype_TCC3-1 nil 3583614241
            ("" (subtype-tcc) nil nil) nil nil))
  (subst_subtype_TCC4 0
   (subst_subtype_TCC4-1 nil 3583614241 ("" (subtype-tcc) nil nil) nil
    nil)) (subst_pretype_TCC1 0
           (subst_pretype_TCC1-1 nil 3583609445
            ("" (subtype-tcc) nil nil)
            ((sdecl? const-decl "bool" language nil)) nil))
  (subst_preterm_TCC1 0
   (subst_preterm_TCC1-1 nil 3583609445 ("" (subtype-tcc) nil nil) nil
    nil)) (subst_preinterp_TCC1 0
           (subst_preinterp_TCC1-1 nil 3583609445
            ("" (subtype-tcc) nil nil) nil nil))
  (subst_size 0
   (subst_size-1 nil 3583528800 ("" (judgement-tcc) nil nil) nil nil)))

