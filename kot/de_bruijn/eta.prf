(eta
 (η_TCC1 0
  (η_TCC1-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC2 0
  (η_TCC2-1 nil 3583690452
   ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC3 0
  (η_TCC3-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC4 0
  (η_TCC4-1 nil 3583690452
   ("" (skosimp* :preds? t) (("" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC5 0
  (η_TCC5-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (expand "sexpr?" 3 1)
        (("" (expand "sdecl?" +)
          (("" (expand "sinterp?" +)
            (("" (assert)
              (("" (typepred "interpret")
                (("" (inst?)
                  (("" (expand "↑" 3) (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (↑ macro-decl "syntaxic" subst nil)
    (interpret def-decl "(sexpr?)" language nil)
    (interpret? def-decl "bool" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC6 0
  (η_TCC6-1 nil 3583690452
   ("" (skosimp* :preds? t) (("" (grind) nil nil)) nil)
   ((sinterp? adt-def-decl "boolean" language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (kind? const-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (scontext? type-eq-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (interpret? def-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (η_TCC7 0
  (η_TCC7-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (all-typepreds)
        (("" (expand "scontext?")
          (("" (expand "kind?") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((sinterp? adt-def-decl "boolean" language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (kind? const-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (scontext? type-eq-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (def shared-adt-accessor-decl
     "[d: {x: syntaxic |     iconst?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> {x: syntaxic | IF type_def?(d) THEN sexpr?(x) ELSE scontext?(x) ENDIF}]"
     language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (v adt-constructor-decl "[nat -> (v?)]" language nil)
    (v? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (even? const-decl "bool" integers nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (η_TCC8 0
  (η_TCC8-1 nil 3583690452
   ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC9 0
  (η_TCC9-1 nil 3583690452
   ("" (subtype-tcc)
    (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil)
   ((sexpr? adt-def-decl "boolean" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (apply const-decl "(sdecl?)" language nil))
   nil))
 (η_TCC10 0
  (η_TCC10-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (assert)
        (("" (rewrite -8 :dont-delete? t)
          (("" (expand "sdecl?" +)
            (("" (expand "sinterp?" +)
              (("" (expand "sexpr?" +) (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC11 0
  (η_TCC11-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (all-typepreds)
        (("" (assert)
          (("" (expand "kind?") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((sinterp? adt-def-decl "boolean" language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (kind? const-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (scontext? type-eq-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (v adt-constructor-decl "[nat -> (v?)]" language nil)
    (v? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (def shared-adt-accessor-decl
     "[d: {x: syntaxic |     iconst?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> {x: syntaxic | IF type_def?(d) THEN sexpr?(x) ELSE scontext?(x) ENDIF}]"
     language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (even? const-decl "bool" integers nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (η_TCC12 0
  (η_TCC12-1 nil 3583690452
   ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC13 0
  (η_TCC13-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -7 :dont-delete? t)
        (("" (expand "sexpr?" +)
          (("" (expand "sdecl?")
            (("" (expand "sinterp?") (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC14 0
  (η_TCC14-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (all-typepreds)
        (("" (assert)
          (("" (expand "kind?") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (kind? const-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (scontext? type-eq-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (def shared-adt-accessor-decl
     "[d: {x: syntaxic |     iconst?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> {x: syntaxic | IF type_def?(d) THEN sexpr?(x) ELSE scontext?(x) ENDIF}]"
     language nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dot adt-constructor-decl "[[nat, (sinterp?), (sexpr?)] -> (dot?)]"
     language nil)
    (dot? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (even? const-decl "bool" integers nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (η_TCC15 0
  (η_TCC15-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand "kind?") (("" (assert) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (kind? const-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (scontext? type-eq-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (η_TCC16 0
  (η_TCC16-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (all-typepreds)
        (("" (assert)
          (("" (expand "kind?") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (kind? const-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (scontext? type-eq-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (def shared-adt-accessor-decl
     "[d: {x: syntaxic |     iconst?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> {x: syntaxic | IF type_def?(d) THEN sexpr?(x) ELSE scontext?(x) ENDIF}]"
     language nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dot adt-constructor-decl "[[nat, (sinterp?), (sexpr?)] -> (dot?)]"
     language nil)
    (dot? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (even? const-decl "bool" integers nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (η_TCC17 0
  (η_TCC17-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -9 :dont-delete? t) (("" (postpone) nil nil)) nil))
      nil))
    nil)
   nil nil))
 (η_TCC18 0
  (η_TCC18-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -9 :dont-delete? t)
        (("" (all-typepreds)
          (("" (assert)
            (("" (expand "sinterp?") (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even? const-decl "bool" integers nil)
    (total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (dot adt-constructor-decl "[[nat, (sinterp?), (sexpr?)] -> (dot?)]"
     language nil)
    (dot? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (strict_total_order? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC19 0
  (η_TCC19-1 nil 3583690452
   ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC20 0
  (η_TCC20-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC21 0
  (η_TCC21-1 nil 3583690452 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC22 0
  (η_TCC22-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?"))
      (("" (assert) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (size def-decl "nat" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC23 0
  (η_TCC23-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (all-typepreds)
        (("" (assert)
          (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (fun? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (fun adt-constructor-decl "[[(sexpr?), (sexpr?)] -> (fun?)]"
     language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC24 0
  (η_TCC24-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC25 0
  (η_TCC25-1 nil 3583690452
   ("" (termination-tcc)
    (("1" (all-typepreds)
      (("1" (expand "sexpr?") (("1" (propax) nil nil)) nil)) nil)
     ("2" (all-typepreds)
      (("2" (expand "sexpr?") (("2" (propax) nil nil)) nil)) nil)
     ("3" (all-typepreds)
      (("3" (expand "sexpr?") (("3" (propax) nil nil)) nil)) nil))
    nil)
   ((fun adt-constructor-decl "[[(sexpr?), (sexpr?)] -> (fun?)]"
     language nil)
    (fun? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC26 0
  (η_TCC26-1 nil 3583690452
   ("" (subtype-tcc)
    (("" (expand "sdecl?") (("" (propax) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC27 0
  (η_TCC27-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC28 0
  (η_TCC28-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?"))
      (("" (assert) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (size def-decl "nat" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC29 0
  (η_TCC29-1 nil 3583690452
   ("" (subtype-tcc)
    (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC30 0
  (η_TCC30-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC31 0
  (η_TCC31-1 nil 3583690452
   ("" (subtype-tcc)
    (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC32 0
  (η_TCC32-1 nil 3583690452 ("" (termination-tcc) nil nil)
   ((sdecl? adt-def-decl "boolean" language nil)) nil))
 (η_TCC33 0
  (η_TCC33-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC34 0
  (η_TCC34-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (rewrite -9 :dont-delete? t)
      (("" (assert)
        (("" (expand "sdecl?" +)
          (("" (expand "sinterp?" +)
            (("" (expand "sexpr?" +) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (size def-decl "nat" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC35 0
  (η_TCC35-1 nil 3583690452
   ("" (termination-tcc)
    (("1" (expand "sexpr?") (("1" (propax) nil nil)) nil)
     ("2" (expand "sexpr?") (("2" (propax) nil nil)) nil)
     ("3" (expand "sexpr?") (("3" (propax) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC36 0
  (η_TCC36-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC37 0
  (η_TCC37-1 nil 3583690452
   ("" (termination-tcc)
    (("1" (expand "sexpr?") (("1" (propax) nil nil)) nil)
     ("2" (expand "sexpr?") (("2" (propax) nil nil)) nil)
     ("3" (expand "sexpr?") (("3" (propax) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC38 0
  (η_TCC38-1 nil 3583690452
   ("" (subtype-tcc)
    (("" (expand "sexpr?")
      (("" (expand "sdecl?") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC39 0
  (η_TCC39-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC40 0
  (η_TCC40-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?") +)
      (("" (assert) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (size def-decl "nat" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC41 0
  (η_TCC41-1 nil 3583690452
   ("" (subtype-tcc)
    (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?") +)
      (("" (assert)
        (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?") -)
          (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC42 0
  (η_TCC42-1 nil 3583690452
   ("" (skosimp* :preds? t) (("" (assert) (("" (grind) nil nil)) nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size def-decl "nat" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC43 0
  (η_TCC43-1 nil 3583690452
   ("" (subtype-tcc)
    (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?") -)
      (("" (propax) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC44 0
  (η_TCC44-1 nil 3583690452 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC45 0
  (η_TCC45-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?") +)
        (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (size def-decl "nat" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC46 0
  (η_TCC46-1 nil 3583690452
   ("" (subtype-tcc)
    (("" (expand "sexpr?" -) (("" (propax) nil nil)) nil)) nil)
   ((scontext? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (kind? const-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (scontext? type-eq-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (η_TCC47 0
  (η_TCC47-1 nil 3583690452 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC48 0
  (η_TCC48-1 nil 3583690452
   ("" (subtype-tcc)
    (("" (expand "sexpr?" -) (("" (propax) nil nil)) nil)) nil)
   ((scontext? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (kind? const-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (scontext? type-eq-decl nil language nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (η_TCC49 0
  (η_TCC49-1 nil 3583690452 ("" (termination-tcc) nil nil)
   ((sdecl? adt-def-decl "boolean" language nil)) nil))
 (η_TCC50 0
  (η_TCC50-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC51 0
  (η_TCC51-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?") +)
      (("" (assert) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (size def-decl "nat" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC52 0
  (η_TCC52-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand "sexpr?" -) (("" (assert) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC53 0
  (η_TCC53-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC54 0
  (η_TCC54-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand "sexpr?" -) (("" (assert) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC55 0
  (η_TCC55-1 nil 3583690452 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC56 0
  (η_TCC56-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?") +)
      (("" (assert) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (size def-decl "nat" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC57 0
  (η_TCC57-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand "sexpr?" -) (("" (assert) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC58 0
  (η_TCC58-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC59 0
  (η_TCC59-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?") +)
      (("" (assert) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (size def-decl "nat" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC60 0
  (η_TCC60-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand "sexpr?" -) (("" (assert) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC61 0
  (η_TCC61-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC62 0
  (η_TCC62-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?") +)
      (("" (assert) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (size def-decl "nat" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC63 0
  (η_TCC63-1 nil 3583690452 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC64 0
  (η_TCC64-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC65 0
  (η_TCC65-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand "sexpr?" -) (("" (assert) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC66 0
  (η_TCC66-1 nil 3583690452 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC67 0
  (η_TCC67-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?") +)
      (("" (assert) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (size def-decl "nat" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC68 0
  (η_TCC68-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?") +)
      (("" (assert)
        (("" (expand "sexpr?" -) (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC69 0
  (η_TCC69-1 nil 3583690452 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC70 0
  (η_TCC70-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?") +)
      (("" (assert) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (size def-decl "nat" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC71 0
  (η_TCC71-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand "sexpr?" -) (("" (assert) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC72 0
  (η_TCC72-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC73 0
  (η_TCC73-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?") +)
      (("" (assert) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (size def-decl "nat" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC74 0
  (η_TCC74-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand "sexpr?" -) (("" (assert) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC75 0
  (η_TCC75-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC76 0
  (η_TCC76-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand "sexpr?" -) (("" (assert) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC77 0
  (η_TCC77-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC78 0
  (η_TCC78-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?") +)
      (("" (assert) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (size def-decl "nat" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC79 0
  (η_TCC79-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC80 0
  (η_TCC80-1 nil 3583690452 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (η_TCC81 0
  (η_TCC81-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?") +)
      (("" (assert) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (size def-decl "nat" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC82 0
  (η_TCC82-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC83 0
  (η_TCC83-1 nil 3583690452 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC84 0
  (η_TCC84-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC85 0
  (η_TCC85-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand "sexpr?" -) (("" (assert) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC86 0
  (η_TCC86-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC87 0
  (η_TCC87-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?") +)
      (("" (assert) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (size def-decl "nat" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC88 0
  (η_TCC88-1 nil 3583691147
   ("" (skosimp* :preds? t)
    (("" (expand "sexpr?" -)
      (("" (assert)
        (("" (expand "sinterp?" -) (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC89 0
  (η_TCC89-1 nil 3583696980 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC90 0
  (η_TCC90-1 nil 3583696980
   ("" (skosimp* :preds? t)
    (("" (expand "sexpr?" -) (("" (assert) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC91 0
  (η_TCC91-1 nil 3583696980 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil))
   nil))
 (η_TCC92 0
  (η_TCC92-1 nil 3583696980
   ("" (skosimp* :preds? t)
    (("" (expand ("sexpr?" "sdecl?" "sinterp?" "scontext?") +)
      (("" (assert) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (size def-decl "nat" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (η_TCC93 0
  (η_TCC93-1 nil 3583696980 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (scontext? type-eq-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (prekeyword type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil)))

