(eta
 (η_TCC1 0
  (η_TCC1-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((apply const-decl "(sdecl?)" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (preinterp type-eq-decl nil language nil)
    (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
    (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (scontext? type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (η_TCC2 0
  (η_TCC2-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (use "semantic_pretheory")
        (("" (assert)
          (("" (expand "semantic?")
            (("" (assert)
              (("" (expand "prekind?" -1)
                (("" (lift-if)
                  (("" (bddsimp)
                    (("1" (assert) nil nil) ("2" (assert) nil nil)
                     ("3" (assert) nil nil) ("4" (assert) nil nil)
                     ("5" (assert) nil nil) ("6" (assert) nil nil)
                     ("7" (assert) nil nil) ("8" (assert) nil nil)
                     ("9" (assert) nil nil) ("10" (assert) nil nil)
                     ("11" (assert) nil nil) ("12" (assert) nil nil)
                     ("13" (assert) nil nil) ("14" (assert) nil nil)
                     ("15" (assert) nil nil) ("16" (assert) nil nil)
                     ("17" (assert) nil nil) ("18" (assert) nil nil)
                     ("19" (assert) nil nil) ("20" (assert) nil nil)
                     ("21" (assert) nil nil) ("22" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((preinterp type-eq-decl nil language nil)
    (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
    (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (scontext? type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic_pretheory formula-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (concat_empty formula-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (η_TCC3 0
  (η_TCC3-1 nil 3583690452 ("" (subtype-tcc) nil nil)
   ((apply const-decl "(sdecl?)" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (scontext? type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (η_TCC4 0
  (η_TCC4-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (grind) (("" (all-typepreds) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((apply const-decl "(sdecl?)" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (scontext? type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (def shared-adt-accessor-decl
     "[d: {x: syntaxic |     iconst?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> {x: syntaxic | IF type_def?(d) THEN sexpr?(x) ELSE scontext?(x) ENDIF}]"
     language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (FALSE const-decl "bool" booleans nil)
    (even? const-decl "bool" integers nil)
    (irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (trichotomous? const-decl "bool" orders nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (η_TCC5 0
  (η_TCC5-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -10)
        (("" (expand "semantic?")
          (("" (assert)
            (("" (grind)
              (("1" (grind-with-ext) nil nil)
               ("2" (grind-with-ext) nil nil)
               ("3" (grind-with-ext) nil nil)
               ("4" (grind-with-ext) nil nil)
               ("5" (grind-with-ext) nil nil)
               ("6" (grind-with-ext) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic type-eq-decl nil language nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil)
    (def shared-adt-accessor-decl
     "[d: {x: syntaxic |     iconst?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> {x: syntaxic | IF type_def?(d) THEN sexpr?(x) ELSE scontext?(x) ENDIF}]"
     language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (compatible? def-decl "bool" language nil)
    (preinterp type-eq-decl nil language nil)
    (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
    (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (scontext? type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory type-eq-decl nil language nil)
    (precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_concat formula-decl nil language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Γ!1 skolem-const-decl "precontext" eta nil)
    (Δ!1 skolem-const-decl "pretheory(Γ!1)" eta nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m!1 skolem-const-decl
     "{m | m < run_map(Γ!1)`length AND theory_def?(apply(Γ!1)(m))}" eta
     nil)
    (v adt-constructor-decl "[nat -> (v?)]" language nil)
    (v? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (O const-decl "finseq" finite_sequences nil)
    (kind? const-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (η_TCC6 0
  (η_TCC6-1 nil 3583690452
   ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
   ((semantic type-eq-decl nil language nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil)
    (def shared-adt-accessor-decl
     "[d: {x: syntaxic |     iconst?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> {x: syntaxic | IF type_def?(d) THEN sexpr?(x) ELSE scontext?(x) ENDIF}]"
     language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (compatible? def-decl "bool" language nil)
    (preinterp type-eq-decl nil language nil)
    (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
    (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (scontext? type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory type-eq-decl nil language nil)
    (precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (η_TCC7 0
  (η_TCC7-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert) (("" (postpone) nil nil)) nil)) nil)
   ((apply const-decl "(sdecl?)" language nil)
    (semantic type-eq-decl nil language nil)
    (def shared-adt-accessor-decl
     "[d: {x: syntaxic |     iconst?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> {x: syntaxic | IF type_def?(d) THEN sexpr?(x) ELSE scontext?(x) ENDIF}]"
     language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil)
    (preinterp type-eq-decl nil language nil)
    (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
    (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (scontext? type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory type-eq-decl nil language nil)
    (precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (η_TCC8 0
  (η_TCC8-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (hide-all-but (-5 4))
        (("" (grind)
          (("" (expand "prekind?") (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((semantic type-eq-decl nil language nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil)
    (def shared-adt-accessor-decl
     "[d: {x: syntaxic |     iconst?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> {x: syntaxic | IF type_def?(d) THEN sexpr?(x) ELSE scontext?(x) ENDIF}]"
     language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (compatible? def-decl "bool" language nil)
    (preinterp type-eq-decl nil language nil)
    (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
    (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (scontext? type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory type-eq-decl nil language nil)
    (precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (↑ def-decl
     "{V | (sexpr?(U) IMPLIES sexpr?(V)) AND (sdecl?(U) IMPLIES sdecl?(V)) AND (sinterp?(U) IMPLIES sinterp?(V)) AND (scontext?(U) IMPLIES scontext?(V))}"
     subst nil)
    (rest const-decl "(scontext?)" language nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (kind? const-decl "bool" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (η_TCC9 0
  (η_TCC9-1 nil 3583690452
   ("" (subtype-tcc)
    (("1" (expand "sexpr?") (("1" (propax) nil nil)) nil)
     ("2" (expand "sexpr?") (("2" (propax) nil nil)) nil))
    nil)
   ((apply const-decl "(sdecl?)" language nil)
    (semantic type-eq-decl nil language nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil)
    (def shared-adt-accessor-decl
     "[d: {x: syntaxic |     iconst?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> {x: syntaxic | IF type_def?(d) THEN sexpr?(x) ELSE scontext?(x) ENDIF}]"
     language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (compatible? def-decl "bool" language nil)
    (preinterp type-eq-decl nil language nil)
    (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
    (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (scontext? type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory type-eq-decl nil language nil)
    (precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (η_TCC10 0
  (η_TCC10-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (assert)
        (("" (rewrite -10)
          (("" (expand "semantic?")
            (("" (assert)
              (("" (bddsimp)
                (("1" (assert) (("1" (grind) nil nil)) nil)
                 ("2" (grind) nil nil)
                 ("3" (assert)
                  (("3" (expand "sexpr?") (("3" (propax) nil nil))
                    nil))
                  nil)
                 ("4" (grind) nil nil) ("5" (grind) nil nil)
                 ("6" (assert) (("6" (postpone) nil nil)) nil)
                 ("7" (grind) nil nil) ("8" (grind) nil nil)
                 ("9" (postpone) nil nil) ("10" (grind) nil nil)
                 ("11" (grind) nil nil)
                 ("12" (expand "sexpr?") (("12" (propax) nil nil)) nil)
                 ("13" (assert) (("13" (grind) nil nil)) nil)
                 ("14" (grind) nil nil) ("15" (postpone) nil nil)
                 ("16" (grind) nil nil) ("17" (grind) nil nil)
                 ("18" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (η_TCC11 0
  (η_TCC11-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -9)
        (("" (expand "semantic?")
          (("" (assert)
            (("" (assert)
              (("" (bddsimp)
                (("1" (assert)
                  (("1" (expand "apply")
                    (("1" (assert)
                      (("1" (hide-all-but (-4 5))
                        (("1" (grind)
                          (("1" (all-typepreds) (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-4 5))
                  (("2" (all-typepreds) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic type-eq-decl nil language nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil)
    (def shared-adt-accessor-decl
     "[d: {x: syntaxic |     iconst?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> {x: syntaxic | IF type_def?(d) THEN sexpr?(x) ELSE scontext?(x) ENDIF}]"
     language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (compatible? def-decl "bool" language nil)
    (preinterp type-eq-decl nil language nil)
    (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
    (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (scontext? type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory type-eq-decl nil language nil)
    (precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_concat formula-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (η_TCC12 0
  (η_TCC12-1 nil 3583690452
   ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
   ((semantic type-eq-decl nil language nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil)
    (def shared-adt-accessor-decl
     "[d: {x: syntaxic |     iconst?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> {x: syntaxic | IF type_def?(d) THEN sexpr?(x) ELSE scontext?(x) ENDIF}]"
     language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (compatible? def-decl "bool" language nil)
    (preinterp type-eq-decl nil language nil)
    (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
    (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (scontext? type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory type-eq-decl nil language nil)
    (precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (η_TCC13 0
  (η_TCC13-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -9)
        (("" (expand "semantic?")
          (("" (assert)
            (("" (assert)
              (("" (bddsimp)
                (("1" (grind)
                  (("1" (grind-with-ext) nil nil)
                   ("2" (grind-with-ext) nil nil)
                   ("3" (grind-with-ext) nil nil))
                  nil)
                 ("2" (grind)
                  (("1" (grind-with-ext) nil nil)
                   ("2" (grind-with-ext) nil nil)
                   ("3" (grind-with-ext) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic type-eq-decl nil language nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil)
    (def shared-adt-accessor-decl
     "[d: {x: syntaxic |     iconst?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> {x: syntaxic | IF type_def?(d) THEN sexpr?(x) ELSE scontext?(x) ENDIF}]"
     language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (compatible? def-decl "bool" language nil)
    (preinterp type-eq-decl nil language nil)
    (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
    (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (scontext? type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory type-eq-decl nil language nil)
    (precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_concat formula-decl nil language nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Γ!1 skolem-const-decl "precontext" eta nil)
    (Δ!1 skolem-const-decl "pretheory(Γ!1)" eta nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m!1 skolem-const-decl
     "{m | m < run_map(Γ!1)`length AND theory_def?(apply(Γ!1)(m))}" eta
     nil)
    (v adt-constructor-decl "[nat -> (v?)]" language nil)
    (v? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (kind? const-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (η_TCC14 0
  (η_TCC14-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -11)
        (("" (expand "semantic?")
          (("" (assert)
            (("" (hide-all-but (-4 2))
              (("" (all-typepreds) (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sinterp? adt-def-decl "boolean" language nil)
    (semantic type-eq-decl nil language nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil)
    (def shared-adt-accessor-decl
     "[d: {x: syntaxic |     iconst?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> {x: syntaxic | IF type_def?(d) THEN sexpr?(x) ELSE scontext?(x) ENDIF}]"
     language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (compatible? def-decl "bool" language nil)
    (preinterp type-eq-decl nil language nil)
    (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
    (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (scontext? type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory type-eq-decl nil language nil)
    (precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_concat formula-decl nil language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (η_TCC15 0
  (η_TCC15-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (rewrite -11)
      (("" (expand "semantic?")
        (("" (assert)
          (("" (bddsimp)
            (("1" (assert)
              (("1" (flatten)
                (("1" (assert) (("1" (postpone) nil nil)) nil)) nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (η_TCC16 0
  (η_TCC16-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -11)
        (("" (expand "semantic?")
          (("" (assert)
            (("" (bddsimp)
              (("1" (assert) (("1" (assert) nil nil)) nil)
               ("2" (assert) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sinterp? adt-def-decl "boolean" language nil)
    (semantic type-eq-decl nil language nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil)
    (def shared-adt-accessor-decl
     "[d: {x: syntaxic |     iconst?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> {x: syntaxic | IF type_def?(d) THEN sexpr?(x) ELSE scontext?(x) ENDIF}]"
     language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (compatible? def-decl "bool" language nil)
    (preinterp type-eq-decl nil language nil)
    (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
    (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (scontext? type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory type-eq-decl nil language nil)
    (precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_concat formula-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (η_TCC17 0
  (η_TCC17-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert) (("" (postpone) nil nil)) nil)) nil)
   nil nil))
 (η_TCC18 0
  (η_TCC18-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert) (("" (rewrite -11) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((sinterp? adt-def-decl "boolean" language nil)
    (semantic type-eq-decl nil language nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil)
    (def shared-adt-accessor-decl
     "[d: {x: syntaxic |     iconst?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> {x: syntaxic | IF type_def?(d) THEN sexpr?(x) ELSE scontext?(x) ENDIF}]"
     language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iconst? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (compatible? def-decl "bool" language nil)
    (preinterp type-eq-decl nil language nil)
    (PREINTERP adt-constructor-decl "(PREINTERP?)" language nil)
    (PREINTERP? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (apply const-decl "(sdecl?)" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (run_map adt-accessor-decl "[scontext? -> finseq[(sdecl?)]]"
     language nil)
    (scontext? type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pretheory type-eq-decl nil language nil)
    (precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (map adt-constructor-decl "[finseq[(sdecl?)] -> (map?)]" language
         nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sdecl? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (η_TCC19 0
  (η_TCC19-1 nil 3583690452
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -12)
        (("" (inst?)
          (("1" (assert)
            (("1" (flatten)
              (("1" (delete -8 -9)
                (("1" (expand "sinterp?" 2)
                  (("1" (expand "sdecl?" 2)
                    (("1" (expand "sexpr?" 2)
                      (("1" (assert)
                        (("1" (expand "semantic?")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (bddsimp)
                                (("1"
                                  (assert)
                                  (("1" (postpone) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2" (postpone) nil nil))
                                  nil)
                                 ("3"
                                  (assert)
                                  (("3" (postpone) nil nil))
                                  nil)
                                 ("4" (postpone) nil nil)
                                 ("5" (postpone) nil nil)
                                 ("6" (postpone) nil nil)
                                 ("7" (postpone) nil nil)
                                 ("8" (postpone) nil nil)
                                 ("9" (postpone) nil nil)
                                 ("10" (postpone) nil nil)
                                 ("11" (postpone) nil nil)
                                 ("12" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil) ("3" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (η_TCC20 0
  (η_TCC20-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC21 0
  (η_TCC21-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC22 0
  (η_TCC22-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC23 0
  (η_TCC23-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC24 0
  (η_TCC24-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC25 0
  (η_TCC25-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC26 0
  (η_TCC26-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC27 0
  (η_TCC27-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC28 0
  (η_TCC28-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC29 0
  (η_TCC29-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC30 0
  (η_TCC30-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC31 0
  (η_TCC31-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC32 0
  (η_TCC32-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC33 0
  (η_TCC33-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC34 0
  (η_TCC34-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC35 0
  (η_TCC35-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC36 0
  (η_TCC36-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC37 0
  (η_TCC37-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC38 0
  (η_TCC38-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC39 0
  (η_TCC39-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC40 0
  (η_TCC40-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC41 0
  (η_TCC41-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC42 0
  (η_TCC42-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC43 0
  (η_TCC43-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC44 0
  (η_TCC44-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC45 0
  (η_TCC45-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC46 0
  (η_TCC46-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC47 0
  (η_TCC47-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC48 0
  (η_TCC48-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC49 0
  (η_TCC49-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC50 0
  (η_TCC50-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC51 0
  (η_TCC51-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC52 0
  (η_TCC52-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC53 0
  (η_TCC53-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC54 0
  (η_TCC54-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC55 0
  (η_TCC55-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC56 0
  (η_TCC56-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC57 0
  (η_TCC57-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC58 0
  (η_TCC58-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC59 0
  (η_TCC59-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC60 0
  (η_TCC60-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC61 0
  (η_TCC61-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC62 0
  (η_TCC62-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC63 0
  (η_TCC63-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC64 0
  (η_TCC64-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC65 0
  (η_TCC65-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC66 0
  (η_TCC66-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC67 0
  (η_TCC67-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC68 0
  (η_TCC68-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC69 0
  (η_TCC69-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC70 0
  (η_TCC70-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC71 0
  (η_TCC71-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC72 0
  (η_TCC72-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC73 0
  (η_TCC73-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC74 0
  (η_TCC74-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC75 0
  (η_TCC75-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC76 0
  (η_TCC76-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC77 0
  (η_TCC77-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC78 0
  (η_TCC78-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC79 0
  (η_TCC79-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC80 0
  (η_TCC80-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC81 0
  (η_TCC81-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC82 0
  (η_TCC82-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC83 0
  (η_TCC83-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC84 0
  (η_TCC84-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC85 0
  (η_TCC85-1 nil 3583690452 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC86 0
  (η_TCC86-1 nil 3583690452 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC87 0
  (η_TCC87-1 nil 3583690452 ("" (cases-tcc) nil nil) nil nil))
 (η_TCC88 0
  (η_TCC88-1 nil 3583691147 ("" (cases-tcc) nil nil) nil nil))
 (η_TCC89 0
  (η_TCC89-1 nil 3583696980 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC90 0
  (η_TCC90-1 nil 3583696980 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC91 0
  (η_TCC91-1 nil 3583696980 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC92 0
  (η_TCC92-1 nil 3583696980 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC93 0
  (η_TCC93-1 nil 3583696980 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC94 0
  (η_TCC94-1 nil 3583696980 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC95 0
  (η_TCC95-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC96 0
  (η_TCC96-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC97 0
  (η_TCC97-1 nil 3583700418 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC98 0
  (η_TCC98-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC99 0
  (η_TCC99-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC100 0
  (η_TCC100-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC101 0
  (η_TCC101-1 nil 3583700418 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC102 0
  (η_TCC102-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC103 0
  (η_TCC103-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC104 0
  (η_TCC104-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC105 0
  (η_TCC105-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC106 0
  (η_TCC106-1 nil 3583700418 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC107 0
  (η_TCC107-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC108 0
  (η_TCC108-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC109 0
  (η_TCC109-1 nil 3583700418 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC110 0
  (η_TCC110-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC111 0
  (η_TCC111-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC112 0
  (η_TCC112-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC113 0
  (η_TCC113-1 nil 3583700418 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC114 0
  (η_TCC114-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC115 0
  (η_TCC115-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC116 0
  (η_TCC116-1 nil 3583700418 ("" (termination-tcc) nil nil) nil nil))
 (η_TCC117 0
  (η_TCC117-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC118 0
  (η_TCC118-1 nil 3583700418 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC119 0
  (η_TCC119-1 nil 3583700418 ("" (cases-tcc) nil nil) nil nil)))

