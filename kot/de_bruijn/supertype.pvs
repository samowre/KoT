supertype: THEORY
BEGIN
  IMPORTING subst, init_context

  U, V: VAR syntaxic
  x, y: VAR nat
  σ, τ: VAR (interp?)
  T, a, T1, T2: VAR (sexpr?)
  A: VAR (sexpr?)
  Γ: VAR finseq[(scontext?)]
  n: VAR above(1)

  % Special type_size function defined for termination
  % of functions defined in supertype
  type_size(U): RECURSIVE nat =
    CASES U OF
      fun(A, B): type_size(A) + type_size(B) + 1
    , prod(A, B): type_size(A) + type_size(B) + 1
    , subtype(T, a): type_size(T)
      ELSE 0
    ENDCASES
  MEASURE U BY <<
  AUTO_REWRITE+ type_size
  
  % Direct Supertype : 3.2
  μ0(U): RECURSIVE syntaxic =
    CASES U OF
      subtype(T, a): μ0(T)
      ELSE U
    ENDCASES
  MEASURE U BY <<

  % Adding subtype contraints : 4.4
  AUTO_REWRITE+ sexpr?, scontext?, sinterp?
  ;/(U, a)(n): RECURSIVE
    { V | (sexpr?(U) => sexpr?(V)) AND
          (sinterp?(U) => sinterp?(V)) AND
	  (scontext?(U) => scontext?(V)) } =
    CASES U OF
      subtype(T, b): subtype(T, (b ∧ (a ↑ 1))(n + 1))
    , fun(A, B): fun((A/a)(n), (B/(a ↑ 1))(n + 1))
    , prod(A, B): prod((A/a)(n), (B/(a ↑ 1))(n + 1))
      ELSE U
    ENDCASES
  MEASURE type_size(U)

  % Function μ and π as one recursive function,
  % in order to deal with the mutual recursion
  mubody(U)(n): RECURSIVE [same(U), (sexpr?)] =
    CASES U OF
      subtype(T, a):
        LET (muT, bodyT) = mubody(T)(n) IN
  	LET piT = lam(muT, bodyT) IN
  	(muT, (app(piT ↑ 1, v(0)) ∧ a)(n + 1))
    , fun(A, B):
        LET (muB, bodyB) = mubody(B)(n + 1) IN
  	LET piB = lam(muB, bodyB) IN
  	(fun(A, muB), forall_(A, app((piB ↑ 1), app(v(1), v(0))))(n + 1))
    , prod(A, B):
        LET (muA, bodyA) = mubody(A)(n),
  	    (muB, bodyB) = mubody(B)(n + 1) IN
  	LET piA = lam(muA, bodyA),
  	    piB = lam(muB, bodyB) IN
  	(prod(muA, (muB / (app((piA ↑ 1), v(0))))(n + 1)),
  	 (app((piA ↑ 1), lproj(v(0))) ∧
  	  app(subst(piB ↑ 1, 1, lproj(v(0))), rproj(v(0))))(n + 1))
      ELSE (U, TRUE_(n + 1))
    ENDCASES
  MEASURE U BY <<
  AUTO_REWRITE- sexpr?, sinterp?, scontext?

  % Maximal supertype : 3.1, 4.5
  μ(T)(n): (sexpr?) =
    mubody(T)(n)`1

  % Subtype constraints : 3.4, 4.6
  π(T)(n): (sexpr?) =
    LET (muT, bodyT) = mubody(T)(n) IN
    lam(muT, bodyT)

  AUTO_REWRITE+ μ, π
  mu: THEOREM
    μ(T)(n) = CASES T OF
      fun(A, B): fun(A, μ(B)(n + 1))
    , prod(A, B): prod(μ(A)(n), (μ(B)(n + 1) / (app((π(A)(n) ↑ 1), v(0))))(n + 1))
    , subtype(T, a): μ(T)(n)
      ELSE T
    ENDCASES

  pi: THEOREM
    π(T)(n) = CASES T OF
      % { x:  T | a } ↦ λ(x: μ(T)): π(T)      (  x ) ∧ a
      %                   ^————————\____/ additional λ
      subtype(T,  a):   lam(μ(T)(n), (app(π(T)(n) ↑ 1, v(0)) ∧ a)(n + 1)),

      % [i: A → B] ↦ λ(x: [i: A → μ(B)]):  ∀  (i: A): π(B)     (  x (  i ))
      %                ^—————————————————————————————\____/ additional λ
      fun(  A,  B):  lam(fun(A, μ(B)(n + 1)), forall_(A, app(π(B)(n + 1) ↑ 1, app(v(1), v(0))))(n + 1)),

      % [i: A, B]  ↦ λ(x: [i: μ(A   ), μ(B   )\π(A)(   i)      ]): π(A)     ( p₁     x  ) ∧       π(B)[ i ← (p₁    x)] ( p₂     x)
      %                ^——————————————————————————————————————————\____/ additional λ
      prod( A, B):   lam(prod(μ(A)(n), (μ(B)(n + 1)/(app(π(A)(n) ↑ 1, v(0))))(n + 1)), (app(π(A)(n) ↑ 1, lproj(v(0))) ∧ app(subst(π(B)(n + 1) ↑ 1, 1, lproj(v(0))), rproj(v(0))))(n + 1))

      ELSE lam(T, TRUE_(n + 1))
    ENDCASES
  AUTO_REWRITE- μ, π
  AUTO_REWRITE+ mu, pi

  divide_size: JUDGEMENT
    /(U, a)(n) HAS_TYPE { V | type_size(V) = type_size(U) }
  mubody_size: JUDGEMENT
    mubody(U)(n) HAS_TYPE [{ V | type_size(V) = type_size(U) }, (sexpr?)]
  mu_size: JUDGEMENT
    μ(T)(n) HAS_TYPE { A | type_size(A) = type_size(T) }
  shift_size: JUDGEMENT
    ↑(U, (nb: [nat, nat])) HAS_TYPE { V | type_size(V) = type_size(U) }
  subst_size: JUDGEMENT
    subst(U, x, (a | type_size(a) = 0)) HAS_TYPE { V | type_size(V) = type_size(U) }

  % Type equivalence proof obligations : 3.6
  ;≃(T1, T2)(n: above(1)): RECURSIVE (tcc?) =
    CASES T1 OF
      fun(A1, B1): CASES T2 OF
        fun(A2, B2): (μ(A1)(n) ≃ μ(A2)(n))(n) ++ 
	             t((π(A1)(n) ≐ π(A2)(n))(fun(μ(A1)(n), bool_(n + 1)))(n)) ++
		     forall_(A1, (B1 ≃ B2)(n + 1))(n)
	ELSE  t(FALSE_(n)) ENDCASES,
      prod(A1, B1): CASES T2 OF
        prod(A2, B2): (A1 ≃ A2)(n) ++
	              forall_(A1, (B1 ≃ B2)(n + 1))(n)
	ELSE t(FALSE_(n)) ENDCASES
    ELSE IF T2 = T1 THEN notcc ELSE t(FALSE_(n)) ENDIF ENDCASES
  MEASURE type_size(T1)

  % Type equivalence for dependent types (A ≃ B)/a : 4.8
  ;∼(T1, T2)(a)(n: above(1)): RECURSIVE (tcc?) =
    CASES T1 OF
      fun(A1, B1): CASES T2 OF
        fun(A2, B2): (μ(A1)(n) ≃ μ(A2)(n))(n) ++
	             t((π(A1)(n) ≐ π(A2)(n))(fun(μ(A1)(n), bool_(n + 1)))(n)) ++
		     forall_(A1, (B1 ∼ B2)(app(a, v(0)))(n + 1))(n)
	ELSE t(FALSE_(n)) ENDCASES,
      prod(A1, A2): CASES T2 OF
        prod(B1, B2): (        A1             ∼         B1            )(lproj(a))(n) ++
	              (subst(A2, 0, lproj(a)) ∼ subst(B2, 0, lproj(a)))(rproj(a))(n) % subst: TODO
	ELSE t(FALSE_(n)) ENDCASES
    ELSE IF T2 = T1 THEN notcc ELSE t(FALSE_(n)) ENDIF ENDCASES
  MEASURE type_size(T1)

END supertype
