language: THEORY
BEGIN
  CONVERSION- extract1, finseq2list
  % TODO: Paste intro from datatype + modify
  syntaxic: DATATYPE WITH SUBTYPES sexpr?, scontext?, sinterp?
  BEGIN
    v(i: nat): v?: sexpr?
    % Update this with finseq for nested theories:
    % finseq[ (sinterp?) ], nat
    dot(m: (sexpr?), x: (sexpr?)): dot?: sexpr?
    interp(m: (sexpr?), map: (ideep?)): interp?: sexpr?
    theory_(decls: finseq[(scontext?)]): theory?: sexpr?

    fun(dom: (sexpr?), range: (sexpr?)): fun?: sexpr?
    prod(left: (sexpr?), right: (sexpr?)): prod?: sexpr?
    subtype(supertype: (sexpr?), pred: (sexpr?)): subtype?: sexpr?

    app(op: (sexpr?), arg: (sexpr?)): app?: sexpr?
    lam(type_: (sexpr?), body: (sexpr?)): lam?: sexpr?
    pair(left: (sexpr?), right: (sexpr?)): pair?: sexpr?
    lproj(arg: (sexpr?)): lproj?: sexpr?
    rproj(arg: (sexpr?)): rproj?: sexpr?

    type_decl: type_decl?: scontext?
    type_var: type_var?: scontext?
    type_def(def: (sexpr?)): type_def?: scontext?
    const_decl(type_: (sexpr?)): const_decl?: scontext?
    const_var(type_: (sexpr?)): const_var?: scontext?
    const_def(type_: (sexpr?), def: (sexpr?)): const_def?: scontext?
    theory_def(def: (sexpr?)): theory_def?: scontext?

    ikeep: ikeep?: sinterp?
    itype(def: (sexpr?)): itype?: sinterp?
    iterm(def: (sexpr?)): iterm?: sinterp?
    ideep(map: finseq[(sinterp?)]): ideep?: sinterp?
  END syntaxic

  U, V: VAR syntaxic
  same(U): 
    TYPE = { V | (sexpr?(U) => sexpr?(V)) AND
                 (sinterp?(U) => sinterp?(V)) AND
		 (scontext?(U) => scontext?(V)) }
  same_interp(U): TYPE = { V | (sexpr?(U) => sexpr?(V)) AND
                               (ikeep?(U) => ikeep?(V)) AND
			       (itype?(U) => itype?(V)) AND
			       (iterm?(U) => iterm?(V)) AND
			       (scontext?(U) => scontext?(V)) }

  sum(len: nat, f: [below[len] -> nat]):
    RECURSIVE { n: nat | FORALL (x: below[len]): f(x) <= n } =
    IF len = 0 THEN 0
    ELSE f(0) + sum(len - 1, LAMBDA (x: below[len - 1]): f(x + 1)) ENDIF
  MEASURE len

  % Size function, useful for termination
  size(U: syntaxic): RECURSIVE posnat =
    CASES U OF
      v(x): 2
    , dot(m, x): size(m) + size(x) + 2 % TODO 
    , interp(m, σ): size(m) + size(σ) + 2
    , theory_(Θ): sum(Θ`length, LAMBDA (x: below[Θ`length]): size(Θ(x))) + 2

    , fun(A, B): size(A) + size(B) + 2
    , prod(A, B): size(A) + size(B) + 2
    , subtype(T, a): size(T) + size(a) + 2

    , app(f, a): size(f) + size(a) + 2
    , lam(T, a): size(T) + size(a) + 2
    , pair(a, b): size(a) + size(b) + 2
    , lproj(a): size(a) + 2
    , rproj(a): size(a) + 2

    , type_decl: 1
    , type_var: 1
    , type_def(T): size(T) + 1
    , const_decl(T): size(T) + 1
    , const_var(T): size(T) + 1
    , const_def(T, a): size(T) + size(a) + 1
    , theory_def(Th): size(Th) + 1

    , ikeep: 1
    , itype(T): size(T) + 4
    , iterm(a): size(a) + 4
    , ideep(σ): sum(σ`length, LAMBDA (x: below[σ`length]): size(σ`seq(x))) + 4

    ENDCASES
  MEASURE U BY <<
  AUTO_REWRITE+ size
  
  Γ, Δ, Θ: VAR finseq[(scontext?)]
  σ, τ: VAR finseq[(sinterp?)]
  x, i, j: VAR nat  
  d: VAR (scontext?)


  % Basic functions for contexts
  ∈(x, Γ): MACRO bool = x < length(Γ) 
  rest(Γ, x): finseq[(scontext?)] = 
    Γ ^^ (x + 1, length(Γ))
  irest(σ, x): finseq[(sinterp?)] = 
    σ ^^ (x + 1, length(σ))
  ;++(Γ, Δ): finseq[(scontext?)] = Δ o Γ 
  ;⊕(σ, τ): finseq[(sinterp?)] = τ o σ
  k(d): finseq[(scontext?)] = 
    (# length := 1, seq := LAMBDA (x: below[1]): d #)
  AUTO_REWRITE+ o, ^^
  AUTO_REWRITE k
  AUTO_REWRITE+ finseq_appl

  ;≡(Γ, Δ): bool =
    length(Γ) = length(Δ) AND
    FORALL (x: below[length(Γ)]):
      (type_decl?(Γ(x)) => type_decl?(Δ(x))) AND
      (type_var?(Γ(x)) => type_var?(Δ(x))) AND
      (type_def?(Γ(x)) => type_def?(Δ(x))) AND
      (const_decl?(Γ(x)) => const_decl?(Δ(x))) AND
      (const_var?(Γ(x)) => const_var?(Δ(x))) AND
      (const_def?(Γ(x)) => const_def?(Δ(x))) AND
      (theory_def?(Γ(x)) => theory_def?(Δ(x)))

  % Function Kind
  prekeyword: TYPE = { PRETYPE, PRETERM, PRETHEORY }
  kind(d): prekeyword = 
    CASES d OF
      type_decl: PRETYPE
    , type_var: PRETYPE
    , type_def(T): PRETYPE
    , const_decl(T): PRETERM
    , const_var(T): PRETERM
    , const_def(T, a): PRETERM
    , theory_def(Θ): PRETHEORY
    ENDCASES
  % Function definition
  definition?(U): bool = 
    theory_def?(U) OR const_def?(U) OR type_def?(U)
  var?(U): bool = 
    const_var?(U) OR type_var?(U)
  typed?(U): bool =
    const_decl?(U) OR const_var?(U) OR const_def?(U)


  % Finseq props
  concat_empty: THEOREM empty_seq ++ Γ = Γ
  concat__empty: THEOREM Γ ++ empty_seq = Γ
  concat_assoc: THEOREM (Γ ++ Δ) ++ Θ = Γ ++ (Δ ++ Θ)
  rest_concat: THEOREM 
    rest(Γ ++ Δ, x) = IF x < length(Δ) THEN Γ ++ rest(Δ, x) ELSE rest(Γ, x - length(Δ)) ENDIF
  AUTO_REWRITE concat_empty, concat__empty, concat_assoc, rest_concat

  size_extract: THEOREM length(Γ) > j IMPLIES
    size(theory_(Γ ^^ (0, j))) < size(theory_(Γ))
  size_iextract: THEOREM length(σ) > j IMPLIES
    size(ideep(σ ^^ (0, j))) < size(ideep(σ))


  size_rest: THEOREM length(Γ) > 0 IMPLIES
    size(theory_(rest(Γ, 0))) < size(theory_(Γ))
  size_irest: THEOREM length(σ) > 0 IMPLIES
    size(ideep(irest(σ, 0))) < size(ideep(σ))

  extract_concat: THEOREM
    (Γ ++ Δ) ^^ (0, length(Δ)) = Δ

  
  % Some definitions for the tau function
  %% Type TCCS 
  tccs: DATATYPE BEGIN 
    tcc(expr: finseq[(sexpr?)]): tcc?
    tccs(map: finseq[tccs]): tccs?
  END tccs

  same(x: tccs): TYPE = { y: tccs | (tcc?(x) IMPLIES tcc?(y)) AND
  	  	      	   	  (tccs?(x) IMPLIES tccs?(y)) }
  ++(x: tccs, y: same(x)): same(x) = 
    CASES x OF
      tcc(f): tcc(expr(y) o f),
      tccs(f): tccs(map(y) o f) 
    ENDCASES
  t(t: (sexpr?)): (tcc?) = 
    tcc((# length := 1,
       seq := LAMBDA (x: below(1)): t #))
  k(t: tccs): (tccs?) = 
    tccs((# length := 1,
       seq := LAMBDA (x: below(1)): t #))

  tsize(t: tccs): RECURSIVE posnat =
    CASES t OF
      tcc(f): 0,
      tccs(f): sum(f`length, LAMBDA (x: below[f`length]): tsize(f`seq(x))) + 1
    ENDCASES
  MEASURE t BY <<
  AUTO_REWRITE+ tsize

  f: VAR finseq[tccs]
  size_textract: THEOREM length(f) > j IMPLIES
    tsize(tccs(f ^^ (0, j))) < tsize(tccs(f))
    


  %%% Type keyword
  keyword: DATATYPE
  BEGIN
    ⊥: UNDEFINED?
    KTHEORY: KTHEORY?
    KDECL: KDECL?
    KINTERP: KINTERP?    
    KTYPE: KTYPE?
    KTERM(TYPEOF: (sexpr?)): KTERM?
  END keyword

  notcc: MACRO (tcc?) = tcc(empty_seq)
  notccth(n: nat): MACRO (tccs?) = tccs(
    (# length := n,
        seq := LAMBDA (x: below(n)): notcc #))
  fail: MACRO [keyword, tccs] = (⊥, notcc)



END language
