language: THEORY
BEGIN
  syntaxic: DATATYPE
  BEGIN
    v(i: nat): v?
    dot(i: nat, map: syntaxic, rest: syntaxic): dot?
  
    fun(dom: syntaxic, range: syntaxic): fun?
    prod(left: syntaxic, right: syntaxic): prod?
    subtype(supertype: syntaxic, pred: syntaxic): subtype?

    app(op: syntaxic, arg: syntaxic): app?
    lam(type_: syntaxic, body: syntaxic): lam?
    pair(left: syntaxic, right: syntaxic): pair?
    lproj(arg: syntaxic): lproj?
    rproj(arg: syntaxic): rproj?

    type_decl: type_decl?
    type_var: type_var?
    type_def(def: syntaxic): type_def?
    const_decl(type_: syntaxic): const_decl?
    const_var(type_: syntaxic): const_var?
    const_def(type_: syntaxic, def: syntaxic): const_def?
    theory_def(def: syntaxic): theory_def?

    ikeep: ikeep?
    itype(def: syntaxic): itype?
    iconst(def: syntaxic): iconst?
%    itheory(def: syntaxic): itheory?

    map(run_map: finseq[syntaxic]): map?
  END syntaxic

  〈〉: syntaxic = map(empty_seq)

  U, V, W: VAR syntaxic
  x: VAR nat

  length(U): nat =
    IF map?(U) THEN run_map(U)`length ELSE 1 ENDIF

  ;∈(x, U): MACRO bool =
    x < length(U)

  decls(U)(x | x ∈ U): syntaxic =
    IF map?(U) THEN run_map(U)`seq(x) ELSE U ENDIF

  apply(U)(x | x ∈ U): syntaxic =
    map((# length := length(U) - x
         , seq := LAMBDA (y: below[length(U) - x]): decls(U)(y)
	 #))
  CONVERSION apply

  ;++(U, V): syntaxic =
    map((# length := length(U) + length(V)
         , seq := LAMBDA (x: below[length(U) + length(V)]):
             IF x < length(U)
	       THEN decls(U)(x)
	       ELSE decls(V)(x - length(U))
	     ENDIF
	 #))

  first(U | length(U) > 0): syntaxic =
    decls(U)(length(U) - 1)

  rest(U | length(U) > 0): syntaxic =
    map((# length := length(U) - 1
         , seq := LAMBDA (x: below[length(U) - 1]): decls(U)(x)
	 #))

  prekeyword: TYPE =
    { PREBOTTOM, PRETYPE, PRETERM, PRECONTEXT, PREINTERP }
  k: VAR prekeyword

  kind(U): prekeyword = 
    CASES U OF
      type_decl: PRETYPE
    , type_var: PRETYPE
    , type_def(T): PRETYPE
    , const_decl(T): PRETERM
    , const_var(T): PRETERM
    , const_def(T, a): PRETERM
    , theory_def(Θ): PRECONTEXT

    ELSE PREBOTTOM
    ENDCASES
  AUTO_REWRITE kind

  compatible?(U, V): RECURSIVE bool =
    length(U) = length(V) AND
    CASES V OF
      ikeep: TRUE
    , itype(T): type_decl?(U)
    , iconst(a): const_decl?(U)

    , map(f): FORALL (x: below[f`length]): compatible?(first(U(x)), f`seq(x))
    ELSE FALSE
    ENDCASES
  MEASURE V BY <<
  AUTO_REWRITE compatible?

  interp(U, (V | compatible?(U, V))): RECURSIVE syntaxic =
    CASES V OF
      ikeep: U
    , itype(T): type_def(T)
    , iconst(a): const_def(type_(U), a)

    , map(f): map(f WITH [ `seq := LAMBDA (x: below[f`length]): interp(first(U(x)), f`seq(x)) ])
    ENDCASES
  MEASURE V BY <<

  semantic?(U, V, k): RECURSIVE bool =
    CASES V OF
      v(i): i ∈ U AND kind(first(U(i))) = k
    , dot(i, σ, x):
        i ∈ U AND kind(first(U(i))) = PRECONTEXT AND
	semantic?(U, σ, PREINTERP) AND compatible?(first(U(i)), σ) AND
	semantic?(U ++ first(U(i)),x, k) AND v?(x)
	
    , fun(A, B):
        k = PRETYPE AND semantic?(U, A, PRETYPE) AND
  	semantic?(U ++ const_var(A), B, PRETYPE)
    , prod(A, B):
        k = PRETYPE AND semantic?(U, A, PRETYPE) AND
  	semantic?(U ++ const_var(A), B, PRETYPE)
    , subtype(T, a):
        k = PRETYPE AND semantic?(U, T, PRETYPE) AND
  	semantic?(U ++ const_var(T), a, PRETERM)

    , app(f, a):
        k = PRETERM AND semantic?(U, f, PRETERM) AND semantic?(U, a, PRETERM)
    , lam(T, a):
        k = PRETERM AND semantic?(U, T, PRETYPE) AND
  	semantic?(U ++ const_var(T), a, PRETERM)
    , pair(a, b):
        k = PRETERM AND semantic?(U, a, PRETERM) AND semantic?(U, b, PRETERM)
    , lproj(a): k = PRETERM AND semantic?(U, a, PRETERM)
    , rproj(a): k = PRETERM AND semantic?(U, a, PRETERM)

    , type_decl: k = PRECONTEXT
    , type_var: k = PRECONTEXT
    , type_def(T): k = PRECONTEXT AND semantic?(U, T, PRETYPE)
    , const_decl(T): k = PRECONTEXT AND semantic?(U, T, PRETYPE)
    , const_var(T): k = PRECONTEXT AND semantic?(U, T, PRETYPE)
    , const_def(T, a):
        k = PRECONTEXT AND semantic?(U, T, PRETYPE) AND semantic?(U, a, PRETERM)
    , theory_def(Θ):
        k = PRECONTEXT AND semantic?(U, Θ, PRECONTEXT)

    , ikeep:
        k = PREINTERP
    , itype(T):
        k = PREINTERP AND semantic?(U, T, PRETYPE)
    , iconst(a):
        k = PREINTERP AND semantic?(U, a, PRETERM)

    , map(f): FORALL (x: below[f`length]): semantic?(U, f`seq(x), k)
    ENDCASES
  MEASURE V BY <<

  pretype?(U, V): bool = semantic?(U, V, PRETYPE)
  pretype(U): TYPE = { V | pretype?(U, V) }
  preterm?(U, V): bool = semantic?(U, V, PRETERM)
  preterm(U): TYPE = { V | preterm?(U, V) }
  precontext?(U, V): bool = semantic?(U, V, PRECONTEXT)
  precontext(U): TYPE = { V | precontext?(U, V) }
END language
