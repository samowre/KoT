(delta
 (w_eta_TCC1 0
  (w_eta_TCC1-1 nil 3584276990
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (expand "signature")
        (("" (expand "sapply")
          (("" (assert)
            (("" (expand "finseq_appl")
              (("" (expand "signature")
                (("" (assert)
                  (("" (expand "apply") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (signature def-decl "signature" language nil)
    (apply const-decl "(scontext?)" language nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (sapply const-decl "signature" language nil)
    (∈ const-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (∈ const-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (w_eta_TCC2 0
  (w_eta_TCC2-1 nil 3584276990
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (expand "sapply")
        (("" (expand "signature")
          (("" (assert)
            (("" (expand "finseq_appl")
              (("" (expand "apply")
                (("" (assert)
                  (("" (expand "signature") (("" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sapply const-decl "signature" language nil)
    (apply const-decl "(scontext?)" language nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (signature def-decl "signature" language nil)
    (length const-decl "nat" language nil)
    (∈ const-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (w_eta_TCC3 0
  (w_eta_TCC3-1 nil 3584276990
   ("" (skosimp* :preds? t)
    (("" (expand "scontext?") (("" (propax) nil nil)) nil)) nil)
   ((theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (w_eta_TCC4 0
  (w_eta_TCC4-1 nil 3584276990
   ("" (skosimp* :preds? t)
    (("" (expand "signature") (("" (propax) nil nil)) nil)) nil)
   ((theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (signature def-decl "signature" language nil))
   nil))
 (w_eta_TCC5 0
  (w_eta_TCC5-1 nil 3584276990
   ("" (skosimp* :preds? t)
    (("" (assert) (("" (expand "sexpr?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (∈ const-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (w_eta_TCC6 0
  (w_eta_TCC6-1 nil 3584276990
   ("" (skosimp* :preds? t)
    (("" (assert) (("" (expand "sexpr?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (∈ const-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (w_eta_TCC7 0
  (w_eta_TCC7-1 nil 3584276990
   ("" (skosimp* :preds? t)
    (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil)
   ((theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (δ_TCC1 0
  (δ_TCC1-1 nil 3584219983
   ("" (lemma "w_definition")
    (("" (skosimp* :preds? t) (("" (grind) nil nil)) nil)) nil)
   ((w_definition formula-decl nil delta nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (apply const-decl "(scontext?)" language nil)
    (definition? const-decl "bool" decl nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (rest const-decl "(theory_def?)" language nil)
    (definition const-decl "(sexpr?)" decl nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (δ_TCC2 0
  (δ_TCC2-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -6)
        (("" (expand "sinterp?") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (w const-decl "[(theory_def?), syntaxic -> ordinal]" delta nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (δ_TCC3 0
  (δ_TCC3-1 nil 3584219983
   ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (δ_TCC4 0
  (δ_TCC4-1 nil 3584219983 ("" (subtype-tcc) nil nil)
   ((stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (signature type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (δ_TCC5 0
  (δ_TCC5-1 nil 3584219983 ("" (termination-tcc) nil nil)
   ((stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (signature type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (δ_TCC6 0
  (δ_TCC6-1 nil 3584219983 ("" (subtype-tcc) nil nil)
   ((stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (signature type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (δ_TCC7 0
  (δ_TCC7-1 nil 3584219983 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (signature type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (δ_TCC8 0
  (δ_TCC8-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -10 :dont-delete? t)
        (("" (expand "signature")
          (("" (assert)
            (("" (expand "sapply")
              (("" (assert)
                (("" (expand "finseq_appl")
                  (("" (assert)
                    (("" (expand "apply")
                      (("" (assert)
                        (("" (expand "signature")
                          (("" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (signature type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (scontext? adt-def-decl "boolean" language nil)
    (apply const-decl "(scontext?)" language nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (sapply const-decl "signature" language nil)
    (signature def-decl "signature" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (δ_TCC9 0
  (δ_TCC9-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (expand "sapply")
        (("" (expand "signature")
          (("" (expand "finseq_appl")
            (("" (expand "apply")
              (("" (expand "signature") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (signature type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (scontext? adt-def-decl "boolean" language nil)
    (sapply const-decl "signature" language nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (apply const-decl "(scontext?)" language nil)
    (signature def-decl "signature" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (δ_TCC10 0
  (δ_TCC10-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (expand "scontext?") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil))
   nil))
 (δ_TCC11 0
  (δ_TCC11-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (expand "signature") (("" (propax) nil nil)) nil)) nil)
   ((stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (signature type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (scontext? adt-def-decl "boolean" language nil)
    (signature def-decl "signature" language nil))
   nil))
 (δ_TCC12 0
  (δ_TCC12-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (lemma "w_eta")
      (("" (inst - "S!1" "m1!2" "x1!1" "Γ!1" "σ!1")
        (("" (assert)
          (("" (assert)
            (("" (expand "definition")
              (("" (rewrite -21)
                (("" (assert)
                  (("" (expand "apply")
                    (("" (assert)
                      (("" (rewrite -11)
                        (("" (rewrite -13)
                          (("" (rewrite -13)
                            (("" (rewrite -13)
                              ((""
                                (assert)
                                ((""
                                  (hide-all-but (-1 1))
                                  ((""
                                    (case
                                     "v(i(x!1)) = x!1 AND v(i(m1!1)) = m1!1")
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1))
                                      (("2" (grind-with-ext) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil)
    (signature type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (apply const-decl "(scontext?)" language nil)
    (i adt-accessor-decl "[(v?) -> nat]" language nil)
    (v adt-constructor-decl "[nat -> (v?)]" language nil)
    (v? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (syntaxic_v_extensionality formula-decl nil language nil)
    (definition const-decl "(sexpr?)" decl nil)
    (∈ const-decl "bool" language nil)
    (length const-decl "nat" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil)
    (w_eta formula-decl nil delta nil))
   nil))
 (δ_TCC13 0
  (δ_TCC13-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -11)
        (("" (expand "sinterp?") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "nat" language nil)
    (∈ const-decl "bool" language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[(theory_def?), syntaxic -> ordinal]" delta nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil))
   nil))
 (δ_TCC14 0
  (δ_TCC14-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (assert) (("" (expand "sexpr?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "nat" language nil)
    (∈ const-decl "bool" language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (signature type-decl nil language nil)
    (stheory? adt-recognizer-decl "[signature -> boolean]" language
     nil))
   nil))
 (δ_TCC15 0
  (δ_TCC15-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC16 0
  (δ_TCC16-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC17 0
  (δ_TCC17-1 nil 3584219983 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC18 0
  (δ_TCC18-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC19 0
  (δ_TCC19-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC20 0
  (δ_TCC20-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC21 0
  (δ_TCC21-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC22 0
  (δ_TCC22-1 nil 3584219983 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC23 0
  (δ_TCC23-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC24 0
  (δ_TCC24-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC25 0
  (δ_TCC25-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC26 0
  (δ_TCC26-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC27 0
  (δ_TCC27-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC28 0
  (δ_TCC28-1 nil 3584219983 ("" (cases-tcc) nil nil) nil nil))
 (δ_TCC29 0
  (δ_TCC29-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC30 0
  (δ_TCC30-1 nil 3584219983 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC31 0
  (δ_TCC31-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC32 0
  (δ_TCC32-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC33 0
  (δ_TCC33-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC34 0
  (δ_TCC34-1 nil 3584219983 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC35 0
  (δ_TCC35-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC36 0
  (δ_TCC36-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC37 0
  (δ_TCC37-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC38 0
  (δ_TCC38-1 nil 3584219983 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC39 0
  (δ_TCC39-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC40 0
  (δ_TCC40-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC41 0
  (δ_TCC41-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC42 0
  (δ_TCC42-1 nil 3584219983 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC43 0
  (δ_TCC43-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC44 0
  (δ_TCC44-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC45 0
  (δ_TCC45-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (delta_pretau_TCC1 0
  (delta_pretau_TCC1-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil
   nil)))

