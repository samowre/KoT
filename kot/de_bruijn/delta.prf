(delta
 (η_TCC1 0
  (η_TCC1-1 nil 3584299169 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (η_TCC2 0
  (η_TCC2-1 nil 3584299169 ("" (termination-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (η_TCC3 0
  (η_TCC3-1 nil 3584299169 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC4 0 (η_TCC4-1 nil 3584299169 ("" (grind) nil nil) nil nil))
 (η_TCC5 0
  (η_TCC5-1 nil 3584299169
   ("" (skosimp* :preds? t)
    (("" (assert) (("" (expand "sexpr?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (η_TCC6 0
  (η_TCC6-1 nil 3584304729
   ("" (subtype-tcc)
    (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (η_TCC7 0
  (η_TCC7-1 nil 3584304729
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (bddsimp)
        (("1" (assert)
          (("1" (expand "scontext?" -4)
            (("1" (bddsimp)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (grind) nil nil) ("6" (grind) nil nil)
               ("7" (grind) nil nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (inst?)
            (("2" (flatten)
              (("2" (assert)
                (("2" (expand "sinterp?" 1)
                  (("2" (typepred "subst")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (assert)
          (("3" (expand "sexpr?" -4)
            (("3" (bddsimp)
              (("1" (grind)
                (("1" (expand "sexpr?") (("1" (propax) nil nil)) nil)
                 ("2" (expand "sexpr?") (("2" (propax) nil nil)) nil)
                 ("3" (expand "sexpr?") (("3" (propax) nil nil)) nil))
                nil)
               ("2" (grind)
                (("2" (expand "sexpr?") (("2" (propax) nil nil)) nil))
                nil)
               ("3" (grind)
                (("1" (expand "sexpr?") (("1" (propax) nil nil)) nil)
                 ("2" (expand "sexpr?") (("2" (propax) nil nil)) nil))
                nil)
               ("4" (grind)
                (("1" (expand "sexpr?") (("1" (propax) nil nil)) nil)
                 ("2" (expand "sexpr?") (("2" (propax) nil nil)) nil)
                 ("3" (expand "sexpr?") (("3" (propax) nil nil)) nil))
                nil)
               ("5" (grind)
                (("5" (expand "sexpr?") (("5" (propax) nil nil)) nil))
                nil)
               ("6" (grind)
                (("6" (expand "sexpr?") (("6" (propax) nil nil)) nil))
                nil)
               ("7" (grind)
                (("7" (expand "sexpr?") (("7" (propax) nil nil)) nil))
                nil)
               ("8" (grind)
                (("8" (expand "sexpr?") (("8" (propax) nil nil)) nil))
                nil)
               ("9" (grind)
                (("9" (expand "sexpr?") (("9" (propax) nil nil)) nil))
                nil)
               ("10" (grind)
                (("10" (expand "sexpr?") (("10" (propax) nil nil))
                  nil))
                nil)
               ("11" (grind)
                (("11" (expand "sexpr?") (("11" (propax) nil nil))
                  nil))
                nil)
               ("12" (grind)
                (("12" (expand "sexpr?") (("12" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((same type-eq-decl nil subst nil)
    (scontext? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (theory_def adt-constructor-decl "[(sexpr?) -> (theory_def?)]"
     language nil)
    (const_def adt-constructor-decl
     "[[(sexpr?), (sexpr?)] -> (const_def?)]" language nil)
    (const_var adt-constructor-decl "[(sexpr?) -> (const_var?)]"
     language nil)
    (const_decl? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_decl adt-constructor-decl "[(sexpr?) -> (const_decl?)]"
     language nil)
    (const_var? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (lam? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (type_ shared-adt-accessor-decl
     "[{x: syntaxic | const_def?(x) OR const_var?(x) OR const_decl?(x) OR lam?(x)} -> (sexpr?)]"
     language nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (type_def adt-constructor-decl "[(sexpr?) -> (type_def?)]" language
     nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (iterm? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (def shared-adt-accessor-decl
     "[{x: syntaxic |     iterm?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> (sexpr?)]"
     language nil)
    (dot? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (dot adt-constructor-decl "[[(sexpr?), (sexpr?)] -> (dot?)]"
     language nil)
    (↑ def-decl
     "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
     subst nil)
    (v? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (v adt-constructor-decl "[nat -> (v?)]" language nil)
    (type_var adt-constructor-decl "(type_var?)" language nil)
    (type_var? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (subst def-decl
           "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
           subst
      nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (type_decl adt-constructor-decl "(type_decl?)" language nil)
    (type_decl? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (rproj adt-constructor-decl "[(sexpr?) -> (rproj?)]" language nil)
    (lproj adt-constructor-decl "[(sexpr?) -> (lproj?)]" language nil)
    (pair adt-constructor-decl "[[(sexpr?), (sexpr?)] -> (pair?)]"
     language nil)
    (body adt-accessor-decl "[(lam?) -> (sexpr?)]" language nil)
    (lam adt-constructor-decl "[[(sexpr?), (sexpr?)] -> (lam?)]"
         language nil)
    (arg shared-adt-accessor-decl
     "[{x: syntaxic | rproj?(x) OR lproj?(x) OR app?(x)} -> (sexpr?)]"
     language nil)
    (lproj? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (op adt-accessor-decl "[(app?) -> (sexpr?)]" language nil)
    (app adt-constructor-decl "[[(sexpr?), (sexpr?)] -> (app?)]"
     language nil)
    (app? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (pred adt-accessor-decl "[(subtype?) -> (sexpr?)]" language nil)
    (supertype adt-accessor-decl "[(subtype?) -> (sexpr?)]" language
               nil)
    (subtype adt-constructor-decl
             "[[(sexpr?), (sexpr?)] -> (subtype?)]" language nil)
    (subtype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (right shared-adt-accessor-decl
     "[{x: syntaxic | pair?(x) OR prod?(x)} -> (sexpr?)]" language nil)
    (left shared-adt-accessor-decl
     "[{x: syntaxic | pair?(x) OR prod?(x)} -> (sexpr?)]" language nil)
    (pair? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prod adt-constructor-decl "[[(sexpr?), (sexpr?)] -> (prod?)]"
     language nil)
    (prod? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (range adt-accessor-decl "[(fun?) -> (sexpr?)]" language nil)
    (dom adt-accessor-decl "[(fun?) -> (sexpr?)]" language nil)
    (fun adt-constructor-decl "[[(sexpr?), (sexpr?)] -> (fun?)]"
     language nil)
    (fun? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (theory_ adt-constructor-decl "[finseq[(scontext?)] -> (theory?)]"
     language nil)
    (decls adt-accessor-decl "[(theory?) -> finseq[(scontext?)]]"
     language nil)
    (theory? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (interp adt-constructor-decl
            "[[(sexpr?), finseq[(sinterp?)]] -> (interp?)]" language
            nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (map adt-accessor-decl "[(interp?) -> finseq[(sinterp?)]]" language
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x adt-accessor-decl "[(dot?) -> (sexpr?)]" language nil)
    (m shared-adt-accessor-decl
     "[{x: syntaxic | interp?(x) OR dot?(x)} -> (sexpr?)]" language
     nil)
    (interp? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i adt-accessor-decl "[(v?) -> nat]" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (η_TCC8 0
  (η_TCC8-1 nil 3584304729 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (wdef_TCC1 0
  (wdef_TCC1-1 nil 3584299970 ("" (subtype-tcc) nil nil)
   ((definition? const-decl "bool" delta nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (δ_TCC1 0
  (δ_TCC1-1 nil 3584219983 ("" (use "wdef") (("" (grind) nil nil)) nil)
   ((wdef formula-decl nil delta nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (definition? const-decl "bool" delta nil))
   nil))
 (δ_TCC2 0
  (δ_TCC2-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (bddsimp)
      (("1" (expand "finseq_appl")
        (("1" (inst?)
          (("1" (flatten)
            (("1" (assert)
              (("1" (use "wrest")
                (("1" (use "wdef")
                  (("1" (expand "finseq_appl")
                    (("1" (expand "↑" +)
                      (("1" (assert)
                        (("1" (hide-all-but (-1 -2 -3 1))
                          (("1" (expand "<=")
                            (("1" (bddsimp)
                              (("1"
                                (use "ordinal_transitive" :polarity? t)
                                (("1"
                                  (assert)
                                  (("1"
                                    (use
                                     "ordinal_transitive"
                                     :polarity?
                                     t)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (use
                                   "ordinal_transitive"
                                   :polarity?
                                   t)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (assert)
                                (("3"
                                  (rewrite -2)
                                  (("3"
                                    (use
                                     "ordinal_transitive"
                                     :polarity?
                                     t)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil) ("3" (assert) nil nil)
       ("4" (grind) nil nil))
      nil))
    nil)
   ((int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (same type-eq-decl nil subst nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (definition? const-decl "bool" delta nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (wrest formula-decl nil delta nil)
    (ordinal_transitive formula-decl nil ordinals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (↑ def-decl
     "{V | (sexpr?(U) IFF sexpr?(V)) AND (sinterp?(U) IFF sinterp?(V)) AND (scontext?(U) IFF scontext?(V))}"
     subst nil)
    (↑ macro-decl "syntaxic" subst nil)
    (wdef formula-decl nil delta nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (def shared-adt-accessor-decl
     "[{x: syntaxic |     iterm?(x) OR itype?(x) OR theory_def?(x) OR const_def?(x) OR type_def?(x)} -> (sexpr?)]"
     language nil)
    (type_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (const_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (itype? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (iterm? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (rest const-decl "[finseq[T], nat -> finseq[T]]" delta nil))
   nil))
 (δ_TCC3 0
  (δ_TCC3-1 nil 3584219983
   ("" (skosimp* :preds? t) (("" (assert) (("" (grind) nil nil)) nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (<= const-decl "bool" ordinals nil)
    (definition? const-decl "bool" delta nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (scontext? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (δ_TCC4 0
  (δ_TCC4-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (assert) (("" (use "wdot") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((sexpr? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wdot formula-decl nil delta nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (δ_TCC5 0
  (δ_TCC5-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (rewrite -4 :dont-delete? t)
      (("" (assert)
        (("" (inst?)
          (("" (flatten)
            (("" (assert)
              (("" (rewrite -6 :dont-delete? t)
                (("" (assert)
                  (("" (use "wtheory" :polarity? t)
                    (("" (inst - "x!1" "Γ!1" "Θ!1")
                      (("" (assert)
                        (("" (use "wdot")
                          (("" (assert)
                            (("" (hide-all-but (-1 -2 -3 3))
                              ((""
                                (use "ordinal_transitive" :polarity? t)
                                ((""
                                  (assert)
                                  ((""
                                    (use
                                     "ordinal_transitive"
                                     :polarity?
                                     t)
                                    ((""
                                      (assert)
                                      ((""
                                        (use
                                         "ordinal_transitive"
                                         :polarity?
                                         t)
                                        ((""
                                          (assert)
                                          ((""
                                            (expand "<=")
                                            (("" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((same type-eq-decl nil subst nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wtheory formula-decl nil delta nil)
    (ordinal_transitive formula-decl nil ordinals nil)
    (dot adt-constructor-decl "[[(sexpr?), (sexpr?)] -> (dot?)]"
     language nil)
    (dot? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (theory? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (theory_ adt-constructor-decl "[finseq[(scontext?)] -> (theory?)]"
     language nil)
    (wdot formula-decl nil delta nil))
   nil))
 (δ_TCC6 0
  (δ_TCC6-1 nil 3584219983 ("" (grind) nil nil)
   ((scontext? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (same type-eq-decl nil subst nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (δ_TCC7 0
  (δ_TCC7-1 nil 3584219983 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (same type-eq-decl nil subst nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (definition? const-decl "bool" delta nil))
   nil))
 (δ_TCC8 0
  (δ_TCC8-1 nil 3584219983
   ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
   ((same type-eq-decl nil subst nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (δ_TCC9 0
  (δ_TCC9-1 nil 3584219983
   ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
   ((same type-eq-decl nil subst nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (δ_TCC10 0
  (δ_TCC10-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (expand "scontext?") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (same type-eq-decl nil subst nil))
   nil))
 (δ_TCC11 0
  (δ_TCC11-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (expand "signature") (("" (propax) nil nil)) nil)) nil)
   ((sexpr? adt-def-decl "boolean" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (δ_TCC12 0
  (δ_TCC12-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (lemma "w_eta")
      (("" (inst - "S!1" "m1!2" "x1!1" "Γ!1" "σ!1")
        (("" (assert)
          (("" (assert)
            (("" (expand "definition")
              (("" (rewrite -21)
                (("" (assert)
                  (("" (expand "apply")
                    (("" (assert)
                      (("" (rewrite -11)
                        (("" (rewrite -13)
                          (("" (rewrite -13)
                            (("" (rewrite -13)
                              ((""
                                (assert)
                                ((""
                                  (hide-all-but (-1 1))
                                  ((""
                                    (case
                                     "v(i(x!1)) = x!1 AND v(i(m1!1)) = m1!1")
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1))
                                      (("2" (grind-with-ext) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (same type-eq-decl nil subst nil))
   nil))
 (δ_TCC13 0
  (δ_TCC13-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -11)
        (("" (expand "sinterp?") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (same type-eq-decl nil subst nil))
   nil))
 (δ_TCC14 0
  (δ_TCC14-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (assert) (("" (expand "sexpr?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (same type-eq-decl nil subst nil))
   nil))
 (δ_TCC15 0
  (δ_TCC15-1 nil 3584219983 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (same type-eq-decl nil subst nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (δ_TCC16 0
  (δ_TCC16-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC17 0
  (δ_TCC17-1 nil 3584219983 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC18 0
  (δ_TCC18-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC19 0
  (δ_TCC19-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC20 0
  (δ_TCC20-1 nil 3584219983 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (same type-eq-decl nil subst nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (δ_TCC21 0
  (δ_TCC21-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC22 0
  (δ_TCC22-1 nil 3584219983 ("" (termination-tcc) nil nil)
   ((scontext? adt-def-decl "boolean" language nil)) nil))
 (δ_TCC23 0
  (δ_TCC23-1 nil 3584300490 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC24 0
  (δ_TCC24-1 nil 3584300490 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC25 0
  (δ_TCC25-1 nil 3584300490 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC26 0
  (δ_TCC26-1 nil 3584300631 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC27 0
  (δ_TCC27-1 nil 3584300798 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC28 0
  (δ_TCC28-1 nil 3584300798 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC29 0
  (δ_TCC29-1 nil 3584302255 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC30 0
  (δ_TCC30-1 nil 3584302255 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC31 0
  (δ_TCC31-1 nil 3584302255 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC32 0
  (δ_TCC32-1 nil 3584365921 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC33 0
  (δ_TCC33-1 nil 3584365921 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC34 0
  (δ_TCC34-1 nil 3584365921 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC35 0
  (δ_TCC35-1 nil 3584365921 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC36 0
  (δ_TCC36-1 nil 3584365921 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC37 0
  (δ_TCC37-1 nil 3584365921 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC38 0
  (δ_TCC38-1 nil 3584365921 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC39 0
  (δ_TCC39-1 nil 3584365921 ("" (subtype-tcc) nil nil) nil nil)))

