(delta
 (wdef_TCC1 0
  (wdef_TCC1-1 nil 3584299970 ("" (subtype-tcc) nil nil)
   ((definition? const-decl "bool" delta nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (η_TCC1 0
  (η_TCC1-1 nil 3584299169 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (η_TCC2 0
  (η_TCC2-1 nil 3584299169 ("" (termination-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (η_TCC3 0
  (η_TCC3-1 nil 3584299169 ("" (subtype-tcc) nil nil) nil nil))
 (η_TCC4 0 (η_TCC4-1 nil 3584299169 ("" (grind) nil nil) nil nil))
 (η_TCC5 0
  (η_TCC5-1 nil 3584299169
   ("" (skosimp* :preds? t)
    (("" (assert) (("" (expand "sexpr?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (η_TCC6 0
  (η_TCC6-1 nil 3584304729
   ("" (subtype-tcc)
    (("" (expand "sexpr?") (("" (propax) nil nil)) nil)) nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (η_TCC7 0
  (η_TCC7-1 nil 3584304729
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (bddsimp)
        (("1" (assert)
          (("1" (expand "scontext?" -4)
            (("1" (bddsimp)
              (("1" (assert)
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
               ("2" (assert)
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)
               ("3" (assert)
                (("3" (inst?)
                  (("3" (assert)
                    (("3" (flatten)
                      (("3" (assert) (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil) ("5" (grind) nil nil)
               ("6" (grind) nil nil) ("7" (grind) nil nil))
              nil))
            nil))
          nil)
         ("2" (inst?)
          (("2" (flatten)
            (("2" (assert)
              (("2" (expand "sinterp?" 1)
                (("2" (typepred "subst")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (assert) (("3" (postpone) nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil))
 (η_TCC8 0
  (η_TCC8-1 nil 3584304729 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (δ_TCC1 0
  (δ_TCC1-1 nil 3584219983 ("" (use "wdef") (("" (grind) nil nil)) nil)
   ((definition? const-decl "bool" delta nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wdef formula-decl nil delta nil))
   nil))
 (δ_TCC2 0
  (δ_TCC2-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (use "wdef") (("" (grind) nil nil)) nil)) nil)
   ((wdef formula-decl nil delta nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (syntaxic type-decl nil language nil)
    (below type-eq-decl nil nat_types nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (definition? const-decl "bool" delta nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (δ_TCC3 0
  (δ_TCC3-1 nil 3584219983
   ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (same type-eq-decl nil subst nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil))
   nil))
 (δ_TCC4 0
  (δ_TCC4-1 nil 3584219983
   ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
   ((sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (δ_TCC5 0
  (δ_TCC5-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (use "wdot") (("" (assert) nil nil)) nil)) nil)
   ((wdot formula-decl nil delta nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (scontext? adt-def-decl "boolean" language nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (sexpr? adt-def-decl "boolean" language nil))
   nil))
 (δ_TCC6 0
  (δ_TCC6-1 nil 3584219983 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (same type-eq-decl nil subst nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (definition? const-decl "bool" delta nil))
   nil))
 (δ_TCC7 0
  (δ_TCC7-1 nil 3584219983 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (same type-eq-decl nil subst nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (definition? const-decl "bool" delta nil))
   nil))
 (δ_TCC8 0
  (δ_TCC8-1 nil 3584219983
   ("" (skosimp* :preds? t) (("" (assert) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (same type-eq-decl nil subst nil))
   nil))
 (δ_TCC9 0
  (δ_TCC9-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (expand "sapply")
        (("" (expand "signature")
          (("" (expand "finseq_appl")
            (("" (expand "apply")
              (("" (expand "signature") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (same type-eq-decl nil subst nil))
   nil))
 (δ_TCC10 0
  (δ_TCC10-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (expand "scontext?") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (same type-eq-decl nil subst nil))
   nil))
 (δ_TCC11 0
  (δ_TCC11-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (expand "signature") (("" (propax) nil nil)) nil)) nil)
   ((sexpr? adt-def-decl "boolean" language nil)
    (theory_def? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (syntaxic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (δ_TCC12 0
  (δ_TCC12-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (lemma "w_eta")
      (("" (inst - "S!1" "m1!2" "x1!1" "Γ!1" "σ!1")
        (("" (assert)
          (("" (assert)
            (("" (expand "definition")
              (("" (rewrite -21)
                (("" (assert)
                  (("" (expand "apply")
                    (("" (assert)
                      (("" (rewrite -11)
                        (("" (rewrite -13)
                          (("" (rewrite -13)
                            (("" (rewrite -13)
                              ((""
                                (assert)
                                ((""
                                  (hide-all-but (-1 1))
                                  ((""
                                    (case
                                     "v(i(x!1)) = x!1 AND v(i(m1!1)) = m1!1")
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1))
                                      (("2" (grind-with-ext) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (same type-eq-decl nil subst nil))
   nil))
 (δ_TCC13 0
  (δ_TCC13-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -11)
        (("" (expand "sinterp?") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (same type-eq-decl nil subst nil))
   nil))
 (δ_TCC14 0
  (δ_TCC14-1 nil 3584219983
   ("" (skosimp* :preds? t)
    (("" (assert) (("" (expand "sexpr?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (scontext? adt-def-decl "boolean" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (same type-eq-decl nil subst nil))
   nil))
 (δ_TCC15 0
  (δ_TCC15-1 nil 3584219983 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (same type-eq-decl nil subst nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (δ_TCC16 0
  (δ_TCC16-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC17 0
  (δ_TCC17-1 nil 3584219983 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC18 0
  (δ_TCC18-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC19 0
  (δ_TCC19-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC20 0
  (δ_TCC20-1 nil 3584219983 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (syntaxic type-decl nil language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (w const-decl "[finseq[(scontext?)], syntaxic -> ordinal]" delta
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (same type-eq-decl nil subst nil)
    (sexpr? adt-def-decl "boolean" language nil)
    (sinterp? adt-def-decl "boolean" language nil)
    (scontext? adt-def-decl "boolean" language nil))
   nil))
 (δ_TCC21 0
  (δ_TCC21-1 nil 3584219983 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC22 0
  (δ_TCC22-1 nil 3584219983 ("" (termination-tcc) nil nil)
   ((scontext? adt-def-decl "boolean" language nil)) nil))
 (δ_TCC23 0
  (δ_TCC23-1 nil 3584300490 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC24 0
  (δ_TCC24-1 nil 3584300490 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC25 0
  (δ_TCC25-1 nil 3584300490 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC26 0
  (δ_TCC26-1 nil 3584300631 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC27 0
  (δ_TCC27-1 nil 3584300798 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC28 0
  (δ_TCC28-1 nil 3584300798 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC29 0
  (δ_TCC29-1 nil 3584302255 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC30 0
  (δ_TCC30-1 nil 3584302255 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC31 0
  (δ_TCC31-1 nil 3584302255 ("" (subtype-tcc) nil nil) nil nil)))

