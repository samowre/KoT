(weight
 (times_TCC1 0
  (times_TCC1-1 nil 3583677018 ("" (subtype-tcc) nil nil)
   ((ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (times_TCC2 0
  (times_TCC2-1 nil 3583677018
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil))
 (max_TCC1 0
  (max_TCC1-1 nil 3583672250 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil))
   nil))
 (max_TCC2 0
  (max_TCC2-1 nil 3583672250 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (max_TCC3 0
  (max_TCC3-1 nil 3583672250 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (max_TCC4 0
  (max_TCC4-1 nil 3583672250 ("" (subtype-tcc) nil nil) nil nil))
 (max_TCC5 0
  (max_TCC5-1 nil 3583672250 ("" (termination-tcc) nil nil) nil nil))
 (max_TCC6 0
  (max_TCC6-1 nil 3583672250
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (delete 2)
        ((""
          (inst -2 "(len!1 - 1, LAMBDA (x: below[len!1 - 1]): f!1(x))")
          (("" (assert)
            (("" (bddsimp)
              (("1" (assert)
                (("1" (inst 2 "len!1 - 1")
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (assert)
                (("2" (skosimp* :preds? t)
                  (("2" (assert)
                    (("2" (case "f!1(i!1) < f!1(len!1 - 1)")
                      (("1" (assert)
                        (("1" (inst + "len!1 - 1")
                          (("1" (assert)
                            (("1" (grind)
                              (("1"
                                (use "ordinal_trichotomy" :polarity? t)
                                (("1"
                                  (assert)
                                  (("1"
                                    (use "ordinal_irreflexive")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (use "lt_cut" :polarity? t)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (inst + "i!1")
                          (("2" (assert)
                            (("2" (grind)
                              (("2"
                                (use "lt_cut" :polarity? t)
                                (("2"
                                  (assert)
                                  (("2"
                                    (use
                                     "ordinal_trichotomy"
                                     :polarity?
                                     t)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{z | z >= x AND z >= y}" ordinals_props nil)
    (< def-decl "bool" ordinals nil)
    (lt_cut formula-decl nil ordinals_props nil)
    (ordinal_irreflexive formula-decl nil ordinals nil)
    (ordinal_trichotomy formula-decl nil ordinals nil)
    (ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil))
   nil))
 (weight_TCC1 0
  (weight_TCC1-1 nil 3583672250 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (apply const-decl "(sdecl?)" language nil))
   nil))
 (weight_TCC2 0
  (weight_TCC2-1 nil 3583672250
   ("" (skosimp* :preds? t)
    ((""
      (case "FORALL (M: (scontext?), (i: nat | i ∈ M)): size(rest(M, i)) + size(M(i)) <= size(M)")
      (("1" (inst - "M!1" "i!1")
        (("1" (expand "apply" -1) (("1" (assert) nil nil)) nil)) nil)
       ("2" (assert) nil nil) ("3" (assert) nil nil))
      nil))
    nil)
   ((apply const-decl "(sdecl?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (rest const-decl "(scontext?)" language nil)
    (size def-decl "nat" language nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (< const-decl "bool" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (weight_TCC3 0
  (weight_TCC3-1 nil 3583672250
   ("" (subtype-tcc)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil))
    nil)
   ((ordinal? def-decl "bool" ordinals nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (< const-decl "bool" reals nil)
    (kind? const-decl "bool" language nil)
    (ordinal_mult_zero name-judgement "(zero?[ordinal](*))"
     ordinals_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sdecl? const-decl "bool" language nil)
    (prekind? def-decl "bool" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (apply const-decl "(sdecl?)" language nil))
   nil))
 (weight_TCC4 0
  (weight_TCC4-1 nil 3583672250
   (""
    (case "FORALL (M: (scontext?), (i: nat | i ∈ M)): size(rest(M, i)) + size(M(i)) <= size(M)")
    (("1" (assert) (("1" (skosimp* :preds? t) nil nil)) nil)
     ("2" (assert) (("2" (grind) nil nil)) nil)
     ("3" (skosimp* :preds? t) nil nil))
    nil)
   ((sum def-decl "{n: nat | FORALL (x: below[len]): f(x) <= n}"
     language nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (syntaxic type-decl nil language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (scontext? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (size def-decl "nat" language nil)
    (rest const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil))
   nil))
 (weight_TCC5 0
  (weight_TCC5-1 nil 3583672250 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (apply const-decl "(sdecl?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC6 0
  (weight_TCC6-1 nil 3583672250
   ("" (skosimp* :preds? t)
    (("" (assert) (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (size def-decl "nat" language nil)
    (sdecl? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (kind? const-decl "bool" language nil)
    (prekind? def-decl "bool" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (weight_TCC7 0
  (weight_TCC7-1 nil 3583672250 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (apply const-decl "(sdecl?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (scontext? const-decl "bool" language nil))
   nil))
 (weight_TCC8 0
  (weight_TCC8-1 nil 3583672250 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (prekind? def-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (scontext? const-decl "bool" language nil))
   nil))
 (weight_TCC9 0
  (weight_TCC9-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (apply const-decl "(sdecl?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (scontext? const-decl "bool" language nil))
   nil))
 (weight_TCC10 0
  (weight_TCC10-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (kind? const-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (apply const-decl "(sdecl?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (scontext? const-decl "bool" language nil))
   nil))
 (weight_TCC11 0
  (weight_TCC11-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (kind? const-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (apply const-decl "(sdecl?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (scontext? const-decl "bool" language nil))
   nil))
 (weight_TCC12 0
  (weight_TCC12-1 nil 3583672250 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC13 0
  (weight_TCC13-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC14 0
  (weight_TCC14-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((sdecl? const-decl "bool" language nil)) nil))
 (weight_TCC15 0
  (weight_TCC15-1 nil 3583672250 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (k const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC16 0
  (weight_TCC16-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC17 0
  (weight_TCC17-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC18 0
  (weight_TCC18-1 nil 3583672250 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC19 0
  (weight_TCC19-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((sdecl? const-decl "bool" language nil)) nil))
 (weight_TCC20 0
  (weight_TCC20-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (k const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC21 0
  (weight_TCC21-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC22 0
  (weight_TCC22-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC23 0
  (weight_TCC23-1 nil 3583672250 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC24 0
  (weight_TCC24-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((sdecl? const-decl "bool" language nil)) nil))
 (weight_TCC25 0
  (weight_TCC25-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (k const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC26 0
  (weight_TCC26-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC27 0
  (weight_TCC27-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC28 0
  (weight_TCC28-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC29 0
  (weight_TCC29-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC30 0
  (weight_TCC30-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC31 0
  (weight_TCC31-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC32 0
  (weight_TCC32-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC33 0
  (weight_TCC33-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((sdecl? const-decl "bool" language nil)) nil))
 (weight_TCC34 0
  (weight_TCC34-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (k const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC35 0
  (weight_TCC35-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC36 0
  (weight_TCC36-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC37 0
  (weight_TCC37-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC38 0
  (weight_TCC38-1 nil 3583672250 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC39 0
  (weight_TCC39-1 nil 3583677018 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC40 0
  (weight_TCC40-1 nil 3583677018 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC41 0
  (weight_TCC41-1 nil 3583677018 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC42 0
  (weight_TCC42-1 nil 3583677018 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC43 0
  (weight_TCC43-1 nil 3583677018 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC44 0
  (weight_TCC44-1 nil 3583677018 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC45 0
  (weight_TCC45-1 nil 3583677018 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC46 0
  (weight_TCC46-1 nil 3583677018 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC47 0
  (weight_TCC47-1 nil 3583677018 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC48 0
  (weight_TCC48-1 nil 3583677018 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC49 0
  (weight_TCC49-1 nil 3583677018 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC50 0
  (weight_TCC50-1 nil 3583677018 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC51 0
  (weight_TCC51-1 nil 3583677018 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC52 0
  (weight_TCC52-1 nil 3583677018 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC53 0
  (weight_TCC53-1 nil 3583677018 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC54 0
  (weight_TCC54-1 nil 3583677018 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC55 0
  (weight_TCC55-1 nil 3583677018 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC56 0
  (weight_TCC56-1 nil 3583677018 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC57 0
  (weight_TCC57-1 nil 3583677018 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC58 0
  (weight_TCC58-1 nil 3583677018 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC59 0
  (weight_TCC59-1 nil 3583677018 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC60 0
  (weight_TCC60-1 nil 3583677018 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC61 0
  (weight_TCC61-1 nil 3583677018 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC62 0
  (weight_TCC62-1 nil 3583677018 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC63 0
  (weight_TCC63-1 nil 3583677018 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC64 0
  (weight_TCC64-1 nil 3583677018 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (rest const-decl "(scontext?)" language nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sdecl? const-decl "bool" language nil)
    (scontext? const-decl "bool" language nil))
   nil))
 (weight_TCC65 0
  (weight_TCC65-1 nil 3583677018 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (rest const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (weight_TCC66 0
  (weight_TCC66-1 nil 3583677018
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -4 :dont-delete? t)
        (("" (assert)
          (("" (expand "scontext?")
            (("" (flatten)
              (("" (expand "semantic?")
                (("" (assert)
                  (("" (flatten)
                    (("" (assert) (("" (inst -5 "x!1") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prekind? def-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil))
   nil))
 (weight_TCC67 0
  (weight_TCC67-1 nil 3583677018
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (typepred "sum")
        (("" (assert)
          (("" (inst?)
            (("" (inst - "x!1")
              (("1" (assert)
                (("1" (expand "finseq_appl")
                  (("1" (assert)
                    (("1" (rewrite -5 :dont-delete? t)
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (rewrite -4 :dont-delete? t)
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size def-decl "nat" language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (sum def-decl "{n: nat | FORALL (x: below[len]): f(x) <= n}"
     language nil)
    (<= const-decl "bool" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil))
   nil))
 (weight_length 0
  (weight_length-1 nil 3583678262
   ("" (auto-rewrite "weight")
    (("" (induct "U")
      (("1" (assert)
        (("1" (skosimp* :preds? t)
          (("1" (assert)
            (("1" (lift-if)
              (("1" (lift-if)
                (("1" (lift-if)
                  (("1" (expand "++" 1 1)
                    (("1" (assert)
                      (("1" (expand "o" 1 1)
                        (("1" (assert)
                          (("1" (auto-rewrite "apply")
                            (("1" (assert)
                              (("1"
                                (bddsimp +)
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil)
                                 ("3" (grind) nil nil)
                                 ("4" (grind) nil nil)
                                 ("5" (grind) nil nil)
                                 ("6" (grind) nil nil)
                                 ("7" (grind) nil nil)
                                 ("8" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp* :preds? t)
        (("2" (assert)
          (("2" (assert)
            (("2" (lift-if)
              (("2" (lift-if)
                (("2" (lift-if)
                  (("2" (expand "++" 1 1)
                    (("2" (assert)
                      (("2" (expand "o" 1 1)
                        (("2" (assert)
                          (("2" (auto-rewrite "apply")
                            (("2" (assert)
                              (("2"
                                (bddsimp +)
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2" (grind) nil nil)
                                 ("3" (grind) nil nil)
                                 ("4" (grind) nil nil)
                                 ("5" (grind) nil nil)
                                 ("6" (grind) nil nil)
                                 ("7" (grind) nil nil)
                                 ("8" (grind) nil nil)
                                 ("9" (grind) nil nil)
                                 ("10" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (auto-rewrite "apply")
        (("3" (assert)
          (("3" (auto-rewrite "max")
            (("3" (skosimp* :preds? t)
              (("3" (assert)
                (("3" (expand "max" +)
                  (("3" (assert)
                    (("3" (lift-if)
                      (("3" (lift-if)
                        (("3" (lift-if)
                          (("3" (inst -3 "Γ!1" "Δ!1")
                            (("3"
                              (inst -4 "Γ!1"
                               "Δ!1 ++ k(const_var(fun1_var!1))")
                              (("1"
                                (assert)
                                (("1" (postpone) nil nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (hide -3)
                                  (("2"
                                    (auto-rewrite "semantic?")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (postpone) nil nil) ("5" (postpone) nil nil)
       ("6" (postpone) nil nil) ("7" (postpone) nil nil)
       ("8" (postpone) nil nil) ("9" (postpone) nil nil)
       ("10" (postpone) nil nil) ("11" (postpone) nil nil)
       ("12" (postpone) nil nil) ("13" (postpone) nil nil)
       ("14" (postpone) nil nil) ("15" (postpone) nil nil)
       ("16" (postpone) nil nil) ("17" (postpone) nil nil)
       ("18" (postpone) nil nil) ("19" (postpone) nil nil)
       ("20" (postpone) nil nil) ("21" (postpone) nil nil)
       ("22" (postpone) nil nil) ("23" (postpone) nil nil)
       ("24" (postpone) nil nil) ("25" (postpone) nil nil)
       ("26" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (weight_definition_TCC1 0
  (weight_definition_TCC1-1 nil 3583678172 ("" (subtype-tcc) nil nil)
   nil nil))
 (weight_definition_TCC2 0
  (weight_definition_TCC2-1 nil 3583678172
   ("" (skosimp* :preds? t) (("" (assert) (("" (grind) nil nil)) nil))
    nil)
   ((precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (empty const-decl "(scontext?)" language nil)
    (prekind? def-decl "bool" language nil)
    (prekeyword type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (syntaxic type-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic? const-decl "bool" language nil)
    (kind? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (weight_definition 0
  (weight_definition-1 nil 3583678217 ("" (postpone) nil nil) nil
   shostak)))

