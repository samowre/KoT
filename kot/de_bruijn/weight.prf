(weight
 (max_TCC1 0
  (max_TCC1-1 nil 3583612677 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (max_TCC2 0
  (max_TCC2-1 nil 3583612677 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (max_TCC3 0
  (max_TCC3-1 nil 3583612677 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (max_TCC4 0
  (max_TCC4-1 nil 3583612677 ("" (subtype-tcc) nil nil) nil nil))
 (max_TCC5 0
  (max_TCC5-1 nil 3583612677 ("" (termination-tcc) nil nil) nil nil))
 (max_TCC6 0
  (max_TCC6-1 nil 3583612677
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (hide 2)
        ((""
          (inst - "(len!1 - 1, LAMBDA (x: below[len!1 - 1]): f!1(x))")
          (("" (assert)
            (("" (split -)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (inst 2 "len!1 - 1")
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (skosimp* :preds? t)
                (("2" (case "f!1(i!1) < f!1(len!1 - 1)")
                  (("1" (inst + "len!1 - 1")
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (assert) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil))
 (weight_TCC1 0
  (weight_TCC1-1 nil 3583526969 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (apply const-decl "(sdecl?)" language nil))
   nil))
 (weight_TCC2 0
  (weight_TCC2-1 nil 3583526969
   ("" (subtype-tcc)
    (("1" (typepred "apply(M!1)(i!1)") (("1" (grind) nil nil)) nil)
     ("2" (typepred "apply(M!1)(i!1)") (("2" (grind) nil nil)) nil)
     ("3" (typepred "apply(M!1)(i!1)") (("3" (grind) nil nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (apply const-decl "(sdecl?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (scontext? const-decl "bool" language nil))
   nil))
 (weight_TCC3 0
  (weight_TCC3-1 nil 3583526969
   ("" (subtype-tcc)
    (("" (typepred "apply(M!1)(i!1)") (("" (grind) nil nil)) nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (apply const-decl "(sdecl?)" language nil))
   nil))
 (weight_TCC4 0
  (weight_TCC4-1 nil 3583526969
   ("" (subtype-tcc)
    (("1" (typepred "apply(M!1)(i!1)") (("1" (grind) nil nil)) nil)
     ("2" (grind)
      (("2" (typepred "apply(M!1)(i!1)") (("2" (grind) nil nil)) nil))
      nil)
     ("3" (typepred "apply(M!1)(i!1)") (("3" (grind) nil nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (apply const-decl "(sdecl?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (scontext? const-decl "bool" language nil))
   nil))
 (weight_TCC5 0
  (weight_TCC5-1 nil 3583526969
   ("" (termination-tcc)
    (("1" (use "size_apply") (("1" (grind) nil nil)) nil)
     ("2" (grind)
      (("2" (use "size_apply") (("2" (grind) nil nil)) nil)) nil)
     ("3" (use "size_apply") (("3" (grind) nil nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (kind? const-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (apply const-decl "(sdecl?)" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC6 0
  (weight_TCC6-1 nil 3583526969 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (apply const-decl "(sdecl?)" language nil))
   nil))
 (weight_TCC7 0
  (weight_TCC7-1 nil 3583526969
   ("" (skosimp* :preds? t)
    (("" (typepred "apply(M!1)(i!1)") (("" (grind) nil nil)) nil)) nil)
   ((apply const-decl "(sdecl?)" language nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (< const-decl "bool" reals nil)
    (sdecl? const-decl "bool" language nil)
    (prekind? def-decl "bool" language nil)
    (kind? const-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (weight_TCC8 0
  (weight_TCC8-1 nil 3583526969
   ("" (termination-tcc)
    (("" (lemma "size_interp")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "size_apply")
            (("" (inst?) (("" (assert) (("" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (kind? const-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (apply const-decl "(sdecl?)" language nil))
   nil))
 (weight_TCC9 0
  (weight_TCC9-1 nil 3583526969
   ("" (subtype-tcc)
    (("" (lemma "size_interp")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "size_apply")
            (("" (inst?) (("" (assert) (("" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC10 0
  (weight_TCC10-1 nil 3583526969 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC11 0
  (weight_TCC11-1 nil 3583526969 ("" (termination-tcc) nil nil)
   ((sdecl? const-decl "bool" language nil)) nil))
 (weight_TCC12 0
  (weight_TCC12-1 nil 3583526969
   ("" (skosimp* :preds? t) (("" (grind) nil nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sdecl? const-decl "bool" language nil)
    (k const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil)
    (prekind? def-decl "bool" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil))
   nil))
 (weight_TCC13 0
  (weight_TCC13-1 nil 3583526969
   ("" (skosimp* :preds? t)
    (("" (lemma "pretheory_as_precontext")
      (("" (inst - "k(const_var(A!1))" "M!1")
        (("1" (assert)
          (("1" (typepred "k")
            (("1" (inst?)
              (("1" (expand "scontext?")
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (use "precontext_is_scontext")
                      (("1" (expand "scontext?")
                        (("1" (expand "rest")
                          (("1" (expand "^^")
                            (("1" (use "concat__empty")
                              (("1"
                                (expand "empty")
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite -1)
                                    (("1"
                                      (expand "semantic?")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite -9)
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil) ("3" (grind) nil nil))
        nil))
      nil))
    nil)
   ((pretheory_as_precontext formula-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size def-decl "nat" language nil)
    (concat_empty formula-decl nil language nil)
    (precontext_is_scontext judgement-tcc nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (rest const-decl "(scontext?)" language nil)
    (PREDECL? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PREDECL adt-constructor-decl "(PREDECL?)" language nil)
    (concat__empty formula-decl nil language nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (precontext type-eq-decl nil language nil)
    (k const-decl "(scontext?)" language nil)
    (prekeyword type-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (empty const-decl "(scontext?)" language nil)
    (M!1 skolem-const-decl "(scontext?)" weight nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (A!1 skolem-const-decl "syntaxic" weight nil)
    (const_var adt-constructor-decl "[syntaxic -> (const_var?)]"
     language nil)
    (const_var? adt-recognizer-decl "[syntaxic -> boolean]" language
     nil)
    (sdecl? const-decl "bool" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil))
   nil))
 (weight_TCC14 0
  (weight_TCC14-1 nil 3583526969 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC15 0
  (weight_TCC15-1 nil 3583526969 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC16 0
  (weight_TCC16-1 nil 3583526969 ("" (termination-tcc) nil nil)
   ((sdecl? const-decl "bool" language nil)) nil))
 (weight_TCC17 0
  (weight_TCC17-1 nil 3583526969 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (k const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC18 0
  (weight_TCC18-1 nil 3583526969 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC19 0
  (weight_TCC19-1 nil 3583526969
   ("" (skosimp* :preds? t)
    (("" (lemma "pretheory_as_precontext")
      (("" (assert)
        (("" (typepred "k")
          (("" (inst?)
            (("1" (expand "scontext?")
              (("1" (flatten)
                (("1" (assert)
                  (("1" (use "precontext_is_scontext")
                    (("1" (expand "scontext?")
                      (("1" (use "concat__empty")
                        (("1" (expand "empty")
                          (("1" (assert)
                            (("1" (rewrite -1)
                              (("1"
                                (expand "semantic?")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite -9)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pretheory_as_precontext formula-decl nil language nil)
    (sdecl? const-decl "bool" language nil)
    (k const-decl "(scontext?)" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (concat__empty formula-decl nil language nil)
    (PREDECL adt-constructor-decl "(PREDECL?)" language nil)
    (PREDECL? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (rest const-decl "(scontext?)" language nil)
    (prekeyword type-decl nil language nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (precontext type-eq-decl nil language nil)
    (precontext_is_scontext judgement-tcc nil language nil)
    (prekind? def-decl "bool" language nil)
    (concat_empty formula-decl nil language nil)
    (empty const-decl "(scontext?)" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil))
   nil))
 (weight_TCC20 0
  (weight_TCC20-1 nil 3583526969 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC21 0
  (weight_TCC21-1 nil 3583526969 ("" (termination-tcc) nil nil)
   ((sdecl? const-decl "bool" language nil)) nil))
 (weight_TCC22 0
  (weight_TCC22-1 nil 3583526969 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (k const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC23 0
  (weight_TCC23-1 nil 3583526969 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC24 0
  (weight_TCC24-1 nil 3583526969 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC25 0
  (weight_TCC25-1 nil 3583526969
   ("" (skosimp* :preds? t)
    (("" (lemma "pretheory_as_precontext")
      (("" (assert)
        (("" (typepred "k")
          (("" (inst?)
            (("1" (expand "scontext?")
              (("1" (flatten)
                (("1" (assert)
                  (("1" (use "precontext_is_scontext")
                    (("1" (expand "scontext?")
                      (("1" (use "concat__empty")
                        (("1" (expand "empty")
                          (("1" (assert)
                            (("1" (rewrite -1)
                              (("1"
                                (expand "semantic?")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite -9)
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pretheory_as_precontext formula-decl nil language nil)
    (sdecl? const-decl "bool" language nil)
    (k const-decl "(scontext?)" language nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (M!1 skolem-const-decl "(scontext?)" weight nil)
    (TRUE const-decl "bool" booleans nil)
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (FALSE const-decl "bool" booleans nil)
    (map adt-constructor-decl "[finseq[syntaxic] -> (map?)]" language
         nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (concat__empty formula-decl nil language nil)
    (PREDECL adt-constructor-decl "(PREDECL?)" language nil)
    (PREDECL? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (rest const-decl "(scontext?)" language nil)
    (prekeyword type-decl nil language nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (precontext_is_scontext judgement-tcc nil language nil)
    (prekind? def-decl "bool" language nil)
    (concat_empty formula-decl nil language nil)
    (empty const-decl "(scontext?)" language nil)
    (size def-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil))
   nil))
 (weight_TCC26 0
  (weight_TCC26-1 nil 3583526969
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC27 0
  (weight_TCC27-1 nil 3583526969 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC28 0
  (weight_TCC28-1 nil 3583526969 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC29 0
  (weight_TCC29-1 nil 3583526969
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC30 0
  (weight_TCC30-1 nil 3583526969 ("" (termination-tcc) nil nil)
   ((sdecl? const-decl "bool" language nil)) nil))
 (weight_TCC31 0
  (weight_TCC31-1 nil 3583526969 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (k const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC32 0
  (weight_TCC32-1 nil 3583526969 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (k const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC33 0
  (weight_TCC33-1 nil 3583526969 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC34 0
  (weight_TCC34-1 nil 3583526969 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC35 0
  (weight_TCC35-1 nil 3583528441
   ("" (skosimp* :preds? t)
    (("" (lemma "pretheory_as_precontext")
      (("" (assert)
        (("" (typepred "k")
          (("" (inst?)
            (("1" (expand "scontext?")
              (("1" (flatten)
                (("1" (assert)
                  (("1" (use "precontext_is_scontext")
                    (("1" (expand "scontext?")
                      (("1" (use "concat__empty")
                        (("1" (expand "empty")
                          (("1" (assert)
                            (("1" (rewrite -1)
                              (("1"
                                (expand "semantic?")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite -9)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pretheory_as_precontext formula-decl nil language nil)
    (sdecl? const-decl "bool" language nil)
    (k const-decl "(scontext?)" language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (++ const-decl "(scontext?)" language nil)
    (concat__empty formula-decl nil language nil)
    (PREDECL adt-constructor-decl "(PREDECL?)" language nil)
    (PREDECL? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (rest const-decl "(scontext?)" language nil)
    (prekeyword type-decl nil language nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (precontext type-eq-decl nil language nil)
    (precontext_is_scontext judgement-tcc nil language nil)
    (prekind? def-decl "bool" language nil)
    (concat_empty formula-decl nil language nil)
    (empty const-decl "(scontext?)" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil))
   nil))
 (weight_TCC36 0
  (weight_TCC36-1 nil 3583528441 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC37 0
  (weight_TCC37-1 nil 3583528441 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC38 0
  (weight_TCC38-1 nil 3583528441 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC39 0
  (weight_TCC39-1 nil 3583528441
   ("" (subtype-tcc)
    (("" (auto-rewrite "size_concat") (("" (assert) nil nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC40 0
  (weight_TCC40-1 nil 3583528441 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC41 0
  (weight_TCC41-1 nil 3583528441 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC42 0
  (weight_TCC42-1 nil 3583528441 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC43 0
  (weight_TCC43-1 nil 3583528441
   ("" (subtype-tcc)
    (("" (auto-rewrite "size_concat") (("" (assert) nil nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC44 0
  (weight_TCC44-1 nil 3583528441
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC45 0
  (weight_TCC45-1 nil 3583528441 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC46 0
  (weight_TCC46-1 nil 3583528441
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC47 0
  (weight_TCC47-1 nil 3583528441 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC48 0
  (weight_TCC48-1 nil 3583528441
   ("" (subtype-tcc) (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC49 0
  (weight_TCC49-1 nil 3583528441 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC50 0
  (weight_TCC50-1 nil 3583528441 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC51 0
  (weight_TCC51-1 nil 3583528441 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC52 0
  (weight_TCC52-1 nil 3583528441 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC53 0
  (weight_TCC53-1 nil 3583528441 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC54 0
  (weight_TCC54-1 nil 3583528441 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC55 0
  (weight_TCC55-1 nil 3583528441 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC56 0
  (weight_TCC56-1 nil 3583528441 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC57 0
  (weight_TCC57-1 nil 3583528441 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC58 0
  (weight_TCC58-1 nil 3583528441 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC59 0
  (weight_TCC59-1 nil 3583528441 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_TCC60 0
  (weight_TCC60-1 nil 3583528441 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size def-decl "nat" language nil)
    (prekind? def-decl "bool" language nil)
    (sdecl? const-decl "bool" language nil))
   nil))
 (weight_TCC61 0
  (weight_TCC61-1 nil 3583585168 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (M!1 skolem-const-decl "(scontext?)" weight nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (x!1 skolem-const-decl "below[f!1`length]" weight nil)
    (f!1 skolem-const-decl "finseq[syntaxic]" weight nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (rest const-decl "(scontext?)" language nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sdecl? const-decl "bool" language nil)
    (scontext? const-decl "bool" language nil))
   nil))
 (weight_TCC62 0
  (weight_TCC62-1 nil 3583585168 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prekind? def-decl "bool" language nil)
    (++ const-decl "(scontext?)" language nil)
    (O const-decl "finseq" finite_sequences nil)
    (rest const-decl "(scontext?)" language nil)
    (sdecl? const-decl "bool" language nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (weight_TCC63 0
  (weight_TCC63-1 nil 3583585168
   ("" (skosimp* :preds? t)
    (("" (assert)
      (("" (rewrite -4)
        (("" (assert)
          (("" (expand "semantic?")
            (("" (assert)
              (("" (flatten)
                (("" (assert) (("" (inst - "x!1") nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prekind? def-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil))
   nil))
 (weight_TCC64 0
  (weight_TCC64-1 nil 3583585168
   ("" (skosimp* :preds? t)
    (("" (rewrite -4)
      (("" (assert)
        (("" (typepred "sum")
          (("" (inst?)
            (("" (assert)
              (("" (inst - "x!1")
                (("" (assert)
                  (("" (expand "finseq_appl") (("" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (sum def-decl
     "{n: nat | n > 0 AND (FORALL (x: below[len]): f(x) < n)}" language
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (size def-decl "nat" language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (semantic? const-decl "bool" language nil)
    (semantic type-eq-decl nil language nil))
   nil))
 (weight_definition_TCC1 0
  (weight_definition_TCC1-1 nil 3583586237 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (apply const-decl "(sdecl?)" language nil))
   nil))
 (weight_definition_TCC2 0
  (weight_definition_TCC2-1 nil 3583586237 ("" (subtype-tcc) nil nil)
   ((precontext type-eq-decl nil language nil)
    (PRECONTEXT adt-constructor-decl "(PRECONTEXT?)" language nil)
    (PRECONTEXT? adt-recognizer-decl "[prekeyword -> boolean]" language
     nil)
    (prekeyword type-decl nil language nil)
    (syntaxic type-decl nil language nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (weight_definition_TCC3 0
  (weight_definition_TCC3-1 nil 3583586237
   ("" (subtype-tcc)
    (("1" (typepred "apply(M!1)(x!1)") (("1" (grind) nil nil)) nil)
     ("2" (typepred "apply(M!1)(x!1)") (("2" (grind) nil nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (syntaxic type-decl nil language nil)
    (scontext? const-decl "bool" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (kind? const-decl "bool" language nil)
    (< const-decl "bool" reals nil)
    (map? adt-recognizer-decl "[syntaxic -> boolean]" language nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (run_map adt-accessor-decl "[(map?) -> finseq[syntaxic]]" language
     nil)
    (sdecl? const-decl "bool" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (apply const-decl "(sdecl?)" language nil)
    (prekind? def-decl "bool" language nil)
    (semantic? const-decl "bool" language nil))
   nil))
 (weight_definition 0
  (weight_definition-1 nil 3583586289 ("" (postpone) nil nil) nil
   shostak)))

