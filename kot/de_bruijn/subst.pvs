subst: THEORY
BEGIN
  IMPORTING language

  Γ, Δ, Θ: VAR (theory_def?)
  M, N, P: VAR (scontext?)
  i, j, n, x: VAR nat
  U, V: VAR syntaxic
  t: VAR (sexpr?)
  nb, c: VAR [nat, nat]
  d: VAR (scontext?)


  AUTO_REWRITE+ sexpr?
  % Shift: classical shift operator for De Bruijn indices
  ;↑(U, nb): RECURSIVE 
   { V | (sexpr?(U) IFF sexpr?(V)) AND 
         (sinterp?(U) IFF sinterp?(V)) AND
	 (scontext?(U) IFF scontext?(V)) } = 
    CASES U OF
      % Names
      v(i): IF i < nb`2 THEN v(i) ELSE v(i + nb`1) ENDIF
    , dot(m, e): dot(m ↑ nb, e)
    , interp(m, σ):
        interp(m ↑ nb,
	       σ WITH [`seq := LAMBDA (x: below(σ`length)): σ(x) ↑ (nb`1, nb`2 + σ`length - 1 - x) ])
    , theory_(Θ):
        theory_(Θ WITH [ `seq := LAMBDA (x: below(length(Θ))): Θ(x) ↑ (nb`1, nb`2 + length(Θ) - 1 - x) ])

      % Types
    , subtype(T, a): subtype(T ↑ nb, a ↑ (nb`1, nb`2 + 1))
    , fun(A, B): fun(A ↑ nb, B ↑ (nb`1, nb`2 + 1))
    , prod(A, B): prod(A ↑ nb, B ↑ (nb`1, nb`2 + 1))

      % Terms

    , app(f, a): app(f ↑ nb, a ↑ nb)
    , lam(T, a): lam(T ↑ nb, a ↑ (nb`1, nb`2 + 1))
    , pair(a, b): pair(a ↑ nb, b ↑ nb)
    , lproj(a): lproj(a ↑ nb)
    , rproj(a): rproj(a ↑ nb)

      % Contexts
    , type_decl: type_decl
    , type_var: type_var
    , type_def(T): type_def(T ↑ nb)
    , const_decl(T): const_decl(T ↑ nb)
    , const_var(T): const_var(T ↑ nb)
    , const_def(T, a): const_def(T ↑ nb, a ↑ nb)
    , theory_def(Th): theory_def(Th ↑ nb)

      % Interpretations
    , ikeep: ikeep
    , itype(T): itype(T ↑ nb)
    , iterm(a): iterm(a ↑ nb)
    ENDCASES
  MEASURE U BY <<
  AUTO_REWRITE+ ↑
  AUTO_REWRITE- sexpr?

  % Handy rewrite
  shift_zero: THEOREM
    U ↑ (0, n) = U
  AUTO_REWRITE+ shift_zero
  ;↑(U, (n: nat)): MACRO syntaxic =
    (U ↑ (n, 0))

  % Some theorem on shift
  kind_shift: THEOREM
    kind(d ↑ nb) = kind(d)





  AUTO_REWRITE+ sexpr?
  % This is a "true" substitution - this really removes the bound variable.
  % Outer variables see their index decreased.
  % Definition 2.15, 4.3, modified for the De Bruijn index
  subst(U, x, t): RECURSIVE 
  { V | (sexpr?(U) IFF sexpr?(V)) AND 
        (sinterp?(U) IFF sinterp?(V)) AND
	(scontext?(U) IFF scontext?(V)) } = 
    CASES U OF
      % n ↦ t
      % x ↦ x where the λ-binder for n has been removed
      v(i): IF i > x THEN v(i - 1) ELSIF i = x THEN t ELSE v(i) ENDIF
      % /!\ Case x = m not handled
    , dot(m, e): dot(subst(m, x, t), e)
    , interp(m, σ):
        interp(subst(m, x, t),
	       σ WITH [`seq := LAMBDA (y: below(σ`length)): subst(σ(y), x + σ`length - 1 - y, t ↑ (σ`length - 1 - y)) ])
    , theory_(Θ):
        theory_(Θ WITH [ `seq := LAMBDA (y: below(length(Θ))): subst(Θ(y), x + length(Θ) - 1 - y, t ↑ (length(Θ) - 1 - y)) ])

      % { y:  T | a } ↦      { y:   T[ x ← t]    |   a[   x  ←   t ] }
      %                        λ——————————————————————\___________/
    , subtype(T,  a): subtype(subst(T, x,  t), subst(a, x + 1, t ↑ 1))
      % [i: A → B] ↦ [ i:   A[ x ← t] →      B[   x  ←   t  ]]
      %                λ——————————————————————\_____________/
    , fun(  A,  B):  fun(subst(A, x,  t), subst(B, x + 1, t ↑ 1))
      % [i: A, B] ↦ [i:    A[ x ← t],       B[   x  ←   t  ]]
      %              λ———————————————————————\_____________/
    , prod( A, B):  prod(subst(A, x,  t), subst(B, x + 1, t ↑ 1))

      %   f  a ↦           f[ x ← t]        a[ x ← t]
    , app(f, a): app(subst(f, x,  t), subst(a, x,  t))
      % λ(y: T): a ↦ λ(y:      T[ x ← t]):      a[   x  ←   t  ]
      %                λ————————————————————————–\_____________/
    , lam(   T,  a): lam(subst(T, x,  t), subst(a, x + 1, t ↑ 1))
      %   (a, b) ↦ (       a[ x ← t],       b[ x ← t] )
    , pair(a, b):  pair(subst(a, x,  t), subst(b, x,  t))
      %  p₁ a ↦ p₁          a[ x ← t]
    , lproj(a): lproj(subst(a, x,  t))
      %  p₂ a ↦ p₂          a[ x ← t]x
    , rproj(a): rproj(subst(a, x,  t))

      % Decls
    , type_decl: type_decl
    , type_var: type_var
    , type_def(T): type_def(subst(T, x, t))
    , const_decl(T): const_decl(subst(T, x, t))
    , const_var(T): const_var(subst(T, x, t))
    , const_def(T, a): const_def(subst(T, x, t), subst(a, x, t))
    , theory_def(Th): theory_def(subst(Th, x, t))

      % Interpretations
    , ikeep: ikeep
    , itype(T): itype(subst(T, x, t))
    , iterm(a): iterm(subst(a, x, t))
    ENDCASES
  MEASURE U BY <<
  AUTO_REWRITE subst
  AUTO_REWRITE- sexpr?

%%%%% LATER %%%%%%



  

  % length_shift: THEOREM
  %   length(Γ ↑ nb) = length(Γ)
  % shift_plus: THEOREM
  %   (U ↑ (i, n)) ↑ (j, n) = U ↑ (i + j, n)
  % AUTO_REWRITE+ shift_plus, length_shift
  % shift_k: THEOREM
  %   k(M) ↑ nb = k(M ↑ nb)
  % shift_concat: THEOREM
  %   (Γ ++ Δ) ↑ nb = (Γ ↑ nb) ++ (Δ ↑ (nb`1, nb`2 + length(Γ)))
  % AUTO_REWRITE shift_k, shift_concat
 
  % signature_shift: THEOREM
  %   signature(M ↑ nb) = signature(M)
  
  % % Subtype judgements
  % strong_prektau_shift: THEOREM
  %   pretau(S1 ++ Sig ++ S2)(U ↑ (length(Sig), length(S2)))(s)
  %   IFF pretau(S1 ++ S2)(U)(s)
  % shift_pretau: THEOREM
  %   pretau(S1 ++ S2)(U ↑ length(S2)) = pretau(S1)(U)


  % % Shift preserves type_size
  % shift_type_size: THEOREM type_size(U ↑ nb) = type_size(U)
  

  % signature_subst: THEOREM
  %   signature(subst(M, x, t)) = signature(M)

  % % Subtype judgements
  % strong_pretau_subst: THEOREM
  %   pretau(S1 ++ S2)(t)(sconst_def) IMPLIES
  %   (pretau(S1 ++ S2)(subst(U, length(S2), t))(s) IFF 
  %    pretau(S1 ++ k(sconst_def) ++ S2)(U)(s))
  % pretau_subst: THEOREM
  %   pretau(S1)(t)(sconst_def) IMPLIES
  %   pretau(S1)(subst(U, 0, t)) = pretau(S1 ++ k(sconst_def))(U)


  % subst_type_size: THEOREM
  %   type_size(subst(U, x, t)) = type_size(U)
  % AUTO_REWRITE subst_type_size

END subst
