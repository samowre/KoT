interp: THEORY
BEGIN
  IMPORTING language

  Γ: VAR finseq[(scontext?)]
  σ: VAR finseq[(sinterp?)]
  
  compatible?(Γ, σ): bool =
    length(Γ) = length(σ) AND
    FORALL (x: below[length(Γ)]):
      CASES σ(x) OF
        ikeep: TRUE
      , itype(T): type_decl?(Γ(x))
      , iterm(a): const_decl?(Γ(x))
      ENDCASES

  interpret(Γ, (σ | compatible?(Γ, σ))): finseq[(scontext?)] =
    Γ WITH
      [ `seq :=
        LAMBDA (x: below[length(Γ)]):
	  IF ikeep?(σ(x)) THEN Γ(x)
	  ELSIF itype?(σ(x)) THEN type_def(def(σ(x)))
	  ELSE const_def(type_(Γ(x)), def(σ(x)))
	  ENDIF ]
END interp
