interp: THEORY
BEGIN
  IMPORTING language

  m: VAR (sexpr?)
  Γ: VAR finseq[(scontext?)]
  σ: VAR finseq[(sinterp?)]
  
  compatible?(Γ, σ): bool =
    length(Γ) = length(σ) AND
    FORALL (x: below(length(Γ))):
      CASES σ(x) OF
        ikeep: TRUE
      , itype(T): type_decl?(Γ(x))
      , iterm(a): const_decl?(Γ(x))
      , ideep(σ): FALSE % Later, or never.
      ENDCASES

  interpret(m, Γ, (σ | compatible?(Γ, σ))): finseq[(scontext?)] =
    Γ WITH
      [ `seq :=
        LAMBDA (x: below[length(Γ)]):
	  IF ikeep?(σ(x)) THEN
	    CASES Γ(x) OF
	      type_var: type_def(dot(m, v(x)))
	    , const_var(T): const_def(T, dot(m, v(x)))
	      ELSE Γ(x)
	    ENDCASES
	  ELSIF itype?(σ(x)) THEN type_def(def(σ(x)))
	  ELSE const_def(type_(Γ(x)), def(σ(x)))
	  ENDIF ]
END interp
