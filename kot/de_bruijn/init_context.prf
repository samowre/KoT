(init_context (bool_theory_TCC1 0
               (bool_theory_TCC1-1 nil 3584303443 ("" (grind) nil nil)
                ((scontext? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC2 0
               (bool_theory_TCC2-1 nil 3584303443
                ("" (grind :rewrites sexpr?) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC3 0
               (bool_theory_TCC3-1 nil 3584303443 ("" (grind) nil nil)
                ((scontext? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC4 0
               (bool_theory_TCC4-1 nil 3584303443
                ("" (grind :rewrites sexpr?) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC5 0
               (bool_theory_TCC5-1 nil 3584303443 ("" (grind) nil nil)
                ((scontext? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC6 0
               (bool_theory_TCC6-1 nil 3584303443
                ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC7 0
               (bool_theory_TCC7-1 nil 3584303443
                ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC8 0
               (bool_theory_TCC8-1 nil 3584303443
                ("" (cond-coverage-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC9 0
               (bool_theory_TCC9-1 nil 3584379496 ("" (grind) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC10 0
               (bool_theory_TCC10-1 nil 3584379496 ("" (grind) nil nil)
                ((scontext? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC11 0
               (bool_theory_TCC11-1 nil 3584379496
                ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC12 0
               (bool_theory_TCC12-1 nil 3584379496
                ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC13 0
               (bool_theory_TCC13-1 nil 3584379496
                ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC14 0
               (bool_theory_TCC14-1 nil 3584379496 ("" (grind) nil nil)
                ((scontext? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC15 0
               (bool_theory_TCC15-1 nil 3584379496
                ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC16 0
               (bool_theory_TCC16-1 nil 3584379496 ("" (grind) nil nil)
                ((scontext? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC17 0
               (bool_theory_TCC17-1 nil 3584379496
                ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC18 0
               (bool_theory_TCC18-1 nil 3584379496
                ("" (skosimp* :preds? t)
                 (("" (assert) (("" (grind) nil nil)) nil)) nil)
                ((real_lt_is_strict_total_order name-judgement
                  "(strict_total_order?[real])" real_props nil)
                 (scontext? adt-def-decl "boolean" language nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (number nonempty-type-decl nil numbers nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (< const-decl "bool" reals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (>= const-decl "bool" reals nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (below type-eq-decl nil nat_types nil))
                nil))
              (bool_theory_TCC19 0
               (bool_theory_TCC19-1 nil 3584379496 ("" (grind) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (bool_theory_TCC20 0
               (bool_theory_TCC20-1 nil 3584379496
                ("" (subtype-tcc) nil nil)
                ((boolean nonempty-type-decl nil booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (number nonempty-type-decl nil numbers nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (< const-decl "bool" reals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (>= const-decl "bool" reals nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (below type-eq-decl nil nat_types nil)
                 (real_lt_is_strict_total_order name-judgement
                  "(strict_total_order?[real])" real_props nil))
                nil))
              (bool_theory_TCC21 0
               (bool_theory_TCC21-1 nil 3584379496
                ("" (subtype-tcc) nil nil)
                ((boolean nonempty-type-decl nil booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (number nonempty-type-decl nil numbers nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (< const-decl "bool" reals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (>= const-decl "bool" reals nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (below type-eq-decl nil nat_types nil)
                 (real_lt_is_strict_total_order name-judgement
                  "(strict_total_order?[real])" real_props nil))
                nil))
              (bool__TCC1 0
               (bool__TCC1-1 nil 3584303443 ("" (subtype-tcc) nil nil)
                nil nil))
              (bool__TCC2 0
               (bool__TCC2-1 nil 3584303443
                ("" (grind :rewrites sexpr?) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (bool__TCC3 0
               (bool__TCC3-1 nil 3584303443
                ("" (grind :rewrites sexpr?) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (bool__TCC4 0
               (bool__TCC4-1 nil 3584303443
                ("" (grind :rewrites sexpr?) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (TRUE__TCC1 0
               (TRUE__TCC1-1 nil 3584303443
                ("" (grind :rewrites sexpr?) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (TRUE__TCC2 0
               (TRUE__TCC2-1 nil 3584303443
                ("" (grind :rewrites sexpr?) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (FALSE__TCC1 0
               (FALSE__TCC1-1 nil 3584303443
                ("" (grind :rewrites sexpr?) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (FALSE__TCC2 0
               (FALSE__TCC2-1 nil 3584303443
                ("" (grind :rewrites sexpr?) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (boolop_TCC1 0
               (boolop_TCC1-1 nil 3584381765 ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (boolop_TCC2 0
               (boolop_TCC2-1 nil 3584381765 ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (not__TCC1 0
               (not__TCC1-1 nil 3584303443 ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (not__TCC2 0
               (not__TCC2-1 nil 3584303443 ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (and__TCC1 0
               (and__TCC1-1 nil 3584303443 ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (and__TCC2 0
               (and__TCC2-1 nil 3584303443 ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (or__TCC1 0
               (or__TCC1-1 nil 3584303443 ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (or__TCC2 0
               (or__TCC2-1 nil 3584303443 ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (¬_TCC1 0
               (¬_TCC1-1 nil 3584303443 ("" (subtype-tcc) nil nil)
                ((not_ const-decl "(sexpr?)" init_context nil)
                 (sexpr? adt-def-decl "boolean" language nil))
                nil))
              (wedge_TCC1 0
               (wedge_TCC1-1 nil 3584303443 ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (wedge_TCC2 0
               (wedge_TCC2-1 nil 3584303443 ("" (subtype-tcc) nil nil)
                ((and_ const-decl "(sexpr?)" init_context nil)
                 (sexpr? adt-def-decl "boolean" language nil))
                nil))
              (vee_TCC1 0
               (vee_TCC1-1 nil 3584303443 ("" (subtype-tcc) nil nil)
                ((or_ const-decl "(sexpr?)" init_context nil)
                 (sexpr? adt-def-decl "boolean" language nil))
                nil))
              (equalities_TCC1 0
               (equalities_TCC1-1 nil 3584303443
                ("" (grind :rewrites sexpr?) nil nil)
                ((scontext? adt-def-decl "boolean" language nil)) nil))
              (equalities_TCC2 0
               (equalities_TCC2-1 nil 3584303443
                ("" (grind :rewrites sexpr?) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (equalities_TCC3 0
               (equalities_TCC3-1 nil 3584303443
                ("" (grind :rewrites sexpr?) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)
                 (bool_ const-decl "(sexpr?)" init_context nil))
                nil))
              (equalities_TCC4 0
               (equalities_TCC4-1 nil 3584303443
                ("" (grind :rewrites sexpr?) nil nil)
                ((scontext? adt-def-decl "boolean" language nil)
                 (bool_ const-decl "(sexpr?)" init_context nil))
                nil))
              (equalities_TCC5 0
               (equalities_TCC5-1 nil 3584303443
                ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (equalities_TCC6 0
               (equalities_TCC6-1 nil 3584303443
                ("" (subtype-tcc) nil nil)
                ((bool_ const-decl "(sexpr?)" init_context nil)
                 (sexpr? adt-def-decl "boolean" language nil))
                nil))
              (equalities_TCC7 0
               (equalities_TCC7-1 nil 3584303443
                ("" (subtype-tcc) nil nil)
                ((boolean nonempty-type-decl nil booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (number nonempty-type-decl nil numbers nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (< const-decl "bool" reals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (>= const-decl "bool" reals nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (below type-eq-decl nil nat_types nil)
                 (real_lt_is_strict_total_order name-judgement
                  "(strict_total_order?[real])" real_props nil)
                 (bool_ const-decl "(sexpr?)" init_context nil))
                nil))
              (equalities_TCC8 0
               (equalities_TCC8-1 nil 3584303443
                ("" (subtype-tcc) nil nil)
                ((boolean nonempty-type-decl nil booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (number nonempty-type-decl nil numbers nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (< const-decl "bool" reals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (>= const-decl "bool" reals nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (below type-eq-decl nil nat_types nil)
                 (real_lt_is_strict_total_order name-judgement
                  "(strict_total_order?[real])" real_props nil))
                nil))
              (equal_TCC1 0
               (equal_TCC1-1 nil 3584303443 ("" (subtype-tcc) nil nil)
                ((list2finseq const-decl "finseq[T]" list2finseq nil))
                nil))
              (equal_TCC2 0
               (equal_TCC2-1 nil 3584303443 ("" (subtype-tcc) nil nil)
                ((list2finseq const-decl "finseq[T]" list2finseq nil)
                 (sexpr? adt-def-decl "boolean" language nil))
                nil))
              (equal_TCC3 0
               (equal_TCC3-1 nil 3584303443
                ("" (skosimp* :preds? t)
                 (("" (grind :exclude sexpr?)
                   (("" (expand nth)
                     (("" (grind :exclude sexpr?) nil nil)) nil))
                   nil))
                 nil)
                ((sinterp? adt-def-decl "boolean" language nil)
                 (list2finseq const-decl "finseq[T]" list2finseq nil)
                 (length def-decl "nat" list_props nil)
                 (real_lt_is_strict_total_order name-judgement
                  "(strict_total_order?[real])" real_props nil)
                 (nnint_plus_posint_is_posint application-judgement
                  "posint" integers nil)
                 (nth def-decl "T" list_props nil)
                 (number nonempty-type-decl nil numbers nil)
                 (number_field_pred const-decl "[number -> boolean]"
                  number_fields nil)
                 (number_field nonempty-type-from-decl nil
                  number_fields nil)
                 (real_pred const-decl "[number_field -> boolean]"
                            reals nil)
                 (real nonempty-type-from-decl nil reals nil)
                 (< const-decl "bool" reals nil)
                 (rational_pred const-decl "[real -> boolean]"
                                rationals nil)
                 (rational nonempty-type-from-decl nil rationals nil)
                 (integer_pred const-decl "[rational -> boolean]"
                               integers nil)
                 (int nonempty-type-eq-decl nil integers nil)
                 (>= const-decl "bool" reals nil)
                 (nat nonempty-type-eq-decl nil naturalnumbers nil)
                 (below type-eq-decl nil nat_types nil)
                 (finseq type-eq-decl nil finite_sequences nil)
                 (boolean nonempty-type-decl nil booleans nil)
                 (bool nonempty-type-eq-decl nil booleans nil)
                 (NOT const-decl "[bool -> bool]" booleans nil)
                 (syntaxic type-decl nil language nil)
                 (sexpr? adt-def-decl "boolean" language nil))
                nil))
              (equal_TCC4 0
               (equal_TCC4-1 nil 3584303443 ("" (subtype-tcc) nil nil)
                ((list2finseq const-decl "finseq[T]" list2finseq nil)
                 (sexpr? adt-def-decl "boolean" language nil))
                nil))
              (equal_TCC5 0
               (equal_TCC5-1 nil 3584303443 ("" (subtype-tcc) nil nil)
                ((list2finseq const-decl "finseq[T]" list2finseq nil)
                 (sexpr? adt-def-decl "boolean" language nil))
                nil))
              (doteq_TCC1 0
               (doteq_TCC1-1 nil 3584303443 ("" (subtype-tcc) nil nil)
                ((list2finseq const-decl "finseq[T]" list2finseq nil)
                 (equal const-decl "(sexpr?)" init_context nil)
                 (sexpr? adt-def-decl "boolean" language nil))
                nil))
              (forall__TCC1 0
               (forall__TCC1-1 nil 3584303443
                ("" (subtype-tcc) nil nil)
                ((bool_ const-decl "(sexpr?)" init_context nil)
                 (sexpr? adt-def-decl "boolean" language nil))
                nil))
              (forall__TCC2 0
               (forall__TCC2-1 nil 3584303443
                ("" (subtype-tcc) nil nil)
                ((sexpr? adt-def-decl "boolean" language nil)) nil))
              (forall__TCC3 0
               (forall__TCC3-1 nil 3584303443
                ("" (subtype-tcc) nil nil)
                ((TRUE_ const-decl "(sexpr?)" init_context nil)
                 (sexpr? adt-def-decl "boolean" language nil))
                nil))
              (forall__TCC4 0
               (forall__TCC4-1 nil 3584303443
                ("" (subtype-tcc) nil nil)
                ((TRUE_ const-decl "(sexpr?)" init_context nil)
                 (sexpr? adt-def-decl "boolean" language nil))
                nil))
              (forall__TCC5 0
               (forall__TCC5-1 nil 3584303443
                ("" (subtype-tcc) nil nil)
                ((bool_ const-decl "(sexpr?)" init_context nil)
                 (list2finseq const-decl "finseq[T]" list2finseq nil)
                 (equal const-decl "(sexpr?)" init_context nil)
                 (TRUE_ const-decl "(sexpr?)" init_context nil)
                 (sexpr? adt-def-decl "boolean" language nil))
                nil))
              (exists__TCC1 0
               (exists__TCC1-1 nil 3584303443
                ("" (subtype-tcc) nil nil)
                ((not_ const-decl "(sexpr?)" init_context nil)
                 (¬ const-decl "(sexpr?)" init_context nil)
                 (bool_ const-decl "(sexpr?)" init_context nil)
                 (list2finseq const-decl "finseq[T]" list2finseq nil)
                 (equal const-decl "(sexpr?)" init_context nil)
                 (TRUE_ const-decl "(sexpr?)" init_context nil)
                 (forall_ const-decl "(sexpr?)" init_context nil)
                 (sexpr? adt-def-decl "boolean" language nil))
                nil))
              (init_context_TCC1 0
               (init_context_TCC1-1 nil 3584303443 ("" (grind) nil nil)
                ((bool_theory const-decl "(theory?)" init_context nil)
                 (sexpr? adt-def-decl "boolean" language nil))
                nil))
              (init_context_TCC2 0
               (init_context_TCC2-1 nil 3584303443 ("" (grind) nil nil)
                ((bool_theory const-decl "(theory?)" init_context nil)
                 (scontext? adt-def-decl "boolean" language nil))
                nil))
              (init_context_TCC3 0
               (init_context_TCC3-1 nil 3584303443 ("" (grind) nil nil)
                ((bool_ const-decl "(sexpr?)" init_context nil)
                 (equalities const-decl "(theory?)" init_context nil)
                 (sexpr? adt-def-decl "boolean" language nil))
                nil))
              (init_context_TCC4 0
               (init_context_TCC4-1 nil 3584303443 ("" (grind) nil nil)
                ((bool_ const-decl "(sexpr?)" init_context nil)
                 (equalities const-decl "(theory?)" init_context nil)
                 (scontext? adt-def-decl "boolean" language nil))
                nil))
              (admissible?_TCC1 0
               (admissible?_TCC1-1 nil 3584379496
                ("" (subtype-tcc) nil nil)
                ((int_minus_int_is_int application-judgement "int"
                  integers nil)
                 (real_ge_is_total_order name-judgement
                  "(total_order?[real])" real_props nil)
                 (real_gt_is_strict_total_order name-judgement
                  "(strict_total_order?[real])" real_props nil)
                 (bool_theory const-decl "(theory?)" init_context nil)
                 (bool_ const-decl "(sexpr?)" init_context nil)
                 (equalities const-decl "(theory?)" init_context nil)
                 (init_context const-decl "(theory?)" init_context nil)
                 (min const-decl "{p: real | p <= m AND p <= n}"
                      real_defs nil)
                 (^^ const-decl "finseq" finite_sequences nil)
                 (rest const-decl "finseq[(scontext?)]" language nil)
                 (empty_seq const-decl "finseq" finite_sequences nil))
                nil)))

