(fmla
 (FV_TCC1 0
  (FV_TCC1-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)) nil))
 (FV_TCC2 0
  (FV_TCC2-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)) nil))
 (FV_TCC3 0
  (FV_TCC3-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)) nil))
 (FV_TCC4 0
  (FV_TCC4-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)) nil))
 (empty_zero_bounded 0
  (empty_zero_bounded-1 nil 3578953938 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fmla type-decl nil fmla nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil) (FV def-decl "set[nat]" fmla nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil) (< const-decl "bool" fmla nil))
   shostak))
 (parsubst_TCC1 0
  (parsubst_TCC1-1 nil 3578945588 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-decl nil fmla nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (v!1 skolem-const-decl "(V(args!1`seq(x1!1)))" fmla nil)
    (x1!1 skolem-const-decl "below[args!1`length]" fmla nil)
    (args!1 skolem-const-decl
     "{l: finseq[term] | l`length = arity(p!1)}" fmla nil)
    (p!1 skolem-const-decl "pred" fmla nil)
    (f!1 skolem-const-decl
     "{f | FORALL (v: (FV(f))): v < mapping!1`length + q!1}" fmla nil)
    (q!1 skolem-const-decl "nat" fmla nil)
    (mapping!1 skolem-const-decl "finseq[term]" fmla nil)
    (args adt-accessor-decl
          "[d: (atom?) -> {l: finseq[term] | l`length = arity(pred(d))}]"
          fmla nil)
    (pred adt-accessor-decl "[(atom?) -> pred]" fmla nil)
    (atom? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (subterm adt-def-decl "boolean" term nil)
    (var? adt-recognizer-decl "[term -> boolean]" term nil)
    (v adt-constructor-decl "[nat -> (var?)]" term nil)
    (V def-decl "{ns: set[nat] | ns = ({n: nat | subterm(v(n), t)})}"
     term nil)
    (< const-decl "bool" term nil)
    (finseq2set const-decl "set[T]" set_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (FV def-decl "set[nat]" fmla nil)
    (member const-decl "bool" sets nil))
   nil))
 (parsubst_TCC2 0
  (parsubst_TCC2-1 nil 3578946439 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil))
 (parsubst_TCC3 0
  (parsubst_TCC3-1 nil 3578946439 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (arg adt-accessor-decl "[(f_not?) -> fmla]" fmla nil)
    (mapping!1 skolem-const-decl "finseq[term]" fmla nil)
    (q!1 skolem-const-decl "nat" fmla nil)
    (f!1 skolem-const-decl
     "{f | FORALL (v: (FV(f))): v < mapping!1`length + q!1}" fmla nil)
    (g!1 skolem-const-decl "fmla" fmla nil)
    (v!1 skolem-const-decl "(FV(g!1))" fmla nil)
    (FV def-decl "set[nat]" fmla nil))
   nil))
 (parsubst_TCC4 0
  (parsubst_TCC4-1 nil 3578946439 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (f_or? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (larg adt-accessor-decl "[(f_or?) -> fmla]" fmla nil)
    (mapping!1 skolem-const-decl "finseq[term]" fmla nil)
    (q!1 skolem-const-decl "nat" fmla nil)
    (f!1 skolem-const-decl
     "{f | FORALL (v: (FV(f))): v < mapping!1`length + q!1}" fmla nil)
    (g!1 skolem-const-decl "fmla" fmla nil)
    (v!1 skolem-const-decl "(FV(g!1))" fmla nil)
    (rarg adt-accessor-decl "[(f_or?) -> fmla]" fmla nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (FV def-decl "set[nat]" fmla nil))
   nil))
 (parsubst_TCC5 0
  (parsubst_TCC5-1 nil 3578946439 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (f_or? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (larg adt-accessor-decl "[(f_or?) -> fmla]" fmla nil)
    (mapping!1 skolem-const-decl "finseq[term]" fmla nil)
    (q!1 skolem-const-decl "nat" fmla nil)
    (f!1 skolem-const-decl
     "{f | FORALL (v: (FV(f))): v < mapping!1`length + q!1}" fmla nil)
    (h!1 skolem-const-decl "fmla" fmla nil)
    (v!1 skolem-const-decl "(FV(h!1))" fmla nil)
    (rarg adt-accessor-decl "[(f_or?) -> fmla]" fmla nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (FV def-decl "set[nat]" fmla nil))
   nil))
 (parsubst_TCC6 0
  (parsubst_TCC6-1 nil 3578946439
   ("" (grind :if-match nil)
    (("" (inst -3 "v!1 - 1")
      (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (v!1 skolem-const-decl "(FV(b!1))" fmla nil)
    (b!1 skolem-const-decl "fmla" fmla nil)
    (f!1 skolem-const-decl
     "{f | FORALL (v: (FV(f))): v < mapping!1`length + q!1}" fmla nil)
    (q!1 skolem-const-decl "nat" fmla nil)
    (mapping!1 skolem-const-decl "finseq[term]" fmla nil)
    (body adt-accessor-decl "[(f_exists?) -> fmla]" fmla nil)
    (f_exists? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (member const-decl "bool" sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (FV def-decl "set[nat]" fmla nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (fsubst_TCC1 0
  (fsubst_TCC1-1 nil 3578946439 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fun type-decl nil term nil)
    (ufun? adt-recognizer-decl "[fun -> boolean]" term nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (term type-decl nil term nil) (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" term nil)
    (var? adt-recognizer-decl "[term -> boolean]" term nil)
    (v adt-constructor-decl "[nat -> (var?)]" term nil)
    (V def-decl "{ns: set[nat] | ns = ({n: nat | subterm(v(n), t)})}"
     term nil)
    (< const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[fun -> nat]" term nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (pred type-decl nil fmla nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (< const-decl "bool" term nil))
   nil))
 (fsubst_TCC2 0
  (fsubst_TCC2-1 nil 3578953913 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil))
 (psubst_TCC1 0
  (psubst_TCC1-1 nil 3578946439 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-decl nil fmla nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (FV def-decl "set[nat]" fmla nil) (< const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (psubst_TCC2 0
  (psubst_TCC2-1 nil 3578946439 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-decl nil fmla nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (< const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (f!1 skolem-const-decl "{f | FORALL (v: (FV(f))): v < q!1}" fmla
     nil)
    (q!1 skolem-const-decl "nat" fmla nil)
    (arg adt-accessor-decl "[(f_not?) -> fmla]" fmla nil)
    (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (up!1 skolem-const-decl "(upred?)" fmla nil)
    (g!1 skolem-const-decl "{g | FORALL (v: (FV(g))): v < arity(up!1)}"
     fmla nil)
    (ff!1 skolem-const-decl "fmla" fmla nil)
    (v!1 skolem-const-decl "(FV(ff!1))" fmla nil)
    (FV def-decl "set[nat]" fmla nil))
   nil))
 (psubst_TCC3 0
  (psubst_TCC3-1 nil 3578946439 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-decl nil fmla nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (FV def-decl "set[nat]" fmla nil) (< const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil))
   nil))
 (psubst_TCC4 0
  (psubst_TCC4-1 nil 3578946439 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-decl nil fmla nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (< const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rarg adt-accessor-decl "[(f_or?) -> fmla]" fmla nil)
    (f!1 skolem-const-decl "{f | FORALL (v: (FV(f))): v < q!1}" fmla
     nil)
    (q!1 skolem-const-decl "nat" fmla nil)
    (larg adt-accessor-decl "[(f_or?) -> fmla]" fmla nil)
    (f_or? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (up!1 skolem-const-decl "(upred?)" fmla nil)
    (g!1 skolem-const-decl "{g | FORALL (v: (FV(g))): v < arity(up!1)}"
     fmla nil)
    (fl!1 skolem-const-decl "fmla" fmla nil)
    (v!1 skolem-const-decl "(FV(fl!1))" fmla nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (FV def-decl "set[nat]" fmla nil))
   nil))
 (psubst_TCC5 0
  (psubst_TCC5-1 nil 3578953913 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-decl nil fmla nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (FV def-decl "set[nat]" fmla nil) (< const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil))
   nil))
 (psubst_TCC6 0
  (psubst_TCC6-1 nil 3578953913 ("" (subtype-tcc) nil nil) nil nil))
 (psubst_TCC7 0
  (psubst_TCC7-1 nil 3578953913 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-decl nil fmla nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (FV def-decl "set[nat]" fmla nil) (< const-decl "bool" reals nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil))
   nil))
 (psubst_TCC8 0
  (psubst_TCC8-1 nil 3578953913 ("" (subtype-tcc) nil nil) nil nil)))

