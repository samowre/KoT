(fmla
 (diamond_TCC1 0
  (diamond_TCC1-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (≐_TCC1 0
  (≐_TCC1-1 nil 3578662185 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil))
 (FV_TCC1 0
  (FV_TCC1-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)) nil))
 (FV_TCC2 0
  (FV_TCC2-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)) nil))
 (FV_TCC3 0
  (FV_TCC3-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)) nil))
 (FV_TCC4 0
  (FV_TCC4-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil))
   nil))
 (α_TCC1 0
  (α_TCC1-1 nil 3578495349 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil))
 (alpha_freevars_TCC1 0
  (alpha_freevars_TCC1-1 nil 3578495349
   ("" (grind :if-match nil)
    (("" (apply-extensionality)
      (("" (iff)
        (("" (hide 2)
          (("" (prop)
            (("1" (skeep)
              (("1" (typepred k)
                (("1" (expand finseq2set)
                  (("1" (skeep)
                    (("1" (typepred i_1)
                      (("1" (rotate--)
                        (("1" (rotate--)
                          (("1" (lemma alpha_vars)
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (typepred k)
                (("2" (expand FV -1)
                  (("2" (skeep)
                    (("2" (typepred k_1)
                      (("2" (expand finseq2set)
                        (("2" (skeep)
                          (("2" (inst 1 "α(rename!1)(args!1`seq(i))")
                            (("1" (use alpha_vars)
                              (("1" (grind) nil nil)) nil)
                             ("2" (grind) nil nil)
                             ("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fmla type-decl nil fmla nil) (V def-decl "set[nat]" term nil)
    (α def-decl "term" term nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (finseq2set const-decl "set[T]" set_props nil)
    (set type-eq-decl nil sets nil)
    (rename!1 skolem-const-decl "(bijective?[nat, nat])" fmla nil)
    (i skolem-const-decl "below(args(f!1)`length)" fmla nil)
    (alpha_vars rec-application-judgement "{t |
         V(t) =
          (LAMBDA (ks: set[nat]): {v | EXISTS (k: (ks)): v = rename(k)})
              (V(s))}" term nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pred adt-accessor-decl "[(atom?) -> pred]" fmla nil)
    (args adt-accessor-decl
          "[d: (atom?) -> {l: finseq[term] | l`length = arity(pred(d))}]"
          fmla nil)
    (f!1 skolem-const-decl "fmla" fmla nil)
    (p!1 skolem-const-decl "pred" fmla nil)
    (args!1 skolem-const-decl
     "{l: finseq[term] | l`length = arity(p!1)}" fmla nil)
    (i_1 skolem-const-decl "below(args!1`length)" fmla nil)
    (k!1 skolem-const-decl "(V(args!1`seq(i_1)))" fmla nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (alpha_vars recursive-judgement-axiom nil term nil)
    (atom adt-constructor-decl
          "[[pred: pred, {l: finseq[term] | l`length = arity(pred)}] -> (atom?)]"
          fmla nil)
    (atom? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (pred type-decl nil fmla nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (FV def-decl "set[nat]" fmla nil)
    (member const-decl "bool" sets nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (alpha_freevars_TCC2 0
  (alpha_freevars_TCC2-1 nil 3578495349
   ("" (grind :if-match nil)
    (("" (typepred "v1!1(rename!1)(g!1)")
      (("" (rewrite -1)
        (("" (decompose-equality 1)
          (("" (iff)
            (("" (prop)
              (("1" (skeep)
                (("1" (inst 1 k) (("1" (grind) nil nil)) nil)) nil)
               ("2" (skeep)
                (("2" (typepred k) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fmla type-decl nil fmla nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (k skolem-const-decl "(FV(g!1))" fmla nil)
    (g!1 skolem-const-decl "fmla" fmla nil)
    (f!1 skolem-const-decl "fmla" fmla nil)
    (arg adt-accessor-decl "[(f_not?) -> fmla]" fmla nil)
    (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (FV def-decl "set[nat]" fmla nil))
   nil))
 (alpha_freevars_TCC3 0
  (alpha_freevars_TCC3-1 nil 3578495349
   ("" (grind :if-match nil)
    (("" (typepred "v1!1(rename!1)(g!1)")
      (("" (typepred "v1!1(rename!1)(h!1)")
        (("" (rewrite -1)
          (("" (rewrite -1)
            (("" (decompose-equality 1)
              (("" (iff)
                (("" (prop)
                  (("1" (skeep)
                    (("1" (inst 1 k) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (skeep)
                    (("2" (inst 1 k) (("2" (grind) nil nil)) nil)) nil)
                   ("3" (skeep)
                    (("3" (typepred k) (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fmla type-decl nil fmla nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (rarg adt-accessor-decl "[(f_or?) -> fmla]" fmla nil)
    (k skolem-const-decl "(FV(g!1))" fmla nil)
    (g!1 skolem-const-decl "fmla" fmla nil)
    (f!1 skolem-const-decl "fmla" fmla nil)
    (larg adt-accessor-decl "[(f_or?) -> fmla]" fmla nil)
    (f_or? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (k skolem-const-decl "(FV(h!1))" fmla nil)
    (h!1 skolem-const-decl "fmla" fmla nil)
    (k skolem-const-decl "(FV(f!1))" fmla nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (FV def-decl "set[nat]" fmla nil))
   nil))
 (alpha_freevars_TCC4 0
  (alpha_freevars_TCC4-1 nil 3578495349
   ("" (grind :if-match nil)
    (("" (typepred "v1!1(rename!1)(b!1)")
      (("" (rewrite -1)
        (("" (decompose-equality 1)
          (("" (iff)
            (("" (prop)
              (("1" (skeep)
                (("1" (typepred k)
                  (("1" (inst 2 k) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (skeep)
                (("2" (typepred k) (("2" (grind) nil nil)) nil)) nil)
               ("3" (skeep)
                (("3" (inst 1 k)
                  (("3" (typepred k) (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fmla type-decl nil fmla nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (f_exists? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (bvar adt-accessor-decl "[(f_exists?) -> nat]" fmla nil)
    (f!1 skolem-const-decl "fmla" fmla nil)
    (b!1 skolem-const-decl "fmla" fmla nil)
    (k skolem-const-decl "(FV(b!1))" fmla nil)
    (body adt-accessor-decl "[(f_exists?) -> fmla]" fmla nil)
    (k skolem-const-decl "(FV(f!1))" fmla nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (FV def-decl "set[nat]" fmla nil))
   nil))
 (alpha_boundvars_TCC1 0
  (alpha_boundvars_TCC1-1 nil 3578495349
   ("" (grind)
    (("" (apply-extensionality)
      (("" (skeep)
        (("" (typepred k) (("" (expand BV) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (emptyset const-decl "set" sets nil) (fmla type-decl nil fmla nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (pred type-decl nil fmla nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (BV def-decl "set[nat]" fmla nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (alpha_boundvars_TCC2 0
  (alpha_boundvars_TCC2-1 nil 3578495349
   ("" (grind)
    (("" (typepred "v1!1(rename!1)(g!1)")
      (("" (rewrite -1)
        (("" (apply-extensionality)
          (("" (iff)
            (("" (prop)
              (("1" (skeep)
                (("1" (inst 1 k) (("1" (grind) nil nil)) nil)) nil)
               ("2" (skeep)
                (("2" (inst 1 k)
                  (("2" (typepred k) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fmla type-decl nil fmla nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (k skolem-const-decl "(BV(g!1))" fmla nil)
    (g!1 skolem-const-decl "fmla" fmla nil)
    (f!1 skolem-const-decl "fmla" fmla nil)
    (arg adt-accessor-decl "[(f_not?) -> fmla]" fmla nil)
    (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (k skolem-const-decl "(BV(f!1))" fmla nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (BV def-decl "set[nat]" fmla nil))
   nil))
 (alpha_boundvars_TCC3 0
  (alpha_boundvars_TCC3-1 nil 3578495349
   ("" (grind)
    (("" (typepred "v1!1(rename!1)(g!1)")
      (("" (typepred "v1!1(rename!1)(h!1)")
        (("" (rewrite -1)
          (("" (rewrite -1)
            (("" (expand union)
              (("" (apply-extensionality)
                (("" (iff)
                  (("" (prop)
                    (("1" (skeep)
                      (("1" (inst 1 k) (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst 1 k) (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (skeep)
                      (("3" (typepred k) (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fmla type-decl nil fmla nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil) (union const-decl "set" sets nil)
    (k skolem-const-decl "(BV(f!1))" fmla nil)
    (k skolem-const-decl "(BV(h!1))" fmla nil)
    (h!1 skolem-const-decl "fmla" fmla nil)
    (rarg adt-accessor-decl "[(f_or?) -> fmla]" fmla nil)
    (k skolem-const-decl "(BV(g!1))" fmla nil)
    (g!1 skolem-const-decl "fmla" fmla nil)
    (f!1 skolem-const-decl "fmla" fmla nil)
    (larg adt-accessor-decl "[(f_or?) -> fmla]" fmla nil)
    (f_or? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (BV def-decl "set[nat]" fmla nil))
   nil))
 (alpha_boundvars_TCC4 0
  (alpha_boundvars_TCC4-1 nil 3578495349
   ("" (grind)
    (("" (typepred "v1!1(rename!1)(b!1)")
      (("" (rewrite -1)
        (("" (expand add)
          (("" (apply-extensionality)
            (("" (iff)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (skeep)
                  (("2" (inst 1 k) (("2" (grind) nil nil)) nil)) nil)
                 ("3" (skeep)
                  (("3" (inst 2 k)
                    (("3" (grind)
                      (("3" (typepred k) (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fmla type-decl nil fmla nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (k skolem-const-decl "(BV(f!1))" fmla nil)
    (k skolem-const-decl "(BV(b!1))" fmla nil)
    (b!1 skolem-const-decl "fmla" fmla nil)
    (body adt-accessor-decl "[(f_exists?) -> fmla]" fmla nil)
    (n!1 skolem-const-decl "nat" fmla nil)
    (f!1 skolem-const-decl "fmla" fmla nil)
    (bvar adt-accessor-decl "[(f_exists?) -> nat]" fmla nil)
    (f_exists? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (BV def-decl "set[nat]" fmla nil))
   nil))
 (alpha_fmla_identity_TCC1 0
  (alpha_fmla_identity_TCC1-1 nil 3578500456 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   nil))
 (alpha_fmla_identity 0
  (alpha_fmla_identity-1 nil 3578501753
   ("" (induct-and-simplify f)
    (("" (decompose-equality)
      (("1" (decompose-equality)
        (("1" (apply-extensionality)
          (("1" (hide 2) (("1" (use alpha_identity) nil nil)) nil)
           ("2" (grind) nil nil))
          nil)
         ("2" (grind) nil nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (pred type-decl nil fmla nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (atom1_var!1 skolem-const-decl "pred" fmla nil)
    (atom2_var!1 skolem-const-decl
     "{l: finseq[term] | l`length = arity(atom1_var!1)}" fmla nil)
    (below type-eq-decl nil naturalnumbers nil)
    (α def-decl "term" term nil)
    (atom adt-constructor-decl
          "[[pred: pred, {l: finseq[term] | l`length = arity(pred)}] -> (atom?)]"
          fmla nil)
    (fmla_atom_extensionality formula-decl nil fmla nil)
    (atom? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (alpha_identity formula-decl nil term nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (alpha_vars rec-application-judgement "{t |
         V(t) =
          (LAMBDA (ks: set[nat]): {v | EXISTS (k: (ks)): v = rename(k)})
              (V(s))}" term nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil)
    (alpha_boundvars rec-application-judgement "{g |
         BV(g) =
          (LAMBDA (ks: set[nat]): {v | EXISTS (k: (ks)): v = rename(k)})
              (BV(f))}" fmla nil)
    (alpha_freevars rec-application-judgement "{g |
         FV(g) =
          (LAMBDA (ks: set[nat]): {v | EXISTS (k: (ks)): v = rename(k)})
              (FV(f))}" fmla nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fmla type-decl nil fmla nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (α def-decl "fmla" fmla nil)
    (fmla_induction formula-decl nil fmla nil))
   shostak))
 (alpha_fmla_inverse 0
  (alpha_fmla_inverse-1 nil 3578501805
   ("" (induct-and-simplify f :if-match nil)
    (("1" (decompose-equality 1)
      (("1" (grind) (("1" (decompose-equality -1) nil nil)) nil)
       ("2" (decompose-equality -1)
        (("2" (decompose-equality 1)
          (("1" (rewrite -2 :dir rl)
            (("1" (grind)
              (("1" (apply-extensionality)
                (("1" (hide 2) (("1" (use alpha_term_inverse) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil)
     ("2" (decompose-equality 1)
      (("2" (inst -1 "arg(g!1)" "rename!1")
        (("2" (grind) (("2" (decompose-equality -1) nil nil)) nil))
        nil))
      nil)
     ("3" (inst -1 "larg(g!1)" "rename!1")
      (("3" (inst -2 "rarg(g!1)" "rename!1")
        (("3" (decompose-equality -3) (("3" (grind) nil nil)) nil))
        nil))
      nil)
     ("4" (decompose-equality -2)
      (("4" (decompose-equality 1)
        (("1" (lemma "epsilon_ax[nat]")
          (("1" (typepred rename!1)
            (("1" (grind :if-match all) nil nil)) nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((body adt-accessor-decl "[(f_exists?) -> fmla]" fmla nil)
    (f_exists adt-constructor-decl "[[nat, fmla] -> (f_exists?)]" fmla
     nil)
    (bvar adt-accessor-decl "[(f_exists?) -> nat]" fmla nil)
    (f_exists? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (fmla_f_exists_extensionality formula-decl nil fmla nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (larg adt-accessor-decl "[(f_or?) -> fmla]" fmla nil)
    (f_or? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (f_or adt-constructor-decl "[[fmla, fmla] -> (f_or?)]" fmla nil)
    (rarg adt-accessor-decl "[(f_or?) -> fmla]" fmla nil)
    (arg adt-accessor-decl "[(f_not?) -> fmla]" fmla nil)
    (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla nil)
    (fmla_f_not_extensionality formula-decl nil fmla nil)
    (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (pred type-decl nil fmla nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (atom adt-constructor-decl
          "[[pred: pred, {l: finseq[term] | l`length = arity(pred)}] -> (atom?)]"
          fmla nil)
    (pred adt-accessor-decl "[(atom?) -> pred]" fmla nil)
    (args adt-accessor-decl
          "[d: (atom?) -> {l: finseq[term] | l`length = arity(pred(d))}]"
          fmla nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (α def-decl "term" term nil)
    (fmla_atom_extensionality formula-decl nil fmla nil)
    (atom? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (atom1_var!1 skolem-const-decl "pred" fmla nil)
    (atom2_var!1 skolem-const-decl
     "{l: finseq[term] | l`length = arity(atom1_var!1)}" fmla nil)
    (g!1 skolem-const-decl "fmla" fmla nil)
    (alpha_term_inverse formula-decl nil term nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (alpha_vars rec-application-judgement "{t |
         V(t) =
          (LAMBDA (ks: set[nat]): {v | EXISTS (k: (ks)): v = rename(k)})
              (V(s))}" term nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil)
    (unique_bijective_inverse application-judgement "{x: D | f(x) = y}"
     function_inverse nil)
    (alpha_freevars rec-application-judgement "{g |
         FV(g) =
          (LAMBDA (ks: set[nat]): {v | EXISTS (k: (ks)): v = rename(k)})
              (FV(f))}" fmla nil)
    (alpha_boundvars rec-application-judgement "{g |
         BV(g) =
          (LAMBDA (ks: set[nat]): {v | EXISTS (k: (ks)): v = rename(k)})
              (BV(f))}" fmla nil)
    (bijective_inverse_is_bijective application-judgement
     "(bijective?[R, D])" function_inverse nil)
    (fmla type-decl nil fmla nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (α def-decl "fmla" fmla nil)
    (inverse const-decl "D" function_inverse nil)
    (fmla_induction formula-decl nil fmla nil))
   shostak))
 (alpha_fmla_composition 0
  (alpha_fmla_composition-1 nil 3578502306
   ("" (induct-and-simplify f :if-match nil)
    (("1" (decompose-equality -1)
      (("1" (decompose-equality 1)
        (("1" (rewrite -2 :dir rl)
          (("1" (grind)
            (("1" (apply-extensionality)
              (("1" (use alpha_term_composition) nil nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (decompose-equality -2)
      (("2" (decompose-equality 1) (("2" (grind) nil nil)) nil)) nil)
     ("3" (decompose-equality -3)
      (("3" (decompose-equality 1)
        (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
      nil)
     ("4" (decompose-equality -2)
      (("4" (decompose-equality 1) (("4" (grind) nil nil)) nil)) nil))
    nil)
   ((body adt-accessor-decl "[(f_exists?) -> fmla]" fmla nil)
    (f_exists adt-constructor-decl "[[nat, fmla] -> (f_exists?)]" fmla
     nil)
    (bvar adt-accessor-decl "[(f_exists?) -> nat]" fmla nil)
    (f_exists? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (fmla_f_exists_extensionality formula-decl nil fmla nil)
    (rarg adt-accessor-decl "[(f_or?) -> fmla]" fmla nil)
    (f_or adt-constructor-decl "[[fmla, fmla] -> (f_or?)]" fmla nil)
    (larg adt-accessor-decl "[(f_or?) -> fmla]" fmla nil)
    (f_or? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (fmla_f_or_extensionality formula-decl nil fmla nil)
    (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla nil)
    (arg adt-accessor-decl "[(f_not?) -> fmla]" fmla nil)
    (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (fmla_f_not_extensionality formula-decl nil fmla nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (atom? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (pred type-decl nil fmla nil)
    (pred adt-accessor-decl "[(atom?) -> pred]" fmla nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (atom adt-constructor-decl
          "[[pred: pred, {l: finseq[term] | l`length = arity(pred)}] -> (atom?)]"
          fmla nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (α def-decl "term" term nil)
    (args adt-accessor-decl
          "[d: (atom?) -> {l: finseq[term] | l`length = arity(pred(d))}]"
          fmla nil)
    (g!1 skolem-const-decl "fmla" fmla nil)
    (atom2_var!1 skolem-const-decl
     "{l: finseq[term] | l`length = arity(atom1_var!1)}" fmla nil)
    (atom1_var!1 skolem-const-decl "pred" fmla nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (alpha_term_composition formula-decl nil term nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fmla_atom_extensionality formula-decl nil fmla nil)
    (alpha_vars rec-application-judgement "{t |
         V(t) =
          (LAMBDA (ks: set[nat]): {v | EXISTS (k: (ks)): v = rename(k)})
              (V(s))}" term nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil)
    (alpha_freevars rec-application-judgement "{g |
         FV(g) =
          (LAMBDA (ks: set[nat]): {v | EXISTS (k: (ks)): v = rename(k)})
              (FV(f))}" fmla nil)
    (alpha_boundvars rec-application-judgement "{g |
         BV(g) =
          (LAMBDA (ks: set[nat]): {v | EXISTS (k: (ks)): v = rename(k)})
              (BV(f))}" fmla nil)
    (composition_injective application-judgement "(injective?[T1, T3])"
     function_props nil)
    (composition_surjective application-judgement
     "(surjective?[T1, T3])" function_props nil)
    (composition_bijective application-judgement "(bijective?[T1, T3])"
     function_props nil)
    (fmla type-decl nil fmla nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (α def-decl "fmla" fmla nil) (O const-decl "T3" function_props nil)
    (fmla_induction formula-decl nil fmla nil))
   shostak))
 (alpha_fmla_equiv 0
  (alpha_fmla_equiv-1 nil 3578500456
   ("" (grind :if-match nil)
    (("1" (inst 1 "rename!2 o rename!1")
      (("1" (use alpha_fmla_composition) (("1" (grind) nil nil)) nil))
      nil)
     ("2" (inst 1 "inverse(rename!1)")
      (("2" (use alpha_fmla_inverse) (("2" (grind) nil nil)) nil)) nil)
     ("3" (inst 1 "LAMBDA n: n")
      (("1" (use "alpha_fmla_identity") nil nil) ("2" (grind) nil nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (alpha_fmla_identity formula-decl nil fmla nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bijective_inverse_is_bijective application-judgement
     "(bijective?[R, D])" function_inverse nil)
    (inverse const-decl "D" function_inverse nil)
    (alpha_fmla_inverse formula-decl nil fmla nil)
    (composition_injective application-judgement "(injective?[T1, T3])"
     function_props nil)
    (composition_surjective application-judgement
     "(surjective?[T1, T3])" function_props nil)
    (composition_bijective application-judgement "(bijective?[T1, T3])"
     function_props nil)
    (O const-decl "T3" function_props nil)
    (fmla type-decl nil fmla nil)
    (alpha_fmla_composition formula-decl nil fmla nil)
    (alpha_freevars rec-application-judgement "{g |
         FV(g) =
          (LAMBDA (ks: set[nat]): {v | EXISTS (k: (ks)): v = rename(k)})
              (FV(f))}" fmla nil)
    (alpha_boundvars rec-application-judgement "{g |
         BV(g) =
          (LAMBDA (ks: set[nat]): {v | EXISTS (k: (ks)): v = rename(k)})
              (BV(f))}" fmla nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (equivalence? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (symmetric? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (alpha_equiv const-decl "bool" fmla nil)
    (≃ const-decl "bool" fmla nil))
   nil))
 (canon?_TCC1 0
  (canon?_TCC1-1 nil 3578495349 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (parsubst_TCC1 0
  (parsubst_TCC1-1 nil 3578336763 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil))
 (parsubst_TCC2 0
  (parsubst_TCC2-1 nil 3578336763
   ("" (grind :if-match nil)
    (("" (typepred "mapping!1(x1!1)") (("" (grind) nil nil)) nil)) nil)
   ((V def-decl "set[nat]" term nil) (set type-eq-decl nil sets nil)
    (fmla type-decl nil fmla nil)
    (v adt-constructor-decl "[nat -> (var?)]" term nil)
    (var? adt-recognizer-decl "[term -> boolean]" term nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BV def-decl "set[nat]" fmla nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (freefor const-decl "bool" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (parsubst_TCC3 0
  (parsubst_TCC3-1 nil 3578336763
   ("" (grind)
    (("" (typepred "mapping!1(x1!1)") (("" (grind) nil nil)) nil)) nil)
   ((V def-decl "set[nat]" term nil) (set type-eq-decl nil sets nil)
    (fmla type-decl nil fmla nil)
    (v adt-constructor-decl "[nat -> (var?)]" term nil)
    (var? adt-recognizer-decl "[term -> boolean]" term nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BV def-decl "set[nat]" fmla nil) (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (freefor const-decl "bool" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (parsubst_TCC4 0
  (parsubst_TCC4-1 nil 3578336763
   ("" (grind)
    (("" (typepred "mapping!1(x1!1)") (("" (grind) nil nil)) nil)) nil)
   ((V def-decl "set[nat]" term nil) (set type-eq-decl nil sets nil)
    (fmla type-decl nil fmla nil)
    (v adt-constructor-decl "[nat -> (var?)]" term nil)
    (var? adt-recognizer-decl "[term -> boolean]" term nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BV def-decl "set[nat]" fmla nil) (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (freefor const-decl "bool" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (parsubst_TCC5 0
  (parsubst_TCC5-1 nil 3578336763
   ("" (grind)
    (("" (typepred "mapping!1(x1!1)") (("" (grind) nil nil)) nil)) nil)
   ((V def-decl "set[nat]" term nil) (set type-eq-decl nil sets nil)
    (fmla type-decl nil fmla nil)
    (v adt-constructor-decl "[nat -> (var?)]" term nil)
    (var? adt-recognizer-decl "[term -> boolean]" term nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BV def-decl "set[nat]" fmla nil)
    (add const-decl "(nonempty?)" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (freefor const-decl "bool" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (parsubst_TCC6 0
  (parsubst_TCC6-1 nil 3578336763 ("" (grind :defs nil) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil) (fmla type-decl nil fmla nil)
    (set type-eq-decl nil sets nil)
    (freefor const-decl "bool" fmla nil)
    (V def-decl "set[nat]" term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (subst_TCC1 0
  (subst_TCC1-1 nil 3578336763 ("" (subtype-tcc) nil nil) nil nil))
 (fsubst_TCC1 0
  (fsubst_TCC1-1 nil 3578336763 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil))
 (fsubst_TCC2 0
  (fsubst_TCC2-1 nil 3578336763 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fun type-decl nil term nil)
    (ufun? adt-recognizer-decl "[fun -> boolean]" term nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[fun -> nat]" term nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (term type-decl nil term nil) (V def-decl "set[nat]" term nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (BV def-decl "set[nat]" fmla nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla nil))
   nil))
 (fsubst_TCC3 0
  (fsubst_TCC3-1 nil 3578336763 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fun type-decl nil term nil)
    (ufun? adt-recognizer-decl "[fun -> boolean]" term nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[fun -> nat]" term nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (term type-decl nil term nil) (V def-decl "set[nat]" term nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (BV def-decl "set[nat]" fmla nil) (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla nil))
   nil))
 (fsubst_TCC4 0
  (fsubst_TCC4-1 nil 3578336763 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fun type-decl nil term nil)
    (ufun? adt-recognizer-decl "[fun -> boolean]" term nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[fun -> nat]" term nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (term type-decl nil term nil) (V def-decl "set[nat]" term nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (BV def-decl "set[nat]" fmla nil) (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla nil))
   nil))
 (fsubst_TCC5 0
  (fsubst_TCC5-1 nil 3578336763 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fun type-decl nil term nil)
    (ufun? adt-recognizer-decl "[fun -> boolean]" term nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[fun -> nat]" term nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (term type-decl nil term nil) (V def-decl "set[nat]" term nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (BV def-decl "set[nat]" fmla nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla nil))
   nil))
 (psubst_TCC1 0
  (psubst_TCC1-1 nil 3578336763
   ("" (grind :rewrites every_forall) nil nil)
   ((freefor const-decl "bool" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (every_forall formula-decl nil more_list_props "../lists/")
    (BV def-decl "set[nat]" fmla nil) (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (FV def-decl "set[nat]" fmla nil) (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member def-decl "bool" list_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (term type-decl nil term nil)
    (below type-eq-decl nil nat_types nil)
    (V const-decl "set[nat]" fmla nil) (set type-eq-decl nil sets nil)
    (fmla type-decl nil fmla nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (psubst_TCC2 0
  (psubst_TCC2-1 nil 3578336763 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-decl nil fmla nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil) (fmla type-decl nil fmla nil)
    (FV def-decl "set[nat]" fmla nil)
    (list2set def-decl "set[T]" list2set nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (BV def-decl "set[nat]" fmla nil)
    (V const-decl "set[nat]" fmla nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla nil))
   nil))
 (psubst_TCC3 0
  (psubst_TCC3-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-decl nil fmla nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil) (fmla type-decl nil fmla nil)
    (FV def-decl "set[nat]" fmla nil)
    (list2set def-decl "set[T]" list2set nil)
    (freefor const-decl "bool" fmla nil)
    (V const-decl "set[nat]" fmla nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil) (BV def-decl "set[nat]" fmla nil)
    (member const-decl "bool" sets nil))
   nil))
 (psubst_TCC4 0
  (psubst_TCC4-1 nil 3578336763
   ("" (grind :rewrites every_forall) nil nil)
   ((freefor const-decl "bool" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (V const-decl "set[nat]" fmla nil)
    (vars!1 skolem-const-decl
     "{vars: (uniques?[nat]) | length(vars) = arity(u!1)}" fmla nil)
    (u!1 skolem-const-decl "(upred?)" fmla nil)
    (x!1 skolem-const-decl "nat" fmla nil)
    (member def-decl "bool" list_props nil)
    (BV def-decl "set[nat]" fmla nil)
    (every_forall formula-decl nil more_list_props "../lists/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (list2set def-decl "set[T]" list2set nil)
    (FV def-decl "set[nat]" fmla nil) (fmla type-decl nil fmla nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (pred type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (psubst_TCC5 0
  (psubst_TCC5-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-decl nil fmla nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil) (fmla type-decl nil fmla nil)
    (FV def-decl "set[nat]" fmla nil)
    (list2set def-decl "set[T]" list2set nil)
    (freefor const-decl "bool" fmla nil)
    (V const-decl "set[nat]" fmla nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil) (BV def-decl "set[nat]" fmla nil)
    (member const-decl "bool" sets nil))
   nil))
 (psubst_TCC6 0
  (psubst_TCC6-1 nil 3578336763
   ("" (grind :rewrites every_forall) nil nil)
   ((freefor const-decl "bool" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (V const-decl "set[nat]" fmla nil)
    (vars!1 skolem-const-decl
     "{vars: (uniques?[nat]) | length(vars) = arity(u!1)}" fmla nil)
    (u!1 skolem-const-decl "(upred?)" fmla nil)
    (x!1 skolem-const-decl "nat" fmla nil)
    (member def-decl "bool" list_props nil)
    (BV def-decl "set[nat]" fmla nil)
    (every_forall formula-decl nil more_list_props "../lists/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (list2set def-decl "set[T]" list2set nil)
    (FV def-decl "set[nat]" fmla nil) (fmla type-decl nil fmla nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (pred type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (psubst_TCC7 0
  (psubst_TCC7-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-decl nil fmla nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil) (fmla type-decl nil fmla nil)
    (FV def-decl "set[nat]" fmla nil)
    (list2set def-decl "set[T]" list2set nil)
    (freefor const-decl "bool" fmla nil)
    (V const-decl "set[nat]" fmla nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil) (BV def-decl "set[nat]" fmla nil)
    (member const-decl "bool" sets nil))
   nil))
 (psubst_TCC8 0
  (psubst_TCC8-1 nil 3578336763
   ("" (grind :rewrites every_forall) nil nil)
   ((freefor const-decl "bool" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (V const-decl "set[nat]" fmla nil)
    (vars!1 skolem-const-decl
     "{vars: (uniques?[nat]) | length(vars) = arity(u!1)}" fmla nil)
    (u!1 skolem-const-decl "(upred?)" fmla nil)
    (x!1 skolem-const-decl "nat" fmla nil)
    (member def-decl "bool" list_props nil)
    (add const-decl "(nonempty?)" sets nil)
    (BV def-decl "set[nat]" fmla nil)
    (every_forall formula-decl nil more_list_props "../lists/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (list2set def-decl "set[T]" list2set nil)
    (FV def-decl "set[nat]" fmla nil) (fmla type-decl nil fmla nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (pred type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)))

