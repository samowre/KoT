(fmla
 (diamond_TCC1 0
  (diamond_TCC1-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (FV_TCC1 0
  (FV_TCC1-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)) nil))
 (FV_TCC2 0
  (FV_TCC2-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)) nil))
 (FV_TCC3 0
  (FV_TCC3-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)) nil))
 (FV_TCC4 0
  (FV_TCC4-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil))
   nil))
 (parsubst_TCC1 0
  (parsubst_TCC1-1 nil 3578336763 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil))
 (parsubst_TCC2 0
  (parsubst_TCC2-1 nil 3578336763
   ("" (grind :if-match nil)
    (("" (typepred "mapping!1(x1!1)") (("" (grind) nil nil)) nil)) nil)
   ((V def-decl "set[nat]" term nil) (set type-eq-decl nil sets nil)
    (fmla type-decl nil fmla nil)
    (v adt-constructor-decl "[nat -> (var?)]" term nil)
    (var? adt-recognizer-decl "[term -> boolean]" term nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BV def-decl "set[nat]" fmla nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (freefor const-decl "bool" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (parsubst_TCC3 0
  (parsubst_TCC3-1 nil 3578336763
   ("" (grind)
    (("" (typepred "mapping!1(x1!1)") (("" (grind) nil nil)) nil)) nil)
   ((V def-decl "set[nat]" term nil) (set type-eq-decl nil sets nil)
    (fmla type-decl nil fmla nil)
    (v adt-constructor-decl "[nat -> (var?)]" term nil)
    (var? adt-recognizer-decl "[term -> boolean]" term nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BV def-decl "set[nat]" fmla nil) (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (freefor const-decl "bool" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (parsubst_TCC4 0
  (parsubst_TCC4-1 nil 3578336763
   ("" (grind)
    (("" (typepred "mapping!1(x1!1)") (("" (grind) nil nil)) nil)) nil)
   ((V def-decl "set[nat]" term nil) (set type-eq-decl nil sets nil)
    (fmla type-decl nil fmla nil)
    (v adt-constructor-decl "[nat -> (var?)]" term nil)
    (var? adt-recognizer-decl "[term -> boolean]" term nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BV def-decl "set[nat]" fmla nil) (union const-decl "set" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (freefor const-decl "bool" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (parsubst_TCC5 0
  (parsubst_TCC5-1 nil 3578336763
   ("" (grind)
    (("" (typepred "mapping!1(x1!1)") (("" (grind) nil nil)) nil)) nil)
   ((V def-decl "set[nat]" term nil) (set type-eq-decl nil sets nil)
    (fmla type-decl nil fmla nil)
    (v adt-constructor-decl "[nat -> (var?)]" term nil)
    (var? adt-recognizer-decl "[term -> boolean]" term nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (term type-decl nil term nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BV def-decl "set[nat]" fmla nil)
    (add const-decl "(nonempty?)" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (freefor const-decl "bool" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (parsubst_TCC6 0
  (parsubst_TCC6-1 nil 3578336763 ("" (grind :defs nil) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (term type-decl nil term nil) (fmla type-decl nil fmla nil)
    (set type-eq-decl nil sets nil)
    (freefor const-decl "bool" fmla nil)
    (V def-decl "set[nat]" term nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (subst_TCC1 0
  (subst_TCC1-1 nil 3578336763 ("" (subtype-tcc) nil nil) nil nil))
 (fsubst_TCC1 0
  (fsubst_TCC1-1 nil 3578336763 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (smap const-decl "{vs | vs`length = ks`length}" smap nil))
   nil))
 (fsubst_TCC2 0
  (fsubst_TCC2-1 nil 3578336763 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fun type-decl nil term nil)
    (ufun? adt-recognizer-decl "[fun -> boolean]" term nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[fun -> nat]" term nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (term type-decl nil term nil) (V def-decl "set[nat]" term nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (BV def-decl "set[nat]" fmla nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla nil))
   nil))
 (fsubst_TCC3 0
  (fsubst_TCC3-1 nil 3578336763 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fun type-decl nil term nil)
    (ufun? adt-recognizer-decl "[fun -> boolean]" term nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[fun -> nat]" term nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (term type-decl nil term nil) (V def-decl "set[nat]" term nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (BV def-decl "set[nat]" fmla nil) (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla nil))
   nil))
 (fsubst_TCC4 0
  (fsubst_TCC4-1 nil 3578336763 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fun type-decl nil term nil)
    (ufun? adt-recognizer-decl "[fun -> boolean]" term nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[fun -> nat]" term nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (term type-decl nil term nil) (V def-decl "set[nat]" term nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (BV def-decl "set[nat]" fmla nil) (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla nil))
   nil))
 (fsubst_TCC5 0
  (fsubst_TCC5-1 nil 3578336763 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fun type-decl nil term nil)
    (ufun? adt-recognizer-decl "[fun -> boolean]" term nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[fun -> nat]" term nil)
    (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil)
    (term type-decl nil term nil) (V def-decl "set[nat]" term nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (BV def-decl "set[nat]" fmla nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla nil))
   nil))
 (psubst_TCC1 0
  (psubst_TCC1-1 nil 3578336763
   ("" (grind :rewrites every_forall) nil nil)
   ((freefor const-decl "bool" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (every_forall formula-decl nil more_list_props "../lists/")
    (BV def-decl "set[nat]" fmla nil) (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (FV def-decl "set[nat]" fmla nil) (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member def-decl "bool" list_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (term type-decl nil term nil)
    (below type-eq-decl nil nat_types nil)
    (V const-decl "set[nat]" fmla nil) (set type-eq-decl nil sets nil)
    (fmla type-decl nil fmla nil)
    (arity shared-adt-accessor-decl "[symbol -> nat]" symbol_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (upred? adt-recognizer-decl "[symbol -> boolean]" symbol_adt nil)
    (symbol type-decl nil symbol_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (psubst_TCC2 0
  (psubst_TCC2-1 nil 3578336763 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-decl nil fmla nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil) (fmla type-decl nil fmla nil)
    (FV def-decl "set[nat]" fmla nil)
    (list2set def-decl "set[T]" list2set nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (BV def-decl "set[nat]" fmla nil)
    (V const-decl "set[nat]" fmla nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (freefor const-decl "bool" fmla nil))
   nil))
 (psubst_TCC3 0
  (psubst_TCC3-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-decl nil fmla nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil) (fmla type-decl nil fmla nil)
    (FV def-decl "set[nat]" fmla nil)
    (list2set def-decl "set[T]" list2set nil)
    (freefor const-decl "bool" fmla nil)
    (V const-decl "set[nat]" fmla nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil) (BV def-decl "set[nat]" fmla nil)
    (member const-decl "bool" sets nil))
   nil))
 (psubst_TCC4 0
  (psubst_TCC4-1 nil 3578336763
   ("" (grind :rewrites every_forall) nil nil)
   ((freefor const-decl "bool" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (V const-decl "set[nat]" fmla nil)
    (vars!1 skolem-const-decl
     "{vars: (uniques?[nat]) | length(vars) = arity(u!1)}" fmla nil)
    (u!1 skolem-const-decl "(upred?)" fmla nil)
    (x!1 skolem-const-decl "nat" fmla nil)
    (member def-decl "bool" list_props nil)
    (BV def-decl "set[nat]" fmla nil)
    (every_forall formula-decl nil more_list_props "../lists/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (list2set def-decl "set[T]" list2set nil)
    (FV def-decl "set[nat]" fmla nil) (fmla type-decl nil fmla nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (pred type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (psubst_TCC5 0
  (psubst_TCC5-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-decl nil fmla nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil) (fmla type-decl nil fmla nil)
    (FV def-decl "set[nat]" fmla nil)
    (list2set def-decl "set[T]" list2set nil)
    (freefor const-decl "bool" fmla nil)
    (V const-decl "set[nat]" fmla nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil) (BV def-decl "set[nat]" fmla nil)
    (member const-decl "bool" sets nil))
   nil))
 (psubst_TCC6 0
  (psubst_TCC6-1 nil 3578336763
   ("" (grind :rewrites every_forall) nil nil)
   ((freefor const-decl "bool" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (V const-decl "set[nat]" fmla nil)
    (vars!1 skolem-const-decl
     "{vars: (uniques?[nat]) | length(vars) = arity(u!1)}" fmla nil)
    (u!1 skolem-const-decl "(upred?)" fmla nil)
    (x!1 skolem-const-decl "nat" fmla nil)
    (member def-decl "bool" list_props nil)
    (BV def-decl "set[nat]" fmla nil)
    (every_forall formula-decl nil more_list_props "../lists/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (list2set def-decl "set[T]" list2set nil)
    (FV def-decl "set[nat]" fmla nil) (fmla type-decl nil fmla nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (pred type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (psubst_TCC7 0
  (psubst_TCC7-1 nil 3578336763 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-decl nil fmla nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil) (fmla type-decl nil fmla nil)
    (FV def-decl "set[nat]" fmla nil)
    (list2set def-decl "set[T]" list2set nil)
    (freefor const-decl "bool" fmla nil)
    (V const-decl "set[nat]" fmla nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (<< adt-def-decl "(strict_well_founded?[fmla])" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil) (BV def-decl "set[nat]" fmla nil)
    (member const-decl "bool" sets nil))
   nil))
 (psubst_TCC8 0
  (psubst_TCC8-1 nil 3578336763
   ("" (grind :rewrites every_forall) nil nil)
   ((freefor const-decl "bool" fmla nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (V const-decl "set[nat]" fmla nil)
    (vars!1 skolem-const-decl
     "{vars: (uniques?[nat]) | length(vars) = arity(u!1)}" fmla nil)
    (u!1 skolem-const-decl "(upred?)" fmla nil)
    (x!1 skolem-const-decl "nat" fmla nil)
    (member def-decl "bool" list_props nil)
    (add const-decl "(nonempty?)" sets nil)
    (BV def-decl "set[nat]" fmla nil)
    (every_forall formula-decl nil more_list_props "../lists/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (list2set def-decl "set[T]" list2set nil)
    (FV def-decl "set[nat]" fmla nil) (fmla type-decl nil fmla nil)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (arity shared-adt-accessor-decl "[pred -> nat]" fmla nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uniques? def-decl "bool" more_list_props "../lists/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (upred? adt-recognizer-decl "[pred -> boolean]" fmla nil)
    (pred type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)))

