(delta_function
 (δ_TCC1 0
  (δ_TCC1-1 nil 3581181196 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (context type-eq-decl nil language nil)
    (definition const-decl "semantic" language nil))
   nil))
 (δ_TCC2 0
  (δ_TCC2-1 nil 3581181196
   ("" (skeep)
    (("" (rewrite -1)
      (("" (expand card 2 4)
        (("" (typepred "Γ(s)")
          (("" (split -1 1)
            (("1" (expand definition)
              (("1" (lift-if)
                (("1" (bddsimp) (("1" (ground) nil nil)) nil)) nil))
              nil)
             ("2" (case "kdecl?(Γ(s))")
              (("1" (delete -2)
                (("1" (expand definition)
                  (("1" (lift-if)
                    (("1" (bddsimp)
                      (("1" (ground) nil nil) ("2" (ground) nil nil)
                       ("3" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (expand definition 5)
                      (("2" (lift-if)
                        (("2" (bddsimp)
                          (("1"
                            (claim "%1 + %2 < card(Γ(s))" nil
                             (~ "%1 + %2 < card(Γ)"))
                            (("1" (use subterm_card)
                              (("1"
                                (rewrite -4)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "card" 1 3)
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("2"
                            (claim "%1 + %2 < card(Γ(s))" nil
                             (~ "%1 + %2 < card(Γ)"))
                            (("1" (use subterm_card)
                              (("1"
                                (rewrite -4)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "card" 1 3)
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3"
                            (claim "%1 + %2 < card(Γ(s))" nil
                             (~ "%1 + %2 < card(Γ)"))
                            (("1" (use subterm_card)
                              (("1"
                                (rewrite -4)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "card" 1 3)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((card def-decl "nat" language nil)
    (subterm_is_finitely_branching name-judgement
     "(finitely_branching?[semantic])" language nil)
    (definition const-decl "semantic" language nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tcontext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (tname? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (tinterp? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretheory type-eq-decl nil language nil)
    (dtheory adt-accessor-decl "[(ktheory?) -> pretheory]" language
     nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (dterm adt-accessor-decl "[(kconst_def?) -> preterm]" language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (dtype shared-adt-accessor-decl
     "[{x: semantic | kconst_def?(x) OR kconst_decl?(x) OR kvar?(x) OR ktype_def?(x)} -> pretype]"
     language nil)
    (rest shared-adt-accessor-decl
          "[{x: semantic |     ktheory?(x) OR kconst_def?(x) OR kconst_decl?(x) OR kvar?(x) OR ktype_def?(x) OR ktype_decl?(x)} -> context]"
          language nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subterm_card formula-decl nil language nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (app_ctx_symbol_subterm rec-application-judgement
     "{Δ | subterm(Δ, Γ)}" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (context type-eq-decl nil language nil)
    (symbol nonempty-type-decl nil language nil)
    (app_ctx_symbol def-decl "context" language nil)
    (subterm adt-def-decl "boolean" language nil))
   nil))
 (δ_TCC3 0
  (δ_TCC3-1 nil 3581181196 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (context type-eq-decl nil language nil)
    (tcontext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (tname? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (tinterp? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretheory type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (card def-decl "nat" language nil))
   nil))
 (δ_TCC4 0
  (δ_TCC4-1 nil 3581181196 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (context type-eq-decl nil language nil)
    (tcontext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (tname? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (tinterp? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretheory type-eq-decl nil language nil)
    (context adt-def-decl "boolean" language nil))
   nil))
 (δ_TCC5 0
  (δ_TCC5-1 nil 3581181196 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC6 0
  (δ_TCC6-1 nil 3581181196 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (context type-eq-decl nil language nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (name type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (card def-decl "nat" language nil))
   nil))
 (δ_TCC7 0
  (δ_TCC7-1 nil 3581181196 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (context type-eq-decl nil language nil)
    (tcontext? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (tname? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (tinterp? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretheory type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (card def-decl "nat" language nil))
   nil))
 (δ_TCC8 0
  (δ_TCC8-1 nil 3581181196 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (context type-eq-decl nil language nil)
    (symbol? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dot? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (name type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (card def-decl "nat" language nil))
   nil))
 (δ_TCC9 0
  (δ_TCC9-1 nil 3581181196 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC10 0
  (δ_TCC10-1 nil 3581181196 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kconst_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktheory? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (context type-eq-decl nil language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (card def-decl "nat" language nil))
   nil))
 (δ_TCC11 0
  (δ_TCC11-1 nil 3581181196 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC12 0
  (δ_TCC12-1 nil 3581181196 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC13 0
  (δ_TCC13-1 nil 3581181196 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC14 0
  (δ_TCC14-1 nil 3581181196 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC15 0
  (δ_TCC15-1 nil 3581181196 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC16 0
  (δ_TCC16-1 nil 3581181196 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC17 0
  (δ_TCC17-1 nil 3581181196 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC18 0
  (δ_TCC18-1 nil 3581181196 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC19 0
  (δ_TCC19-1 nil 3581181196 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC20 0
  (δ_TCC20-1 nil 3581181196 ("" (subtype-tcc) nil nil) nil nil))
 (δ_TCC21 0
  (δ_TCC21-1 nil 3581181196 ("" (cases-tcc) nil nil) nil nil)))

