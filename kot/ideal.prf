(language
 (bigvee_TCC1 0
  (bigvee_TCC1-1 nil 3580758376 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (subterm_ltlt_equal 0
  (subterm_ltlt_equal-1 nil 3580738216
   ("" (induct t)
    (("1" (skeep)
      (("1" (expand (subterm <<) +) (("1" (propax) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (expand (subterm <<) +) (("2" (propax) nil nil)) nil)) nil)
     ("3" (skeep)
      (("3" (expand (subterm <<) +) (("3" (propax) nil nil)) nil)) nil)
     ("4" (skeep)
      (("4" (expand (subterm <<) +) (("4" (propax) nil nil)) nil)) nil)
     ("5" (skeep)
      (("5" (expand (subterm <<) +) (("5" (propax) nil nil)) nil)) nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (expand (subterm <<) +) (("6" (propax) nil nil)) nil))
        nil))
      nil)
     ("7" (skeep)
      (("7" (skeep)
        (("7" (expand (subterm <<) +)
          (("7" (grind :exclude (subterm <<)) nil nil)) nil))
        nil))
      nil)
     ("8" (skeep)
      (("8" (skeep)
        (("8" (expand (subterm <<) +)
          (("8" (grind :exclude (subterm <<)) nil nil)) nil))
        nil))
      nil)
     ("9" (skeep)
      (("9" (skeep)
        (("9" (expand (subterm <<) +)
          (("9" (grind :exclude (subterm <<)) nil nil)) nil))
        nil))
      nil)
     ("10" (skeep)
      (("10" (skeep)
        (("10" (expand (subterm <<) +) (("10" (propax) nil nil)) nil))
        nil))
      nil)
     ("11" (skeep)
      (("11" (skeep)
        (("11" (expand (subterm <<) +) (("11" (propax) nil nil)) nil))
        nil))
      nil)
     ("12" (skeep)
      (("12" (skeep)
        (("12" (expand (subterm <<) +)
          (("12" (grind :exclude (subterm <<)) nil nil)) nil))
        nil))
      nil)
     ("13" (skeep)
      (("13" (skeep)
        (("13" (expand (subterm <<) +)
          (("13" (grind :exclude (subterm <<)) nil nil)) nil))
        nil))
      nil)
     ("14" (skeep)
      (("14" (skeep)
        (("14" (expand (subterm <<) +)
          (("14" (grind :exclude (subterm <<)) nil nil)) nil))
        nil))
      nil)
     ("15" (skeep)
      (("15" (skeep)
        (("15" (expand (subterm <<) +)
          (("15" (grind :exclude (subterm <<)) nil nil)) nil))
        nil))
      nil)
     ("16" (skeep)
      (("16" (skeep)
        (("16" (expand (subterm <<) +)
          (("16" (grind :exclude (subterm <<)) nil nil)) nil))
        nil))
      nil)
     ("17" (skeep)
      (("17" (expand (subterm <<) +) (("17" (propax) nil nil)) nil))
      nil)
     ("18" (skeep)
      (("18" (skeep)
        (("18" (expand (subterm <<) +)
          (("18" (grind :exclude (subterm <<)) nil nil)) nil))
        nil))
      nil)
     ("19" (skeep)
      (("19" (skeep)
        (("19" (expand (subterm <<) +)
          (("19" (grind :exclude (subterm <<)) nil nil)) nil))
        nil))
      nil)
     ("20" (skeep)
      (("20" (skeep)
        (("20" (expand (subterm <<) +)
          (("20" (grind :exclude (subterm <<)) nil nil)) nil))
        nil))
      nil)
     ("21" (skeep)
      (("21" (skeep)
        (("21" (expand (subterm <<) +)
          (("21" (grind :exclude (subterm <<)) nil nil)) nil))
        nil))
      nil))
    nil)
   ((empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (semantic_induction formula-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" language nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   shostak))
 (KTYPED?_is_kind? 0
  (KTYPED?_is_kind?-1 nil 3580736390 ("" (judgement-tcc) nil nil)
   ((kind? const-decl "bool" language nil)) nil))
 (kind?_is_keyword 0
  (kind?_is_keyword-1 nil 3580736390 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (kind? const-decl "bool" language nil)
    (KTYPED? const-decl "bool" language nil))
   nil))
 (ktype?_is_context 0
  (ktype?_is_context-1 nil 3580736390 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (ktype? const-decl "bool" language nil))
   nil))
 (ktyped?_is_context 0
  (ktyped?_is_context-1 nil 3580736390 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (ktyped? const-decl "bool" language nil))
   nil))
 (fun_?_TCC1 0
  (fun_?_TCC1-1 nil 3580661121 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (undefined adt-def-decl "boolean" language nil)
    (ε type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil))
   nil))
 (fun_?_TCC2 0
  (fun_?_TCC2-1 nil 3580661121 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (undefined adt-def-decl "boolean" language nil)
    (ε type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil))
   nil))
 (fun_?_TCC3 0
  (fun_?_TCC3-1 nil 3580661121 ("" (grind) nil nil)
   ((pretype adt-def-decl "boolean" language nil)
    (→ const-decl "pretype" language nil))
   nil))
 (fun_?_TCC4 0
  (fun_?_TCC4-1 nil 3580661121 ("" (grind) nil nil)
   ((pretype adt-def-decl "boolean" language nil)
    (→ const-decl "pretype" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (fun_?_TCC5 0
  (fun_?_TCC5-1 nil 3580758376 ("" (grind) nil nil)
   ((pretype adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (prod_?_TCC1 0
  (prod_?_TCC1-1 nil 3580661121 ("" (grind) nil nil)
   ((pretype adt-def-decl "boolean" language nil)
    (⌈⌉ const-decl "pretype" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (subtype_?_TCC1 0
  (subtype_?_TCC1-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (undefined adt-def-decl "boolean" language nil)
    (ε type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (subtype_?_TCC2 0
  (subtype_?_TCC2-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (undefined adt-def-decl "boolean" language nil)
    (ε type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (subtype_?_TCC3 0
  (subtype_?_TCC3-1 nil 3580758376 ("" (grind) nil nil)
   ((pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (subtype_?_TCC4 0
  (subtype_?_TCC4-1 nil 3580758376 ("" (grind) nil nil)
   ((pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (app_?_TCC1 0
  (app_?_TCC1-1 nil 3580661121 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (undefined adt-def-decl "boolean" language nil)
    (ε type-eq-decl nil language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (app_?_TCC2 0
  (app_?_TCC2-1 nil 3580661121 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (undefined adt-def-decl "boolean" language nil)
    (ε type-eq-decl nil language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (app_?_TCC3 0
  (app_?_TCC3-1 nil 3580661121 ("" (grind) nil nil)
   ((preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (app_?_TCC4 0
  (app_?_TCC4-1 nil 3580758719 ("" (grind) nil nil)
   ((preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (lam_?_TCC1 0
  (lam_?_TCC1-1 nil 3580661121 ("" (grind) nil nil)
   ((pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (Λ const-decl "preterm" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (lam_?_TCC2 0
  (lam_?_TCC2-1 nil 3580661121 ("" (grind) nil nil)
   ((pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (pair_?_TCC1 0
  (pair_?_TCC1-1 nil 3580661121 ("" (grind) nil nil)
   ((preterm adt-def-decl "boolean" language nil)
    (〈〉 const-decl "preterm" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (lproj_?_TCC1 0
  (lproj_?_TCC1-1 nil 3580661121 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (undefined adt-def-decl "boolean" language nil)
    (ε type-eq-decl nil language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (lproj_?_TCC2 0
  (lproj_?_TCC2-1 nil 3580661121 ("" (grind) nil nil)
   ((preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (lproj_?_TCC3 0
  (lproj_?_TCC3-1 nil 3580661121 ("" (grind) nil nil)
   ((preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (rproj_?_TCC1 0
  (rproj_?_TCC1-1 nil 3580661121 ("" (grind) nil nil)
   ((preterm adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC1 0
  (uparrow_TCC1-1 nil 3580758376
   ("" (typepred "<<")
    (("" (expand strict_well_founded?)
      (("" (expand well_founded?)
        (("" (skeep)
          (("" (inst -2 "LAMBDA (s: semantic): expr(s) AND p(s)")
            (("" (split)
              (("1" (skolem-typepred)
                (("1" (inst 1 "y!1")
                  (("1" (skolem-typepred 1)
                    (("1" (inst -5 "x!1") (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (skolem-typepred)
                (("2" (inst 1 "y!1") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (restrict const-decl "R" restrict nil)
    (strict_order? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (irreflexive? const-decl "bool" relations nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (well_founded? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (uparrow_TCC2 0
  (uparrow_TCC2-1 nil 3580758376 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (uparrow_TCC3 0
  (uparrow_TCC3-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (uparrow_TCC4 0
  (uparrow_TCC4-1 nil 3580758376 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC5 0
  (uparrow_TCC5-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((T!1 skolem-const-decl "pretype" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC6 0
  (uparrow_TCC6-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (uparrow_TCC7 0
  (uparrow_TCC7-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC8 0
  (uparrow_TCC8-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (a!1 skolem-const-decl "preterm" language nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC9 0
  (uparrow_TCC9-1 nil 3580758376
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (delete 2)
            (("" (rewrite -9)
              (("" (expand pretype +) (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (uparrow_TCC10 0
  (uparrow_TCC10-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (uparrow_TCC11 0
  (uparrow_TCC11-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC12 0
  (uparrow_TCC12-1 nil 3580758376
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (inst?)
            (("1" (assert)
              (("1" (expand (pretype preterm))
                (("1" (flatten)
                  (("1" (delete -5 -6 -7 -8 -9 -10 1 2 3 4)
                    (("1" (split -4)
                      (("1" (assert) nil nil) ("2" (assert) nil nil)
                       ("3" (assert) nil nil) ("4" (assert) nil nil)
                       ("5" (assert) nil nil) ("6" (assert) nil nil)
                       ("7" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand expr 1)
              (("2" (expand pretype 1)
                (("2" (simplify)
                  (("2" (assert)
                    (("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (A!1 skolem-const-decl "pretype" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (uparrow_TCC13 0
  (uparrow_TCC13-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (uparrow_TCC14 0
  (uparrow_TCC14-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC15 0
  (uparrow_TCC15-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (B!1 skolem-const-decl "pretype" language nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC16 0
  (uparrow_TCC16-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (rewrite -9)
      (("" (expand pretype) (("" (propax) nil nil)) nil)) nil))
    nil)
   ((pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC17 0
  (uparrow_TCC17-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (uparrow_TCC18 0
  (uparrow_TCC18-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC19 0
  (uparrow_TCC19-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand (pretype preterm))
        (("1" (assert)
          (("1" (flatten)
            (("1" (split -4)
              (("1" (assert) nil nil) ("2" (assert) nil nil)
               ("3" (assert) nil nil) ("4" (assert) nil nil)
               ("5" (assert) nil nil) ("6" (assert) nil nil)
               ("7" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand pretype)
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((A!1 skolem-const-decl "pretype" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC20 0
  (uparrow_TCC20-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (uparrow_TCC21 0
  (uparrow_TCC21-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC22 0
  (uparrow_TCC22-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (B!1 skolem-const-decl "pretype" language nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC23 0
  (uparrow_TCC23-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (A!1 skolem-const-decl "pretype" language nil)
    (e!1 skolem-const-decl "expr" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC24 0
  (uparrow_TCC24-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC25 0
  (uparrow_TCC25-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC26 0
  (uparrow_TCC26-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC27 0
  (uparrow_TCC27-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (uparrow_TCC28 0
  (uparrow_TCC28-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC29 0
  (uparrow_TCC29-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((f!1 skolem-const-decl "preterm" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC30 0
  (uparrow_TCC30-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (uparrow_TCC31 0
  (uparrow_TCC31-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC32 0
  (uparrow_TCC32-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((a!1 skolem-const-decl "preterm" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC33 0
  (uparrow_TCC33-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (f!1 skolem-const-decl "preterm" language nil)
    (e!1 skolem-const-decl "expr" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC34 0
  (uparrow_TCC34-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (uparrow_TCC35 0
  (uparrow_TCC35-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC36 0
  (uparrow_TCC36-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((T!1 skolem-const-decl "pretype" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC37 0
  (uparrow_TCC37-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (uparrow_TCC38 0
  (uparrow_TCC38-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC39 0
  (uparrow_TCC39-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (a!1 skolem-const-decl "preterm" language nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC40 0
  (uparrow_TCC40-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (T!1 skolem-const-decl "pretype" language nil)
    (e!1 skolem-const-decl "expr" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC41 0
  (uparrow_TCC41-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (uparrow_TCC42 0
  (uparrow_TCC42-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC43 0
  (uparrow_TCC43-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((a!1 skolem-const-decl "preterm" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC44 0
  (uparrow_TCC44-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (uparrow_TCC45 0
  (uparrow_TCC45-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC46 0
  (uparrow_TCC46-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -4)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((b1!1 skolem-const-decl "preterm" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC47 0
  (uparrow_TCC47-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (a!1 skolem-const-decl "preterm" language nil)
    (e!1 skolem-const-decl "expr" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC48 0
  (uparrow_TCC48-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (uparrow_TCC49 0
  (uparrow_TCC49-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC50 0
  (uparrow_TCC50-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -3)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand pretype)
          (("2" (expand preterm)
            (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((a!1 skolem-const-decl "preterm" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC51 0
  (uparrow_TCC51-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (a!1 skolem-const-decl "preterm" language nil)
    (e!1 skolem-const-decl "expr" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC52 0
  (uparrow_TCC52-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (uparrow_TCC53 0
  (uparrow_TCC53-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (uparrow_TCC54 0
  (uparrow_TCC54-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -3)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((a!1 skolem-const-decl "preterm" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC55 0
  (uparrow_TCC55-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (a!1 skolem-const-decl "preterm" language nil)
    (e!1 skolem-const-decl "expr" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (uparrow_TCC56 0
  (uparrow_TCC56-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (uparrow_TCC57 0
  (uparrow_TCC57-1 nil 3580759312
   ("" (skeep) (("" (typepred "↑") (("" (grind) nil nil)) nil)) nil)
   ((↑ def-decl
     "{f: semantic | (pretype(e) AND pretype(f)) OR (preterm(e) AND preterm(f))}"
     language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (subst_TCC1 0
  (subst_TCC1-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (subst_TCC2 0
  (subst_TCC2-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (subst_TCC3 0
  (subst_TCC3-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (subst_TCC4 0
  (subst_TCC4-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -6)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T!1 skolem-const-decl "pretype" language nil))
   nil))
 (subst_TCC5 0
  (subst_TCC5-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (subst_TCC6 0
  (subst_TCC6-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (subst_TCC7 0
  (subst_TCC7-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -7)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (a!1 skolem-const-decl "preterm" language nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil))
   nil))
 (subst_TCC8 0
  (subst_TCC8-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (T!1 skolem-const-decl "pretype" language nil)
    (e!1 skolem-const-decl "expr" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil))
   nil))
 (subst_TCC9 0
  (subst_TCC9-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (subst_TCC10 0
  (subst_TCC10-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (subst_TCC11 0
  (subst_TCC11-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -6)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((A!1 skolem-const-decl "pretype" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil))
   nil))
 (subst_TCC12 0
  (subst_TCC12-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (subst_TCC13 0
  (subst_TCC13-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (subst_TCC14 0
  (subst_TCC14-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -7)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (B!1 skolem-const-decl "pretype" language nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil))
   nil))
 (subst_TCC15 0
  (subst_TCC15-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (e!1 skolem-const-decl "expr" language nil)
    (A!1 skolem-const-decl "pretype" language nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil))
   nil))
 (subst_TCC16 0
  (subst_TCC16-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (subst_TCC17 0
  (subst_TCC17-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (subst_TCC18 0
  (subst_TCC18-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -6)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((A!1 skolem-const-decl "pretype" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil))
   nil))
 (subst_TCC19 0
  (subst_TCC19-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (subst_TCC20 0
  (subst_TCC20-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (subst_TCC21 0
  (subst_TCC21-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -7)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (B!1 skolem-const-decl "pretype" language nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (subst_TCC22 0
  (subst_TCC22-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (A!1 skolem-const-decl "pretype" language nil)
    (e!1 skolem-const-decl "expr" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil))
   nil))
 (subst_TCC23 0
  (subst_TCC23-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (subst_TCC24 0
  (subst_TCC24-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (subst_TCC25 0
  (subst_TCC25-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (subst_TCC26 0
  (subst_TCC26-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (subst_TCC27 0
  (subst_TCC27-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (subst_TCC28 0
  (subst_TCC28-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -6)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((f!1 skolem-const-decl "preterm" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (subst_TCC29 0
  (subst_TCC29-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (subst_TCC30 0
  (subst_TCC30-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (subst_TCC31 0
  (subst_TCC31-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -7)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (a!1 skolem-const-decl "preterm" language nil))
   nil))
 (subst_TCC32 0
  (subst_TCC32-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (e!1 skolem-const-decl "expr" language nil)
    (f!1 skolem-const-decl "preterm" language nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil))
   nil))
 (subst_TCC33 0
  (subst_TCC33-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (subst_TCC34 0
  (subst_TCC34-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (subst_TCC35 0
  (subst_TCC35-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -6)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((T!1 skolem-const-decl "pretype" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil))
   nil))
 (subst_TCC36 0
  (subst_TCC36-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (subst_TCC37 0
  (subst_TCC37-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (subst_TCC38 0
  (subst_TCC38-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -7)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (a!1 skolem-const-decl "preterm" language nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (subst_TCC39 0
  (subst_TCC39-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (e!1 skolem-const-decl "expr" language nil)
    (T!1 skolem-const-decl "pretype" language nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil))
   nil))
 (subst_TCC40 0
  (subst_TCC40-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr const-decl "bool" language nil))
   nil))
 (subst_TCC41 0
  (subst_TCC41-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (subst_TCC42 0
  (subst_TCC42-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -6)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((a!1 skolem-const-decl "preterm" language nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (expr const-decl "bool" language nil)
    (expr type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (preterm type-eq-decl nil language nil)
    (restrict const-decl "R" restrict nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil))
   nil))
 (subst_TCC43 0
  (subst_TCC43-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (expand expr)
      (("" (expand (pretype preterm))
        (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil))
   nil))
 (subst_TCC44 0
  (subst_TCC44-1 nil 3580758376 ("" (grind) nil nil)
   ((restrict const-decl "R" restrict nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (subst_TCC45 0
  (subst_TCC45-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -7)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (b!1 skolem-const-decl "preterm" language nil))
   nil))
 (subst_TCC46 0
  (subst_TCC46-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (e!1 skolem-const-decl "expr" language nil)
    (a!1 skolem-const-decl "preterm" language nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil))
   nil))
 (subst_TCC47 0
  (subst_TCC47-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (expand expr)
      (("" (expand (pretype preterm))
        (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil))
   nil))
 (subst_TCC48 0
  (subst_TCC48-1 nil 3580758376 ("" (grind) nil nil)
   ((restrict const-decl "R" restrict nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (subst_TCC49 0
  (subst_TCC49-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -6)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (a!1 skolem-const-decl "preterm" language nil))
   nil))
 (subst_TCC50 0
  (subst_TCC50-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (e!1 skolem-const-decl "expr" language nil)
    (a!1 skolem-const-decl "preterm" language nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil))
   nil))
 (subst_TCC51 0
  (subst_TCC51-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (expand expr)
      (("" (expand (pretype preterm))
        (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil))
   nil))
 (subst_TCC52 0
  (subst_TCC52-1 nil 3580758376 ("" (grind) nil nil)
   ((restrict const-decl "R" restrict nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (subst_TCC53 0
  (subst_TCC53-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm))
          (("1" (assert)
            (("1" (flatten)
              (("1" (split -6)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) nil nil) ("6" (assert) nil nil)
                 ("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (a!1 skolem-const-decl "preterm" language nil))
   nil))
 (subst_TCC54 0
  (subst_TCC54-1 nil 3580758376
   ("" (skosimp* :preds? t)
    (("" (inst?)
      (("1" (expand expr)
        (("1" (expand (pretype preterm)) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand expr)
        (("2" (expand (pretype preterm))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (expand expr)
        (("3" (expand (pretype preterm))
          (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((preterm adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (preterm type-eq-decl nil language nil)
    (rproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lproj? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pair? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (lam? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (app? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (var? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (const? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (e!1 skolem-const-decl "expr" language nil)
    (a!1 skolem-const-decl "preterm" language nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil))
   nil))
 (subst_TCC55 0
  (subst_TCC55-1 nil 3580758376 ("" (grind) nil nil)
   ((pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (expr type-eq-decl nil language nil)
    (expr const-decl "bool" language nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (app_ctx_const_TCC1 0
  (app_ctx_const_TCC1-1 nil 3580758376
   ("" (typepred "<<")
    (("" (expand strict_well_founded?)
      (("" (expand well_founded?)
        (("" (skeep)
          (("" (inst -2 "LAMBDA (s: semantic): context(s) AND p(s)")
            (("1" (split)
              (("1" (skolem-typepred)
                (("1" (inst 1 "y!1")
                  (("1" (skolem-typepred 1)
                    (("1" (inst -5 "x!1")
                      (("1" (grind) nil nil)
                       ("2" (expand context) (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skolem-typepred)
                (("2" (inst 1 "y!1") (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p skolem-const-decl "pred[context]" language nil)
    (x!1 skolem-const-decl "(p)" language nil)
    (irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (restrict const-decl "R" restrict nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (context type-eq-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (context adt-def-decl "boolean" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (well_founded? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil))
   nil))
 (app_ctx_const_TCC2 0
  (app_ctx_const_TCC2-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil))
   nil))
 (app_ctx_const_TCC3 0
  (app_ctx_const_TCC3-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil))
   nil))
 (app_ctx_const_TCC4 0
  (app_ctx_const_TCC4-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (app_ctx_const_subterm_TCC1 0
  (app_ctx_const_subterm_TCC1-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (subterm adt-def-decl "boolean" language nil))
   nil))
 (app_ctx_const_subterm_TCC2 0
  (app_ctx_const_subterm_TCC2-1 nil 3580758376 ("" (grind) nil nil)
   ((subterm adt-def-decl "boolean" language nil)) nil))
 (app_ctx_const_subterm_TCC3 0
  (app_ctx_const_subterm_TCC3-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (symbol nonempty-type-decl nil language nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" language nil))
   nil))
 (app_ctx_var_TCC1 0
  (app_ctx_var_TCC1-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (app_ctx_var_TCC2 0
  (app_ctx_var_TCC2-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (app_ctx_var_TCC3 0
  (app_ctx_var_TCC3-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (app_ctx_var_TCC4 0
  (app_ctx_var_TCC4-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil))
   nil))
 (app_ctx_var_TCC5 0
  (app_ctx_var_TCC5-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (app_ctx_var_subterm_TCC1 0
  (app_ctx_var_subterm_TCC1-1 nil 3580758376 ("" (grind) nil nil)
   ((subterm adt-def-decl "boolean" language nil)) nil))
 (app_ctx_var_subterm_TCC2 0
  (app_ctx_var_subterm_TCC2-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subterm adt-def-decl "boolean" language nil))
   nil))
 (app_ctx_var_subterm_TCC3 0
  (app_ctx_var_subterm_TCC3-1 nil 3580758376 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subterm adt-def-decl "boolean" language nil))
   nil))
 (kind_TCC1 0
  (kind_TCC1-1 nil 3580736390 ("" (grind) nil nil)
   ((undefined adt-def-decl "boolean" language nil)
    (KTYPED? const-decl "bool" language nil)
    (kind? const-decl "bool" language nil))
   nil))
 (kind_TCC2 0
  (kind_TCC2-1 nil 3580736390 ("" (grind) nil nil)
   ((ktype? const-decl "bool" language nil)
    (undefined adt-def-decl "boolean" language nil)
    (KTYPED? const-decl "bool" language nil)
    (kind? const-decl "bool" language nil))
   nil))
 (kind_TCC3 0
  (kind_TCC3-1 nil 3580736390 ("" (grind) nil nil)
   ((undefined adt-def-decl "boolean" language nil)
    (KTYPED? const-decl "bool" language nil)
    (kind? const-decl "bool" language nil))
   nil))
 (kind_TCC4 0
  (kind_TCC4-1 nil 3580736390 ("" (grind) nil nil)
   ((undefined adt-def-decl "boolean" language nil)
    (KTYPED? const-decl "bool" language nil)
    (kind? const-decl "bool" language nil))
   nil))
 (kind_TCC5 0
  (kind_TCC5-1 nil 3580736390 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (ktype? const-decl "bool" language nil))
   nil))
 (kind_TCC6 0
  (kind_TCC6-1 nil 3580736390 ("" (grind) nil nil)
   ((context type-eq-decl nil language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ktype? const-decl "bool" language nil))
   nil))
 (kind_? 0
  (kind_?-1 nil 3580736390 ("" (grind) nil nil)
   ((ktype? const-decl "bool" language nil)
    (kind const-decl "ε(kind?)" language nil)
    (KTYPED? const-decl "bool" language nil)
    (kind? const-decl "bool" language nil))
   nil))
 (type__TCC1 0
  (type__TCC1-1 nil 3580736390 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (ktyped? const-decl "bool" language nil))
   nil))
 (type__TCC2 0
  (type__TCC2-1 nil 3580736390
   ("" (skeep)
    (("" (typepred "dtype(Γ)")
      (("" (expand pretype) (("" (propax) nil nil)) nil)) nil))
    nil)
   ((context type-eq-decl nil language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dtype shared-adt-accessor-decl
     "[{x: semantic | kconst_decl?(x) OR kvar?(x) OR ktype_def?(x)} -> pretype]"
     language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pretype adt-def-decl "boolean" language nil))
   nil))
 (type__TCC3 0
  (type__TCC3-1 nil 3580736390 ("" (grind) nil nil)
   ((ktyped? const-decl "bool" language nil)
    (undefined adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil))
   nil))
 (type_? 0
  (type_?-1 nil 3580736390
   ("" (skeep)
    (("" (expand type_)
      (("" (typepred "dtype(Γ)") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((type_ const-decl "ε(pretype)" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (dtype shared-adt-accessor-decl
     "[{x: semantic | kconst_decl?(x) OR kvar?(x) OR ktype_def?(x)} -> pretype]"
     language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (ktyped? const-decl "bool" language nil))
   nil))
 (definition_TCC1 0
  (definition_TCC1-1 nil 3580736390 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil))
   nil))
 (definition_TCC2 0
  (definition_TCC2-1 nil 3580736390
   ("" (skeep)
    (("" (typepred "dtype(Γ)")
      (("" (expand pretype) (("" (propax) nil nil)) nil)) nil))
    nil)
   ((context type-eq-decl nil language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (dtype shared-adt-accessor-decl
     "[{x: semantic | kconst_decl?(x) OR kvar?(x) OR ktype_def?(x)} -> pretype]"
     language nil)
    (pretype type-eq-decl nil language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pretype adt-def-decl "boolean" language nil))
   nil))
 (definition_TCC3 0
  (definition_TCC3-1 nil 3580736390 ("" (grind) nil nil)
   ((undefined adt-def-decl "boolean" language nil)
    (pretype adt-def-decl "boolean" language nil))
   nil))
 (definition_? 0
  (definition_?-1 nil 3580736390
   ("" (skeep)
    (("" (expand definition)
      (("" (typepred "dtype(Γ)") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((definition const-decl "ε(pretype)" language nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (subtype? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (dtype shared-adt-accessor-decl
     "[{x: semantic | kconst_decl?(x) OR kvar?(x) OR ktype_def?(x)} -> pretype]"
     language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil))
   nil))
 (Bumpeq_TCC1 0
  (Bumpeq_TCC1-1 nil 3580736390 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (KVAR? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (KTYPE? adt-recognizer-decl "[semantic -> boolean]" language nil))
   nil)))
(type_functions
 (δ_TCC1 0
  (δ_TCC1-1 nil 3580736390
   ("" (eta "[[context, pretype], [context, pretype] -> bool]")
    (("" (inst?)
      (("" (rewrite -1)
        (("" (use "wf_pair[context, pretype, <<, <<]") nil nil)) nil))
      nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (well_founded_restrict application-judgement "(well_founded?[S])"
     restrict_order_props nil)
    (le const-decl "bool" wf_pair nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (restrict const-decl "R" restrict nil)
    (wf_pair judgement-tcc nil wf_pair nil)
    (wf_pair name-judgement "(well_founded?[[L, R]])" wf_pair nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pretype type-eq-decl nil language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (context type-eq-decl nil language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (semantic type-decl nil language nil))
   nil))
 (δ_TCC2 0
  (δ_TCC2-1 nil 3580736390 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (definition const-decl "ε(pretype)" language nil))
   nil))
 (δ_TCC3 0
  (δ_TCC3-1 nil 3580736390
   ("" (skeep)
    (("" (typepred "definition")
      (("" (inst?)
        (("" (expand pretype)
          (("" (delete -2) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((definition const-decl "ε(pretype)" language nil)
    (ε type-eq-decl nil language nil)
    (pretype adt-def-decl "boolean" language nil)
    (undefined adt-def-decl "boolean" language nil)
    (context type-eq-decl nil language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (δ_TCC4 0
  (δ_TCC4-1 nil 3580736390
   ("" (skeep)
    (("" (expand le)
      (("" (flatten)
        (("" (typepred "app_ctx(Γ)(s)")
          (("" (split -3)
            (("1" (hide -2) (("1" (grind) nil nil)) nil)
             ("2" (rewrite subterm_ltlt_equal)
              (("2" (split -3)
                (("1" (rewrite -1) (("1" (grind) nil nil)) nil)
                 ("2" (hide -2 -4 1 3)
                  (("2" (typepred "<<")
                    (("2" (expand strict_well_founded?)
                      (("2" (flatten)
                        (("2" (expand strict_order?)
                          (("2" (flatten)
                            (("2" (expand transitive?)
                              (("2"
                                (inst
                                 -2
                                 "rest(app_ctx(Γ)(s))"
                                 "app_ctx(Γ)(s)"
                                 "Γ")
                                (("2"
                                  (grind)
                                  (("2"
                                    (reveal *)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((le const-decl "bool" wf_pair nil)
    (s shared-adt-accessor-decl "[{x: semantic |
          kconst_decl?(x) OR
           ktype_def?(x) OR ktype_decl?(x) OR const?(x)} ->
   symbol]" language nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subterm adt-def-decl "boolean" language nil)
    (context type-eq-decl nil language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (semantic type-decl nil language nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subterm_ltlt_equal formula-decl nil language nil)
    (strict_order? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (well_founded? const-decl "bool" orders nil)
    (irreflexive? const-decl "bool" relations nil)
    (rest shared-adt-accessor-decl "[{x: semantic |
          kconst_decl?(x) OR
           kvar?(x) OR ktype_def?(x) OR ktype_decl?(x)} ->
   context]" language nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (definition const-decl "ε(pretype)" language nil))
   nil))
 (δ_TCC5 0
  (δ_TCC5-1 nil 3580736390 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (le const-decl "bool" wf_pair nil))
   nil))
 (δ_TCC6 0
  (δ_TCC6-1 nil 3580736390 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (le const-decl "bool" wf_pair nil))
   nil))
 (δ_TCC7 0
  (δ_TCC7-1 nil 3580736390 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (le const-decl "bool" wf_pair nil))
   nil))
 (δ_TCC8 0
  (δ_TCC8-1 nil 3580736390 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (le const-decl "bool" wf_pair nil))
   nil))
 (δ_TCC9 0
  (δ_TCC9-1 nil 3580736390 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (base? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (fun? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (prod? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (pretype type-eq-decl nil language nil))
   nil))
 (δ_TCC10 0
  (δ_TCC10-1 nil 3580758379 ("" (termination-tcc) nil nil) nil nil))
 (δ_TCC11 0
  (δ_TCC11-1 nil 3580758379 ("" (cases-tcc) nil nil) nil nil))
 (divide_TCC1 0
  (divide_TCC1-1 nil 3580758379 ("" (well-founded-tcc) nil nil) nil
   nil))
 (divide_TCC2 0
  (divide_TCC2-1 nil 3580758379 ("" (subtype-tcc) nil nil) nil nil))
 (divide_TCC3 0
  (divide_TCC3-1 nil 3580758379 ("" (subtype-tcc) nil nil) nil nil))
 (divide_TCC4 0
  (divide_TCC4-1 nil 3580758379 ("" (termination-tcc) nil nil) nil
   nil))
 (divide_TCC5 0
  (divide_TCC5-1 nil 3580758379 ("" (subtype-tcc) nil nil) nil nil))
 (divide_TCC6 0
  (divide_TCC6-1 nil 3580758379 ("" (subtype-tcc) nil nil) nil nil))
 (divide_TCC7 0
  (divide_TCC7-1 nil 3580758379 ("" (termination-tcc) nil nil) nil
   nil))
 (divide_TCC8 0
  (divide_TCC8-1 nil 3580758379 ("" (subtype-tcc) nil nil) nil nil))
 (divide_TCC9 0
  (divide_TCC9-1 nil 3580758379 ("" (termination-tcc) nil nil) nil
   nil))
 (divide_TCC10 0
  (divide_TCC10-1 nil 3580758379 ("" (subtype-tcc) nil nil) nil nil))
 (divide_TCC11 0
  (divide_TCC11-1 nil 3580758379 ("" (subtype-tcc) nil nil) nil nil))
 (divide_TCC12 0
  (divide_TCC12-1 nil 3580758379 ("" (termination-tcc) nil nil) nil
   nil))
 (μ₀_TCC1 0
  (μ₀_TCC1-1 nil 3580758379 ("" (termination-tcc) nil nil) nil nil))
 (μ_TCC1 0
  (μ_TCC1-1 nil 3580758379 ("" (subtype-tcc) nil nil) nil nil))
 (μ_TCC2 0
  (μ_TCC2-1 nil 3580758379 ("" (subtype-tcc) nil nil) nil nil))
 (μ_TCC3 0
  (μ_TCC3-1 nil 3580758379 ("" (subtype-tcc) nil nil) nil nil))
 (μ_TCC4 0
  (μ_TCC4-1 nil 3580758379 ("" (subtype-tcc) nil nil) nil nil))
 (μ_TCC5 0
  (μ_TCC5-1 nil 3580758379 ("" (subtype-tcc) nil nil) nil nil))
 (μ_TCC6 0
  (μ_TCC6-1 nil 3580758379 ("" (subtype-tcc) nil nil) nil nil))
 (μ_TCC7 0
  (μ_TCC7-1 nil 3580758379 ("" (subtype-tcc) nil nil) nil nil))
 (μ_TCC8 0
  (μ_TCC8-1 nil 3580758379 ("" (subtype-tcc) nil nil) nil nil))
 (π_TCC1 0
  (π_TCC1-1 nil 3580758469 ("" (well-founded-tcc) nil nil) nil nil))
 (π_TCC2 0
  (π_TCC2-1 nil 3580758469 ("" (termination-tcc) nil nil) nil nil))
 (π_TCC3 0
  (π_TCC3-1 nil 3580758469 ("" (termination-tcc) nil nil) nil nil))
 (π_TCC4 0
  (π_TCC4-1 nil 3580758469 ("" (subtype-tcc) nil nil) nil nil))
 (π_TCC5 0
  (π_TCC5-1 nil 3580758469 ("" (subtype-tcc) nil nil) nil nil))
 (π_TCC6 0
  (π_TCC6-1 nil 3580758469 ("" (subtype-tcc) nil nil) nil nil))
 (π_TCC7 0
  (π_TCC7-1 nil 3580758469 ("" (termination-tcc) nil nil) nil nil))
 (π_TCC8 0
  (π_TCC8-1 nil 3580758469 ("" (termination-tcc) nil nil) nil nil))
 (π_TCC9 0
  (π_TCC9-1 nil 3580758469 ("" (subtype-tcc) nil nil) nil nil))
 (π_TCC10 0
  (π_TCC10-1 nil 3580758469 ("" (subtype-tcc) nil nil) nil nil))
 (π_TCC11 0
  (π_TCC11-1 nil 3580758469 ("" (termination-tcc) nil nil) nil nil))
 (π_TCC12 0
  (π_TCC12-1 nil 3580758469 ("" (termination-tcc) nil nil) nil nil))
 (π_TCC13 0
  (π_TCC13-1 nil 3580758469 ("" (termination-tcc) nil nil) nil nil))
 (π_TCC14 0
  (π_TCC14-1 nil 3580758469 ("" (subtype-tcc) nil nil) nil nil))
 (π_TCC15 0
  (π_TCC15-1 nil 3580758469 ("" (subtype-tcc) nil nil) nil nil))
 (simeq_TCC1 0
  (simeq_TCC1-1 nil 3580758469 ("" (well-founded-tcc) nil nil) nil
   nil))
 (simeq_TCC2 0
  (simeq_TCC2-1 nil 3580758469 ("" (termination-tcc) nil nil) nil nil))
 (simeq_TCC3 0
  (simeq_TCC3-1 nil 3580758469 ("" (termination-tcc) nil nil) nil nil))
 (simeq_TCC4 0
  (simeq_TCC4-1 nil 3580758469 ("" (termination-tcc) nil nil) nil nil))
 (simeq_TCC5 0
  (simeq_TCC5-1 nil 3580758469 ("" (termination-tcc) nil nil) nil nil)))
(tau_function
 (prec_wf 0
  (prec_wf-1 nil 3580739512 ("" (judgement-tcc) nil nil) nil nil))
 (τ_TCC1 0
  (τ_TCC1-1 nil 3580739512 ("" (well-founded-tcc) nil nil) nil nil))
 (τ_TCC2 0
  (τ_TCC2-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC3 0
  (τ_TCC3-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC4 0
  (τ_TCC4-1 nil 3580739512 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (semantic type-decl nil language nil)
    (empty? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (ktype_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (ktype_def? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (kvar? adt-recognizer-decl "[semantic -> boolean]" language nil)
    (kconst_decl? adt-recognizer-decl "[semantic -> boolean]" language
     nil)
    (context type-eq-decl nil language nil)
    (<< adt-def-decl "(strict_well_founded?[semantic])" language nil)
    (∉ const-decl "bool" language nil)
    (pretype adt-def-decl "boolean" language nil)
    (preterm adt-def-decl "boolean" language nil)
    (context adt-def-decl "boolean" language nil)
    (≺ const-decl "bool" tau_function nil))
   nil))
 (τ_TCC5 0
  (τ_TCC5-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC6 0
  (τ_TCC6-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC7 0
  (τ_TCC7-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC8 0
  (τ_TCC8-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC9 0
  (τ_TCC9-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC10 0
  (τ_TCC10-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC11 0
  (τ_TCC11-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC12 0
  (τ_TCC12-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC13 0
  (τ_TCC13-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC14 0
  (τ_TCC14-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC15 0
  (τ_TCC15-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC16 0
  (τ_TCC16-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC17 0
  (τ_TCC17-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC18 0
  (τ_TCC18-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC19 0
  (τ_TCC19-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC20 0
  (τ_TCC20-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC21 0
  (τ_TCC21-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC22 0
  (τ_TCC22-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC23 0
  (τ_TCC23-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC24 0
  (τ_TCC24-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC25 0
  (τ_TCC25-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC26 0
  (τ_TCC26-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC27 0
  (τ_TCC27-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC28 0
  (τ_TCC28-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC29 0
  (τ_TCC29-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC30 0
  (τ_TCC30-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC31 0
  (τ_TCC31-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC32 0
  (τ_TCC32-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC33 0
  (τ_TCC33-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC34 0
  (τ_TCC34-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC35 0
  (τ_TCC35-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC36 0
  (τ_TCC36-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC37 0
  (τ_TCC37-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC38 0
  (τ_TCC38-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC39 0
  (τ_TCC39-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC40 0
  (τ_TCC40-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC41 0
  (τ_TCC41-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC42 0
  (τ_TCC42-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC43 0
  (τ_TCC43-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC44 0
  (τ_TCC44-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC45 0
  (τ_TCC45-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC46 0
  (τ_TCC46-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC47 0
  (τ_TCC47-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC48 0
  (τ_TCC48-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC49 0
  (τ_TCC49-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC50 0
  (τ_TCC50-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC51 0
  (τ_TCC51-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC52 0
  (τ_TCC52-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC53 0
  (τ_TCC53-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC54 0
  (τ_TCC54-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC55 0
  (τ_TCC55-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC56 0
  (τ_TCC56-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC57 0
  (τ_TCC57-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC58 0
  (τ_TCC58-1 nil 3580739512 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC59 0
  (τ_TCC59-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC60 0
  (τ_TCC60-1 nil 3580739512 ("" (cases-tcc) nil nil) nil nil))
 (τ_TCC61 0
  (τ_TCC61-1 nil 3580758472 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC62 0
  (τ_TCC62-1 nil 3580758472 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC63 0
  (τ_TCC63-1 nil 3580758472 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC64 0
  (τ_TCC64-1 nil 3580758472 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC65 0
  (τ_TCC65-1 nil 3580758472 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC66 0
  (τ_TCC66-1 nil 3580758472 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC67 0
  (τ_TCC67-1 nil 3580758472 ("" (termination-tcc) nil nil) nil nil))
 (τ_TCC68 0
  (τ_TCC68-1 nil 3580758472 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC69 0
  (τ_TCC69-1 nil 3580758472 ("" (subtype-tcc) nil nil) nil nil))
 (τ_TCC70 0
  (τ_TCC70-1 nil 3580758472 ("" (cases-tcc) nil nil) nil nil))
 (tau_pretype_TCC1 0
  (tau_pretype_TCC1-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil
   nil))
 (tau_pretype 0
  (tau_pretype-1 nil 3580739512 ("" (judgement-tcc) nil nil) nil nil))
 (tau_preterm_TCC1 0
  (tau_preterm_TCC1-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil
   nil))
 (tau_preterm 0
  (tau_preterm-1 nil 3580739512 ("" (judgement-tcc) nil nil) nil nil))
 (tau_context_TCC1 0
  (tau_context_TCC1-1 nil 3580739512 ("" (subtype-tcc) nil nil) nil
   nil))
 (tau_context 0
  (tau_context-1 nil 3580739512 ("" (judgement-tcc) nil nil) nil nil)))
(tau_props)

