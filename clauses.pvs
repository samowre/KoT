% We represent clauses as sorted lists of integers (sorted according to absolute value)

clauses  : THEORY
BEGIN


%De Bruijn representation, a literal is either the number i of a var, or -i.
id_var: TYPE = posnat
lit: TYPE = nzint

l,x,y: VAR lit
v: VAR id_var


id_var(x): id_var = abs(x)
¬ : [lit -> lit] = LAMBDA x : -x
ltlit(x,y) : bool = abs(x) < abs(y)
index(x): nat = IF x < 0 THEN 2*(-x)-1 ELSE 2*x ENDIF


IMPORTING more_list_props[lit]
IMPORTING sortedlist[lit,index]

% clauses are lists of literals sorted according to the key function index
% a duplicate is (i,j) where NOT(ltlit(i,j) OR ltlit(j,i)), i.e. i=j or i=-j
% clauses are not supposed to contain duplicates
% clauses are also not supposed to contain 0
% preclauses are just lists of literals (does not contain 0)

% Check that the preclause c is a clause : sorted + no dupplicates
clause?(c:list[lit]) : bool = sorted?(c) AND every(LAMBDA x: NOT s_member(¬x,c))(c)



preclause: TYPE = list[lit]
clause : TYPE = (clause?)
env : TYPE = [posnat->bool]

% Formula in Conjunctive Normal Form
precnf: TYPE = list[preclause]
cnf: TYPE = list[clause]

cl,cl1,cl2: VAR preclause
acc: VAR preclause
cls,cls1,cls2: VAR precnf

Cl,Cl1,Cl2: VAR clause
Cls,Cls1,Cls2 : VAR cnf

e,e1,e2: VAR env
X: VAR set[id_var]
flag: VAR bool



% Truth value of a variable in the environment e
satisfies(e,v) : bool = e(v)
% Truth value of a literal in the environment e
satisfies(e,l) : bool = 
 IF l > 0 THEN satisfies(e,l) ELSE NOT satisfies(e,-l) ENDIF
% Truth value of a preclause in the environment e
satisfies(e,cl) : bool = 
  some[lit](LAMBDA l: satisfies(e,l))(cl)
% Truth value of a precnf in the environment e
satisfies(e, cls) : bool = 
  every(LAMBDA cl:satisfies(e,cl))(cls)


% FreeVars
FV(cl) : RECURSIVE set[id_var] = 
     CASES cl OF  
     	   null: emptyset, 
     	   cons(l,clt):  add(abs(l),FV(clt)) 
     ENDCASES
  MEASURE length

FV(cls) : RECURSIVE set[id_var] = 
     CASES cls OF 
     	   null: emptyset, 
	   cons(cl,clst): union(FV(cl),FV(clst)) 
     ENDCASES 
  MEASURE length


FV_char: LEMMA member(v,FV(cl)) IFF (member(v,cl) OR member(-v,cl))
FVs_char: LEMMA member(v,FV(cls)) IFF some(LAMBDA cl: member(v,cl) OR member(-v,cl))(cls)

FV_append : LEMMA 

     FORALL(cls1,cls2):FV(append(cls1,cls2)) = union(FV(cls1),FV(cls2))


% Lemmas on satisfiability
eqval(e1,e2,X) : bool = FORALL (i:id_var):
   member(i,X) IMPLIES e1(i)=e2(i)

eqval_clause : LEMMA	eqval(e1,e2,FV(cl)) IMPLIES satisfies(e1,cl)=satisfies(e2,cl)

eqval_clauses : LEMMA  	eqval(e1,e2,FV(cls)) IMPLIES satisfies(e1,cls)=satisfies(e2,cls)
    
sat_append : LEMMA	satisfies(e,cl1) OR satisfies(e,cl2) IMPLIES satisfies(e,append(cl1,cl2))

sat_reverse : LEMMA 	satisfies(e,cl) IMPLIES satisfies(e,reverse(cl))

sat_rev_append : LEMMA  satisfies(e,cl1) OR satisfies(e,cl2) IMPLIES satisfies(e,rev_append(cl1,cl2))

sat_cons : LEMMA        satisfies(e,l) OR satisfies(e,cl) IMPLIES satisfies(e,cons(l,cl))

sat_cons_inv : LEMMA    satisfies(e,cons(l,cl)) IMPLIES satisfies(e,l) OR satisfies(e,cl)

res_lemma : LEMMA	satisfies(e,cons(l,cl1)) AND satisfies(e,cons(¬l,cl2))  IMPLIES 
	    		satisfies(e,cl1) OR satisfies(e,cl2)


valid_clause?(cl): bool = FORALL e: satisfies(e,cl)

eqv_clause?(cl1,cl2): bool = FORALL e: satisfies(e,cl1) IFF satisfies(e,cl2)
eqv_cnf?(cls1,cls2): bool = FORALL e: satisfies(e,cls1) IFF satisfies(e,cls2)

sat_valid: LEMMA valid_clause?(cl) IMPLIES FORALL cls: eqv_cnf?(cons(cl,cls),cls)

valid_char: LEMMA valid_clause?(cl) IFF some(LAMBDA x: member(¬x,cl))(cl)

% Insert a literal x in a clause, ie ordered preclause, dupplicates free
insert(x:lit,Cl:{c:clause | NOT member(¬x,c) }): clause = s_insert(x,Cl)

% Creates a clause from a preclause, ie sort the list and remove dupplicates
mkclause(cl:{c:preclause | NOT valid_clause?(c) }): clause = sort(cl)

% Satisfiability is preserved
sat_insert: LEMMA      FORALL Cl: FORALL (x:lit | NOT member(-x,Cl)):
	    	       satisfies(e,x) OR satisfies(e,Cl) IMPLIES satisfies(e,insert(x,Cl))

sat_mkclause:THEOREM   NOT valid_clause?(cl) AND satisfies(e,cl) IMPLIES satisfies(e,mkclause(cl))




%%% Interestingly, we never need to check that clauses are really ordered. 
%%% "Clause-hood" is, however, an invariant of "resolve" defined below.

resolve_aux(cl1, cl2, acc, flag): RECURSIVE lift[preclause] =
  CASES cl1 OF
    null: up(rev_append(acc, cl2)),
    cons(h1, t1):
      CASES cl2 OF
        null: up(rev_append(acc, cl1)),
	cons(h2, t2):
	  IF ltlit(h1, h2)        THEN resolve_aux(t1, cl2, cons(h1, acc), flag)
	  ELSIF h1 = h2           THEN resolve_aux(t1, t2, cons(h1, acc), flag)
	  % We found an occurence of the resolution rule.
	  % Let's make flag false so that finding another occurence gives TRUE
	  ELSIF h1 = -h2 AND flag THEN resolve_aux(t1, t2, acc, false)
	  ELSIF ltlit(h2, h1)     THEN resolve_aux(cl1, t2, cons(h2, acc), flag)
	  % h1 = h2 AND NOT flag: the clause is trivially true
	  ELSE bottom ENDIF
      ENDCASES
  ENDCASES
MEASURE length(cl1) + length(cl2)

%  IF null?(cl1) THEN up(rev_append(acc,cl2)) 
%  ELSIF null?(cl2) THEN up(rev_append(acc,cl1))
%  ELSE LET h1 = car(cl1) IN LET h2 = car(cl2) IN 
%    IF ltlit(h1,h2) THEN resolve_aux(cdr(cl1), cl2, cons(h1,acc),flag) 
%    ELSIF h1=h2 THEN resolve_aux(cdr(cl1),cdr(cl2),cons(h1,acc),flag) 
%    ELSIF h1=-h2 AND flag THEN resolve_aux(cdr(cl1),cdr(cl2),acc,false)
%    ELSIF h1=-h2 AND NOT flag then bottom 
%    ELSE resolve_aux(cl1,cdr(cl2),cons(h2,acc),flag) % ltlit(h2,h1)
%  ENDIF ENDIF
%  MEASURE length(cl1) + length(cl2)

resolve(cl1,cl2) : lift[preclause] = resolve_aux(cl1,cl2,null,true)

% Clause hood is an invariant of resolve
resolve_aux_clause: RECURSIVE JUDGEMENT 
		    resolve_aux(Cl1,Cl2, 
		    		(Acc:{a:preclause | clause?(reverse(a)) 
		    	      	AND (reverse(a) < Cl1) 
				AND (reverse(a) < Cl2) }),flag) % reverse(Acc)::clause
		    HAS_TYPE lift[clause]
resolve_clause:     JUDGEMENT resolve(Cl1,Cl2) HAS_TYPE lift[clause]



resolve_aux_cond(e, cl1, cl2, acc, flag): bool = 
         (satisfies(e,acc) OR 
         (NOT flag AND (satisfies(e,cl1) OR satisfies(e,cl2))) OR 
         (flag AND satisfies(e,cl1) AND satisfies(e,cl2)))

%resolve_aux : THEOREM     resolve_aux_cond(e,cl1,cl2,acc,flag)
%	      		  AND up?(resolve_aux(cl1,cl2,acc,flag))
%                	  IMPLIES satisfies(e,down(resolve_aux(cl1,cl2,acc,flag)))
%
%resolve_char : THEOREM    satisfies(e,cl1) AND satisfies(e,cl2) AND up?(resolve(cl1,cl2))
%	              	  IMPLIES satisfies(e,down(resolve(cl1,cl2)))


itresolve_aux(cls,acc) : RECURSIVE lift[preclause] = 
	CASES cls OF
	      null: up(acc),
	      cons(cl,clst): LET res = resolve(acc,cl) IN 
      	      		     IF up?(res) THEN itresolve_aux(clst,down(res)) 
			     		 ELSE bottom
      ENDIF ENDCASES
MEASURE length(cls)

itresolve(cls) : lift[preclause] =
	       CASES cls OF
	       null: bottom,
	       cons(cl,clst): itresolve_aux(clst,cl)
	       ENDCASES

itresolve_aux_clause: JUDGEMENT itresolve_aux(Cls,(acc:clause)) HAS_TYPE lift[clause]
itresolve_clause:     JUDGEMENT itresolve(Cls) HAS_TYPE lift[clause]

%itresolve_aux : THEOREM    every(LAMBDA cl: satisfies(e,cl), cls) AND 
%              		   satisfies(e,acc) AND up?(itresolve_aux(cls,acc)) IMPLIES 
%           		   satisfies(e,down(itresolve_aux(cls,acc)))


%itresolve : THEOREM        every(LAMBDA cl:satisfies(e,cl), cls) AND
%            		   up?(itresolve(cls)) IMPLIES 
%           		   satisfies(e,down(itresolve(cls)))



END clauses
