
Context file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why-0.1/myexamples/.pvscontext written
Context changed to ~/Documents/STAGE/pvs4.2/lib/PVS2Why-0.1/myexamples/
Loading prelude library context from /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/...
/home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/.pvscontext is empty
  no PVS files loaded
;;; Compiling file pvs-lib.lisp
;;; Writing fasl file pvs-lib.lfasl
;;; Fasl write complete

Loading pvs-lib.lfasl...
;   Fast loading
;      /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/pvs-lib.lfasl

Loading prelude library context from /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/...
/home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/.pvscontext is empty
  no PVS files loaded
;;; Compiling file pvs-lib.lisp
;;; Writing fasl file pvs-lib.lfasl
;;; Fasl write complete

Loading pvs-lib.lfasl...
;     Fast loading
;        /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/pvs-lib.lfasl

Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/pregexp.lfasl
;       Fast loading
;          /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/pregexp.lfasl

pregexp.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/prooflite.lfasl
;       Fast loading
;          /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/prooflite.lfasl

prooflite.lfasl loaded
pvs-lib.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/util.lfasl
util.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/why.lfasl
Warning: Ignoring declaration of unrecognized ftype: (FUNCTION (T) WHY-GENERIC-TYPE)
Warning: The type subform of the FTYPE declaration must be a subtype of FUNCTION: (FTYPE (FUNCTION (T) WHY-GENERIC-TYPE) PARAMETERS)

why.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/pvs2why.lfasl
pvs2why.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/why2xml.lfasl
why2xml.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/why2java.lfasl
why2java.lfasl loaded
pvs-lib.lfasl loaded
Parsing function_update
function_update parsed in 0.00 seconds
Typechecking function_update
function_update typechecked in 0.12s: 2 TCCs, 0 proved, 0 subsumed, 2 unproved
***
*** Processing ./function_update.pvs via PVS2Why-0.1 (11/10/07)
***
Function: pvs2why-theory: function_update 
Function: pvs2why-one-theory: function_update 
Function: pvs2why-type-parameters:  
Result: nil 
here1Function: pvs2why-imports:  
Function: pvs2why-declaration: #<const-decl function_update.f>
Function: pvs2why-resolution-destructive #<const-decl function_update.f>  x:
                                                                            below(42)  nat
Function: pvs2why-type-subtype: below(42)
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
Function: pvs2why*-application: x * x - 4 nat 
decl-type numfield 
Function: pvs2why-primitive-app:  x * x  4    numfield  numfield  nat 
Function: pvs2why*-list:  x * x  4   numfield  numfield  
Function: pvs2why*-application: x * x numfield 
decl-type numfield 
Function: pvs2why-primitive-app:  x  x    numfield  numfield  numfield 
Function: pvs2why*-list:  x  x   numfield  numfield  
Function: pvs2why*-name-expr: x   x: below(42) . x   numfield 
Function: pvs2why-type-subtype: below(42)
mk-why-primitive-type: int nil nil 
mk-why-name x formal #<why-primitive-type>
Function: pvs2why*-list:  x   numfield  
Function: pvs2why*-name-expr: x   x: below(42) . x   numfield 
Function: pvs2why-type-subtype: below(42)
mk-why-primitive-type: int nil nil 
mk-why-name x formal #<why-primitive-type>
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-funtype [[numfield, numfield] -> numfield]
Function: pvs2why-type-tuple: [numfield, numfield]
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-type: domain (#<why-primitive-type> #<why-primitive-type>) range #<why-primitive-type>
mk-why-name * constant #<why-function-type>
mk-why-function-application #<why-name> (#<why-name> #<why-name>) # t nil #<why-primitive-type>  
Function: pvs2why*-list:  4   numfield  
Function: pvs2why*-number-expr: 4 numfield 
mk-why-literal 4 number
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-funtype [[numfield, numfield] -> numfield]
Function: pvs2why-type-tuple: [numfield, numfield]
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-type: domain (#<why-primitive-type> #<why-primitive-type>) range #<why-primitive-type>
mk-why-name - constant #<why-function-type>
mk-why-function-application #<why-name> (#<why-function-application> #<why-literal>) # t nil #<why-primitive-type>  
mk-why-function f (x) #<why-function-application> #<why-function-type>
mk-why-binding x #<why-primitive-type> 
Function: pvs2why-declaration: #<const-decl function_update.g>
Function: pvs2why-resolution-destructive #<const-decl function_update.g>  T
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-function-type: domain nil range #<why-array-type>
Function: pvs2why*-update-expr (f WITH [(0) := 0]) WITH [(2) := -4] T 
Function: pvs2why-update (f WITH [(0) := 0]) WITH [(2) := -4] T 
Function: pvs2why*-update-expr (f WITH [(0) := 0]) T 
Function: pvs2why-update (f WITH [(0) := 0]) T 
Function: pvs2why*-name-expr: f   T 
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-name f constant #<why-array-type>
Recordtype? t1 t2 T T 
Function: pvs2why-coerce-types T T 
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
Function: pvs2why-array-update* T f  (0) := 0  
Function: pvs2why*-number-expr: 0 T 
mk-why-literal 0 number
Function: pvs2why*-number-expr: 0 T 
mk-why-literal 0 number
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-array-assignment f #<why-literal> #<why-literal> #<why-array-type>
Recordtype? t1 t2 nil T 
Function: pvs2why-coerce-types [below(42) -> int] T 
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-name E45 variable #<why-array-type>
Function: pvs2why-array-update* [below(42) -> int] E45  (2) := -4  
Function: pvs2why*-application: -4 T 
decl-type numfield 
Function: pvs2why-primitive-app:  4    numfield  T 
Function: pvs2why*-list:  4   numfield  
Function: pvs2why*-number-expr: 4 numfield 
mk-why-literal 4 number
Function: pvs2why*-list:   
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
Function: pvs2why-type-funtype [numfield -> numfield]
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
mk-why-name - constant #<why-function-type>
mk-why-function-application #<why-name> (#<why-literal>) # t nil #<why-array-type>  
Function: pvs2why*-number-expr: 2 T 
mk-why-literal 2 number
Function: pvs2why-type-funtype [below(42) -> int]
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: int
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-array-assignment E45 #<why-literal> #<why-function-application> #<why-array-type>
mk-why-let E45 #<why-array-assignment> #<why-array-assignment> #<why-array-type> 
mk-why-function g nil #<why-let> #<why-function-type>
mk-why-module function_update nil (#<why-function> #<why-function>) nil nil 
*** function_update (./function_update.pvs) --> ./function_update.xml
Function: pvs2why-theory: function_update 
Function: pvs2why-one-theory: function_update 
Function: pvs2why-type-parameters:  
Result: nil 
here1Function: pvs2why-imports:  
Function: pvs2why-declaration: #<const-decl function_update.f>
Function: pvs2why-resolution-destructive #<const-decl function_update.f>  x:
                                                                            below(42)  nat
Function: pvs2why-type-subtype: below(42)
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
Function: pvs2why*-application: x * x - 4 nat 
decl-type numfield 
Function: pvs2why-primitive-app:  x * x  4    numfield  numfield  nat 
Function: pvs2why*-list:  x * x  4   numfield  numfield  
Function: pvs2why*-application: x * x numfield 
decl-type numfield 
Function: pvs2why-primitive-app:  x  x    numfield  numfield  numfield 
Function: pvs2why*-list:  x  x   numfield  numfield  
Function: pvs2why*-name-expr: x   x: below(42) . x   numfield 
Function: pvs2why-type-subtype: below(42)
mk-why-primitive-type: int nil nil 
mk-why-name x formal #<why-primitive-type>
Function: pvs2why*-list:  x   numfield  
Function: pvs2why*-name-expr: x   x: below(42) . x   numfield 
Function: pvs2why-type-subtype: below(42)
mk-why-primitive-type: int nil nil 
mk-why-name x formal #<why-primitive-type>
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-funtype [[numfield, numfield] -> numfield]
Function: pvs2why-type-tuple: [numfield, numfield]
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-type: domain (#<why-primitive-type> #<why-primitive-type>) range #<why-primitive-type>
mk-why-name * constant #<why-function-type>
mk-why-function-application #<why-name> (#<why-name> #<why-name>) # t nil #<why-primitive-type>  
Function: pvs2why*-list:  4   numfield  
Function: pvs2why*-number-expr: 4 numfield 
mk-why-literal 4 number
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-funtype [[numfield, numfield] -> numfield]
Function: pvs2why-type-tuple: [numfield, numfield]
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-type: domain (#<why-primitive-type> #<why-primitive-type>) range #<why-primitive-type>
mk-why-name - constant #<why-function-type>
mk-why-function-application #<why-name> (#<why-function-application> #<why-literal>) # t nil #<why-primitive-type>  
mk-why-function f (x) #<why-function-application> #<why-function-type>
mk-why-binding x #<why-primitive-type> 
Function: pvs2why-declaration: #<const-decl function_update.g>
Function: pvs2why-resolution-destructive #<const-decl function_update.g>  T
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-function-type: domain nil range #<why-array-type>
Function: pvs2why*-update-expr (f WITH [(0) := 0]) WITH [(2) := -4] T 
Function: pvs2why-update (f WITH [(0) := 0]) WITH [(2) := -4] T 
Function: pvs2why*-update-expr (f WITH [(0) := 0]) T 
Function: pvs2why-update (f WITH [(0) := 0]) T 
Function: pvs2why*-name-expr: f   T 
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-name f constant #<why-array-type>
Recordtype? t1 t2 T T 
Function: pvs2why-coerce-types T T 
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
Function: pvs2why-array-update* T f  (0) := 0  
Function: pvs2why*-number-expr: 0 T 
mk-why-literal 0 number
Function: pvs2why*-number-expr: 0 T 
mk-why-literal 0 number
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-array-assignment f #<why-literal> #<why-literal> #<why-array-type>
Recordtype? t1 t2 nil T 
Function: pvs2why-coerce-types [below(42) -> int] T 
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-name E48 variable #<why-array-type>
Function: pvs2why-array-update* [below(42) -> int] E48  (2) := -4  
Function: pvs2why*-application: -4 T 
decl-type numfield 
Function: pvs2why-primitive-app:  4    numfield  T 
Function: pvs2why*-list:  4   numfield  
Function: pvs2why*-number-expr: 4 numfield 
mk-why-literal 4 number
Function: pvs2why*-list:   
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
Function: pvs2why-type-funtype [numfield -> numfield]
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
mk-why-name - constant #<why-function-type>
mk-why-function-application #<why-name> (#<why-literal>) # t nil #<why-array-type>  
Function: pvs2why*-number-expr: 2 T 
mk-why-literal 2 number
Function: pvs2why-type-funtype [below(42) -> int]
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: int
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-array-assignment E48 #<why-literal> #<why-function-application> #<why-array-type>
mk-why-let E48 #<why-array-assignment> #<why-array-assignment> #<why-array-type> 
mk-why-function g nil #<why-let> #<why-function-type>
mk-why-module function_update nil (#<why-function> #<why-function>) nil nil 
Enter lifted expr: x*x-4
lift-let*-why-function-application: #<why-function-application> 
lift-let*-default: #<why-name> 
lift-let*-list: (#<why-function-application> #<why-literal>) 
lift-let*-why-function-application: #<why-function-application> 
lift-let*-default: #<why-name> 
lift-let*-list: (#<why-name> #<why-name>) 
lift-let*-default: #<why-name> 
lift-let*-default: #<why-name> 
lift-let*-default: #<why-literal> 
Leave lifted-expr : (#<why-function-application>)
Translated lifted-expr: x*x-4
Prefix: nil
lift-let*-why-array-assignment: #<why-array-assignment> 
lift-let*-default: #<why-literal> 

*** No methods applicable for generic function #<standard-generic-function type> with args (E48) of classes (symbol) (./function_update.pvs)
