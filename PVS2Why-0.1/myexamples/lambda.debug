
Context file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why-0.1/myexamples/.pvscontext written
Context changed to ~/Documents/STAGE/pvs4.2/lib/PVS2Why-0.1/myexamples/
Loading prelude library context from /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/...
/home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/.pvscontext is empty
  no PVS files loaded
;;; Compiling file pvs-lib.lisp
;;; Writing fasl file pvs-lib.lfasl
;;; Fasl write complete

Loading pvs-lib.lfasl...
;   Fast loading
;      /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/pvs-lib.lfasl

Loading prelude library context from /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/...
/home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/.pvscontext is empty
  no PVS files loaded
;;; Compiling file pvs-lib.lisp
;;; Writing fasl file pvs-lib.lfasl
;;; Fasl write complete

Loading pvs-lib.lfasl...
;     Fast loading
;        /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/pvs-lib.lfasl

Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/pregexp.lfasl
;       Fast loading
;          /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/pregexp.lfasl

pregexp.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/prooflite.lfasl
;       Fast loading
;          /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/prooflite.lfasl

prooflite.lfasl loaded
pvs-lib.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/util.lfasl
util.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/why.lfasl
Warning: Ignoring declaration of unrecognized ftype: (FUNCTION (T) WHY-GENERIC-TYPE)
Warning: The type subform of the FTYPE declaration must be a subtype of FUNCTION: (FTYPE (FUNCTION (T) WHY-GENERIC-TYPE) PARAMETERS)

why.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/pvs2why.lfasl
pvs2why.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/why2xml.lfasl
why2xml.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/why2java.lfasl
why2java.lfasl loaded
pvs-lib.lfasl loaded
Parsing lambda
lambda parsed in 0.01 seconds
Typechecking lambda
lambda_test typechecked in 0.11s: No TCCs generated
***
*** Processing ./lambda.pvs via PVS2Why-0.1 (11/10/07)
***
Function: pvs2why-theory: lambda_test 
Function: pvs2why-one-theory: lambda_test 
Function: pvs2why-type-parameters:  
Result: nil 
here1Function: pvs2why-imports:  
Function: pvs2why-declaration: #<const-decl lambda_test.t1>
Function: pvs2why-resolution-destructive #<const-decl lambda_test.t1>  i  nat
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
Function: pvs2why*-name-expr: i   i . i   nat 
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
mk-why-name i variable #<why-primitive-type>
mk-why-function t1 (i) #<why-name> #<why-function-type>
mk-why-binding i #<why-primitive-type> 
Function: pvs2why-declaration: #<const-decl lambda_test.t2>
Function: pvs2why-resolution-destructive #<const-decl lambda_test.t2>  i  nat
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
Function: pvs2why*-name-expr: i   i . i   nat 
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
mk-why-name i variable #<why-primitive-type>
mk-why-function t2 (i) #<why-name> #<why-function-type>
mk-why-binding i #<why-primitive-type> 
Function: pvs2why-declaration: #<const-decl lambda_test.plus1>
Function: pvs2why-resolution-destructive #<const-decl lambda_test.plus1>  u  v  [below(3) ->
                                                                                   nat]
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
Function: pvs2why-type-funtype [below(3) -> nat]
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-function-type: domain (#<why-array-type> #<why-array-type>) range #<why-array-type>
Function: pvs2why*-lambda-expr: LAMBDA (i): u(i) + v(i) [below(3) -> nat]
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
mk-why-binding i #<why-primitive-type> 
Recordtype? t1 t2 nat numfield 
Function: pvs2why-coerce-types nat numfield 
Recordtype? t1 t2 nat numfield 
Function: pvs2why-coerce-types nat numfield 
Coerceresult nat 
Recordtype? t1 t2 nil nil 
Function: pvs2why-coerce-types [below(3) -> nat] [below(3) -> numfield] 
Function: pvs2why*-application: u(i) + v(i) nat 
decl-type numfield 
Function: pvs2why-primitive-app:  u(i)  v(i)    numfield  numfield  nat 
Function: pvs2why*-list:  u(i)  v(i)   numfield  numfield  
Function: pvs2why*-application: u(i) numfield 
decl-type nat 
Function: pvs2why*-name-expr: u   i . i   v . v   u . u   T 
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-name u formal #<why-array-type>
Function: pvs2why*-list:  i   below(3)  
Function: pvs2why*-name-expr: i   i . i   v . v   u . u   below(3) 
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
mk-why-name i formal #<why-primitive-type>
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-subscription #<why-name> #<why-name> 
Function: pvs2why*-list:  v(i)   numfield  
Function: pvs2why*-application: v(i) numfield 
decl-type nat 
Function: pvs2why*-name-expr: v   i . i   v . v   u . u   T 
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-name v formal #<why-array-type>
Function: pvs2why*-list:  i   below(3)  
Function: pvs2why*-name-expr: i   i . i   v . v   u . u   below(3) 
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
mk-why-name i formal #<why-primitive-type>
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-subscription #<why-name> #<why-name> 
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-funtype [[numfield, numfield] -> numfield]
Function: pvs2why-type-tuple: [numfield, numfield]
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-type: domain (#<why-primitive-type> #<why-primitive-type>) range #<why-primitive-type>
mk-why-name + constant #<why-function-type>
mk-why-function-application #<why-name> (#<why-array-subscription> #<why-array-subscription>) # t nil #<why-primitive-type>  
???????Function: pvs2why-type-funtype [below(3) -> nat]
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-lambda-abstraction (#<why-binding>) #<why-function-application> #<why-array-type> 
lower 0 upper 3 - 1Function: pvs2why*-number-expr: 0 nil 
mk-why-literal 0 number
Function: pvs2why*-application: 3 - 1 number_field 
decl-type number_field 
Function: pvs2why-primitive-app:  3  1    numfield  numfield  number_field 
Function: pvs2why*-list:  3  1   numfield  numfield  
Function: pvs2why*-number-expr: 3 numfield 
mk-why-literal 3 number
Function: pvs2why*-list:  1   numfield  
Function: pvs2why*-number-expr: 1 numfield 
mk-why-literal 1 number
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: number_field
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-funtype [[numfield, numfield] -> numfield]
Function: pvs2why-type-tuple: [numfield, numfield]
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-type: domain (#<why-primitive-type> #<why-primitive-type>) range #<why-primitive-type>
mk-why-name - constant #<why-function-type>
mk-why-function-application #<why-name> (#<why-literal> #<why-literal>) # t nil #<why-primitive-type>  
Function: pvs2why-type-funtype [below(3) -> nat]
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-array-literal #<why-function-application> #<why-literal> #<why-lambda-abstraction> #<why-array-type>
mk-why-function plus1 (u v) #<why-array-literal> #<why-function-type>
mk-why-binding u #<why-array-type> 
mk-why-binding v #<why-array-type> 
Function: pvs2why-declaration: #<const-decl lambda_test.plus2>
Function: pvs2why-resolution-destructive #<const-decl lambda_test.plus2>  u  v  T
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-function-type: domain (#<why-array-type> #<why-array-type>) range #<why-array-type>
Function: pvs2why*-lambda-expr: LAMBDA (i): u(i) + v(i) T
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
mk-why-binding i #<why-primitive-type> 
Recordtype? t1 t2 nat numfield 
Function: pvs2why-coerce-types nat numfield 
Recordtype? t1 t2 nat numfield 
Function: pvs2why-coerce-types nat numfield 
Coerceresult nat 
Recordtype? t1 t2 T nil 
Function: pvs2why-coerce-types T [below(3) -> numfield] 
Function: pvs2why*-application: u(i) + v(i) nat 
decl-type numfield 
Function: pvs2why-primitive-app:  u(i)  v(i)    numfield  numfield  nat 
Function: pvs2why*-list:  u(i)  v(i)   numfield  numfield  
Function: pvs2why*-application: u(i) numfield 
decl-type nat 
Function: pvs2why*-name-expr: u   i . i   v . v   u . u   T 
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-name u formal #<why-array-type>
Function: pvs2why*-list:  i   below(3)  
Function: pvs2why*-name-expr: i   i . i   v . v   u . u   below(3) 
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
mk-why-name i formal #<why-primitive-type>
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-subscription #<why-name> #<why-name> 
Function: pvs2why*-list:  v(i)   numfield  
Function: pvs2why*-application: v(i) numfield 
decl-type nat 
Function: pvs2why*-name-expr: v   i . i   v . v   u . u   T 
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-name v formal #<why-array-type>
Function: pvs2why*-list:  i   below(3)  
Function: pvs2why*-name-expr: i   i . i   v . v   u . u   below(3) 
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
mk-why-name i formal #<why-primitive-type>
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-subscription #<why-name> #<why-name> 
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-funtype [[numfield, numfield] -> numfield]
Function: pvs2why-type-tuple: [numfield, numfield]
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-type: domain (#<why-primitive-type> #<why-primitive-type>) range #<why-primitive-type>
mk-why-name + constant #<why-function-type>
mk-why-function-application #<why-name> (#<why-array-subscription> #<why-array-subscription>) # t nil #<why-primitive-type>  
???????Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-lambda-abstraction (#<why-binding>) #<why-function-application> #<why-array-type> 
lower 0 upper 3 - 1Function: pvs2why*-number-expr: 0 nil 
mk-why-literal 0 number
Function: pvs2why*-application: 3 - 1 number_field 
decl-type number_field 
Function: pvs2why-primitive-app:  3  1    numfield  numfield  number_field 
Function: pvs2why*-list:  3  1   numfield  numfield  
Function: pvs2why*-number-expr: 3 numfield 
mk-why-literal 3 number
Function: pvs2why*-list:  1   numfield  
Function: pvs2why*-number-expr: 1 numfield 
mk-why-literal 1 number
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: number_field
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-funtype [[numfield, numfield] -> numfield]
Function: pvs2why-type-tuple: [numfield, numfield]
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-type: domain (#<why-primitive-type> #<why-primitive-type>) range #<why-primitive-type>
mk-why-name - constant #<why-function-type>
mk-why-function-application #<why-name> (#<why-literal> #<why-literal>) # t nil #<why-primitive-type>  
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-array-literal #<why-function-application> #<why-literal> #<why-lambda-abstraction> #<why-array-type>
mk-why-function plus2 (u v) #<why-array-literal> #<why-function-type>
mk-why-binding u #<why-array-type> 
mk-why-binding v #<why-array-type> 
Function: pvs2why-declaration: #<const-decl lambda_test.plus>
Function: pvs2why-resolution-destructive #<const-decl lambda_test.plus>  f  g  [nat ->
                                                                                  nat]
Function: pvs2why-type-funtype [nat -> nat]
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
Function: pvs2why-type-funtype [nat -> nat]
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
Function: pvs2why-type-funtype [nat -> nat]
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
mk-why-function-type: domain (#<why-function-type> #<why-function-type>) range #<why-function-type>
Function: pvs2why*-lambda-expr: LAMBDA (j): f(j) + g(j) [nat -> nat]
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-binding j #<why-primitive-type> 
Recordtype? t1 t2 nat numfield 
Function: pvs2why-coerce-types nat numfield 
Recordtype? t1 t2 nat numfield 
Function: pvs2why-coerce-types nat numfield 
Coerceresult nat 
Recordtype? t1 t2 nil nil 
Function: pvs2why-coerce-types [nat -> nat] [nat -> numfield] 
Function: pvs2why*-application: f(j) + g(j) nat 
decl-type numfield 
Function: pvs2why-primitive-app:  f(j)  g(j)    numfield  numfield  nat 
Function: pvs2why*-list:  f(j)  g(j)   numfield  numfield  
Function: pvs2why*-application: f(j) numfield 
decl-type nat 
Function: pvs2why*-name-expr: f   j . j   g . g   f . f   [nat -> nat] 
Function: pvs2why-type-funtype [nat -> nat]
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
mk-why-name f formal #<why-function-type>
Function: pvs2why*-list:  j   nat  
Function: pvs2why*-name-expr: j   j . j   g . g   f . f   nat 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-name j formal #<why-primitive-type>
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-application #<why-name> (#<why-name>) # nil nil #<why-primitive-type>  
Function: pvs2why*-list:  g(j)   numfield  
Function: pvs2why*-application: g(j) numfield 
decl-type nat 
Function: pvs2why*-name-expr: g   j . j   g . g   f . f   [nat -> nat] 
Function: pvs2why-type-funtype [nat -> nat]
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
mk-why-name g formal #<why-function-type>
Function: pvs2why*-list:  j   nat  
Function: pvs2why*-name-expr: j   j . j   g . g   f . f   nat 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-name j formal #<why-primitive-type>
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-application #<why-name> (#<why-name>) # nil nil #<why-primitive-type>  
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-funtype [[numfield, numfield] -> numfield]
Function: pvs2why-type-tuple: [numfield, numfield]
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-type: domain (#<why-primitive-type> #<why-primitive-type>) range #<why-primitive-type>
mk-why-name + constant #<why-function-type>
mk-why-function-application #<why-name> (#<why-function-application> #<why-function-application>) # t nil #<why-primitive-type>  
???????Function: pvs2why-type-funtype [nat -> nat]
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
mk-why-lambda-abstraction (#<why-binding>) #<why-function-application> #<why-function-type> 
mk-why-function plus (f g) #<why-lambda-abstraction> #<why-function-type>
mk-why-binding f #<why-function-type> 
mk-why-binding g #<why-function-type> 
mk-why-module lambda_test nil (#<why-function> #<why-function> #<why-function> #<why-function> #<why-function>) nil nil 
*** lambda_test (./lambda.pvs) --> ./lambda_test.xml
Function: pvs2why-theory: lambda_test 
Function: pvs2why-one-theory: lambda_test 
Function: pvs2why-type-parameters:  
Result: nil 
here1Function: pvs2why-imports:  
Function: pvs2why-declaration: #<const-decl lambda_test.t1>
Function: pvs2why-resolution-destructive #<const-decl lambda_test.t1>  i  nat
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
Function: pvs2why*-name-expr: i   i . i   nat 
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
mk-why-name i variable #<why-primitive-type>
mk-why-function t1 (i) #<why-name> #<why-function-type>
mk-why-binding i #<why-primitive-type> 
Function: pvs2why-declaration: #<const-decl lambda_test.t2>
Function: pvs2why-resolution-destructive #<const-decl lambda_test.t2>  i  nat
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
Function: pvs2why*-name-expr: i   i . i   nat 
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
mk-why-name i variable #<why-primitive-type>
mk-why-function t2 (i) #<why-name> #<why-function-type>
mk-why-binding i #<why-primitive-type> 
Function: pvs2why-declaration: #<const-decl lambda_test.plus1>
Function: pvs2why-resolution-destructive #<const-decl lambda_test.plus1>  u  v  [below(3) ->
                                                                                   nat]
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
Function: pvs2why-type-funtype [below(3) -> nat]
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-function-type: domain (#<why-array-type> #<why-array-type>) range #<why-array-type>
Function: pvs2why*-lambda-expr: LAMBDA (i): u(i) + v(i) [below(3) -> nat]
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
mk-why-binding i #<why-primitive-type> 
Recordtype? t1 t2 nat numfield 
Function: pvs2why-coerce-types nat numfield 
Recordtype? t1 t2 nat numfield 
Function: pvs2why-coerce-types nat numfield 
Coerceresult nat 
Recordtype? t1 t2 nil nil 
Function: pvs2why-coerce-types [below(3) -> nat] [below(3) -> numfield] 
Function: pvs2why*-application: u(i) + v(i) nat 
decl-type numfield 
Function: pvs2why-primitive-app:  u(i)  v(i)    numfield  numfield  nat 
Function: pvs2why*-list:  u(i)  v(i)   numfield  numfield  
Function: pvs2why*-application: u(i) numfield 
decl-type nat 
Function: pvs2why*-name-expr: u   i . i   v . v   u . u   T 
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-name u formal #<why-array-type>
Function: pvs2why*-list:  i   below(3)  
Function: pvs2why*-name-expr: i   i . i   v . v   u . u   below(3) 
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
mk-why-name i formal #<why-primitive-type>
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-subscription #<why-name> #<why-name> 
Function: pvs2why*-list:  v(i)   numfield  
Function: pvs2why*-application: v(i) numfield 
decl-type nat 
Function: pvs2why*-name-expr: v   i . i   v . v   u . u   T 
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-name v formal #<why-array-type>
Function: pvs2why*-list:  i   below(3)  
Function: pvs2why*-name-expr: i   i . i   v . v   u . u   below(3) 
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
mk-why-name i formal #<why-primitive-type>
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-subscription #<why-name> #<why-name> 
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-funtype [[numfield, numfield] -> numfield]
Function: pvs2why-type-tuple: [numfield, numfield]
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-type: domain (#<why-primitive-type> #<why-primitive-type>) range #<why-primitive-type>
mk-why-name + constant #<why-function-type>
mk-why-function-application #<why-name> (#<why-array-subscription> #<why-array-subscription>) # t nil #<why-primitive-type>  
???????Function: pvs2why-type-funtype [below(3) -> nat]
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-lambda-abstraction (#<why-binding>) #<why-function-application> #<why-array-type> 
lower 0 upper 3 - 1Function: pvs2why*-number-expr: 0 nil 
mk-why-literal 0 number
Function: pvs2why*-application: 3 - 1 number_field 
decl-type number_field 
Function: pvs2why-primitive-app:  3  1    numfield  numfield  number_field 
Function: pvs2why*-list:  3  1   numfield  numfield  
Function: pvs2why*-number-expr: 3 numfield 
mk-why-literal 3 number
Function: pvs2why*-list:  1   numfield  
Function: pvs2why*-number-expr: 1 numfield 
mk-why-literal 1 number
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: number_field
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-funtype [[numfield, numfield] -> numfield]
Function: pvs2why-type-tuple: [numfield, numfield]
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-type: domain (#<why-primitive-type> #<why-primitive-type>) range #<why-primitive-type>
mk-why-name - constant #<why-function-type>
mk-why-function-application #<why-name> (#<why-literal> #<why-literal>) # t nil #<why-primitive-type>  
Function: pvs2why-type-funtype [below(3) -> nat]
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-array-literal #<why-function-application> #<why-literal> #<why-lambda-abstraction> #<why-array-type>
mk-why-function plus1 (u v) #<why-array-literal> #<why-function-type>
mk-why-binding u #<why-array-type> 
mk-why-binding v #<why-array-type> 
Function: pvs2why-declaration: #<const-decl lambda_test.plus2>
Function: pvs2why-resolution-destructive #<const-decl lambda_test.plus2>  u  v  T
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-function-type: domain (#<why-array-type> #<why-array-type>) range #<why-array-type>
Function: pvs2why*-lambda-expr: LAMBDA (i): u(i) + v(i) T
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
mk-why-binding i #<why-primitive-type> 
Recordtype? t1 t2 nat numfield 
Function: pvs2why-coerce-types nat numfield 
Recordtype? t1 t2 nat numfield 
Function: pvs2why-coerce-types nat numfield 
Coerceresult nat 
Recordtype? t1 t2 T nil 
Function: pvs2why-coerce-types T [below(3) -> numfield] 
Function: pvs2why*-application: u(i) + v(i) nat 
decl-type numfield 
Function: pvs2why-primitive-app:  u(i)  v(i)    numfield  numfield  nat 
Function: pvs2why*-list:  u(i)  v(i)   numfield  numfield  
Function: pvs2why*-application: u(i) numfield 
decl-type nat 
Function: pvs2why*-name-expr: u   i . i   v . v   u . u   T 
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-name u formal #<why-array-type>
Function: pvs2why*-list:  i   below(3)  
Function: pvs2why*-name-expr: i   i . i   v . v   u . u   below(3) 
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
mk-why-name i formal #<why-primitive-type>
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-subscription #<why-name> #<why-name> 
Function: pvs2why*-list:  v(i)   numfield  
Function: pvs2why*-application: v(i) numfield 
decl-type nat 
Function: pvs2why*-name-expr: v   i . i   v . v   u . u   T 
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-name v formal #<why-array-type>
Function: pvs2why*-list:  i   below(3)  
Function: pvs2why*-name-expr: i   i . i   v . v   u . u   below(3) 
Function: pvs2why-type-subtype: below(3)
mk-why-primitive-type: int nil nil 
mk-why-name i formal #<why-primitive-type>
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-subscription #<why-name> #<why-name> 
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-funtype [[numfield, numfield] -> numfield]
Function: pvs2why-type-tuple: [numfield, numfield]
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-type: domain (#<why-primitive-type> #<why-primitive-type>) range #<why-primitive-type>
mk-why-name + constant #<why-function-type>
mk-why-function-application #<why-name> (#<why-array-subscription> #<why-array-subscription>) # t nil #<why-primitive-type>  
???????Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-lambda-abstraction (#<why-binding>) #<why-function-application> #<why-array-type> 
lower 0 upper 3 - 1Function: pvs2why*-number-expr: 0 nil 
mk-why-literal 0 number
Function: pvs2why*-application: 3 - 1 number_field 
decl-type number_field 
Function: pvs2why-primitive-app:  3  1    numfield  numfield  number_field 
Function: pvs2why*-list:  3  1   numfield  numfield  
Function: pvs2why*-number-expr: 3 numfield 
mk-why-literal 3 number
Function: pvs2why*-list:  1   numfield  
Function: pvs2why*-number-expr: 1 numfield 
mk-why-literal 1 number
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: number_field
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-funtype [[numfield, numfield] -> numfield]
Function: pvs2why-type-tuple: [numfield, numfield]
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-type: domain (#<why-primitive-type> #<why-primitive-type>) range #<why-primitive-type>
mk-why-name - constant #<why-function-type>
mk-why-function-application #<why-name> (#<why-literal> #<why-literal>) # t nil #<why-primitive-type>  
Function: pvs2why-type-funtype T
mk-why-literal 0 int
mk-why-literal 0 int
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-array-type: #<why-literal> #<why-literal> #<why-primitive-type>
mk-why-array-literal #<why-function-application> #<why-literal> #<why-lambda-abstraction> #<why-array-type>
mk-why-function plus2 (u v) #<why-array-literal> #<why-function-type>
mk-why-binding u #<why-array-type> 
mk-why-binding v #<why-array-type> 
Function: pvs2why-declaration: #<const-decl lambda_test.plus>
Function: pvs2why-resolution-destructive #<const-decl lambda_test.plus>  f  g  [nat ->
                                                                                  nat]
Function: pvs2why-type-funtype [nat -> nat]
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
Function: pvs2why-type-funtype [nat -> nat]
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
Function: pvs2why-type-funtype [nat -> nat]
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
mk-why-function-type: domain (#<why-function-type> #<why-function-type>) range #<why-function-type>
Function: pvs2why*-lambda-expr: LAMBDA (j): f(j) + g(j) [nat -> nat]
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-binding j #<why-primitive-type> 
Recordtype? t1 t2 nat numfield 
Function: pvs2why-coerce-types nat numfield 
Recordtype? t1 t2 nat numfield 
Function: pvs2why-coerce-types nat numfield 
Coerceresult nat 
Recordtype? t1 t2 nil nil 
Function: pvs2why-coerce-types [nat -> nat] [nat -> numfield] 
Function: pvs2why*-application: f(j) + g(j) nat 
decl-type numfield 
Function: pvs2why-primitive-app:  f(j)  g(j)    numfield  numfield  nat 
Function: pvs2why*-list:  f(j)  g(j)   numfield  numfield  
Function: pvs2why*-application: f(j) numfield 
decl-type nat 
Function: pvs2why*-name-expr: f   j . j   g . g   f . f   [nat -> nat] 
Function: pvs2why-type-funtype [nat -> nat]
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
mk-why-name f formal #<why-function-type>
Function: pvs2why*-list:  j   nat  
Function: pvs2why*-name-expr: j   j . j   g . g   f . f   nat 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-name j formal #<why-primitive-type>
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-application #<why-name> (#<why-name>) # nil nil #<why-primitive-type>  
Function: pvs2why*-list:  g(j)   numfield  
Function: pvs2why*-application: g(j) numfield 
decl-type nat 
Function: pvs2why*-name-expr: g   j . j   g . g   f . f   [nat -> nat] 
Function: pvs2why-type-funtype [nat -> nat]
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
mk-why-name g formal #<why-function-type>
Function: pvs2why*-list:  j   nat  
Function: pvs2why*-name-expr: j   j . j   g . g   f . f   nat 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-name j formal #<why-primitive-type>
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-application #<why-name> (#<why-name>) # nil nil #<why-primitive-type>  
Function: pvs2why*-list:   
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-funtype [[numfield, numfield] -> numfield]
Function: pvs2why-type-tuple: [numfield, numfield]
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
Function: pvs2why-type-subtype: numfield
mk-why-primitive-type: real nil nil 
mk-why-function-type: domain (#<why-primitive-type> #<why-primitive-type>) range #<why-primitive-type>
mk-why-name + constant #<why-function-type>
mk-why-function-application #<why-name> (#<why-function-application> #<why-function-application>) # t nil #<why-primitive-type>  
???????Function: pvs2why-type-funtype [nat -> nat]
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
Function: pvs2why-type-subtype: nat
mk-why-primitive-type: int nil nil 
mk-why-function-type: domain (#<why-primitive-type>) range #<why-primitive-type>
mk-why-lambda-abstraction (#<why-binding>) #<why-function-application> #<why-function-type> 
mk-why-function plus (f g) #<why-lambda-abstraction> #<why-function-type>
mk-why-binding f #<why-function-type> 
mk-why-binding g #<why-function-type> 
mk-why-module lambda_test nil (#<why-function> #<why-function> #<why-function> #<why-function> #<why-function>) nil nil 
Enter lifted expr: i
lift-let*-default: #<why-name> 
Leave lifted-expr : (#<why-name>)
Translated lifted-expr: i
Prefix: nil
Enter lifted expr: i
lift-let*-default: #<why-name> 
Leave lifted-expr : (#<why-name>)
Translated lifted-expr: i
Prefix: nil
lift-let*-why-function-application: #<why-function-application> 
lift-let*-default: #<why-name> 
lift-let*-list: (#<why-array-subscription> #<why-array-subscription>) 
lift-let*-default: #<why-array-subscription> 
lift-let*-default: #<why-array-subscription> 
Enter lifted expr: Prelude.new_int(3-1-0+1,    new Lambda<Integer,Integer>(){
      public Integer curry(final Integer i) {
        return u[i]+v[i];      }
    }
)
lift-let*-why-array-literal: #<why-array-literal> 
lift-let*-default: #<why-lambda-abstraction> 
Leave lifted-expr : (#<why-array-literal>)
lift-let*-why-function-application: #<why-function-application> 
lift-let*-default: #<why-name> 
lift-let*-list: (#<why-array-subscription> #<why-array-subscription>) 
lift-let*-default: #<why-array-subscription> 
lift-let*-default: #<why-array-subscription> 
Translated lifted-expr: Prelude.new_int(3-1-0+1,    new Lambda<Integer,Integer>(){
      public Integer curry(final Integer i) {
        return u[i]+v[i];      }
    }
)
Prefix: nil
lift-let*-why-function-application: #<why-function-application> 
lift-let*-default: #<why-name> 
lift-let*-list: (#<why-array-subscription> #<why-array-subscription>) 
lift-let*-default: #<why-array-subscription> 
lift-let*-default: #<why-array-subscription> 
lift-let*-why-function-application: #<why-function-application> 
lift-let*-default: #<why-name> 
lift-let*-list: (#<why-array-subscription> #<why-array-subscription>) 
lift-let*-default: #<why-array-subscription> 
lift-let*-default: #<why-array-subscription> 
Enter lifted expr: Prelude.new_int(3-1-0+1,    new Lambda<Integer,Integer>(){
      public Integer curry(final Integer i) {
        return u[i]+v[i];      }
    }
)
lift-let*-why-array-literal: #<why-array-literal> 
lift-let*-default: #<why-lambda-abstraction> 
Leave lifted-expr : (#<why-array-literal>)
lift-let*-why-function-application: #<why-function-application> 
lift-let*-default: #<why-name> 
lift-let*-list: (#<why-array-subscription> #<why-array-subscription>) 
lift-let*-default: #<why-array-subscription> 
lift-let*-default: #<why-array-subscription> 
Translated lifted-expr: Prelude.new_int(3-1-0+1,    new Lambda<Integer,Integer>(){
      public Integer curry(final Integer i) {
        return u[i]+v[i];      }
    }
)
Prefix: nil
lift-let*-why-function-application: #<why-function-application> 
lift-let*-default: #<why-name> 
lift-let*-list: (#<why-array-subscription> #<why-array-subscription>) 
lift-let*-default: #<why-array-subscription> 
lift-let*-default: #<why-array-subscription> 
lift-let*-why-function-application: #<why-function-application> 
lift-let*-default: #<why-name> 
lift-let*-list: (#<why-function-application> #<why-function-application>) 
lift-let*-why-function-application: #<why-function-application> 
lift-let*-default: #<why-name> 
lift-let*-list: (#<why-name>) 
lift-let*-default: #<why-name> 
lift-let*-why-function-application: #<why-function-application> 
lift-let*-default: #<why-name> 
lift-let*-list: (#<why-name>) 
lift-let*-default: #<why-name> 
Enter lifted expr:     new Lambda<Integer,Integer>(){
      public Integer curry(final Integer j) {
        return f.curry(j)+g.curry(j);      }
    }

lift-let*-default: #<why-lambda-abstraction> 
Leave lifted-expr : (#<why-lambda-abstraction>)
lift-let*-why-function-application: #<why-function-application> 
lift-let*-default: #<why-name> 
lift-let*-list: (#<why-function-application> #<why-function-application>) 
lift-let*-why-function-application: #<why-function-application> 
lift-let*-default: #<why-name> 
lift-let*-list: (#<why-name>) 
lift-let*-default: #<why-name> 
lift-let*-why-function-application: #<why-function-application> 
lift-let*-default: #<why-name> 
lift-let*-list: (#<why-name>) 
lift-let*-default: #<why-name> 
Translated lifted-expr:     new Lambda<Integer,Integer>(){
      public Integer curry(final Integer j) {
        return f.curry(j)+g.curry(j);      }
    }

Prefix: nil
lift-let*-why-function-application: #<why-function-application> 
lift-let*-default: #<why-name> 
lift-let*-list: (#<why-function-application> #<why-function-application>) 
lift-let*-why-function-application: #<why-function-application> 
lift-let*-default: #<why-name> 
lift-let*-list: (#<why-name>) 
lift-let*-default: #<why-name> 
lift-let*-why-function-application: #<why-function-application> 
lift-let*-default: #<why-name> 
lift-let*-list: (#<why-name>) 
lift-let*-default: #<why-name> 
*** lambda_test (./lambda.pvs) --> ./lambda_test.java
