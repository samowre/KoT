Allegro CL Enterprise Edition
8.2 [64-bit Mac OS X (Intel)] (Nov 15, 2011 17:45)
Copyright (C) 1985-2010, Franz Inc., Oakland, CA, USA.  All Rights Reserved.

This development copy of Allegro CL is licensed to:
   [TC8101] SRI International

;; Optimization settings: safety 1, space 1, speed 3, debug 1.
;; For a complete description of all compiler switches given the
;; current optimization settings evaluate (explain-compiler-settings).
;;---
;; Current reader case mode: :case-sensitive-lower
; Loading
;    /Users/shankar/projects/KoT/svn/KoT/PVS2Why-0.1/lib/pvs2why-init.lisp

Context file /Users/shankar/projects/KoT/svn/KoT/PVS2Why-0.1/myexamples/.pvscontext written
Context changed to ~/projects/KoT/svn/KoT/PVS2Why-0.1/myexamples/
Loading prelude library context from /Users/shankar/projects/KoT/svn/KoT/PVS2Why/...
/Users/shankar/projects/KoT/svn/KoT/PVS2Why/.pvscontext is empty
  no PVS files loaded
;;; Compiling file pvs-lib.lisp
;;; Writing fasl file pvs-lib.n64fasl
;;; Fasl write complete

Loading pvs-lib.n64fasl...
;   Fast loading
;      /Users/shankar/projects/KoT/svn/KoT/PVS2Why/pvs-lib.n64fasl

Prelude library ProofLite not found
Loading file /Users/shankar/projects/KoT/svn/KoT/PVS2Why/util.n64fasl
;     Fast loading
;        /Users/shankar/projects/KoT/svn/KoT/PVS2Why/util.n64fasl
Warning: NOW-TODAY, :OPERATOR was defined in
         /Users/shankar/pvs/src/ProofLite/proveit-init.lisp and is now
         being defined in util.lisp

util.n64fasl loaded
Loading file /Users/shankar/projects/KoT/svn/KoT/PVS2Why/why.n64fasl
;     Fast loading
;        /Users/shankar/projects/KoT/svn/KoT/PVS2Why/why.n64fasl
Warning: Ignoring declaration of unrecognized ftype:
         (FUNCTION (T) WHY-GENERIC-TYPE)
Warning: The type subform of the FTYPE declaration must be a subtype of
         FUNCTION: (FTYPE (FUNCTION (T) WHY-GENERIC-TYPE) PARAMETERS)

why.n64fasl loaded
Loading file /Users/shankar/projects/KoT/svn/KoT/PVS2Why/pvs2why.n64fasl
;     Fast loading
;        /Users/shankar/projects/KoT/svn/KoT/PVS2Why/pvs2why.n64fasl
Warning: TEST, :OPERATOR was defined in
         /Users/shankar/pvs/src/nlyices/nlyices.lisp and is now being
         defined in pvs2why.lisp
Warning: CONSTANT-FORMALS, :OPERATOR was defined in
         /Users/shankar/pvs/src/groundeval/pvs2clean.lisp and is now
         being defined in pvs2why.lisp

pvs2why.n64fasl loaded
Loading file /Users/shankar/projects/KoT/svn/KoT/PVS2Why/why2xml.n64fasl
;     Fast loading
;        /Users/shankar/projects/KoT/svn/KoT/PVS2Why/why2xml.n64fasl

why2xml.n64fasl loaded
Loading file /Users/shankar/projects/KoT/svn/KoT/PVS2Why/why2java.n64fasl
;     Fast loading
;        /Users/shankar/projects/KoT/svn/KoT/PVS2Why/why2java.n64fasl

why2java.n64fasl loaded
pvs-lib.n64fasl loaded
Parsing test_aliasing
test_aliasing parsed in 0.05 seconds
Typechecking test_aliasing

 In declaration g:
  added conversion restrict[nat, below(3), nat]
             
  to f, converting
     [nat -> nat]
  to [below(3) -> nat]

test_aliasing typechecked in 0.16s: 1 TCC, 0 proved, 0 subsumed, 1 unproved; 1 conversion
***
*** Processing ./test_aliasing.pvs via PVS2Why-0.1 (11/10/07)
***
Result: nil 
here1Function: pvs2why*-application: i = 0 nat 
decl-type boolean 
Function: pvs2why-primitive-app:  i  0    number  number  nat 
Function: pvs2why*-name-expr: i   i: below(3) . i   number 
Function: pvs2why*-application: i = 1 nat 
decl-type boolean 
Function: pvs2why-primitive-app:  i  1    number  number  nat 
Function: pvs2why*-name-expr: i   i: below(3) . i   number 
Function: pvs2why*-application: i = 2 nat 
decl-type boolean 
Function: pvs2why-primitive-app:  i  2    number  number  nat 
Function: pvs2why*-name-expr: i   i: below(3) . i   number 
Coerceresult nat 
Function: pvs2why*-application: tab1(i) + tab2(i) nat 
decl-type numfield 
Function: pvs2why-primitive-app:  tab1
                                  (i)  tab2
                                       (i)    numfield  numfield  nat 
Function: pvs2why*-application: tab1(i) numfield 
decl-type nat 
Function: pvs2why*-name-expr: tab1   i:
                                     below(3) . i   tab2:
                                                    T . tab2   tab1:
                                                               T . tab1   T 
Function: pvs2why*-name-expr: i   i:
                                  below(3) . i   tab2:
                                                 T . tab2   tab1:
                                                            T . tab1   below(3) 
Function: pvs2why*-application: tab2(i) numfield 
decl-type nat 
Function: pvs2why*-name-expr: tab2   i:
                                     below(3) . i   tab2:
                                                    T . tab2   tab1:
                                                               T . tab1   T 
Function: pvs2why*-name-expr: i   i:
                                  below(3) . i   tab2:
                                                 T . tab2   tab1:
                                                            T . tab1   below(3) 
???????lower 0 upper 3 - 1Function: pvs2why*-application: 3
                                                          -
                                                          1 number_field 
decl-type number_field 
Function: pvs2why-primitive-app:  3  1    numfield  numfield  number_field 
Function: pvs2why*-name-expr: i   i: nat . i   nat 
Function: pvs2why*-application: plus
                                (restrict[nat, below(3), nat](f),
                                 tab) T 
decl-type [below(3) -> nat] 
Declared type: [[T, T] -> [below(3) -> nat]] 
Domain type:  T  T  
Function: pvs2why*-application: restrict[nat, below(3), nat](f) T 
decl-type [below(3) -> nat] 
Function: pvs2why-primitive-app:  f    [nat -> nat]  T 
Function: pvs2why*-name-expr: f   [nat -> nat] 
Function: pvs2why*-name-expr: tab   T 
Function: pvs2why*-name-expr: plus   [below(3) -> nat] 
Before Declared type: T 
Why Declared type: #<why-array-type > 
Coerceresult nat 
Function: pvs2why*-application: i + j nat 
decl-type numfield 
Function: pvs2why-primitive-app:  i  j    numfield  numfield  nat 
Function: pvs2why*-name-expr: i   j: nat . j   i: nat . i   numfield 
Function: pvs2why*-name-expr: j   j: nat . j   i: nat . i   numfield 
???????Coerceresult [nat -> nat] 
Function: pvs2why*-application: x = 0 [nat -> nat] 
decl-type boolean 
Function: pvs2why-primitive-app:  x  0    number  number  [nat -> nat] 
Function: pvs2why*-name-expr: x   x: nat . x   number 
Coerceresult nat 
Function: pvs2why*-application: x1 = 0 nat 
decl-type boolean 
Function: pvs2why-primitive-app:  x1  0    number  number  nat 
Function: pvs2why*-name-expr: x1   x1: nat . x1   x: nat . x   number 
Function: pvs2why*-application: h(x)(x1) nat 
decl-type nat 
Function: pvs2why*-application: h(x) [nat -> nat] 
decl-type [nat -> nat] 
Declared type: [nat -> [nat -> nat]] 
Domain type:  nat  
Function: pvs2why*-name-expr: x   x1: nat . x1   x: nat . x   nat 
Function: pvs2why*-name-expr: h   x1:
                                  nat . x1   x: nat . x   [nat -> nat] 
Before Declared type: [nat -> nat] 
Why Declared type: #<why-function-type > 
Function: pvs2why*-name-expr: x1   x1: nat . x1   x: nat . x   nat 
???????Function: pvs2why*-application: h(x) [nat -> nat] 
decl-type [nat -> nat] 
Declared type: [nat -> [nat -> nat]] 
Domain type:  nat  
Function: pvs2why*-name-expr: x   x: nat . x   nat 
Function: pvs2why*-name-expr: h   x: nat . x   [nat -> nat] 
Before Declared type: [nat -> nat] 
Why Declared type: #<why-function-type > 
???????Function: pvs2why*-name-expr: g   T 
## test ##Function: pvs2why*-name-expr: hj   test 
Enter lifted expr: 3
Leave lifted-expr : (#<why-literal >)
Translated lifted-expr: 3
Prefix: nil
Enter lifted expr: 42
Leave lifted-expr : (#<why-literal >)
Translated lifted-expr: 42
Prefix: nil
Enter lifted expr: 7
Leave lifted-expr : (#<why-literal >)
Translated lifted-expr: 7
Prefix: nil
Enter lifted expr: 7
Leave lifted-expr : (#<why-literal >)
Translated lifted-expr: 7
Prefix: nil
Enter lifted expr: Prelude.new_int(3-1-0+1,    new Lambda<Integer,Integer>(){
      public Integer curry(final Integer i) {
        return tab1[i]+tab2[i];      }
    }
)
Leave lifted-expr : (#<why-array-literal >)
Translated lifted-expr: Prelude.new_int(3-1-0+1,    new Lambda<Integer,Integer>(){
      public Integer curry(final Integer i) {
        return tab1[i]+tab2[i];      }
    }
)
Prefix: nil
Enter lifted expr: i
Leave lifted-expr : (#<why-name >)
Translated lifted-expr: i
Prefix: nil
Enter lifted expr: plus(pvsrestrict(f),tab)
Leave lifted-expr : (#<why-function-application >)
Translated lifted-expr: plus(pvsrestrict(f),tab)
Prefix: nil
Enter lifted expr:     new Lambda<Integer,Integer>(){
      public Integer curry(final Integer j) {
        return i+j;      }
    }

Leave lifted-expr : (#<why-lambda-abstraction >)
Translated lifted-expr:     new Lambda<Integer,Integer>(){
      public Integer curry(final Integer j) {
        return i+j;      }
    }

Prefix: nil
Enter lifted expr:     new Lambda<Integer,Lambda<Integer,Integer>>(){
      public Lambda<Integer,Integer> curry(final Integer x) {
        return (x == 0 ?     new Lambda<Integer,Integer>(){
      public Integer curry(final Integer x1) {
        return (x1 == 0 ? 1 : h(x).curry(x1));      }
    }
 : h(x));      }
    }

Leave lifted-expr : (#<why-lambda-abstraction >)
Translated lifted-expr:     new Lambda<Integer,Lambda<Integer,Integer>>(){
      public Lambda<Integer,Integer> curry(final Integer x) {
        return (x == 0 ?     new Lambda<Integer,Integer>(){
      public Integer curry(final Integer x1) {
        return (x1 == 0 ? 1 : h(x).curry(x1));      }
    }
 : h(x));      }
    }

Prefix: nil
Enter lifted expr: new test(g,0)
Leave lifted-expr : (#<why-record-literal >)
Translated lifted-expr: new test(g,0)
Prefix: nil
Enter lifted expr: hj.update(1)
Leave lifted-expr : (#<why-record-assignment >)
Translated lifted-expr: hj.update(1)
Prefix: nil
*** test_aliasing (./test_aliasing.pvs) --> ./test_aliasing.java
