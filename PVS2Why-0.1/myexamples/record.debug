
Context file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why-0.1/myexamples/.pvscontext written
Context changed to ~/Documents/STAGE/pvs4.2/lib/PVS2Why-0.1/myexamples/
Loading prelude library context from /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/...
/home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/.pvscontext is empty
  no PVS files loaded
;;; Compiling file pvs-lib.lisp
;;; Writing fasl file pvs-lib.lfasl
;;; Fasl write complete

Loading pvs-lib.lfasl...
;   Fast loading
;      /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/pvs-lib.lfasl

Loading prelude library context from /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/...
/home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/.pvscontext is empty
  no PVS files loaded
;;; Compiling file pvs-lib.lisp
;;; Writing fasl file pvs-lib.lfasl
;;; Fasl write complete

Loading pvs-lib.lfasl...
;     Fast loading
;        /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/pvs-lib.lfasl

Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/pregexp.lfasl
;       Fast loading
;          /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/pregexp.lfasl

pregexp.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/prooflite.lfasl
;       Fast loading
;          /home/toubhans/Documents/STAGE/pvs4.2/lib/ProofLite/prooflite.lfasl

prooflite.lfasl loaded
pvs-lib.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/util.lfasl
util.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/why.lfasl
Warning: Ignoring declaration of unrecognized ftype: (FUNCTION (T) WHY-GENERIC-TYPE)
Warning: The type subform of the FTYPE declaration must be a subtype of FUNCTION: (FTYPE (FUNCTION (T) WHY-GENERIC-TYPE) PARAMETERS)

why.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/pvs2why.lfasl
pvs2why.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/why2xml.lfasl
why2xml.lfasl loaded
Loading file /home/toubhans/Documents/STAGE/pvs4.2/lib/PVS2Why/why2java.lfasl
why2java.lfasl loaded
pvs-lib.lfasl loaded
Parsing record
record parsed in 0.00 seconds
Typechecking record
record typechecked in 0.01s: No TCCs generated
***
*** Processing ./record.pvs via PVS2Why-0.1 (11/10/07)
***
Function: pvs2why-theory: record 
Function: pvs2why-one-theory: record 
Function: pvs2why-type-parameters:  
Result: nil 
here1Function: pvs2why-imports:  
Function:pvs2why-record-definition: R 
Function: pvs2why-type-subtype: real
mk-why-primitive-type: real nil nil 
mk-why-binding y #<why-primitive-type> 
Function: pvs2why-type-subtype: real
mk-why-primitive-type: real nil nil 
mk-why-binding x #<why-primitive-type> 
Function: pvs2why-type-subtype: integer
mk-why-primitive-type: int nil nil 
mk-why-binding t #<why-primitive-type> 
mk-why-record R (#<why-binding> #<why-binding> #<why-binding>)
Function: pvs2why-declaration: #<const-decl record.a>
Function: pvs2why-resolution-destructive #<const-decl record.a>  R
Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
mk-why-function-type: domain nil range #<why-record-type>
Function: pvs2why*-record-expr: (# x := 0, y := 42, t := 3 #)   R 
Function: pvs2why*-number-expr: 42 real 
mk-why-literal 42 number
mk-why-assignment y #<why-literal> 
Function: pvs2why*-number-expr: 0 real 
mk-why-literal 0 number
mk-why-assignment x #<why-literal> 
Function: pvs2why*-number-expr: 3 integer 
mk-why-literal 3 number
mk-why-assignment t #<why-literal> 
## R ##Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
mk-why-record-literal  #<why-assignment>  #<why-assignment>  #<why-assignment>  #<why-record-type>
mk-why-function a nil #<why-record-literal> #<why-function-type>
Function: pvs2why-declaration: #<const-decl record.b>
Function: pvs2why-resolution-destructive #<const-decl record.b>  R
Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
mk-why-function-type: domain nil range #<why-record-type>
Function: pvs2why*-record-expr: (# x := 1, y := 22, t := 7 #)   R 
Function: pvs2why*-number-expr: 22 real 
mk-why-literal 22 number
mk-why-assignment y #<why-literal> 
Function: pvs2why*-number-expr: 1 real 
mk-why-literal 1 number
mk-why-assignment x #<why-literal> 
Function: pvs2why*-number-expr: 7 integer 
mk-why-literal 7 number
mk-why-assignment t #<why-literal> 
## R ##Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
mk-why-record-literal  #<why-assignment>  #<why-assignment>  #<why-assignment>  #<why-record-type>
mk-why-function b nil #<why-record-literal> #<why-function-type>
Function: pvs2why-declaration: #<const-decl record.c>
Function: pvs2why-resolution-destructive #<const-decl record.c>  R
Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
mk-why-function-type: domain nil range #<why-record-type>
Function: pvs2why*-record-expr: (# x := 0, y := 42, t := 3 #)   R 
Function: pvs2why*-number-expr: 42 real 
mk-why-literal 42 number
mk-why-assignment y #<why-literal> 
Function: pvs2why*-number-expr: 0 real 
mk-why-literal 0 number
mk-why-assignment x #<why-literal> 
Function: pvs2why*-number-expr: 3 integer 
mk-why-literal 3 number
mk-why-assignment t #<why-literal> 
## R ##Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
mk-why-record-literal  #<why-assignment>  #<why-assignment>  #<why-assignment>  #<why-record-type>
mk-why-function c nil #<why-record-literal> #<why-function-type>
Function: pvs2why-declaration: #<const-decl record.d>
Function: pvs2why-resolution-destructive #<const-decl record.d>  R
Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
mk-why-function-type: domain nil range #<why-record-type>
Function: pvs2why*-update-expr a WITH [(y) := 4, (x) := 41] R 
Function: pvs2why-update a WITH [(y) := 4, (x) := 41] R 
Function: pvs2why*-name-expr: a   R 
Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
Function: pvs2why-constant: a #<const-decl record.a>
Function: pvs2why-resolution: a
Function: pvs2why-declaration: #<const-decl record.a>
Function: pvs2why-type-name: R
Function: pvs2why-type-eq-decl: #<type-eq-decl record.R>
mk-why-record-type: R nil 
mk-why-name a constant #<why-record-type>
mk-why-function-application #<why-name> nil # nil nil nil  
Recordtype? t1 t2 R R 
Function: pvs2why-coerce-types R R 
Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
Function: pvs2why-record-update* R a  (y) := 4  (x) := 41  R 
Function: pvs2why*-number-expr: 41 real 
mk-why-literal 41 number
mk-why-assignment x #<why-literal> 
Function: pvs2why*-number-expr: 4 real 
mk-why-literal 4 number
mk-why-assignment y #<why-literal> 
Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
mk-why-record-assignment a  #<why-assignment>  #<why-assignment>  #<why-record-type>
mk-why-function d nil #<why-record-assignment> #<why-function-type>
mk-why-module record nil (#<why-record> #<why-function> #<why-function> #<why-function> #<why-function>) nil nil 
*** record (./record.pvs) --> ./record.xml
Function: pvs2why-theory: record 
Function: pvs2why-one-theory: record 
Function: pvs2why-type-parameters:  
Result: nil 
here1Function: pvs2why-imports:  
Function:pvs2why-record-definition: R 
Function: pvs2why-type-subtype: real
mk-why-primitive-type: real nil nil 
mk-why-binding y #<why-primitive-type> 
Function: pvs2why-type-subtype: real
mk-why-primitive-type: real nil nil 
mk-why-binding x #<why-primitive-type> 
Function: pvs2why-type-subtype: integer
mk-why-primitive-type: int nil nil 
mk-why-binding t #<why-primitive-type> 
mk-why-record R (#<why-binding> #<why-binding> #<why-binding>)
Function: pvs2why-declaration: #<const-decl record.a>
Function: pvs2why-resolution-destructive #<const-decl record.a>  R
Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
mk-why-function-type: domain nil range #<why-record-type>
Function: pvs2why*-record-expr: (# x := 0, y := 42, t := 3 #)   R 
Function: pvs2why*-number-expr: 42 real 
mk-why-literal 42 number
mk-why-assignment y #<why-literal> 
Function: pvs2why*-number-expr: 0 real 
mk-why-literal 0 number
mk-why-assignment x #<why-literal> 
Function: pvs2why*-number-expr: 3 integer 
mk-why-literal 3 number
mk-why-assignment t #<why-literal> 
## R ##Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
mk-why-record-literal  #<why-assignment>  #<why-assignment>  #<why-assignment>  #<why-record-type>
mk-why-function a nil #<why-record-literal> #<why-function-type>
Function: pvs2why-declaration: #<const-decl record.b>
Function: pvs2why-resolution-destructive #<const-decl record.b>  R
Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
mk-why-function-type: domain nil range #<why-record-type>
Function: pvs2why*-record-expr: (# x := 1, y := 22, t := 7 #)   R 
Function: pvs2why*-number-expr: 22 real 
mk-why-literal 22 number
mk-why-assignment y #<why-literal> 
Function: pvs2why*-number-expr: 1 real 
mk-why-literal 1 number
mk-why-assignment x #<why-literal> 
Function: pvs2why*-number-expr: 7 integer 
mk-why-literal 7 number
mk-why-assignment t #<why-literal> 
## R ##Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
mk-why-record-literal  #<why-assignment>  #<why-assignment>  #<why-assignment>  #<why-record-type>
mk-why-function b nil #<why-record-literal> #<why-function-type>
Function: pvs2why-declaration: #<const-decl record.c>
Function: pvs2why-resolution-destructive #<const-decl record.c>  R
Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
mk-why-function-type: domain nil range #<why-record-type>
Function: pvs2why*-record-expr: (# x := 0, y := 42, t := 3 #)   R 
Function: pvs2why*-number-expr: 42 real 
mk-why-literal 42 number
mk-why-assignment y #<why-literal> 
Function: pvs2why*-number-expr: 0 real 
mk-why-literal 0 number
mk-why-assignment x #<why-literal> 
Function: pvs2why*-number-expr: 3 integer 
mk-why-literal 3 number
mk-why-assignment t #<why-literal> 
## R ##Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
mk-why-record-literal  #<why-assignment>  #<why-assignment>  #<why-assignment>  #<why-record-type>
mk-why-function c nil #<why-record-literal> #<why-function-type>
Function: pvs2why-declaration: #<const-decl record.d>
Function: pvs2why-resolution-destructive #<const-decl record.d>  R
Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
mk-why-function-type: domain nil range #<why-record-type>
Function: pvs2why*-update-expr a WITH [(y) := 4, (x) := 41] R 
Function: pvs2why-update a WITH [(y) := 4, (x) := 41] R 
Function: pvs2why*-name-expr: a   R 
Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
Function: pvs2why-constant: a #<const-decl record.a>
Function: pvs2why-resolution: a
Function: pvs2why-declaration: #<const-decl record.a>
Function: pvs2why-type-name: R
Function: pvs2why-type-eq-decl: #<type-eq-decl record.R>
mk-why-record-type: R nil 
mk-why-name a constant #<why-record-type>
mk-why-function-application #<why-name> nil # nil nil nil  
Recordtype? t1 t2 R R 
Function: pvs2why-coerce-types R R 
Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
Function: pvs2why-record-update* R a  (y) := 4  (x) := 41  R 
Function: pvs2why*-number-expr: 41 real 
mk-why-literal 41 number
mk-why-assignment x #<why-literal> 
Function: pvs2why*-number-expr: 4 real 
mk-why-literal 4 number
mk-why-assignment y #<why-literal> 
Function: pvs2why-type-record: R 
mk-why-record-type: R nil 
mk-why-record-assignment a  #<why-assignment>  #<why-assignment>  #<why-record-type>
mk-why-function d nil #<why-record-assignment> #<why-function-type>
mk-why-module record nil (#<why-record> #<why-function> #<why-function> #<why-function> #<why-function>) nil nil 
Enter lifted expr: new R(3,0,42)
lift-let*-why-record-literal: #<why-record-literal> 
lift-let*-list: (#<why-assignment> #<why-assignment> #<why-assignment>) 
lift-let*-why-assignment: #<why-assignment> 
lift-let*-default: #<why-literal> 
lift-let*-why-assignment: #<why-assignment> 
lift-let*-default: #<why-literal> 
lift-let*-why-assignment: #<why-assignment> 
lift-let*-default: #<why-literal> 
Leave lifted-expr : (#<why-record-literal>)
Translated lifted-expr: new R(3,0,42)
Prefix: nil
Enter lifted expr: new R(7,1,22)
lift-let*-why-record-literal: #<why-record-literal> 
lift-let*-list: (#<why-assignment> #<why-assignment> #<why-assignment>) 
lift-let*-why-assignment: #<why-assignment> 
lift-let*-default: #<why-literal> 
lift-let*-why-assignment: #<why-assignment> 
lift-let*-default: #<why-literal> 
lift-let*-why-assignment: #<why-assignment> 
lift-let*-default: #<why-literal> 
Leave lifted-expr : (#<why-record-literal>)
Translated lifted-expr: new R(7,1,22)
Prefix: nil
Enter lifted expr: new R(3,0,42)
lift-let*-why-record-literal: #<why-record-literal> 
lift-let*-list: (#<why-assignment> #<why-assignment> #<why-assignment>) 
lift-let*-why-assignment: #<why-assignment> 
lift-let*-default: #<why-literal> 
lift-let*-why-assignment: #<why-assignment> 
lift-let*-default: #<why-literal> 
lift-let*-why-assignment: #<why-assignment> 
lift-let*-default: #<why-literal> 
Leave lifted-expr : (#<why-record-literal>)
Translated lifted-expr: new R(3,0,42)
Prefix: nil
Enter lifted expr: a.update(4,41)
lift-let*-why-record-assignment: #<why-record-assignment> 
lift-let*-list: (#<why-assignment> #<why-assignment>) 
lift-let*-why-assignment: #<why-assignment> 
lift-let*-default: #<why-literal> 
lift-let*-why-assignment: #<why-assignment> 
lift-let*-default: #<why-literal> 
Leave lifted-expr : (#<why-record-assignment>)
Translated lifted-expr: a.update(4,41)
Prefix: nil
*** record (./record.pvs) --> ./record.java
