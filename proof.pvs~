proof	: THEORY

%A proof is an array where each element is a semi-proof of a sequent, i.e., 
%a proof from other sequents.  A semi-proof consists of an array consisting of
%a sequent and proof rule.  The sequent must follow from prior sequents
%by the proof rules.  Some of the sequents in a semi-proof can be lemmas
%in which case, they are linked to semi-proofs in the larger proof.  Thus
%a proof is 2-dimensional.  The reason is so that we try to keep proofs
%parametric with respect to proofs of lemmas.

  BEGIN

  rule: TYPE = {ax, orr, norr, neg, cut, exr, allr, fscheme, pscheme,
                reflex, lemma}

  proof_step : [# sequent: sequent,
                  rule: rule,
		  subs: list[nat] #]

  proof_entry: [# lemmas : finite_sequence[sequent],
                  steps: finite_sequence[proof_step] #]

%Each proof_entry can be independently checked.  We can then
%put compose these into a proof where we associate proofs with
%the lemmas.  

		  

  					  

  					  
  

  END proof
