(rev_sortedlist
 (IMP_sortedlist_TCC1 0
  (IMP_sortedlist_TCC1-1 nil 3578150680
   ("" (typepred key) (("" (grind) nil nil)) nil)
   ((rev_key const-decl "real" rev_sortedlist nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil rev_sortedlist nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (injective? const-decl "bool" functions nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     rev_sortedlist nil))
   nil))
 (rev_sorted 0
  (rev_sorted-1 nil 3578150904
   ("" (induct sl)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (expand rev_sorted?)
        (("3" (expand reverse +)
          (("3" (use-with "append_sorted[T,rev_key]")
            (("1" (prop)
              (("1" (hide 1 4 3)
                (("1" (lemma "order_char[T,rev_key]")
                  (("1"
                    (inst - "reverse(cons2_var)"
                     "cons(cons1_var,null)")
                    (("1" (prop)
                      (("1" (grind) nil nil)
                       ("2" (skeep)
                        (("2" (use-with "member_reverse" -1)
                          (("2"
                            (use "car_sorted[T,key]"
                                 (a x sl "cons(cons1_var,cons2_var)"))
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append def-decl "list[T]" list_props nil)
    (order_char formula-decl nil sortedlist nil)
    (member def-decl "bool" list_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (member_reverse formula-decl nil more_list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (car_sorted formula-decl nil sortedlist nil)
    (< const-decl "[[(sorted?), (sorted?)] -> bool]" sortedlist nil)
    (append_sorted formula-decl nil sortedlist nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons1_var skolem-const-decl "T" rev_sortedlist nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons2_var skolem-const-decl "list[T]" rev_sortedlist nil)
    (rev_key const-decl "real" rev_sortedlist nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil rev_sortedlist nil)
    (reverse def-decl "list[T]" list_props nil)
    (rev_sorted? const-decl "bool" rev_sortedlist nil)
    (sorted? def-decl "bool" sortedlist nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     rev_sortedlist nil)
    (injective? const-decl "bool" functions nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (order_reverse_TCC1 0
  (order_reverse_TCC1-1 nil 3578150680
   ("" (skeep)
    (("" (use member_reverse)
      (("" (inst - "car(sl1)")
        (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((member_reverse formula-decl nil more_list_props nil)
    (T formal-type-decl nil rev_sortedlist nil)
    (sorted? def-decl "bool" sortedlist nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     rev_sortedlist nil)
    (injective? const-decl "bool" functions nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sl1 skolem-const-decl "(sorted?[T, key])" rev_sortedlist nil))
   nil))
 (order_reverse 0
  (order_reverse-1 nil 3578156759
   ("" (skeep)
    (("" (prop)
      (("1" (grind) nil nil)
       ("2" (use "order_char[T,key]")
        (("2" (prop) (("2" (postpone) nil nil)) nil)) nil)
       ("3" (postpone) nil nil) ("4" (postpone) nil nil))
      nil))
    nil)
   nil shostak)))

