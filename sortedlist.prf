(sortedlist
 (sorted?_TCC1 0
  (sorted?_TCC1-1 nil 3482515380 3482859739
   ("" (termination-tcc) nil nil) proved
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   114 50 nil nil))
 (sorted_prop_TCC1 0
  (sorted_prop_TCC1-1 nil 3482515380 3482859739
   ("" (subtype-tcc) nil nil) proved nil 9 10 nil nil))
 (sorted_prop_TCC2 0
  (sorted_prop_TCC2-1 nil 3482515380 3482859739
   ("" (subtype-tcc) nil nil) proved nil 33 10 nil nil))
 (sorted_prop 0
  (sorted_prop-1 nil 3482867210 3482867257
   ("" (induct lAA)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)
     ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil)
     ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil)
     ("10" (grind) nil nil) ("11" (grind) nil nil)
     ("12" (grind) nil nil) ("13" (grind) nil nil)
     ("14" (grind) nil nil) ("15" (grind) nil nil)
     ("16" (grind) nil nil) ("17" (grind) nil nil)
     ("18" (grind) nil nil) ("19" (grind) nil nil)
     ("20" (grind) nil nil) ("21" (grind) nil nil)
     ("22" (grind) nil nil) ("23" (grind) nil nil))
    nil)
   proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sorted? def-decl "bool" sortedlist nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (injective? const-decl "bool" functions nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   46761 460 t shostak))
 (sorted_clause 0
  (sorted_clause-1 nil 3482867338 3482867767
   ("" (induct sAA)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem-typepred)
      (("3" (flatten)
        (("3" (skolem-typepred)
          (("3" (flatten)
            (("3" (lemma sorted_prop)
              (("3" (inst -1 "cons(cons1_var!1, cons2_var!1)")
                (("3" (assert)
                  (("3" (split -1)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (replace -2 -3)
                        (("2" (inst -3 e!1)
                          (("2" (assert)
                            (("2" (grind)
                              (("2"
                                (expand member -3)
                                (("2"
                                  (lift-if -3)
                                  (("2"
                                    (split -3)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (replace -1 -2 RL)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((sorted_prop formula-decl nil sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (injective? const-decl "bool" functions nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   429767 180 t shostak))
 (sorted_contains_TCC1 0
  (sorted_contains_TCC1-1 nil 3482782183 3482863679
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (use sorted_prop)
        (("" (replace -2)
          (("" (flatten)
            (("" (assert)
              (("" (split -1)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (replace -4 -2) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sorted_prop formula-decl nil sortedlist nil)
    (sorted? def-decl "bool" sortedlist nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   91001 90 t nil))
 (sorted_contains_TCC2 0
  (sorted_contains_TCC2-1 nil 3482782183 3482859739
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   44 40 nil nil))
 (contains_lemma 0
  (contains_lemma-1 nil 3482782276 3482867173
   ("" (skolem-typepred)
    (("" (generalize sAA!1 "sA")
      (("" (induct sA)
        (("1" (assert) (("1" (flatten) (("1" (grind) nil nil)) nil))
          nil)
         ("2" (skolem-typepred)
          (("2" (flatten)
            (("2" (expand sorted? -2)
              (("2" (lift-if)
                (("2" (split)
                  (("1" (split)
                    (("1" (assert)
                      (("1" (expand sorted_contains +)
                        (("1" (expand member +)
                          (("1" (lift-if)
                            (("1" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split)
                                  (("1"
                                    (grind)
                                    (("1"
                                      (typepred "key(e!1)")
                                      (("1"
                                        (typepred key)
                                        (("1"
                                          (expand injective?)
                                          (("1"
                                            (inst
                                             -1
                                             "e!1"
                                             "cons1_var!1")
                                            (("1"
                                              (replace -3 -1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand sorted_contains +)
                        (("2" (lift-if)
                          (("2" (split)
                            (("1" (flatten) (("1" (grind) nil nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand member +)
                                    (("1"
                                      (typepred key)
                                      (("1"
                                        (expand injective?)
                                        (("1"
                                          (inst -1 "e!1" "cons1_var!1")
                                          (("1"
                                            (replace -2 -1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand member +)
                                    (("2"
                                      (replace -3 2)
                                      (("2"
                                        (case "e!1=cons1_var!1")
                                        (("1"
                                          (replace -1 2)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (replace 1 3)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split)
                    (("1" (expand sorted? -2)
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (assert) (("1" (grind) nil nil)) nil)
                           ("2" (flatten) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) nil nil))
                    nil)
                   ("3" (split)
                    (("1" (ground) (("1" (grind) nil nil)) nil)
                     ("2" (flatten) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((member def-decl "bool" list_props nil)
    (sorted_contains def-decl "bool" sortedlist nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (injective? const-decl "bool" functions nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (list_induction formula-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   239 120 t shostak))
 (sorted_implies_no_duplicates 0
  (sorted_implies_no_duplicates-1 nil 3482868062 3482868320
   ("" (induct sAA)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem-typepred)
      (("3" (flatten)
        (("3" (expand no_duplicates? 1)
          (("3" (expand setlist? 1)
            (("3" (lemma sorted_prop)
              (("3" (inst -1 "cons(cons1_var!1, cons2_var!1)")
                (("3" (assert)
                  (("3" (split -1)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (split 1)
                        (("1" (replace -3 -4)
                          (("1" (lemma sorted_clause)
                            (("1"
                              (inst -1 cons1_var!1
                               "cons(cons1_var!1, cons2_var!1)")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((sorted_prop formula-decl nil sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sorted_clause formula-decl nil sortedlist nil)
    (member def-decl "bool" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (setlist? def-decl "bool" minlist nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (no_duplicates? const-decl "bool" sortedlist nil)
    (sorted? def-decl "bool" sortedlist nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   257982 140 t shostak))
 (remove_TCC1 0
  (remove_TCC1-1 nil 3482515380 3482859739 ("" (grind) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (member def-decl "bool" list_props nil))
   32 20 t nil))
 (remove_TCC2 0
  (Yes "" 3482515617 3482864329
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (split 1)
        (("1" (lemma sorted_prop)
          (("1" (inst -1 sAA!1)
            (("1" (assert)
              (("1" (replace -4 -1)
                (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (skolem-typepred)
          (("2" (split 1)
            (("1" (flatten)
              (("1" (split)
                (("1" (use sorted_clause)
                  (("1" (assert)
                    (("1" (replace -6 -1) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -4 1)
                  (("2" (expand member 1) (("2" (flatten) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand member -1)
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (replace -4 -1) (("1" (assert) nil nil)) nil)
                     ("2" (replace -4 -1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((member def-decl "bool" list_props nil)
    (sorted_clause formula-decl nil sortedlist nil)
    (sorted_prop formula-decl nil sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sorted? def-decl "bool" sortedlist nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   636646 130 t shostak)
  (remove_TCC2-1 nil 3482515380 3482515440 ("" (subtype-tcc) nil nil)
   unfinished nil 359 180 nil nil))
 (remove_TCC3 0
  (remove_TCC3-1 nil 3482515380 3482864750
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (split 2)
          (("1" (flatten)
            (("1" (split 1)
              (("1" (replace -5 -2)
                (("1" (expand member -2)
                  (("1" (split -2)
                    (("1" (replace -1 -2)
                      (("1" (replace -2 -4) (("1" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (lemma sorted_clause)
                      (("2" (inst -1 f!2 sAA!1)
                        (("2" (assert)
                          (("2" (replace -6 -1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil)
           ("2" (flatten) nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((member def-decl "bool" list_props nil)
    (sorted_clause formula-decl nil sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sorted? def-decl "bool" sortedlist nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   408764 70 t nil))
 (remove_TCC4 0
  (remove_TCC4-1 nil 3482515380 3482866895
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (split)
        (("1" (lemma sorted_prop)
          (("1" (inst -1 "cons[T](f!1, v!1(e!1, r!1))")
            (("1" (flatten)
              (("1" (delete -1)
                (("1" (assert)
                  (("1" (hide 2)
                    (("1" (flatten)
                      (("1" (typepred "v!1(e!1, r!1)")
                        (("1" (inst -2 "car(v!1(e!1, r!1))")
                          (("1" (flatten)
                            (("1" (delete -3)
                              (("1"
                                (expand member -2 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma sorted_clause)
                                    (("1"
                                      (inst
                                       -1
                                       "car(v!1(e!1, r!1))"
                                       "sAA!1")
                                      (("1"
                                        (replace -5 -1)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (lemma sorted_clause)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma sorted_prop)
                            (("2" (inst -1 sAA!1)
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -5 -1)
                                    (("2"
                                      (assert)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma sorted_prop)
                          (("2" (inst -1 sAA!1)
                            (("2" (replace -2)
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -3 -1)
                                    (("2"
                                      (assert)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil)
         ("2" (skolem-typepred)
          (("2" (split 1)
            (("1" (flatten)
              (("1" (expand member -1)
                (("1" (split -1)
                  (("1" (split 1)
                    (("1" (replace -2 -1) (("1" (assert) nil nil)) nil)
                     ("2" (replace -1 1) (("2" (grind) nil nil)) nil))
                    nil)
                   ("2" (split 1)
                    (("1" (typepred "v!1(e!1, r!1)")
                      (("1" (inst -2 f!2)
                        (("1" (replace -4 -2) (("1" (flatten) nil nil))
                          nil))
                        nil)
                       ("2" (lemma sorted_prop)
                        (("2" (inst -1 sAA!1)
                          (("2" (assert)
                            (("2" (replace -5 -1)
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "v!1(e!1, r!1)")
                      (("1" (inst -2 f!2)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (expand member 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -5 3)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma sorted_prop)
                        (("2" (inst -1 sAA!1)
                          (("2" (assert)
                            (("2" (replace -4 -1)
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand member -1)
                (("2" (assert)
                  (("2" (replace -3 -1)
                    (("2" (assert)
                      (("2" (split -1)
                        (("1" (grind) nil nil)
                         ("2" (expand member 2)
                          (("2" (flatten)
                            (("2" (typepred "v!1(e!1, r!1)")
                              (("1"
                                (inst -2 f!2)
                                (("1"
                                  (replace -2 3)
                                  (("1"
                                    (split 3)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma sorted_prop)
                                (("2"
                                  (inst -1 "cons(f!1, r!1)")
                                  (("2"
                                    (assert)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((sorted_prop formula-decl nil sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (sorted_clause formula-decl nil sortedlist nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (injective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (r!1 skolem-const-decl "list[T]" sortedlist nil)
    (sorted? def-decl "bool" sortedlist nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   2136690 710 t nil))
 (cons_sorted 0
  (cons_sorted-1 nil 3482517322 3482867173 ("" (grind) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil))
   23 30 t shostak))
 (sorted_include_TCC1 0
  (sorted_include_TCC1-1 nil 3482782183 3482866987
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (use sorted_prop)
            (("" (assert)
              (("" (split -1)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sorted_prop formula-decl nil sortedlist nil)
    (sorted? def-decl "bool" sortedlist nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   49492 90 t nil))
 (sorted_include_TCC2 0
  (sorted_include_TCC2-1 nil 3482782183 3482867069
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (lemma sorted_prop)
            (("" (inst -1 sBB!1)
              (("" (assert)
                (("" (split -1)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sorted_prop formula-decl nil sortedlist nil)
    (sorted? def-decl "bool" sortedlist nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   74924 90 t nil))
 (sorted_include_TCC3 0
  (sorted_include_TCC3-1 nil 3482782183 3482866918
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   60 30 nil nil))
 (sorted_include_TCC4 0
  (sorted_include_TCC4-1 nil 3482782183 3482867118
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (lemma sorted_prop)
            (("" (inst -1 sBB!1)
              (("" (assert)
                (("" (split -1)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sorted_prop formula-decl nil sortedlist nil)
    (sorted? def-decl "bool" sortedlist nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil sortedlist nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   42354 70 t nil))
 (sorted_include_TCC5 0
  (sorted_include_TCC5-1 nil 3482782183 3482866918
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   75 50 nil nil))
 (sorted_include_TCC6 0
  (sorted_include_TCC6-1 nil 3482782183 3482866918
   ("" (cond-disjoint-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   66 30 nil nil))
 (sorted_include_TCC7 0
  (sorted_include_TCC7-1 nil 3482782183 3482866918
   ("" (cond-coverage-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sortedlist nil)
    (list type-decl nil list_adt nil)
    (sorted? def-decl "bool" sortedlist nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   47 20 nil nil))
 (subset_include 0
  (subset_include-1 nil 3482868394 3483112465
   ("" (induct sBB)
    (("1" (grind) nil nil)
     ("2" (grind)
      (("1" (expand subset)
        (("1" (lift-if)
          (("1" (split 1)
            (("1" (propax) nil nil)
             ("2" (flatten)
              (("2" (expand sorted_include)
                (("2" (lift-if)
                  (("2" (split -3)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand subset)
        (("2" (lift-if)
          (("2" (split -3)
            (("1" (grind) nil nil)
             ("2" (flatten) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skolem-typepred)
      (("3" (flatten)
        (("3" (skolem-typepred)
          (("3" (split 1)
            (("1" (flatten)
              (("1" (expand sorted_include -1)
                (("1" (lift-if)
                  (("1" (split -1)
                    (("1" (grind) nil nil)
                     ("2" (assert)
                      (("2" (lift-if)
                        (("2" (split -1)
                          (("1" (grind) nil nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (split -1)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (lemma sorted_prop)
                                        (("1"
                                          (inst
                                           -1
                                           "cons(cons1_var!1, cons2_var!1)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "sorted?(cons2_var!1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -6
                                                   "cdr(sAA!1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand subset 3)
                                                      (("1"
                                                        (split 3)
                                                        (("1"
                                                          (typepred
                                                           key)
                                                          (("1"
                                                            (expand
                                                             injective?)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "car(sAA!1)"
                                                               "cons1_var!1")
                                                              (("1"
                                                                (replace
                                                                 -4)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           every_member_subset
                                                           ("k"
                                                            "cdr(sAA!1)"
                                                            "l"
                                                            "cons(cons1_var!1, cons2_var!1)"))
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (delete
                                                               -1)
                                                              (("2"
                                                                (lemma
                                                                 every_member_subset
                                                                 ("k"
                                                                  "cdr(sAA!1)"
                                                                  "l"
                                                                  "cons2_var!1"))
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (delete
                                                                     -1)
                                                                    (("2"
                                                                      (skolem!)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           -7
                                                                           a!1)
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (split -1)
                                                (("1" (grind) nil nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (lemma sorted_prop)
                                        (("2"
                                          (inst
                                           -1
                                           "cons(cons1_var!1, cons2_var!1)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "sorted?(cons2_var!1)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (inst -5 sAA!1)
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         every_member_subset
                                                         ("k"
                                                          "sAA!1"
                                                          "l"
                                                          "cons2_var!1"))
                                                        (("1"
                                                          (rewrite -1)
                                                          (("1"
                                                            (delete -1)
                                                            (("1"
                                                              (lemma
                                                               every_member_subset
                                                               ("k"
                                                                "sAA!1"
                                                                "l"
                                                                "cons(cons1_var!1, cons2_var!1)"))
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (skolem!)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (inst
                                                                       -8
                                                                       a!1)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (split -1)
                                                (("1" (grind) nil nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (lemma sorted_prop)
                (("2" (inst -1 "cons(cons1_var!1, cons2_var!1)")
                  (("2" (assert)
                    (("2" (case "sorted?(cons2_var!1)")
                      (("1" (replace -1)
                        (("1" (expand sorted_include 1)
                          (("1" (assert)
                            (("1" (lift-if)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (split 2)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand subset -4)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (lemma sorted_clause)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "car(sAA!1)"
                                                     "cons(cons1_var!1, cons2_var!1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         member
                                                         -4)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred key)
                                                    (("1"
                                                      (expand
                                                       injective?)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "car(sAA!1)"
                                                         "cons1_var!1")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (expand
                                                             subset
                                                             -5)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -5)
                                                                  (("1"
                                                                    (hide
                                                                     2
                                                                     4)
                                                                    (("1"
                                                                      (lemma
                                                                       every_member_subset
                                                                       ("k"
                                                                        "cdr(sAA!1)"
                                                                        "l"
                                                                        "cons(cons1_var!1, cons2_var!1)"))
                                                                      (("1"
                                                                        (replace
                                                                         -6)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (lemma
                                                                             every_member_subset
                                                                             ("k"
                                                                              "cdr(sAA!1)"
                                                                              "l"
                                                                              "cons2_var!1"))
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (delete
                                                                                 -1)
                                                                                (("1"
                                                                                  (case
                                                                                   "subset(cdr(sAA!1), cons2_var!1)")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -10
                                                                                     "cdr(sAA!1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -9)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         1)
                                                                                        (("2"
                                                                                          (skolem!)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -2
                                                                                               a!1)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   member
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       sorted_prop)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         sAA!1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (delete
                                                                                                                 -1
                                                                                                                 -2)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   sorted_clause)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     a!1
                                                                                                                     sAA!1)
                                                                                                                    (("2"
                                                                                                                      (split)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma sorted_prop)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "cons(cons1_var!1, cons2_var!1)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (delete -1)
                                                          (("2"
                                                            (inst
                                                             -5
                                                             sAA!1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 every_member_subset
                                                                 ("k"
                                                                  "sAA!1"
                                                                  "l"
                                                                  "cons(cons1_var!1, cons2_var!1)"))
                                                                (("2"
                                                                  (lemma
                                                                   every_member_subset
                                                                   ("k"
                                                                    "sAA!1"
                                                                    "l"
                                                                    "cons2_var!1"))
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skolem!)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           a!1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               member
                                                                               -2)
                                                                              (("2"
                                                                                (lemma
                                                                                 sorted_clause)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   a!1
                                                                                   sAA!1)
                                                                                  (("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       member
                                                                                       -1)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (split -1)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sorted? def-decl "bool" sortedlist nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sorted_include def-decl "bool" sortedlist nil)
    (subset def-decl "bool" minlist nil)
    (T formal-type-decl nil sortedlist nil)
    (list_induction formula-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sorted_prop formula-decl nil sortedlist nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (key formal-const-decl "{k: [T -> real] | injective?(k)}"
     sortedlist nil)
    (injective? const-decl "bool" functions nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (every_member_subset formula-decl nil minlist nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sorted_clause formula-decl nil sortedlist nil))
   2412233 710 t shostak)))

