(certificates
 (run_command_TCC1 0
  (run_command_TCC1-1 nil 3525631352 ("" (grind) nil nil)
   ((map adt-def-decl "list[T1]" list_adt_map nil)) nil))
 (satisfies_with 0
  (satisfies_with-1 nil 3525631582 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (width formal-const-decl "posnat" certificates nil)
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (clause type-eq-decl nil clauses nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lookup const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" certificates nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   shostak))
 (satisfies_map 0
  (satisfies_map-1 nil 3525632632
   ("" (induct-and-simplify "args") nil nil)
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (clause type-eq-decl nil clauses nil)
    (clauses type-eq-decl nil certificates nil)
    (env type-eq-decl nil clauses nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (satisfies const-decl "bool" certificates nil)
    (every adt-def-decl "boolean" list_adt nil)
    (lit type-eq-decl nil clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (below type-eq-decl nil naturalnumbers nil)
    (width formal-const-decl "posnat" certificates nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (run_command 0
  (run_command-1 nil 3525631353
   ("" (lemma "satisfies_with")
    (("" (lemma "satisfies_map")
      (("" (lemma "itresolve")
        (("" (lemma "mkclause")
          (("" (induct "cmd")
            (("1" (skolem 1 ("t!1" "fr!1"))
              (("1" (skosimp*)
                (("1" (expand "run_command" :if-simplifies T)
                  (("1"
                    (inst -7 "state!1" "t!1" "mkclause(goal!1(fr!1))"
                     "e!1")
                    (("1" (split -7)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (delete 2)
                        (("3" (inst -4 "goal!1(fr!1)" "e!1")
                          (("3" (split -4)
                            (("1" (propax) nil nil)
                             ("2" (delete 2)
                              (("2"
                                (delete -1)
                                (("2"
                                  (delete -2)
                                  (("2"
                                    (delete -2)
                                    (("2"
                                      (delete -2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem 1 ("t!1" "args!1"))
              (("2" (skosimp*)
                (("2" (expand "run_command" :if-simplifies T)
                  (("2" (lift-if)
                    (("2" (split)
                      (("1" (split)
                        (("1" (flatten)
                          (("1"
                            (inst -9 "state!1" "t!1" "down(itresolve(map
                                            (LAMBDA
                                             (i: below(width)):
                                             state!1(i))
                                            (args!1)))" "e!1")
                            (("1" (split -9)
                              (("1" (propax) nil nil)
                               ("2" (propax) nil nil)
                               ("3"
                                (delete 2)
                                (("3"
                                  (inst -8 "state!1" "args!1" "e!1")
                                  (("3"
                                    (split -8)
                                    (("1"
                                      (inst
                                       -8
                                       "e!1"
                                       "map(LAMBDA (i: below(width)): state!1(i))
                                  (args!1)")
                                      (("1"
                                        (split -8)
                                        (("1" (propax) nil nil)
                                         ("2" (propax) nil nil)
                                         ("3" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("2" (split)
                        (("1" (flatten) nil nil)
                         ("2" (flatten) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((satisfies_map formula-decl nil certificates nil)
    (mkclause formula-decl nil clauses nil)
    (every adt-def-decl "boolean" lift_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (itresolve const-decl "lift[clause]" clauses nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (lookup const-decl "bool" clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mkclause def-decl "clause" clauses nil)
    (command_induction formula-decl nil certificates nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (run_command const-decl "lift[clauses]" certificates nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (lift type-decl nil lift_adt nil)
    (satisfies const-decl "bool" certificates nil)
    (satisfies const-decl "bool" certificates nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (clauses type-eq-decl nil certificates nil)
    (clause type-eq-decl nil clauses nil)
    (width formal-const-decl "posnat" certificates nil)
    (cnf type-eq-decl nil certificates nil)
    (lit type-eq-decl nil clauses nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (noclauses formal-const-decl "posnat" certificates nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (env type-eq-decl nil clauses nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (command type-decl nil certificates nil)
    (itresolve formula-decl nil clauses nil)
    (satisfies_with formula-decl nil certificates nil))
   shostak))
 (run_commands_TCC1 0
  (run_commands_TCC1-1 nil 3525633837 ("" (subtype-tcc) nil nil) nil
   nil))
 (run_commands_TCC2 0
  (run_commands_TCC2-1 nil 3525633837 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (run_command const-decl "lift[clauses]" certificates nil))
   nil))
 (run_commands_TCC3 0
  (run_commands_TCC3-1 nil 3525633837 ("" (subtype-tcc) nil nil) nil
   nil))
 (run_commands 0
  (run_commands-1 nil 3525633844
   ("" (lemma "run_command")
    (("" (induct "cmds")
      (("1" (grind) nil nil)
       ("2" (skolem 1 ("h!1" "t!1"))
        (("2" (skosimp*)
          (("2" (expand "run_commands" :if-simplifies T)
            (("2" (lift-if)
              (("2" (prop)
                (("1"
                  (inst -4 "e!1" "goal!1"
                   "down(run_command(h!1, goal!1, state!1))")
                  (("1" (split -4)
                    (("1" (propax) nil nil)
                     ("2" (delete 2)
                      (("2" (inst -6 "h!1" "e!1" "goal!1" "state!1")
                        (("2" (prop) nil nil)) nil))
                      nil)
                     ("3" (propax) nil nil) ("4" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (env type-eq-decl nil clauses nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (noclauses formal-const-decl "posnat" certificates nil)
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (lit type-eq-decl nil clauses nil)
    (cnf type-eq-decl nil certificates nil)
    (width formal-const-decl "posnat" certificates nil)
    (clause type-eq-decl nil clauses nil)
    (clauses type-eq-decl nil certificates nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (satisfies const-decl "bool" certificates nil)
    (satisfies const-decl "bool" certificates nil)
    (lift type-decl nil lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (run_commands def-decl "lift[clauses]" certificates nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (command type-decl nil certificates nil)
    (list_induction formula-decl nil list_adt nil)
    (run_command const-decl "lift[clauses]" certificates nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (lookup const-decl "bool" clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (run_command formula-decl nil certificates nil))
   shostak))
 (certifies_TCC1 0
  (certifies_TCC1-1 nil 3525635334 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (certifies_TCC2 0
  (certifies_TCC2-1 nil 3525635334 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (clause type-eq-decl nil clauses nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (certificates 0
  (certificates-1 nil 3525635335
   ("" (skosimp)
    (("" (expand "certifies")
      (("" (split)
        (("1" (flatten)
          (("1" (case "satisfies(e!1, null[lit])")
            (("1" (grind) nil nil)
             ("2" (lemma "run_commands")
              (("2" (replace -3 1 :dir RL)
                (("2"
                  (inst -1 "cmds!1" "e!1" "goal!1"
                   "LAMBDA (i: below(width)):
                                                mkclause(goal!1(0))")
                  (("1" (split -1)
                    (("1" (expand "satisfies" -1)
                      (("1" (inst -1 "0") nil nil)) nil)
                     ("2" (delete 2)
                      (("2" (expand "satisfies")
                        (("2" (skosimp)
                          (("2" (inst -3 "0")
                            (("2" (lemma "mkclause")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (propax) nil nil) ("4" (propax) nil nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (propax) nil nil))
        nil))
      nil))
    nil)
   ((certifies const-decl "bool" certificates nil)
    (run_commands formula-decl nil certificates nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (width formal-const-decl "posnat" certificates nil)
    (below type-eq-decl nil naturalnumbers nil)
    (noclauses formal-const-decl "posnat" certificates nil)
    (command type-decl nil certificates nil)
    (cnf type-eq-decl nil certificates nil)
    (clause type-eq-decl nil clauses nil)
    (clauses type-eq-decl nil certificates nil)
    (mkclause def-decl "clause" clauses nil)
    (mkclause formula-decl nil clauses nil)
    (satisfies const-decl "bool" certificates nil)
    (satisfies const-decl "bool" certificates nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (some adt-def-decl "boolean" list_adt nil)
    (satisfies const-decl "bool" clauses nil)
    (lookup const-decl "bool" clauses nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (env type-eq-decl nil clauses nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (lit type-eq-decl nil clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak)))

