(clauses
 (sorted_clause?_TCC1 0
  (sorted_clause?_TCC1-1 nil 3577725626 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (id_var const-decl "id_var" clauses nil))
   nil))
 (sorted_clause 0
  (sorted_clause-1 nil 3577731975
   ("" (induct Cl)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skosimp*)
      (("3" (expand "sorted_clause?" -2)
        (("3" (lift-if)
          (("3" (prop)
            (("1" (grind) nil nil)
             ("2" (inst - l!1) (("2" (grind) nil nil)) nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (id_var const-decl "id_var" clauses nil)
    (clause type-eq-decl nil clauses nil)
    (preclause type-eq-decl nil clauses nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (lit type-eq-decl nil clauses nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (ltlit const-decl "bool" clauses nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (append_sorted 0
  (append_sorted-1 nil 3577796060
   ("" (induct Cl1)
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skosimp*)
      (("3" (copy -2)
        (("3" (expand sorted_clause? -1)
          (("3" (prop)
            (("1" (inst - Cl2!1)
              (("1" (expand append +)
                (("1" (expand sorted_clause? +)
                  (("1" (prop)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (expand smaller? +)
                      (("2" (flatten +)
                        (("2" (prop)
                          (("1" (grind) nil nil)
                           ("2" (skeep) (("2" (grind) nil nil)) nil)
                           ("3" (grind) nil nil)
                           ("4" (skeep)
                            (("4" (expand smaller? -)
                              (("4"
                                (grind :exclude sorted_clause?)
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (Cl2!1 skolem-const-decl "clause" clauses nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id_var const-decl "id_var" clauses nil)
    (ltlit const-decl "bool" clauses nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (member def-decl "bool" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (lit type-eq-decl nil clauses nil)
    (append def-decl "list[T]" list_props nil)
    (smaller? const-decl "bool" clauses nil)
    (clause type-eq-decl nil clauses nil)
    (preclause type-eq-decl nil clauses nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (reverse_sorted 0
  (reverse_sorted-1 nil 3577742357
   ("" (skeep)
    (("" (expand reverse +)
      (("" (use append_sorted)
        (("1" (prop)
          (("1" (expand smaller?)
            (("1" (skeep)
              (("1" (rewrite every_forall)
                (("1" (inst - l_1)
                  (("1" (use member_reverse[lit])
                    (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((reverse def-decl "list[T]" list_props nil)
    (member_reverse formula-decl nil more_list_props nil)
    (every_forall formula-decl nil more_list_props nil)
    (pred type-eq-decl nil defined_types nil)
    (ltlit const-decl "bool" clauses nil)
    (smaller? const-decl "bool" clauses nil)
    (acc skolem-const-decl "preclause" clauses nil)
    (preclause type-eq-decl nil clauses nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (lit type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (l skolem-const-decl "lit" clauses nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (clause type-eq-decl nil clauses nil)
    (append_sorted formula-decl nil clauses nil))
   shostak))
 (satisfies_TCC1 0
  (satisfies_TCC1-1 nil 3525547613 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (satisfies_TCC2 0
  (satisfies_TCC2-1 nil 3525547613 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (FV_TCC1 0
  (FV_TCC1-1 nil 3526059822 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (preclause type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (FV_TCC2 0
  (FV_TCC2-1 nil 3526059822 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (precnf type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (preclause type-eq-decl nil clauses nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (FV_char 0
  (FV_char-1 nil 3577727100
   ("" (induct-and-simplify cl) (("" (grind) nil nil)) nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (add const-decl "(nonempty?)" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (preclause type-eq-decl nil clauses nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (id_var type-eq-decl nil clauses nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (FV def-decl "set[id_var]" clauses nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (lit type-eq-decl nil clauses nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (FVs_char 0
  (FVs_char-1 nil 3577727159
   ("" (lemma FV_char) (("" (induct-and-simplify cls) nil nil)) nil)
   ((union const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (preclause type-eq-decl nil clauses nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (member def-decl "bool" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (some adt-def-decl "boolean" list_adt nil)
    (FV def-decl "set[id_var]" clauses nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (id_var type-eq-decl nil clauses nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (precnf type-eq-decl nil clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (FV_char formula-decl nil clauses nil))
   shostak))
 (FV_append 0
  (FV_append-1 nil 3526157446
   (""
    (induct-and-simplify "cls1" :rewrites
     ("union_empty" "union_associative"))
    (("" (rewrite union_commutative) nil nil)) nil)
   ((union_empty formula-decl nil sets_lemmas nil)
    (emptyset const-decl "set" sets nil)
    (union_commutative formula-decl nil sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (union_associative formula-decl nil sets_lemmas nil)
    (precnf type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (id_var type-eq-decl nil clauses nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FV def-decl "set[id_var]" clauses nil)
    (append def-decl "list[T]" list_props nil)
    (union const-decl "set" sets nil)
    (preclause type-eq-decl nil clauses nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil))
   shostak))
 (eqval_clause 0
  (eqval_clause-1 nil 3526062469
   ("" (induct "cl")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("l!1" "cl!1"))
      (("2" (skosimp*)
        (("2" (inst -1 "e1!1" "e2!1")
          (("2" (expand "satisfies" 1 :if-simplifies T)
            (("2" (expand "some" 1 :if-simplifies T)
              (("2" (split -1)
                (("1" (expand "satisfies" -1)
                  (("1" (replace -1 1)
                    (("1" (delete -1) (("1" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (delete 2)
                  (("2" (expand "eqval")
                    (("2" (skosimp)
                      (("2" (inst -2 "i!1") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (add const-decl "(nonempty?)" sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (l!1 skolem-const-decl "lit" clauses nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (some adt-def-decl "boolean" list_adt nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (lit type-eq-decl nil clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FV def-decl "set[id_var]" clauses nil)
    (eqval const-decl "bool" clauses nil)
    (set type-eq-decl nil sets nil)
    (id_var type-eq-decl nil clauses nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (env type-eq-decl nil clauses nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (preclause type-eq-decl nil clauses nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (eqval_clauses 0
  (eqval_clauses-1 nil 3526062988
   ("" (induct "cls")
    (("1" (skosimp*) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("cl!1" "rest!1"))
      (("2" (skosimp*)
        (("2" (inst -1 "e1!1" "e2!1")
          (("2" (split -1)
            (("1" (expand "satisfies" 1)
              (("1" (expand "satisfies" -1)
                (("1" (expand "every" :if-simplifies T)
                  (("1" (replace -1 1)
                    (("1" (delete -1)
                      (("1" (expand "FV")
                        (("1" (lemma "eqval_clause")
                          (("1" (inst -1 "cl!1" "e1!1" "e2!1")
                            (("1" (split -1)
                              (("1"
                                (replace -1 1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (delete 2)
                                (("2"
                                  (expand "eqval")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (inst -2 "i!1")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eqval_clause formula-decl nil clauses nil)
    (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (preclause type-eq-decl nil clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FV def-decl "set[id_var]" clauses nil)
    (eqval const-decl "bool" clauses nil)
    (set type-eq-decl nil sets nil)
    (id_var type-eq-decl nil clauses nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (env type-eq-decl nil clauses nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (precnf type-eq-decl nil clauses nil))
   shostak))
 (sat_append 0
  (sat_append-1 nil 3525548696
   ("" (auto-rewrite-theory "list_props")
    (("" (induct-and-simplify "cl1") nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (some adt-def-decl "boolean" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (lit type-eq-decl nil clauses nil)
    (append def-decl "list[T]" list_props nil)
    (satisfies const-decl "bool" clauses nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (env type-eq-decl nil clauses nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (preclause type-eq-decl nil clauses nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (sat_reverse 0
  (sat_reverse-1 nil 3525548734
   ("" (induct "cl")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("h!1" "t!1"))
      (("2" (skosimp*)
        (("2" (expand "reverse" :if-simplifies T)
          (("2" (lemma "sat_append") (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sat_append formula-decl nil clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (some adt-def-decl "boolean" list_adt nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (lit type-eq-decl nil clauses nil)
    (reverse def-decl "list[T]" list_props nil)
    (satisfies const-decl "bool" clauses nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (env type-eq-decl nil clauses nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (preclause type-eq-decl nil clauses nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (sat_rev_append 0
  (sat_rev_append-1 nil 3525548884
   ("" (skosimp*)
    (("" (rewrite "rev_append_char")
      (("" (lemma "sat_reverse")
        (("" (lemma "sat_append") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((rev_append_char formula-decl nil more_list_props nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (preclause type-eq-decl nil clauses nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (lit type-eq-decl nil clauses nil)
    (sat_append formula-decl nil clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (reverse def-decl "list[T]" list_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (env type-eq-decl nil clauses nil)
    (sat_reverse formula-decl nil clauses nil))
   shostak))
 (sat_cons 0
  (sat_cons-1 nil 3525616156 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (preclause type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (some adt-def-decl "boolean" list_adt nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   shostak))
 (sat_cons_inv 0
  (sat_cons_inv-1 nil 3525620296 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (preclause type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (some adt-def-decl "boolean" list_adt nil)
    (satisfies const-decl "bool" clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   shostak))
 (res_lemma 0
  (res_lemma-1 nil 3525616329 ("" (grind :if-match all) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (preclause type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (some adt-def-decl "boolean" list_adt nil)
    (satisfies const-decl "bool" clauses nil)
    (¬ const-decl "[lit -> lit]" clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   shostak))
 (sat_valid 0
  (sat_valid-1 nil 3577728606 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (preclause type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (env type-eq-decl nil clauses nil)
    (precnf type-eq-decl nil clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (valid_clause? const-decl "bool" clauses nil)
    (every adt-def-decl "boolean" list_adt nil)
    (satisfies const-decl "bool" clauses nil)
    (eqv_cnf? const-decl "bool" clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   shostak))
 (valid_char 0
  (valid_char-1 nil 3577728612
   ("" (auto-rewrite some_exists)
    (("" (grind :if-match nil)
      (("1"
        (inst -
         "LAMBDA (v:posnat): IF member[lit](v,cl!1) THEN FALSE ELSE TRUE ENDIF")
        (("1" (grind :if-match all) nil nil)) nil)
       ("2" (grind :if-match all) nil nil))
      nil))
    nil)
   ((satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (lit type-eq-decl nil clauses nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (some_exists formula-decl nil more_list_props nil)
    (satisfies const-decl "bool" clauses nil)
    (valid_clause? const-decl "bool" clauses nil)
    (¬ const-decl "[lit -> lit]" clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (preclause type-eq-decl nil clauses nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (member def-decl "bool" list_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (env type-eq-decl nil clauses nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil))
   shostak))
 (insert_TCC1 0
  (insert_TCC1-1 nil 3525628562 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (preclause type-eq-decl nil clauses nil)
    (clause type-eq-decl nil clauses nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (member def-decl "bool" list_props nil))
   nil))
 (insert_TCC2 0
  (insert_TCC2-1 nil 3525628562 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (preclause type-eq-decl nil clauses nil)
    (clause type-eq-decl nil clauses nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (id_var const-decl "id_var" clauses nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ltlit const-decl "bool" clauses nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (member def-decl "bool" list_props nil))
   nil))
 (insert_TCC3 0
  (insert_TCC3-1 nil 3577725720 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (preclause type-eq-decl nil clauses nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (clause type-eq-decl nil clauses nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (member def-decl "bool" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ltlit const-decl "bool" clauses nil))
   nil))
 (insert_TCC4 0
  (insert_TCC4-1 nil 3577725720 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (preclause type-eq-decl nil clauses nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (clause type-eq-decl nil clauses nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (member def-decl "bool" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ltlit const-decl "bool" clauses nil))
   nil))
 (insert_TCC5 0
  (insert_TCC5-1 nil 3577725720 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (preclause type-eq-decl nil clauses nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (clause type-eq-decl nil clauses nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (member def-decl "bool" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ltlit const-decl "bool" clauses nil))
   nil))
 (insert_TCC6 0
  (insert_TCC6-1 nil 3577731974
   ("" (skeep)
    (("" (typepred Cl)
      (("" (typepred "v(x,Clt)")
        (("1" (expand sorted_clause? +)
          (("1"
            (grind-with-lemmas sorted_clause :exclude sorted_clause?)
            (("1" (grind :exclude sorted_clause?) nil nil)
             ("2" (grind :exclude sorted_clause?) nil nil)
             ("3" (grind :exclude sorted_clause?) nil nil)
             ("4" (grind :exclude sorted_clause?) nil nil)
             ("5" (grind :exclude sorted_clause?) nil nil)
             ("6" (grind :exclude sorted_clause?) nil nil)
             ("7" (grind :exclude sorted_clause?) nil nil)
             ("8" (grind :exclude sorted_clause?) nil nil)
             ("9" (grind :exclude sorted_clause?) nil nil)
             ("10" (grind :exclude sorted_clause?) nil nil)
             ("11" (grind :exclude sorted_clause?) nil nil)
             ("12" (grind :exclude sorted_clause?) nil nil)
             ("13" (grind :exclude sorted_clause?)
              (("13" (typepred "v(x,Clt)")
                (("13" (inst - "car(v(x,Clt))")
                  (("1" (use-with "sorted_clause" -11)
                    (("1" (split -1)
                      (("1" (inst - "car(v(x,Clt))")
                        (("1" (grind :exclude sorted_clause?) nil nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("14" (grind :exclude sorted_clause?)
              (("14" (typepred Cl)
                (("14" (typepred x)
                  (("14" (typepred "v(x,Clt)")
                    (("14" (inst - "car(v(x,Clt))")
                      (("1" (use-with "sorted_clause" -14)
                        (("1" (split -1)
                          (("1" (inst - "car(v(x,Clt))")
                            (("1" (grind :exclude sorted_clause?) nil
                              nil)
                             ("2" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("15" (grind :exclude sorted_clause?)
              (("15" (typepred "v(x,Clt)")
                (("15" (inst - "car(v(x,Clt))")
                  (("1" (use-with "sorted_clause" -14)
                    (("1" (split -1)
                      (("1" (inst - "car(v(x,Clt))")
                        (("1" (grind :exclude sorted_clause?) nil nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("16" (grind :exclude sorted_clause?)
              (("16" (typepred "v(x,Clt)")
                (("16" (inst - "car(v(x,Clt))")
                  (("1" (use-with "sorted_clause" -14)
                    (("1" (split -1)
                      (("1" (inst - "car(v(x,Clt))")
                        (("1" (grind :exclude sorted_clause?) nil nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("17" (grind :exclude sorted_clause?)
              (("17" (typepred "v(x,Clt)")
                (("17" (inst - "car(v(x,Clt))")
                  (("1" (use-with "sorted_clause" -14)
                    (("1" (split -1)
                      (("1" (inst - "car(v(x,Clt))")
                        (("1" (grind :exclude sorted_clause?) nil nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("18" (grind :exclude sorted_clause?)
              (("18" (typepred "v(x,Clt)")
                (("18" (inst - "car(v(x,Clt))")
                  (("1" (use-with "sorted_clause" -14)
                    (("1" (split -1)
                      (("1" (inst - "car(v(x,Clt))")
                        (("1" (grind :exclude sorted_clause?) nil nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("19" (grind :exclude sorted_clause?)
              (("19" (typepred "v(x,Clt)")
                (("19" (inst - "car(v(x,Clt))")
                  (("1" (use-with "sorted_clause" -14)
                    (("1" (split -1)
                      (("1" (inst - "car(v(x,Clt))")
                        (("1" (grind :exclude sorted_clause?) nil nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("20" (grind :exclude sorted_clause?)
              (("20" (typepred "v(x,Clt)")
                (("20" (inst - "car(v(x,Clt))")
                  (("1" (use-with "sorted_clause" -14)
                    (("1" (split -1)
                      (("1" (inst - "car(v(x,Clt))")
                        (("1" (grind :exclude sorted_clause?) nil nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil) ("3" (grind) nil nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (member def-decl "bool" list_props nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (clause type-eq-decl nil clauses nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (lit type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (preclause type-eq-decl nil clauses nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (Clt skolem-const-decl "list[lit]" clauses nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sorted_clause formula-decl nil clauses nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (ltlit const-decl "bool" clauses nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (id_var const-decl "id_var" clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil))
 (mkclause_TCC1 0
  (mkclause_TCC1-1 nil 3525628562 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (preclause type-eq-decl nil clauses nil)
    (valid_clause? const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (some adt-def-decl "boolean" list_adt nil)
    (satisfies const-decl "bool" clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (member def-decl "bool" list_props nil))
   nil))
 (mkclause_TCC2 0
  (mkclause_TCC2-1 nil 3577725720
   ("" (grind-with-lemmas valid_char) nil nil)
   ((satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (valid_clause? const-decl "bool" clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (lit type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (preclause type-eq-decl nil clauses nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (some adt-def-decl "boolean" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (env type-eq-decl nil clauses nil))
   nil))
 (mkclause_TCC3 0
  (mkclause_TCC3-1 nil 3577725720
   ("" (grind :rewrites some_exists :if-match all)
    (("1" (typepred "v!1(clt!1)") (("1" (grind) nil nil)) nil)
     ("2" (typepred "v!1(clt!1)") (("2" (grind) nil nil)) nil))
    nil)
   ((< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (clause type-eq-decl nil clauses nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (member def-decl "bool" list_props nil)
    (some_exists formula-decl nil more_list_props nil)
    (satisfies const-decl "bool" clauses nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (preclause type-eq-decl nil clauses nil)
    (valid_clause? const-decl "bool" clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil))
   nil))
 (mkclause_TCC4 0
  (mkclause_TCC4-1 nil 3577733317
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "insert(l,v(clt))")
        (("" (typepred cl)
          (("" (typepred "v(clt)") (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (some adt-def-decl "boolean" list_adt nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (lit type-eq-decl nil clauses nil)
    (preclause type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (clause type-eq-decl nil clauses nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (member def-decl "bool" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (insert def-decl
     "{c: clause | FORALL y: member(y, c) IFF y = x OR member(y, Cl)}"
     clauses nil)
    (valid_clause? const-decl "bool" clauses nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (sat_insert_TCC1 0
  (sat_insert_TCC1-1 nil 3577725720 ("" (grind) nil nil)
   ((satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil))
 (sat_insert 0
  (sat_insert-1 nil 3577737831
   ("" (grind :rewrites some_exists :if-match nil)
    (("1" (typepred "insert(x!1,Cl!1)")
      (("1" (grind :if-match all) nil nil)) nil)
     ("2" (typepred "insert(x!1,Cl!1)")
      (("2" (grind :if-match all) nil nil)) nil)
     ("3" (typepred "insert(x!1,Cl!1)")
      (("3" (grind :if-match all) nil nil)) nil)
     ("4" (typepred "insert(x!1,Cl!1)")
      (("4" (grind :if-match all) nil nil)) nil))
    nil)
   ((IFF const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (insert def-decl
     "{c: clause | FORALL y: member(y, c) IFF y = x OR member(y, Cl)}"
     clauses nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (member def-decl "bool" list_props nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (preclause type-eq-decl nil clauses nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (clause type-eq-decl nil clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (satisfies const-decl "bool" clauses nil)
    (some_exists formula-decl nil more_list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (lit type-eq-decl nil clauses nil)
    (satisfies const-decl "bool" clauses nil)
    (satisfies const-decl "bool" clauses nil))
   shostak))
 (sat_mkclause 0
  (sat_mkclause-1 nil 3577738721
   ("" (skeep)
    (("" (expand satisfies)
      (("" (rewrite some_exists)
        (("" (rewrite some_exists)
          (("" (typepred "mkclause(cl)")
            (("1" (skeep)
              (("1" (inst - x)
                (("1" (inst + x) (("1" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((satisfies const-decl "bool" clauses nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (valid_clause? const-decl "bool" clauses nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (clause type-eq-decl nil clauses nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (mkclause def-decl
     "{c: clause | FORALL l: member(l, cl) IFF member(l, c)}" clauses
     nil)
    (lit type-eq-decl nil clauses nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (satisfies const-decl "bool" clauses nil)
    (env type-eq-decl nil clauses nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (preclause type-eq-decl nil clauses nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (some_exists formula-decl nil more_list_props nil))
   shostak))
 (resolve_aux_TCC1 0
  (resolve_aux_TCC1-1 nil 3525461591 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (preclause type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ltlit const-decl "bool" clauses nil))
   nil))
 (resolve_aux_TCC2 0
  (resolve_aux_TCC2-1 nil 3525461591 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (preclause type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ltlit const-decl "bool" clauses nil))
   nil))
 (resolve_aux_TCC3 0
  (resolve_aux_TCC3-1 nil 3525461591 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (preclause type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ltlit const-decl "bool" clauses nil))
   nil))
 (resolve_aux_TCC4 0
  (resolve_aux_TCC4-1 nil 3525461591 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (preclause type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ltlit const-decl "bool" clauses nil))
   nil))
 (resolve_aux_clause_TCC1 0
  (resolve_aux_clause_TCC1-1 nil 3577741572
   ("" (skeep)
    (("" (typepred Acc)
      (("" (use append_sorted)
        (("" (delete -1)
          (("" (use append_sorted ("Cl1" "reverse(Acc)" "Cl2" "Cl2"))
            (("" (use rev_append_char ("l1" "Acc" "l2" "Cl2"))
              (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((smaller? const-decl "bool" clauses nil)
    (clause type-eq-decl nil clauses nil)
    (reverse def-decl "list[T]" list_props nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (lit type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (preclause type-eq-decl nil clauses nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rev_append_char formula-decl nil more_list_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ltlit const-decl "bool" clauses nil)
    (append_sorted formula-decl nil clauses nil))
   nil))
 (resolve_aux_clause_TCC2 0
  (resolve_aux_clause_TCC2-1 nil 3577741572
   ("" (skeep)
    (("" (typepred Acc)
      (("" (use append_sorted)
        (("" (use rev_append_char ("l1" "Acc" "l2" "Cl1"))
          (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((smaller? const-decl "bool" clauses nil)
    (clause type-eq-decl nil clauses nil)
    (reverse def-decl "list[T]" list_props nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (lit type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (preclause type-eq-decl nil clauses nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rev_append_char formula-decl nil more_list_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ltlit const-decl "bool" clauses nil)
    (append_sorted formula-decl nil clauses nil))
   nil))
 (resolve_aux_clause_TCC3 0
  (resolve_aux_clause_TCC3-1 nil 3577741572 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (preclause type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (clause type-eq-decl nil clauses nil)
    (reverse def-decl "list[T]" list_props nil)
    (smaller? const-decl "bool" clauses nil)
    (id_var const-decl "id_var" clauses nil)
    (member def-decl "bool" list_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ltlit const-decl "bool" clauses nil))
   nil))
 (resolve_aux_clause_TCC4 0
  (resolve_aux_clause_TCC4-1 nil 3577741572 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (preclause type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (lit type-eq-decl nil clauses nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (clause type-eq-decl nil clauses nil)
    (reverse def-decl "list[T]" list_props nil)
    (smaller? const-decl "bool" clauses nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ltlit const-decl "bool" clauses nil))
   nil))
 (resolve_aux_clause_TCC5 0
  (resolve_aux_clause_TCC5-1 nil 3577741572
   ("" (skeep)
    (("" (skeep)
      (("" (skeep) (("" (typepred Cl1) (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((clause type-eq-decl nil clauses nil)
    (sorted_clause? def-decl "bool" clauses nil)
    (lit type-eq-decl nil clauses nil)
    (int nonempty-type-eq-decl nil integers nil)
    (preclause type-eq-decl nil clauses nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ltlit const-decl "bool" clauses nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil))
 (resolve_aux_clause_TCC6 0
  (resolve_aux_clause_TCC6-1 nil 3577741572
   ("" (skosimp*)
    (("" (prop)
      (("1" (typepred Acc!1) (("1" (postpone) nil nil)) nil)
       ("2" (postpone) nil nil) ("3" (postpone) nil nil))
      nil))
    nil)
   nil nil))
 (resolve_aux_clause_TCC7 0
  (resolve_aux_clause_TCC7-1 nil 3577741572
   ("" (recursive-judgement-tcc) nil nil) nil nil))
 (resolve_aux_clause_TCC8 0
  (resolve_aux_clause_TCC8-1 nil 3577741572
   ("" (recursive-judgement-tcc) nil nil) nil nil))
 (resolve_aux_clause_TCC9 0
  (resolve_aux_clause_TCC9-1 nil 3577741572
   ("" (recursive-judgement-tcc) nil nil) nil nil))
 (resolve_aux_clause_TCC10 0
  (resolve_aux_clause_TCC10-1 nil 3577741572
   ("" (recursive-judgement-tcc) nil nil) nil nil))
 (resolve_aux_clause_TCC11 0
  (resolve_aux_clause_TCC11-1 nil 3577741572
   ("" (recursive-judgement-tcc) nil nil) nil nil))
 (resolve_aux_clause_TCC12 0
  (resolve_aux_clause_TCC12-1 nil 3577741572
   ("" (recursive-judgement-tcc) nil nil) nil nil))
 (resolve_aux_clause 0
  (resolve_aux_clause-1 nil 3577725720 ("" (judgement-tcc) nil nil) nil
   nil))
 (resolve_clause 0
  (resolve_clause-1 nil 3577725720 ("" (judgement-tcc) nil nil) nil
   nil))
 (itresolve_aux_TCC1 0
  (itresolve_aux_TCC1-1 nil 3577812677 ("" (termination-tcc) nil nil)
   nil nil))
 (itresolve_aux_clause 0
  (itresolve_aux_clause-1 nil 3577725720 ("" (judgement-tcc) nil nil)
   nil nil))
 (itresolve_clause 0
  (itresolve_clause-1 nil 3577725720 ("" (judgement-tcc) nil nil) nil
   nil)))

