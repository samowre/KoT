(trace_checker
 (build_proof_th0_TCC1 0
  (build_proof_th0_TCC1-1 nil 3483114190 3483888851
   ("" (skolem-typepred) (("" (grind) nil nil)) nil) unchecked
   ((sentence_list? const-decl "bool" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   148 100 t nil))
 (build_proof_th0_TCC2 0
  (build_proof_th0_TCC2-1 nil 3483114190 3483888851
   ("" (skolem-typepred) (("" (flatten) (("" (grind) nil nil)) nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   280 130 t nil))
 (build_proof_th0_TCC3 0
  (build_proof_th0_TCC3-1 nil 3483114190 3483888852
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sentence_list? const-decl "bool" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   712 630 t nil))
 (build_proof_th0_TCC4 0
  (build_proof_th0_TCC4-1 nil 3483114190 3483888853
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sentence_list? const-decl "bool" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   670 610 t nil))
 (build_proof_th0_TCC5 0
  (build_proof_th0_TCC5-1 nil 3483114190 3483888854
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (skolem-typepred)
                (("" (flatten) (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sentence_list? const-decl "bool" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (concl_subsetr const-decl "proof_step" resolution nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   844 680 t nil))
 (build_proof_th0_TCC6 0
  (build_proof_th0_TCC6-1 nil 3483114190 3483888855
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (skolem-typepred)
                (("" (flatten)
                  (("" (skolem-typepred)
                    (("" (flatten)
                      (("" (skolem-typepred)
                        (("" (flatten) (("" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sentence_list? const-decl "bool" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (concl_subsetr const-decl "proof_step" resolution nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1103 1000 t nil))
 (build_proof_th0_TCC7 0
  (build_proof_th0_TCC7-1 nil 3483114190 3483888856
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (skolem-typepred)
                (("" (flatten)
                  (("" (skolem-typepred)
                    (("" (flatten)
                      (("" (skolem-typepred)
                        (("" (flatten) (("" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sentence_list? const-decl "bool" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (concl_subsetr const-decl "proof_step" resolution nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1054 980 t nil))
 (build_proof_th0_TCC8 0
  (build_proof_th0_TCC8-1 nil 3483114190 3483888857
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (skolem-typepred)
                (("" (flatten)
                  (("" (skolem-typepred)
                    (("" (flatten)
                      (("" (skolem-typepred)
                        (("" (flatten)
                          (("" (skolem-typepred)
                            (("" (flatten) (("" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sentence_list? const-decl "bool" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (concl_subsetr const-decl "proof_step" resolution nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1165 1080 t nil))
 (build_proof_th0_TCC9 0
  (build_proof_th0_TCC9-1 nil 3483114190 3483888858
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (skolem-typepred)
                (("" (flatten)
                  (("" (skolem-typepred)
                    (("" (flatten)
                      (("" (skolem-typepred)
                        (("" (flatten)
                          (("" (skolem-typepred)
                            (("" (flatten)
                              ((""
                                (skolem-typepred)
                                ((""
                                  (flatten)
                                  (("" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sentence_list? const-decl "bool" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (RR_orr const-decl "ne_proof_seq" resolution nil)
    (concl_orr const-decl "proof_step" resolution nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (concl_subsetr const-decl "proof_step" resolution nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1436 1140 t nil))
 (build_proof_th0_TCC10 0
  (build_proof_th0_TCC10-1 nil 3483114190 3483888859
   ("" (skolem-typepred) (("" (grind) nil nil)) nil) unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sentence_list? const-decl "bool" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (RR_orr const-decl "ne_proof_seq" resolution nil)
    (concl_orr const-decl "proof_step" resolution nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (concl_subsetr const-decl "proof_step" resolution nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   806 750 t nil))
 (th0 0
  (th0-1 nil 3482703236 3482707989
   ("" (skolem-typepred)
    (("" (split)
      (("1" (grind) nil nil)
       ("2" (expand build_proof_th0)
        (("2" (lemma lemma_subsetr)
          (("2"
            (inst -1
             "cons(f_or(gamma!1, delta!1), cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), null)))"
             "cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), cons(f_or(gamma!1, delta!1), null)))"
             "RR_orr(gamma!1, delta!1, cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), null)),
                                   RR_subsetr(cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))),
                                              cons(gamma!1, cons(delta!1, cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), null)))),
                                              RR_norr(p!1, gamma!1, cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null))),
                                                      RR_subsetr(cons(f_not(f_or(f_not(p!1), delta!1)), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                                                 cons(f_not(p!1), cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))),
                                                                 RR_norr(f_not(p!1), delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))),
                                                                         RR_lemma1(f_not(p!1), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                                                         RR_lemma1(delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))))),
                                                      RR_lemma1(gamma!1, cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))))))")
            (("2" (assert)
              (("2" (delete 2)
                (("2" (split)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil)
                   ("5" (lemma lemma_orr)
                    (("5"
                      (inst -1 "gamma!1"
                       "cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), null))"
                       "delta!1"
                       "RR_subsetr(cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))),
                                   cons(gamma!1, cons(delta!1, cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), null)))),
                                   RR_norr(p!1, gamma!1, cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null))),
                                           RR_subsetr(cons(f_not(f_or(f_not(p!1), delta!1)), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                                      cons(f_not(p!1), cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))),
                                                      RR_norr(f_not(p!1), delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))),
                                                              RR_lemma1(f_not(p!1), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                                              RR_lemma1(delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))))),
                                           RR_lemma1(gamma!1, cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null))))))")
                      (("5" (assert)
                        (("5" (delete 2)
                          (("5" (split)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil)
                             ("3" (lemma lemma_subsetr)
                              (("3"
                                (inst
                                 -1
                                 "cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null))))"
                                 "cons(gamma!1, cons(delta!1, cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), null))))"
                                 "RR_norr(p!1, gamma!1, cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null))),
                                    RR_subsetr(cons(f_not(f_or(f_not(p!1), delta!1)), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                               cons(f_not(p!1), cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))),
                                               RR_norr(f_not(p!1), delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))),
                                                       RR_lemma1(f_not(p!1), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                                       RR_lemma1(delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))))),
                                    RR_lemma1(gamma!1, cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))))")
                                (("3"
                                  (assert)
                                  (("3"
                                    (delete 2)
                                    (("3"
                                      (split)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil)
                                       ("3" (grind) nil nil)
                                       ("4" (grind) nil nil)
                                       ("5"
                                        (lemma lemma_norr)
                                        (("5"
                                          (inst
                                           -1
                                           "p!1"
                                           "cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))"
                                           "gamma!1"
                                           "RR_subsetr(cons(f_not(f_or(f_not(p!1), delta!1)), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                    cons(f_not(p!1), cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))),
                                    RR_norr(f_not(p!1), delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))),
                                            RR_lemma1(f_not(p!1), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                            RR_lemma1(delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))))))"
                                           "RR_lemma1(gamma!1, cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null))))")
                                          (("5"
                                            (assert)
                                            (("5"
                                              (delete 2)
                                              (("5"
                                                (split)
                                                (("1" (grind) nil nil)
                                                 ("2" (grind) nil nil)
                                                 ("3" (grind) nil nil)
                                                 ("4"
                                                  (lemma lemma_subsetr)
                                                  (("4"
                                                    (inst
                                                     -1
                                                     "cons(f_not(f_or(f_not(p!1), delta!1)), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))))"
                                                     "cons(f_not(p!1), cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null))))"
                                                     "RR_norr(f_not(p!1), delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))),
                                    RR_lemma1(f_not(p!1), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                    RR_lemma1(delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))))")
                                                    (("4"
                                                      (assert)
                                                      (("4"
                                                        (delete 2)
                                                        (("4"
                                                          (split)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("5"
                                                            (lemma
                                                             lemma_norr)
                                                            (("5"
                                                              (inst
                                                               -1
                                                               "f_not(p!1)"
                                                               "cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))"
                                                               "delta!1"
                                                               "RR_lemma1(f_not(p!1), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))))"
                                                               "RR_lemma1(delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))))")
                                                              (("5"
                                                                (assert)
                                                                (("5"
                                                                  (delete
                                                                   2)
                                                                  (("5"
                                                                    (split)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("4"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("5"
                                                                      (lemma
                                                                       lemma1)
                                                                      (("5"
                                                                        (inst
                                                                         -1
                                                                         "f_not(p!1)"
                                                                         "cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))")
                                                                        (("5"
                                                                          (assert)
                                                                          (("5"
                                                                            (delete
                                                                             2)
                                                                            (("5"
                                                                              (split)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("6"
                                                                      (lemma
                                                                       lemma1)
                                                                      (("6"
                                                                        (inst
                                                                         -1
                                                                         "delta!1"
                                                                         "cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))")
                                                                        (("6"
                                                                          (assert)
                                                                          (("6"
                                                                            (delete
                                                                             2)
                                                                            (("6"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (lemma lemma1)
                                                  (("5"
                                                    (inst
                                                     -1
                                                     "gamma!1"
                                                     "cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))")
                                                    (("5"
                                                      (assert)
                                                      (("5"
                                                        (delete 2)
                                                        (("5"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_subsetr const-decl "proof_step" resolution nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (concl_orr const-decl "proof_step" resolution nil)
    (RR_orr const-decl "ne_proof_seq" resolution nil)
    (build_proof_th0 const-decl "ne_proof_seq" trace_checker nil)
    (conclusion const-decl "sequent" proof nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (lemma_subsetr formula-decl nil resolution nil)
    (append def-decl "list[T]" list_props nil)
    (sentence_list? const-decl "bool" fmla nil)
    (subset def-decl "bool" minlist nil)
    (member def-decl "bool" list_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (lemma1 formula-decl nil resolution nil)
    (lemma_norr formula-decl nil resolution nil)
    (lemma_orr formula-decl nil resolution nil)
    (PRED type-eq-decl nil defined_types nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (> const-decl "bool" reals nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla nil)
    (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (f_or adt-constructor-decl "[[fmla, fmla] -> (f_or?)]" fmla nil)
    (f_or? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   788108 13850 t shostak))
 (proof_th_TCC1 0
  (proof_th_TCC1-1 nil 3482772790 3483888861
   ("" (skolem-typepred)
    (("" (hide -1 -4 -7) (("" (flatten) (("" (grind) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (member def-decl "bool" list_props nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (merge def-decl "{cla: (tr_clause?) |
         FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}"
           trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (nclause? const-decl "bool" resolution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1778 1710 t nil))
 (proof_th_TCC2 0
  (proof_th_TCC2-1 nil 3482800740 3483888862
   ("" (skosimp)
    (("" (typepred ntcB!1)
      (("" (expand nclause?)
        (("" (expand translate_clause)
          (("" (expand ne_tr_clause?) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nclause? const-decl "bool" resolution nil))
   1131 1060 t nil))
 (proof_th_TCC3 0
  (proof_th_TCC3-1 nil 3482800740 3483888862
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (typepred res!1)
        (("" (lemma clause_sentence_list)
          (("" (inst -1 "translate_clause[m, n, i](res!1)") nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((clause_sentence_list formula-decl nil resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (clause? const-decl "bool" resolution nil)
    (literal? const-decl "bool" resolution nil)
    (fmla type-decl nil fmla nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   94 50 t nil))
 (proof_th_TCC4 0
  (proof_th_TCC4-1 nil 3482800740 3483888864
   ("" (skolem-typepred) (("" (flatten) (("" (grind) nil nil)) nil))
    nil)
   unchecked
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nclause? const-decl "bool" resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (index const-decl "posnat" trace_resolution nil)
    (merge def-decl "{cla: (tr_clause?) |
         FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}"
           trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (member def-decl "bool" list_props nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1773 1680 t nil))
 (proof_th_TCC5 0
  (proof_th_TCC5-1 nil 3483107273 3483888865
   ("" (skosimp) (("" (typepred ntcB!1) (("" (grind) nil nil)) nil))
    nil)
   unchecked
   ((ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nclause? const-decl "bool" resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   1081 1030 t nil))
 (proof_th_TCC6 0
  (proof_th_TCC6-1 nil 3483107273 3483888866
   ("" (skosimp)
    (("" (expand not_or_reduction)
      (("" (expand append)
        (("" (expand append)
          (("" (lemma nclause2fmla_sentence)
            (("" (inst -1 "translate_clause[m, n, i](ntcB!1)")
              (("" (lemma clause_sentence_list)
                (("" (inst -1 "translate_clause[m, n, i](res!1)")
                  (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((not_or_reduction const-decl "sequent" resolution nil)
    (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (literal? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (nclause? const-decl "bool" resolution nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace_checker nil)
    (n formal-const-decl "nat" trace_checker nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (sentence? const-decl "bool" fmla nil)
    (sentence_list? const-decl "bool" fmla nil)
    (clause_sentence_list formula-decl nil resolution nil)
    (nclause2fmla_sentence formula-decl nil resolution nil)
    (append def-decl "list[T]" list_props nil))
   1120 1020 t nil))
 (proof_th_TCC7 0
  (proof_th_TCC7-1 nil 3483107273 3483888867
   ("" (skosimp)
    (("" (typepred ntcB!1) (("" (hide -1) (("" (grind) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (nclause? const-decl "bool" resolution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   1012 960 t nil))
 (proof_th_TCC8 0
  (proof_th_TCC8-1 nil 3483107273 3483888868
   ("" (skosimp)
    (("" (grind) (("" (typepred ntcA!1) (("" (grind) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((not_true_clauses const-decl "bool" trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (nclause? const-decl "bool" resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace_checker nil)
    (n formal-const-decl "nat" trace_checker nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil))
   1120 1050 t nil))
 (proof_th_TCC9 0
  (proof_th_TCC9-1 nil 3483114190 3483888869
   ("" (skosimp)
    (("" (expand not_or_reduction)
      (("" (expand append)
        (("" (expand append)
          (("" (lemma nclause2fmla_sentence)
            (("" (inst -1 "translate_clause[m, n, i](ntcA!1)")
              (("" (lemma clause_sentence_list)
                (("" (inst -1 "translate_clause[m, n, i](res!1)")
                  (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((not_or_reduction const-decl "sequent" resolution nil)
    (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (literal? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (nclause? const-decl "bool" resolution nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace_checker nil)
    (n formal-const-decl "nat" trace_checker nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (sentence? const-decl "bool" fmla nil)
    (sentence_list? const-decl "bool" fmla nil)
    (clause_sentence_list formula-decl nil resolution nil)
    (nclause2fmla_sentence formula-decl nil resolution nil)
    (append def-decl "list[T]" list_props nil))
   1029 970 t nil))
 (proof_th_TCC10 0
  (proof_th_TCC10-1 nil 3483114190 3483888871
   ("" (skosimp)
    (("" (skosimp)
      (("" (expand not_or_reduction)
        (("" (expand append)
          (("" (expand append)
            (("" (lemma nclause2fmla_sentence)
              (("" (inst-cp -1 "translate_clause[m, n, i](ntcB!1)")
                (("" (inst -1 "translate_clause[m, n, i](ntcA!1)")
                  (("" (lemma clause_sentence_list)
                    (("" (inst -1 "translate_clause[m, n, i](res!1)")
                      (("" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((append def-decl "list[T]" list_props nil)
    (nclause2fmla_sentence formula-decl nil resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (sentence? const-decl "bool" fmla nil)
    (sentence_list? const-decl "bool" fmla nil)
    (clause_sentence_list formula-decl nil resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nclause? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (literal? const-decl "bool" resolution nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil)
    (not_or_reduction const-decl "sequent" resolution nil))
   1121 1070 t nil))
 (proof_th_TCC11 0
  (proof_th_TCC11-1 nil 3483114190 3483888872
   ("" (skosimp)
    (("" (skosimp)
      (("" (expand not_or_reduction)
        (("" (expand append)
          (("" (expand append)
            (("" (lemma nclause2fmla_sentence)
              (("" (inst-cp -1 "translate_clause[m, n, i](ntcB!1)")
                (("" (inst -1 "translate_clause[m, n, i](ntcA!1)")
                  (("" (lemma clause_sentence_list)
                    (("" (inst -1 "translate_clause[m, n, i](res!1)")
                      (("" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((append def-decl "list[T]" list_props nil)
    (nclause2fmla_sentence formula-decl nil resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (sentence? const-decl "bool" fmla nil)
    (sentence_list? const-decl "bool" fmla nil)
    (clause_sentence_list formula-decl nil resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nclause? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (literal? const-decl "bool" resolution nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil)
    (not_or_reduction const-decl "sequent" resolution nil))
   1165 1080 t nil))
 (proof_th_TCC12 0
  (proof_th_TCC12-1 nil 3483114190 3483888873
   ("" (skosimp) (("" (typepred ntcA!1) (("" (grind) nil nil)) nil))
    nil)
   unchecked
   ((ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nclause? const-decl "bool" resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (merge def-decl "{cla: (tr_clause?) |
         FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}"
           trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   1189 1130 t nil))
 (proof_th_TCC13 0
  (proof_th_TCC13-1 nil 3483114190 3483888874
   ("" (skosimp) (("" (typepred ntcB!1) (("" (grind) nil nil)) nil))
    nil)
   unchecked
   ((ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nclause? const-decl "bool" resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   1142 1070 t nil))
 (proof_th_TCC14 0
  (proof_th_TCC14-1 nil 3483114190 3483888875
   ("" (skosimp)
    (("" (expand not_or_reduction)
      (("" (expand append)
        (("" (expand append)
          (("" (lemma nclause2fmla_sentence)
            (("" (inst -1 "translate_clause[m, n, i](ntcB!1)")
              (("" (lemma clause_sentence_list)
                (("" (inst -1 "translate_clause[m, n, i](res!1)")
                  (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((not_or_reduction const-decl "sequent" resolution nil)
    (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (literal? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (nclause? const-decl "bool" resolution nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace_checker nil)
    (n formal-const-decl "nat" trace_checker nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (sentence? const-decl "bool" fmla nil)
    (sentence_list? const-decl "bool" fmla nil)
    (clause_sentence_list formula-decl nil resolution nil)
    (nclause2fmla_sentence formula-decl nil resolution nil)
    (append def-decl "list[T]" list_props nil))
   1037 980 t nil))
 (th_TCC1 0
  (th_TCC1-1 nil 3483107273 3483888875
   ("" (skosimp) (("" (typepred ntcA!1) (("" (grind) nil nil)) nil))
    nil)
   unchecked
   ((ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nclause? const-decl "bool" resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   220 210 t nil))
 (th 0
  (th-1 nil 3482775473 3483147456
   ("" (skosimp)
    (("" (expand proof_th)
      (("" (split)
        (("1" (lift-if)
          (("1" (split)
            (("1" (flatten)
              (("1" (split)
                (("1" (flatten)
                  (("1" (lemma th2)
                    (("1"
                      (inst -1
                       "translate_lit(find_pivot(ntcA!1, ntcB!1))"
                       "translate_clause(ntcA!1)"
                       "translate_clause(ntcB!1)"
                       "translate_clause(resolution(ntcA!1, ntcB!1))")
                      (("1" (assert)
                        (("1" (delete 2)
                          (("1" (split)
                            (("1"
                              (lemma translate_include_res
                               (nck "ntcA!1" ncl "ntcB!1"))
                              (("1" (assert) nil nil)) nil)
                             ("2"
                              (lemma translate_include_res2
                               (nck "ntcA!1" ncl "ntcB!1"))
                              (("2"
                                (lemma
                                 neg_translate
                                 (k "find_pivot(ntcA!1, ntcB!1)"))
                                (("2"
                                  (replace -1 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (lemma th1)
                    (("2"
                      (inst -1 "translate_clause(ntcA!1)"
                       "append(not_or_reduction(translate_clause(ntcB!1)),
                               translate_clause(resolution
                                                (ntcA!1, ntcB!1)))")
                      (("2" (assert)
                        (("2" (delete 3)
                          (("2" (expand resolution)
                            (("2" (assert)
                              (("2"
                                (expand not_true_clauses)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (replace 3 1)
                                    (("2"
                                      (replace 4 1)
                                      (("2"
                                        (lemma
                                         append_inclusion
                                         (cl
                                          "ntcA!1"
                                          cm
                                          "merge(ntcA!1, ntcB!1)"
                                          sq
                                          "not_or_reduction(translate_clause(ntcB!1))"))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma merge_includes1)
                                            (("2"
                                              (inst
                                               -1
                                               "ntcA!1"
                                               "ntcB!1")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (lemma
                                                   subset_include
                                                   (sAA
                                                    "ntcA!1"
                                                    sBB
                                                    "merge(ntcA!1, ntcB!1)"))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (flatten)
                  (("1" (lemma lemma_subsetr)
                    (("1"
                      (inst -1 "RR_th1(translate_clause(ntcB!1),
                                   append(not_or_reduction
                                          (translate_clause(ntcA!1)),
                                          translate_clause
                                          (resolution(ntcA!1, ntcB!1))))"
                       "append(not_or_reduction(translate_clause
                                                    (ntcB!1)),
                                   append(not_or_reduction
                                          (translate_clause(ntcA!1)),
                                          translate_clause
                                          (resolution(ntcA!1, ntcB!1))))"
                       "append(not_or_reduction(translate_clause
                                                    (ntcA!1)),
                                   append(not_or_reduction
                                          (translate_clause(ntcB!1)),
                                          translate_clause
                                          (resolution(ntcA!1, ntcB!1))))")
                      (("1" (assert)
                        (("1" (delete 2)
                          (("1" (expand not_or_reduction + 1)
                            (("1" (expand append + 1)
                              (("1"
                                (expand append + 1)
                                (("1"
                                  (expand not_or_reduction + 1)
                                  (("1"
                                    (expand append + 1)
                                    (("1"
                                      (expand append + 1)
                                      (("1"
                                        (expand not_or_reduction + 1)
                                        (("1"
                                          (expand append + 1)
                                          (("1"
                                            (expand append + 1)
                                            (("1"
                                              (expand
                                               not_or_reduction
                                               +
                                               1)
                                              (("1"
                                                (expand append + 1)
                                                (("1"
                                                  (expand append + 1)
                                                  (("1"
                                                    (expand subset + 1)
                                                    (("1"
                                                      (expand
                                                       member
                                                       +
                                                       1)
                                                      (("1"
                                                        (expand
                                                         member
                                                         +
                                                         1)
                                                        (("1"
                                                          (expand
                                                           subset
                                                           +
                                                           1)
                                                          (("1"
                                                            (expand
                                                             member
                                                             +
                                                             1)
                                                            (("1"
                                                              (expand
                                                               resolution)
                                                              (("1"
                                                                (expand
                                                                 not_or_reduction)
                                                                (("1"
                                                                  (expand
                                                                   append)
                                                                  (("1"
                                                                    (expand
                                                                     append)
                                                                    (("1"
                                                                      (use
                                                                       every_member_subset
                                                                       (k
                                                                        "translate_clause(ntcB!1)"
                                                                        l
                                                                        "cons(f_not(nclause2fmla(translate_clause(ntcA!1))),
                   cons(f_not(nclause2fmla(translate_clause(ntcB!1))),
                        translate_clause(ntcB!1)))"))
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           member
                                                                           +
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             member
                                                                             +
                                                                             2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     th1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       not_or_reduction)
                                                                                      (("2"
                                                                                        (expand
                                                                                         append)
                                                                                        (("2"
                                                                                          (expand
                                                                                           append)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "translate_clause(ntcB!1)"
                                                                                             "cons(f_not(nclause2fmla(translate_clause(ntcA!1))),
                             translate_clause(ntcB!1))")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (delete
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (use
                                                                                                   every_member_subset
                                                                                                   (k
                                                                                                    "translate_clause(ntcB!1)"
                                                                                                    l
                                                                                                    "cons(f_not(nclause2fmla(translate_clause(ntcA!1))),
                   translate_clause(ntcB!1))"))
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (skosimp)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           member
                                                                                                           +)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (lemma
                                                                                     th1)
                                                                                    (("3"
                                                                                      (inst
                                                                                       -1
                                                                                       "translate_clause(ntcB!1)"
                                                                                       "cons(f_not(nclause2fmla(translate_clause(ntcA!1))),
                             translate_clause(ntcB!1))")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (delete
                                                                                           2)
                                                                                          (("3"
                                                                                            (use
                                                                                             every_member_subset
                                                                                             (k
                                                                                              "translate_clause(ntcB!1)"
                                                                                              l
                                                                                              "cons(f_not(nclause2fmla(translate_clause(ntcA!1))),
                   translate_clause(ntcB!1))"))
                                                                                            (("3"
                                                                                              (replace
                                                                                               -1
                                                                                               1)
                                                                                              (("3"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (skosimp)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     member
                                                                                                     +)
                                                                                                    (("3"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("3"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (delete
                                                                         2)
                                                                        (("2"
                                                                          (typepred
                                                                           ntcB!1)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (delete
                                                                         2)
                                                                        (("3"
                                                                          (typepred
                                                                           ntcA!1)
                                                                          (("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (lemma th1)
                    (("2"
                      (inst -1 "translate_clause(ntcA!1)"
                       "append(not_or_reduction(translate_clause(ntcB!1)),
                               translate_clause(resolution
                                                (ntcA!1, ntcB!1)))")
                      (("2" (assert)
                        (("2" (delete 3)
                          (("2" (expand resolution)
                            (("2" (expand not_true_clauses)
                              (("2"
                                (replace -1 1)
                                (("2"
                                  (lemma
                                   append_inclusion
                                   (cl
                                    "ntcA!1"
                                    cm
                                    "ntcA!1"
                                    sq
                                    "not_or_reduction(translate_clause(ntcB!1))"))
                                  (("2"
                                    (assert)
                                    (("2"
                                      (delete 2)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (lemma
                                           every_member_subset
                                           (k "ntcA!1" l "ntcA!1"))
                                          (("2"
                                            (replace -1 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split)
            (("1" (flatten)
              (("1" (lemma th2)
                (("1"
                  (inst -1 "translate_lit(find_pivot(ntcA!1, ntcB!1))"
                   "translate_clause(ntcA!1)"
                   "translate_clause(ntcB!1)"
                   "translate_clause(resolution(ntcA!1, ntcB!1))")
                  (("1" (assert)
                    (("1" (delete 2)
                      (("1" (split)
                        (("1"
                          (lemma translate_include_res
                           (nck "ntcA!1" ncl "ntcB!1"))
                          (("1" (assert) nil nil)) nil)
                         ("2"
                          (lemma translate_include_res2
                           (nck "ntcA!1" ncl "ntcB!1"))
                          (("2" (assert)
                            (("2" (lemma subset_lit_subset_fmla)
                              (("2"
                                (inst
                                 -1
                                 "translate_clause(ntcB!1)"
                                 "cons(f_neg(translate_lit(find_pivot(ntcA!1, ntcB!1))),
                  translate_clause(resolution(ntcA!1, ntcB!1)))")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (delete 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (lemma th1)
                (("2"
                  (inst -1 "translate_clause(ntcA!1)"
                   "append(not_or_reduction(translate_clause(ntcB!1)),
                               translate_clause(resolution
                                                (ntcA!1, ntcB!1)))")
                  (("2" (assert)
                    (("2" (delete 3)
                      (("2" (expand resolution)
                        (("2" (expand not_true_clauses)
                          (("2" (flatten)
                            (("2" (replace 3 1)
                              (("2"
                                (replace 4 1)
                                (("2"
                                  (lemma
                                   append_inclusion
                                   (cl
                                    "ntcA!1"
                                    cm
                                    "merge(ntcA!1, ntcB!1)"
                                    sq
                                    "not_or_reduction(translate_clause(ntcB!1))"))
                                  (("2"
                                    (assert)
                                    (("2"
                                      (delete 2)
                                      (("2"
                                        (lemma merge_includes1)
                                        (("2"
                                          (inst -1 "ntcA!1" "ntcB!1")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (lemma
                                               subset_include
                                               (sAA
                                                "ntcA!1"
                                                sBB
                                                "merge(ntcA!1, ntcB!1)"))
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (flatten)
          (("3" (split)
            (("1" (flatten)
              (("1" (lemma lemma_subsetr)
                (("1"
                  (inst -1 "RR_th1(translate_clause(ntcB!1),
                                   append(not_or_reduction
                                          (translate_clause(ntcA!1)),
                                          translate_clause
                                          (resolution(ntcA!1, ntcB!1))))"
                   "append(not_or_reduction(translate_clause
                                                    (ntcB!1)),
                                   append(not_or_reduction
                                          (translate_clause(ntcA!1)),
                                          translate_clause
                                          (resolution(ntcA!1, ntcB!1))))"
                   "append(not_or_reduction(translate_clause
                                                    (ntcA!1)),
                                   append(not_or_reduction
                                          (translate_clause(ntcB!1)),
                                          translate_clause
                                          (resolution(ntcA!1, ntcB!1))))")
                  (("1" (assert)
                    (("1" (delete 2)
                      (("1" (split)
                        (("1" (expand not_or_reduction)
                          (("1" (expand append)
                            (("1" (expand append)
                              (("1"
                                (expand subset)
                                (("1"
                                  (expand member + 1)
                                  (("1"
                                    (expand member + 1)
                                    (("1"
                                      (expand subset)
                                      (("1"
                                        (expand member + 1)
                                        (("1"
                                          (expand resolution)
                                          (("1"
                                            (use
                                             every_member_subset
                                             (k
                                              "translate_clause(ntcB!1)"
                                              l
                                              "cons(f_not(nclause2fmla(translate_clause(ntcA!1))),
                   cons(f_not(nclause2fmla(translate_clause(ntcB!1))),
                        translate_clause(ntcB!1)))"))
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (expand member +)
                                                    (("1"
                                                      (expand member +)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma th1)
                          (("2"
                            (inst -1 "translate_clause(ntcB!1)"
                             "append(not_or_reduction(translate_clause(ntcA!1)),
                               translate_clause(resolution
                                                (ntcA!1, ntcB!1)))")
                            (("2" (assert)
                              (("2"
                                (delete 2)
                                (("2"
                                  (expand resolution)
                                  (("2"
                                    (expand not_or_reduction)
                                    (("2"
                                      (expand append)
                                      (("2"
                                        (expand append)
                                        (("2"
                                          (lemma
                                           cons_cdr_inclusion
                                           (f
                                            "f_not(nclause2fmla(translate_clause(ntcA!1)))"
                                            cl
                                            "ntcB!1"
                                            ck
                                            "ntcB!1"))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (delete 2)
                                              (("2"
                                                (use
                                                 every_member_subset
                                                 (k
                                                  "ntcB!1"
                                                  l
                                                  "ntcB!1"))
                                                (("2"
                                                  (replace -1 1)
                                                  (("2"
                                                    (skosimp)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (lemma th1)
                          (("3"
                            (inst -1 "translate_clause(ntcB!1)"
                             "append(not_or_reduction(translate_clause(ntcA!1)),
                               translate_clause(resolution
                                                (ntcA!1, ntcB!1)))")
                            (("3" (assert)
                              (("3"
                                (delete 2)
                                (("3"
                                  (expand resolution)
                                  (("3"
                                    (expand not_or_reduction)
                                    (("3"
                                      (expand append)
                                      (("3"
                                        (expand append)
                                        (("3"
                                          (lemma
                                           cons_cdr_inclusion
                                           (f
                                            "f_not(nclause2fmla(translate_clause(ntcA!1)))"
                                            cl
                                            "ntcB!1"
                                            ck
                                            "ntcB!1"))
                                          (("3"
                                            (assert)
                                            (("3"
                                              (delete 2)
                                              (("3"
                                                (use
                                                 every_member_subset
                                                 (k
                                                  "ntcB!1"
                                                  l
                                                  "ntcB!1"))
                                                (("3"
                                                  (replace -1 1)
                                                  (("3"
                                                    (skosimp)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (lemma th1)
                (("2"
                  (inst -1 "translate_clause(ntcA!1)"
                   "append(not_or_reduction(translate_clause(ntcB!1)),
                               translate_clause(resolution
                                                (ntcA!1, ntcB!1)))")
                  (("2" (assert)
                    (("2" (delete 3)
                      (("2" (expand not_or_reduction)
                        (("2" (expand append)
                          (("2" (expand append)
                            (("2" (expand resolution)
                              (("2"
                                (expand not_true_clauses)
                                (("2"
                                  (replace -1 1)
                                  (("2"
                                    (lemma
                                     cons_cdr_inclusion
                                     (f
                                      "f_not(nclause2fmla(translate_clause(ntcB!1)))"
                                      cl
                                      "ntcA!1"
                                      ck
                                      "ntcA!1"))
                                    (("2"
                                      (assert)
                                      (("2"
                                        (delete 2)
                                        (("2"
                                          (use
                                           every_member_subset
                                           (k "ntcB!1" l "ntcB!1"))
                                          (("2"
                                            (use
                                             every_member_subset
                                             (k "ntcA!1" l "ntcA!1"))
                                            (("2"
                                              (replace -1 1)
                                              (("2" (skosimp) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((th2 formula-decl nil resolution nil)
    (translate_include_res formula-decl nil trace2fmla nil)
    (neg_translate formula-decl nil trace2fmla nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (translate_include_res2 formula-decl nil trace2fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (sentence_list? const-decl "bool" fmla nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (nclause? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (find_pivot def-decl
     "{k | member(k, nck) AND member(tr_neg(k), ncl)}" trace_resolution
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (member def-decl "bool" list_props nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (literal? const-decl "bool" resolution nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fmla type-decl nil fmla nil) (th1 formula-decl nil resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (merge def-decl "{cla: (tr_clause?) |
         FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}"
           trace_resolution nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (append_inclusion formula-decl nil trace2fmla nil)
    (merge_includes1 formula-decl nil trace_resolution nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (sorted? def-decl "bool" sortedlist nil)
    (subset_include formula-decl nil sortedlist nil)
    (not_or_reduction const-decl "sequent" resolution nil)
    (sequent type-eq-decl nil sequents nil)
    (append def-decl "list[T]" list_props nil)
    (lemma_subsetr formula-decl nil resolution nil)
    (subset def-decl "bool" minlist nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (every_member_subset formula-decl nil minlist nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla nil)
    (nclause2fmla def-decl "fmla" resolution nil)
    (RR_th1 def-decl "ne_proof_seq" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (f_neg const-decl "fmla" fmla nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (prop_atom? const-decl "bool" resolution nil)
    (subset_lit_subset_fmla formula-decl nil resolution nil)
    (cons_cdr_inclusion formula-decl nil trace2fmla nil)
    (proof_th const-decl "ne_proof_seq" trace_checker nil))
   538768 7520 t shostak))
 (map_trans_clause_TCC1 0
  (map_trans_clause_TCC1-1 nil 3483364828 3483888876
   ("" (skolem-typepred)
    (("" (split)
      (("1" (generalize lntcA!1 "nt")
        (("1" (induct nt)
          (("1" (assert) nil nil)
           ("2" (skolem-typepred)
            (("2" (flatten)
              (("2" (expand every +)
                (("2" (lift-if 1)
                  (("2" (split 1)
                    (("1" (propax) nil nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (split -5)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil)
                             ("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   unchecked
   ((list_induction formula-decl nil list_adt nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fmla type-decl nil fmla nil)
    (literal? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (nclause? const-decl "bool" resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1191 1060 t nil))
 (map_ncl2fmla_TCC1 0
  (map_ncl2fmla_TCC1-1 nil 3483364828 3483888877
   ("" (skolem-typepred)
    (("" (generalize l!1 l)
      (("" (induct l)
        (("1" (grind) nil nil)
         ("2" (skolem-typepred)
          (("2" (flatten)
            (("2" (expand map +)
              (("2" (expand sentence_list? +)
                (("2" (expand freevars +)
                  (("2" (lemma nclause2fmla_sentence)
                    (("2" (inst -1 "cons1_var!1")
                      (("2" (split -6)
                        (("1" (grind) nil nil) ("2" (propax) nil nil)
                         ("3" (expand freevars + 2)
                          (("3" (lift-if 2)
                            (("3" (split)
                              (("1"
                                (flatten)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nclause2fmla def-decl "fmla" resolution nil)
    (sentence_list? const-decl "bool" fmla nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sentence? const-decl "bool" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (nclause2fmla_sentence formula-decl nil resolution nil)
    (list_induction formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nclause? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (literal? const-decl "bool" resolution nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   872 810 t nil))
 (map_fnot_TCC1 0
  (map_fnot_TCC1-1 nil 3483364828 3483888878
   ("" (induct l)
    (("1" (typepred l!1) (("1" (propax) nil nil)) nil)
     ("2" (grind) nil nil)
     ("3" (skolem-typepred)
      (("3" (flatten)
        (("3" (expand sentence_list? +)
          (("3" (expand freevars +)
            (("3" (lift-if +)
              (("3" (split +)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (expand map +)
                      (("2" (expand sentence_list? -2)
                        (("2" (expand freevars -2)
                          (("2" (expand sentence_list? -1 1)
                            (("2" (case "null?(freevars(cons2_var!1))")
                              (("1"
                                (replace -1 -2)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (replace 1 -1)
                                (("2"
                                  (lemma
                                   length_append
                                   (l1
                                    "freevars(cons1_var!1)"
                                    l2
                                    "freevars(cons2_var!1)"))
                                  (("2"
                                    (expand length -1 1)
                                    (("2"
                                      (lift-if -1)
                                      (("2"
                                        (replace -2 -1)
                                        (("2"
                                          (case
                                           "length(freevars(cons2_var!1))=0")
                                          (("1" (grind) nil nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((term type-decl nil fmla nil)
    (var? adt-recognizer-decl "[term -> boolean]" fmla nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_append formula-decl nil list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length def-decl "nat" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (fmla type-decl nil fmla nil)
    (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla nil)
    (PRED type-eq-decl nil defined_types nil)
    (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (sentence_list? const-decl "bool" fmla nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   785 630 t nil))
 (f_TCC1 0
  (f_TCC1-1 nil 3483306244 3483888878 ("" (subtype-tcc) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   59 60 nil nil))
 (f_TCC2 0
  (f_TCC2-1 nil 3483306244 3483888878 ("" (termination-tcc) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   146 130 nil nil))
 (proof_th_list_TCC1 0
  (proof_th_list_TCC1-1 nil 3483306244 3483888879
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (typepred "car(lntcA!1)") (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (nclause? const-decl "bool" resolution nil)
    (sorted? def-decl "bool" sortedlist nil)
    (prop_atom? const-decl "bool" resolution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (fmla type-decl nil fmla nil)
    (literal? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   851 750 t nil))
 (proof_th_list_TCC2 0
  (proof_th_list_TCC2-1 nil 3483306244 3483888880
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (lemma clause_sentence_list)
            (("" (inst -1 "translate_clause(car(lntcA!1))")
              (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((translate_clause const-decl "(clause?)" trace2fmla nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sentence_list? const-decl "bool" fmla nil)
    (clause_sentence_list formula-decl nil resolution nil)
    (fmla type-decl nil fmla nil)
    (literal? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   361 300 t nil))
 (proof_th_list_TCC3 0
  (proof_th_list_TCC3-1 nil 3483306244 3483888880
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace_checker nil)
    (n formal-const-decl "nat" trace_checker nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   133 140 nil nil))
 (proof_th_list_TCC4 0
  (proof_th_list_TCC4-1 nil 3483306244 3483888881
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (typepred "car[((ne_tr_clause?))](lntcA!1)")
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (merge def-decl "{cla: (tr_clause?) |
         FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}"
           trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (nclause? const-decl "bool" resolution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1531 1370 t nil))
 (proof_th_list_TCC5 0
  (proof_th_list_TCC5-1 nil 3483306244 3483888883
   ("" (subtype-tcc)
    ((""
      (typepred
       "car[((ne_tr_clause?))](cdr[((ne_tr_clause?))](lntcA!1))")
      (("" (grind) nil nil)) nil))
    nil)
   unchecked
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (sorted? def-decl "bool" sortedlist nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace_checker nil)
    (n formal-const-decl "nat" trace_checker nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nclause? const-decl "bool" resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil))
   2110 1850 t nil))
 (proof_th_list_TCC6 0
  (proof_th_list_TCC6-1 nil 3483306244 3483888885
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (expand not_or_reduction)
            (("" (expand append)
              (("" (expand append)
                (("" (lemma nclause2fmla_sentence)
                  (("" (hide -4)
                    ((""
                      (inst-cp -1
                       "translate_clause[m, n, i](car[((ne_tr_clause?))](lntcA!1))")
                      ((""
                        (inst-cp -1
                         "translate_clause[m, n, i](car[((ne_tr_clause?))](cdr[((ne_tr_clause?))](lntcA!1)))")
                        (("" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((append def-decl "list[T]" list_props nil)
    (nclause2fmla_sentence formula-decl nil resolution nil)
    (fmla type-decl nil fmla nil)
    (literal? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (nclause? const-decl "bool" resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (sentence? const-decl "bool" fmla nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (sentence_list? const-decl "bool" fmla nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (not_or_reduction const-decl "sequent" resolution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1381 1310 t nil))
 (proof_th_list_TCC7 0
  (proof_th_list_TCC7-1 nil 3483306244 3483888886
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nclause? const-decl "bool" resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1268 1200 t nil))
 (proof_th_list_TCC8 0
  (proof_th_list_TCC8-1 nil 3483306244 3483888889
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (typepred lntcA!1)
                (("" (expand every -1)
                  (("" (expand every -1)
                    (("" (flatten)
                      (("" (hide -1)
                        (("" (lift-if -3)
                          (("" (split -3)
                            (("1" (propax) nil nil)
                             ("2" (flatten)
                              (("2"
                                (hide 1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred res!1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sorted? def-decl "bool" sortedlist nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (merge def-decl "{cla: (tr_clause?) |
         FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}"
           trace_resolution nil)
    (member def-decl "bool" list_props nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (index const-decl "posnat" trace_resolution nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   2512 2360 t nil))
 (proof_th_list_TCC9 0
  (proof_th_list_TCC9-1 nil 3483306244 3483915237
   ("" (skosimp)
    (("" (skosimp)
      (("" (skosimp)
        (("" (skosimp)
          (("" (skosimp)
            (("" (skosimp)
              (("" (skosimp)
                (("" (lemma sentence_list_append)
                  ((""
                    (inst -1 "not_or_map(lntcA!1)"
                     "translate_clause[m, n, i](res_list!1)")
                    (("" (replace -1 3 RL)
                      (("" (typepred "not_or_map(lntcA!1)")
                        (("" (replace -1 3)
                          (("" (lemma clause_sentence_list)
                            ((""
                              (inst -1
                               "translate_clause[m, n, i](res_list!1)")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((sentence_list_append formula-decl nil fmla nil)
    (clause_sentence_list formula-decl nil resolution nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (clause? const-decl "bool" resolution nil)
    (literal? const-decl "bool" resolution nil)
    (not_or_map const-decl "sequent" trace_checker nil)
    (sequent type-eq-decl nil sequents nil)
    (sentence_list? const-decl "bool" fmla nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil))
   72502 200 t nil))
 (proof_th_list_TCC10 0
  (proof_th_list_TCC10-1 nil 3483306244 3483888156
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (skolem-typepred)
                (("" (flatten)
                  (("" (skolem-typepred)
                    (("" (flatten)
                      (("" (skolem-typepred)
                        (("" (flatten)
                          (("" (skolem-typepred)
                            (("" (flatten)
                              ((""
                                (typepred
                                 "f_not(nclause2fmla(translate_clause[m, n, i](res!1)))")
                                ((""
                                  (typepred
                                   "translate_clause[m, n, i](res_all_list!1)")
                                  ((""
                                    (lemma clause_sentence_list)
                                    ((""
                                      (inst
                                       -1
                                       "translate_clause[m, n, i](res_all_list!1)")
                                      ((""
                                        (hide -11 -12 -14 -9 -7 -5)
                                        ((""
                                          (lemma nclause2fmla_sentence)
                                          ((""
                                            (inst
                                             -1
                                             "translate_clause[m, n, i](res!1)")
                                            ((""
                                              (lemma
                                               sentence_list_append)
                                              ((""
                                                (inst
                                                 -1
                                                 "not_or_map(lntcA!1)"
                                                 "translate_clause[m, n, i](res_all_list!1)")
                                                ((""
                                                  (lemma
                                                   sentence_list_cons)
                                                  ((""
                                                    (inst
                                                     -1
                                                     "f_not(nclause2fmla(translate_clause[m, n, i](res!1)))"
                                                     "append[fmla](not_or_map(lntcA!1), translate_clause[m, n, i](res_all_list!1))")
                                                    ((""
                                                      (replace -1 3 RL)
                                                      ((""
                                                        (replace
                                                         -2
                                                         3
                                                         RL)
                                                        ((""
                                                          (replace
                                                           -4
                                                           3)
                                                          ((""
                                                            (typepred
                                                             "not_or_map(lntcA!1)")
                                                            ((""
                                                              (replace
                                                               -1
                                                               3)
                                                              ((""
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3)
                                                                ((""
                                                                  (expand
                                                                   sentence?
                                                                   -1)
                                                                  ((""
                                                                    (expand
                                                                     sentence?
                                                                     3)
                                                                    ((""
                                                                      (expand
                                                                       freevars
                                                                       3)
                                                                      ((""
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace_checker nil)
    (n formal-const-decl "nat" trace_checker nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (nclause2fmla def-decl "fmla" resolution nil)
    (nclause? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (literal? const-decl "bool" resolution nil)
    (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla nil)
    (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (fmla type-decl nil fmla nil)
    (clause_sentence_list formula-decl nil resolution nil)
    (not_or_map const-decl "sequent" trace_checker nil)
    (sequent type-eq-decl nil sequents nil)
    (sentence_list? const-decl "bool" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (sentence? const-decl "bool" fmla nil)
    (sentence_list_cons formula-decl nil fmla nil)
    (sentence_list_append formula-decl nil fmla nil)
    (nclause2fmla_sentence formula-decl nil resolution nil))
   11520 560 t nil))
 (proof_th_list_TCC11 0
  (proof_th_list_TCC11-1 nil 3483306244 3483888890
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (skolem-typepred)
                (("" (flatten)
                  (("" (skolem-typepred)
                    (("" (flatten)
                      (("" (skolem-typepred)
                        (("" (flatten)
                          (("" (skolem-typepred)
                            (("" (flatten)
                              ((""
                                (replace -15 3)
                                ((""
                                  (expand length 3 1)
                                  ((""
                                    (replace -14 3)
                                    ((""
                                      (expand length 3 2)
                                      ((""
                                        (expand length 3 2)
                                        ((""
                                          (lift-if 3)
                                          ((""
                                            (split)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1146 1080 t nil))
 (proof_th_list_TCC12 0
  (proof_th_list_TCC12-1 nil 3483306244 3483888893
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (skolem-typepred)
                (("" (flatten)
                  (("" (skolem-typepred)
                    (("" (flatten)
                      (("" (skolem-typepred)
                        (("" (flatten)
                          (("" (skolem-typepred)
                            (("" (flatten)
                              ((""
                                (skolem-typepred)
                                ((""
                                  (flatten)
                                  ((""
                                    (skolem-typepred)
                                    ((""
                                      (flatten)
                                      ((""
                                        (skolem-typepred)
                                        ((""
                                          (flatten)
                                          ((""
                                            (skolem-typepred)
                                            ((""
                                              (flatten)
                                              ((""
                                                (typepred "l1!1")
                                                ((""
                                                  (typepred "lntcA!1")
                                                  ((""
                                                    (hide
                                                     -1
                                                     -21
                                                     -18
                                                     -16)
                                                    ((""
                                                      (expand
                                                       nclause?
                                                       3)
                                                      ((""
                                                        (replace -27 3)
                                                        ((""
                                                          (typepred
                                                           "car(lntcA!1)")
                                                          ((""
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nclause? const-decl "bool" resolution nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (merge def-decl "{cla: (tr_clause?) |
         FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}"
           trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (resolution_list def-decl "(tr_clause?)" trace_resolution nil)
    (map_trans_clause const-decl "(cons?[(nclause?)])" trace_checker
     nil)
    (map_ncl2fmla const-decl "(sentence_list?)" trace_checker nil)
    (map_fnot const-decl "(sentence_list?)" trace_checker nil)
    (not_or_map const-decl "sequent" trace_checker nil)
    (append def-decl "list[T]" list_props nil)
    (concl_subsetr const-decl "proof_step" resolution nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fmla type-decl nil fmla nil)
    (literal? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   2881 2730 t nil))
 (proof_th_list_TCC13 0
  (proof_th_list_TCC13-1 nil 3483306244 3483888896
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (skolem-typepred)
                (("" (flatten)
                  (("" (skolem-typepred)
                    (("" (flatten)
                      (("" (skosimp)
                        (("" (skosimp)
                          (("" (skosimp)
                            (("" (skosimp)
                              ((""
                                (skosimp)
                                ((""
                                  (skosimp)
                                  ((""
                                    (replace -17 3)
                                    ((""
                                      (typepred "car(cdr(lntcA!1))")
                                      (("" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nclause? const-decl "bool" resolution nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (concl_subsetr const-decl "proof_step" resolution nil)
    (append def-decl "list[T]" list_props nil)
    (not_or_map const-decl "sequent" trace_checker nil)
    (map_fnot const-decl "(sentence_list?)" trace_checker nil)
    (map_ncl2fmla const-decl "(sentence_list?)" trace_checker nil)
    (map_trans_clause const-decl "(cons?[(nclause?)])" trace_checker
     nil)
    (resolution_list def-decl "(tr_clause?)" trace_resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   3232 2970 t nil))
 (proof_th_list_TCC14 0
  (proof_th_list_TCC14-3 "" 3483451665 3483888384
   ("" (skosimp)
    (("" (skosimp)
      (("" (skosimp)
        (("" (skosimp)
          (("" (skosimp)
            (("" (skosimp)
              (("" (skosimp)
                (("" (skosimp)
                  (("" (skosimp)
                    (("" (skosimp)
                      (("" (skosimp)
                        (("" (typepred "not_or_reduction(l1!1)")
                          (("" (typepred "not_or_reduction(l2!1)")
                            (("" (expand not_or_reduction 3)
                              ((""
                                (expand append 3 2)
                                ((""
                                  (expand append 3 2)
                                  ((""
                                    (expand append 3)
                                    ((""
                                      (expand append 3)
                                      ((""
                                        (expand append 3)
                                        ((""
                                          (replace -4 3)
                                          ((""
                                            (lemma
                                             nclause2fmla_sentence)
                                            ((""
                                              (inst-cp -1 "l1!1")
                                              ((""
                                                (inst-cp -1 "l2!1")
                                                ((""
                                                  (inst-cp
                                                   -1
                                                   "translate_clause(res!1)")
                                                  ((""
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((append def-decl "list[T]" list_props nil)
    (nclause2fmla_sentence formula-decl nil resolution nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sentence? const-decl "bool" fmla nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (resolution_list def-decl "(tr_clause?)" trace_resolution nil)
    (map_trans_clause const-decl "(cons?[(nclause?)])" trace_checker
     nil)
    (map_ncl2fmla const-decl "(sentence_list?)" trace_checker nil)
    (map_fnot const-decl "(sentence_list?)" trace_checker nil)
    (not_or_map const-decl "sequent" trace_checker nil)
    (concl_subsetr const-decl "proof_step" resolution nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil)
    (sentence_list? const-decl "bool" fmla nil)
    (PRED type-eq-decl nil defined_types nil)
    (literal? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (nclause? const-decl "bool" resolution nil)
    (sequent type-eq-decl nil sequents nil)
    (not_or_reduction const-decl "sequent" resolution nil))
   209742 55560 t shostak)
  (proof_th_list_TCC14-2 "" 3483392298 3483451069
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (skolem-typepred)
                (("" (flatten)
                  (("" (skolem-typepred)
                    (("" (flatten)
                      (("" (skolem-typepred)
                        (("" (flatten)
                          (("" (typepred "not_or_map(lntcA!1)")
                            (("" (hide -14 -13)
                              ((""
                                (hide -4 -8)
                                ((""
                                  (typepred "lntcA!1")
                                  ((""
                                    (hide -1)
                                    ((""
                                      (typepred
                                       "resolution_list[m, n, i](lntcA!1)")
                                      (("1" (postpone) nil nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 247 190 t shostak)
  (proof_th_list_TCC14-1 nil 3483313812 3483374131
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (skolem-typepred)
                (("" (flatten)
                  (("" (skolem-typepred)
                    (("" (flatten)
                      (("" (skolem-typepred)
                        (("" (flatten)
                          (("" (lemma clause_sentence_list)
                            (("" (typepred "not_or_map(lntcA!1)")
                              ((""
                                (typepred "lntcA!1")
                                ((""
                                  (hide -1)
                                  ((""
                                    (hide -6 -10)
                                    ((""
                                      (typepred
                                       "resolution_list[m, n, i](lntcA!1)")
                                      (("1" (postpone) nil nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 4940329 2590 t nil))
 (proof_th_list_TCC15 0
  (proof_th_list_TCC15-1 nil 3483734178 3483888638
   ("" (skosimp)
    (("" (skosimp)
      (("" (skosimp)
        (("" (skosimp)
          (("" (skosimp)
            (("" (skosimp)
              (("" (skosimp)
                (("" (skosimp)
                  (("" (skosimp)
                    (("" (skosimp)
                      (("" (skosimp)
                        (("" (typepred "not_or_map(lntcA!1)")
                          ((""
                            (typepred
                             "translate_clause[m, n, i](res_list!1)")
                            (("" (lemma clause_sentence_list)
                              ((""
                                (inst
                                 -1
                                 "translate_clause[m, n, i](res_list!1)")
                                ((""
                                  (hide -2 -3)
                                  ((""
                                    (hide -9)
                                    ((""
                                      (replace -4 3)
                                      ((""
                                        (lemma nclause2fmla_sentence)
                                        ((""
                                          (inst
                                           -1
                                           "translate_clause(res!1)")
                                          ((""
                                            (lemma sentence_list_cons)
                                            ((""
                                              (inst
                                               -1
                                               "nclause2fmla(translate_clause(res!1))"
                                               "append[fmla](not_or_map(lntcA!1), translate_clause[m, n, i](res_list!1))")
                                              ((""
                                                (replace -1 3 RL)
                                                ((""
                                                  (replace -2 3)
                                                  ((""
                                                    (lemma
                                                     sentence_list_append)
                                                    ((""
                                                      (inst
                                                       -1
                                                       "not_or_map(lntcA!1)"
                                                       "translate_clause[m, n, i](res_list!1)")
                                                      ((""
                                                        (replace
                                                         -1
                                                         3
                                                         RL)
                                                        ((""
                                                          (replace
                                                           -5
                                                           3)
                                                          ((""
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((not_or_map const-decl "sequent" trace_checker nil)
    (sequent type-eq-decl nil sequents nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence_list? const-decl "bool" fmla nil)
    (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (clause_sentence_list formula-decl nil resolution nil)
    (nclause? const-decl "bool" resolution nil)
    (append def-decl "list[T]" list_props nil)
    (nclause2fmla def-decl "fmla" resolution nil)
    (sentence_list_append formula-decl nil fmla nil)
    (sentence_list_cons formula-decl nil fmla nil)
    (nclause2fmla_sentence formula-decl nil resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (clause? const-decl "bool" resolution nil)
    (literal? const-decl "bool" resolution nil))
   241982 3490 t nil))
 (proof_th_list_TCC16 0
  (proof_th_list_TCC16-1 nil 3483734178 3483888720
   ("" (skosimp)
    (("" (skosimp)
      (("" (skosimp)
        (("" (skosimp)
          (("" (skosimp)
            (("" (skosimp)
              (("" (skosimp)
                (("" (skosimp)
                  (("" (skosimp)
                    (("" (skosimp)
                      (("" (skosimp)
                        (("" (lemma sentence_list_append)
                          ((""
                            (inst -1 "not_or_reduction(l1!1)"
                             "not_or_reduction(l2!1)")
                            (("" (replace -1 3 RL)
                              ((""
                                (typepred "not_or_reduction(l1!1)")
                                ((""
                                  (typepred "not_or_reduction(l2!1)")
                                  ((""
                                    (replace -1 3)
                                    (("" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((sentence_list_append formula-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (not_or_reduction const-decl "sequent" resolution nil)
    (sequent type-eq-decl nil sequents nil)
    (sentence_list? const-decl "bool" fmla nil)
    (nclause? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (literal? const-decl "bool" resolution nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil))
   60502 270 t nil))
 (proof_th_list_TCC17 0
  (proof_th_list_TCC17-1 nil 3483831034 3483888770
   ("" (skosimp)
    (("" (skosimp)
      (("" (skosimp)
        (("" (skosimp)
          (("" (skosimp)
            (("" (skosimp)
              (("" (skosimp)
                (("" (skosimp)
                  (("" (skosimp)
                    (("" (skosimp)
                      (("" (skosimp)
                        (("" (skosimp)
                          (("" (replace -2 3)
                            (("" (lemma nclause2fmla_sentence)
                              ((""
                                (inst -1 "translate_clause(res!1)")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nclause2fmla_sentence formula-decl nil resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nclause? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (literal? const-decl "bool" resolution nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil))
   43095 290 t nil))
 (proof_th_list_TCC18 0
  (proof_th_list_TCC18-1 nil 3483831034 3483888845
   ("" (skosimp)
    (("" (skosimp)
      (("" (skosimp)
        (("" (skosimp)
          (("" (skosimp)
            (("" (skosimp)
              (("" (skosimp)
                (("" (skosimp)
                  (("" (skosimp)
                    (("" (skosimp)
                      (("" (skosimp)
                        (("" (skosimp)
                          (("" (lemma sentence_list_append)
                            ((""
                              (inst -1 "not_or_map(lntcA!1)"
                               "translate_clause[m, n, i](res_list!1)")
                              ((""
                                (replace -1 3 RL)
                                ((""
                                  (typepred "not_or_map(lntcA!1)")
                                  ((""
                                    (lemma clause_sentence_list)
                                    ((""
                                      (inst
                                       -1
                                       "translate_clause[m, n, i](res_list!1)")
                                      ((""
                                        (replace -1 3)
                                        (("" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((fmla type-decl nil fmla nil) (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace_checker nil)
    (n formal-const-decl "nat" trace_checker nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sentence_list? const-decl "bool" fmla nil)
    (sequent type-eq-decl nil sequents nil)
    (not_or_map const-decl "sequent" trace_checker nil)
    (literal? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (clause_sentence_list formula-decl nil resolution nil)
    (sentence_list_append formula-decl nil fmla nil))
   63078 360 t nil))
 (subset_cons 0
  (subset_cons-1 nil 3483972626 3483972752
   ("" (skosimp)
    (("" (generalize AA!1 AA)
      (("" (induct AA)
        (("1" (grind) nil nil)
         ("2" (skosimp)
          (("2" (expand subset 1)
            (("2" (expand subset -2)
              (("2" (expand member 1)
                (("2" (flatten)
                  (("2" (replace -2 1)
                    (("2" (replace -3 -1) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (subset def-decl "bool" minlist nil)
    (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member def-decl "bool" list_props nil)
    (list_induction formula-decl nil list_adt nil))
   125962 140 t shostak))
 (th_list 0
  (th_list-2 "" 3483801890 3483972620
   ("" (skosimp)
    (("" (assert)
      (("" (generalize "lntcA!1" l)
        (("" (measure-induct+ "length(l)" l)
          (("" (expand proof_th_list 1)
            (("" (lift-if 1)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (lemma th1)
                    (("1"
                      (inst -1 "translate_clause(car(x!1))"
                       "translate_clause(car(x!1))")
                      (("1" (expand not_or_reduction -1)
                        (("1" (expand append -1 1)
                          (("1" (expand append -1 1)
                            (("1" (expand not_or_map 1)
                              (("1"
                                (expand resolution_list 1)
                                (("1"
                                  (lift-if 1)
                                  (("1"
                                    (replace -2 1)
                                    (("1"
                                      (expand map_trans_clause 1)
                                      (("1"
                                        (expand map 1)
                                        (("1"
                                          (expand map 1)
                                          (("1"
                                            (lift-if 1)
                                            (("1"
                                              (replace -2 1)
                                              (("1"
                                                (expand map_ncl2fmla 1)
                                                (("1"
                                                  (expand map 1)
                                                  (("1"
                                                    (expand map 1)
                                                    (("1"
                                                      (expand
                                                       map_fnot
                                                       1)
                                                      (("1"
                                                        (expand map 1)
                                                        (("1"
                                                          (expand
                                                           map
                                                           1)
                                                          (("1"
                                                            (expand
                                                             append
                                                             1)
                                                            (("1"
                                                              (expand
                                                               append
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 1
                                                                 -1)
                                                                (("1"
                                                                  (delete
                                                                   2)
                                                                  (("1"
                                                                    (lemma
                                                                     every_member_subset
                                                                     (k
                                                                      "translate_clause(car(x!1))"
                                                                      l
                                                                      "translate_clause(car(x!1))"))
                                                                    (("1"
                                                                      (lemma
                                                                       subset_lit_subset_fmla)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "translate_clause(car(x!1))"
                                                                         "translate_clause(car(x!1))")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           1)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             1)
                                                                            (("1"
                                                                              (skosimp)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (delete 2)
                        (("2" (lemma clause_sentence_list)
                          (("2"
                            (inst -1
                             "translate_clause[m, n, i](car[((ne_tr_clause?))](x!1))")
                            nil nil))
                          nil))
                        nil)
                       ("3" (delete 2)
                        (("3" (typepred "car[((ne_tr_clause?))](x!1)")
                          (("3" (hide -1) (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (lemma lemma_subsetr)
                        (("1"
                          (inst -1 "proof_th(car(x!1), car(cdr(x!1)))"
                           "append(not_or_reduction(translate_clause(car(x!1))),
                                    not_or_reduction(translate_clause(car(cdr(x!1)))))"
                           "not_or_map(x!1)")
                          (("1" (expand resolution_list 1)
                            (("1" (expand resolution_list 1)
                              (("1"
                                (lift-if 1)
                                (("1"
                                  (split 1)
                                  (("1" (flatten) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (typepred "car(x!1)")
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (replace -2 2)
                                          (("2"
                                            (typepred "car(cdr(x!1))")
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (replace -2 2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred
                                                     "cdr(cdr(x!1))")
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (expand
                                                         ne_tr_clause?
                                                         2)
                                                        (("2"
                                                          (expand
                                                           translate_clause
                                                           2
                                                           8)
                                                          (("2"
                                                            (expand
                                                             map
                                                             2)
                                                            (("2"
                                                              (lemma
                                                               append_null
                                                               (l
                                                                "not_or_map(x!1)"))
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   translate_clause
                                                                   2
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     map
                                                                     2)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (replace
                                                                           2
                                                                           -6)
                                                                          (("2"
                                                                            (delete
                                                                             2)
                                                                            (("2"
                                                                              (split
                                                                               2
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 not_or_reduction
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   append
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     append
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       not_or_map)
                                                                                      (("1"
                                                                                        (expand
                                                                                         map_trans_clause
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           map_ncl2fmla
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             map_fnot
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               map
                                                                                               1
                                                                                               3)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 map
                                                                                                 1
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   map
                                                                                                   1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     subset
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       member
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         map
                                                                                                         1
                                                                                                         3)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           map
                                                                                                           1
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             map
                                                                                                             1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               subset
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 member
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   member
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     subset
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 th)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "car(x!1)"
                                                                                   "car(cdr(x!1))")
                                                                                  (("2"
                                                                                    (expand
                                                                                     translate_clause
                                                                                     -1
                                                                                     3)
                                                                                    (("2"
                                                                                      (expand
                                                                                       map
                                                                                       -1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         append_null
                                                                                         (l
                                                                                          "not_or_reduction(translate_clause(car(cdr(x!1))))"))
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           -2)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (delete 2)
                            (("2" (expand not_or_reduction 1)
                              (("2"
                                (expand append 1)
                                (("2"
                                  (expand append 1)
                                  (("2"
                                    (lemma sentence_list_cons)
                                    (("2"
                                      (inst-cp
                                       -1
                                       "f_not(nclause2fmla(translate_clause[m, n, i](car[((ne_tr_clause?))](x!1))))"
                                       "cons(f_not(nclause2fmla(translate_clause[m, n, i](car[((ne_tr_clause?))](cdr[((ne_tr_clause?))](x!1))))),
                               null)")
                                      (("2"
                                        (replace -2 1 RL)
                                        (("2"
                                          (lemma nclause2fmla_sentence)
                                          (("2"
                                            (inst
                                             -1
                                             "translate_clause[m, n, i](car[((ne_tr_clause?))](x!1))")
                                            (("2"
                                              (expand sentence?)
                                              (("2"
                                                (expand freevars 1)
                                                (("2"
                                                  (replace -1 1)
                                                  (("2"
                                                    (expand
                                                     sentence_list?
                                                     1)
                                                    (("2"
                                                      (expand
                                                       freevars
                                                       1)
                                                      (("2"
                                                        (expand
                                                         freevars
                                                         1
                                                         2)
                                                        (("2"
                                                          (lemma
                                                           append_null
                                                           (l
                                                            "freevars(f_not(nclause2fmla(translate_clause[m, n, i](car[((ne_tr_clause?))](cdr[((ne_tr_clause?))](x!1))))))"))
                                                          (("2"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("2"
                                                              (expand
                                                               freevars
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 nclause2fmla_sentence)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "translate_clause[m, n, i](car[((ne_tr_clause?))](cdr[((ne_tr_clause?))](x!1)))")
                                                                  (("2"
                                                                    (expand
                                                                     sentence?
                                                                     -1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (delete 2)
                            (("3"
                              (typepred
                               "car[((ne_tr_clause?))](cdr[((ne_tr_clause?))](x!1))")
                              (("3"
                                (hide -1)
                                (("3"
                                  (expand translate_clause 1)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (delete 2)
                            (("4"
                              (typepred "car[((ne_tr_clause?))](x!1)")
                              (("4"
                                (hide -1)
                                (("4"
                                  (expand translate_clause)
                                  (("4" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (lemma lemma_cutr)
                        (("2"
                          (inst -1
                           "RR_subsetr(append(append(not_or_reduction(translate_clause(car(x!1))),
                                                  not_or_reduction(translate_clause(car(cdr(x!1))))),
                                           cons(nclause2fmla(translate_clause(resolution(car(x!1), car(cdr(x!1))))), null)),
                                    cons(nclause2fmla(translate_clause(resolution(car(x!1), car(cdr(x!1))))),
                                         append(not_or_map(x!1), translate_clause(resolution_list(x!1)))),
                                    RR_lemma2(append(not_or_reduction(translate_clause(car(x!1))),
                                                     not_or_reduction(translate_clause(car(cdr(x!1))))),
                                              translate_clause(resolution(car(x!1), car(cdr(x!1)))),
                                              proof_th(car(x!1), car(cdr(x!1)))))"
                           "RR_subsetr(append(not_or_map(cons[(ne_tr_clause?)](resolution(car(x!1), car(cdr(x!1))), cdr(cdr(x!1)))),
                                           translate_clause(resolution_list(cons[(ne_tr_clause?)]
                                                                                (resolution(car(x!1), car(cdr(x!1))),
                                                                                 cdr(cdr(x!1)))))),
                                    cons(f_not(nclause2fmla(translate_clause(resolution(car(x!1), car(cdr(x!1)))))),
                                         append(not_or_map(x!1), translate_clause(resolution_list(x!1)))),
                                    proof_th_list(cons[(ne_tr_clause?)](resolution(car(x!1), car(cdr(x!1))), cdr(cdr(x!1)))))"
                           "nclause2fmla(translate_clause(resolution(car(x!1), car(cdr(x!1)))))"
                           "append(not_or_map(x!1), translate_clause(resolution_list(x!1)))")
                          (("1" (replace 2 -1)
                            (("1" (delete 3)
                              (("1"
                                (split)
                                (("1"
                                  (lemma lemma_subsetr)
                                  (("1"
                                    (inst
                                     -1
                                     "RR_lemma2(append(not_or_reduction(translate_clause(car(x!1))),
                                             not_or_reduction(translate_clause(car(cdr(x!1))))),
                                      translate_clause(resolution(car(x!1), car(cdr(x!1)))), proof_th(car(x!1), car(cdr(x!1))))"
                                     "append(append(not_or_reduction(translate_clause(car(x!1))),
                                          not_or_reduction(translate_clause(car(cdr(x!1))))),
                                   cons(nclause2fmla(translate_clause(resolution(car(x!1), car(cdr(x!1))))), null))"
                                     "cons(nclause2fmla(translate_clause(resolution(car(x!1), car(cdr(x!1))))),
                                 append(not_or_map(x!1), translate_clause(resolution_list(x!1))))")
                                    (("1"
                                      (replace 1 -1)
                                      (("1"
                                        (delete 2)
                                        (("1"
                                          (split 1 1)
                                          (("1"
                                            (expand not_or_reduction 1)
                                            (("1"
                                              (expand append 1 2)
                                              (("1"
                                                (expand append 1 2)
                                                (("1"
                                                  (expand append 1 1)
                                                  (("1"
                                                    (expand append 1 1)
                                                    (("1"
                                                      (expand
                                                       append
                                                       1
                                                       1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (expand
                                                           subset
                                                           1)
                                                          (("1"
                                                            (expand
                                                             subset
                                                             1)
                                                            (("1"
                                                              (expand
                                                               subset
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 subset
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   member
                                                                   1
                                                                   3)
                                                                  (("1"
                                                                    (expand
                                                                     member)
                                                                    (("1"
                                                                      (expand
                                                                       not_or_map
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         map_trans_clause
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           map
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             map_ncl2fmla
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               map_fnot
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 map
                                                                                 1
                                                                                 2)
                                                                                (("1"
                                                                                  (expand
                                                                                   map
                                                                                   1
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     append
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       member
                                                                                       1
                                                                                       1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (delete
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             map
                                                                                             1
                                                                                             2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               map
                                                                                               1
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 member
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (delete
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       map
                                                                                                       1
                                                                                                       3)
                                                                                                      (("1"
                                                                                                        (lift-if
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           3
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             map
                                                                                                             1
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               map
                                                                                                               1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 append
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   member
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma lemma2)
                                            (("2"
                                              (inst
                                               -1
                                               "proof_th(car(x!1), car(cdr(x!1)))"
                                               "translate_clause(resolution(car(x!1), car(cdr(x!1))))"
                                               "append(not_or_reduction(translate_clause(car(x!1))), not_or_reduction(translate_clause(car(cdr(x!1)))))")
                                              (("1"
                                                (expand
                                                 or_reduction
                                                 -1)
                                                (("1"
                                                  (lift-if -1)
                                                  (("1"
                                                    (expand
                                                     translate_clause
                                                     -1
                                                     1)
                                                    (("1"
                                                      (expand map -1)
                                                      (("1"
                                                        (lift-if -1)
                                                        (("1"
                                                          (replace
                                                           2
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               1
                                                               -1)
                                                              (("1"
                                                                (delete
                                                                 2)
                                                                (("1"
                                                                  (lemma
                                                                   th)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "car(x!1)"
                                                                     "car(cdr(x!1))")
                                                                    (("1"
                                                                      (lemma
                                                                       append_assoc
                                                                       (l1
                                                                        "not_or_reduction(translate_clause(car(x!1)))"
                                                                        l2
                                                                        "not_or_reduction(translate_clause(car(cdr(x!1))))"
                                                                        l3
                                                                        "translate_clause(resolution(car(x!1), car(cdr(x!1))))"))
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (delete 2)
                                                (("2"
                                                  (expand
                                                   not_or_reduction
                                                   1)
                                                  (("2"
                                                    (expand append 1 1)
                                                    (("2"
                                                      (expand
                                                       append
                                                       1
                                                       1)
                                                      (("2"
                                                        (lemma
                                                         nclause2fmla_sentence)
                                                        (("2"
                                                          (inst-cp
                                                           -1
                                                           "translate_clause[m, n, i](car[((ne_tr_clause?))](x!1))")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "translate_clause[m, n, i](car[((ne_tr_clause?))](cdr[((ne_tr_clause?))](x!1)))")
                                                            (("2"
                                                              (hide -3)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (delete 2)
                                                (("3"
                                                  (expand nclause? 1)
                                                  (("3"
                                                    (expand
                                                     translate_clause
                                                     1)
                                                    (("3"
                                                      (hide -1)
                                                      (("3"
                                                        (typepred
                                                         "car(cdr(x!1))")
                                                        (("3"
                                                          (hide -1)
                                                          (("3"
                                                            (hide -1)
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (delete 2)
                                                (("4"
                                                  (hide -1)
                                                  (("4"
                                                    (typepred
                                                     "car[((ne_tr_clause?))](x!1)")
                                                    (("4"
                                                      (hide -1 -2)
                                                      (("4"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma lemma_subsetr)
                                  (("2"
                                    (inst
                                     -1
                                     "proof_th_list(cons[(ne_tr_clause?)](resolution(car(x!1), car(cdr(x!1))), cdr(cdr(x!1))))"
                                     "append(not_or_map(cons[(ne_tr_clause?)](resolution(car(x!1), car(cdr(x!1))), cdr(cdr(x!1)))),
                                   translate_clause(resolution_list(cons[(ne_tr_clause?)]
                                                                        (resolution(car(x!1), car(cdr(x!1))), cdr(cdr(x!1))))))"
                                     "cons(f_not(nclause2fmla(translate_clause(resolution(car(x!1), car(cdr(x!1)))))),
                                 append(not_or_map(x!1), translate_clause(resolution_list(x!1))))")
                                    (("2"
                                      (replace 1 -1)
                                      (("2"
                                        (delete 2)
                                        (("2"
                                          (split 1 1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (expand not_or_map)
                                              (("1"
                                                (expand
                                                 map_trans_clause)
                                                (("1"
                                                  (expand map)
                                                  (("1"
                                                    (expand
                                                     map_ncl2fmla)
                                                    (("1"
                                                      (expand map 1 1)
                                                      (("1"
                                                        (expand
                                                         map_fnot)
                                                        (("1"
                                                          (expand
                                                           map
                                                           1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             append
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               subset
                                                               1
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 member
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (lemma
                                                                   subset_cons)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "append(map(f_not)
                       (map(nclause2fmla)
                           (map(translate_clause)(cdr(cdr(x!1))))),
                    translate_clause(resolution_list
                                     (cons[(ne_tr_clause?)]
                                      (resolution(car(x!1), car(cdr(x!1))),
                                       cdr(cdr(x!1))))))"
                                                                     "append(map(f_not)
                            (map(nclause2fmla)
                                (cons(translate_clause(car(x!1)),
                                      map(translate_clause)(cdr(x!1))))),
                         translate_clause(resolution_list(x!1)))"
                                                                     "f_not(nclause2fmla(translate_clause
                                     (resolution
                                      (car(x!1), car(cdr(x!1))))))")
                                                                    (("1"
                                                                      (replace
                                                                       1
                                                                       -1)
                                                                      (("1"
                                                                        (delete
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           map
                                                                           1
                                                                           5)
                                                                          (("1"
                                                                            (expand
                                                                             map
                                                                             1
                                                                             4)
                                                                            (("1"
                                                                              (expand
                                                                               append
                                                                               1
                                                                               2)
                                                                              (("1"
                                                                                (lemma
                                                                                 subset_cons)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "append(map(f_not)
                       (map(nclause2fmla)
                           (map(translate_clause)(cdr(cdr(x!1))))),
                    translate_clause(resolution_list
                                     (cons[(ne_tr_clause?)]
                                      (resolution(car(x!1), car(cdr(x!1))),
                                       cdr(cdr(x!1))))))"
                                                                                   "append(map(f_not)
                            (map(nclause2fmla)
                                (map(translate_clause)(cdr(x!1)))),
                         translate_clause(resolution_list(x!1)))"
                                                                                   "f_not(nclause2fmla(translate_clause(car(x!1))))")
                                                                                  (("1"
                                                                                    (replace
                                                                                     1
                                                                                     -1)
                                                                                    (("1"
                                                                                      (delete
                                                                                       2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         map
                                                                                         1
                                                                                         6)
                                                                                        (("1"
                                                                                          (lift-if
                                                                                           1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             3
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               map
                                                                                               1
                                                                                               5)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 map
                                                                                                 1
                                                                                                 4)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   append
                                                                                                   1
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     subset_cons)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "append(map(f_not)
                       (map(nclause2fmla)
                           (map(translate_clause)(cdr(cdr(x!1))))),
                    translate_clause(resolution_list
                                     (cons[(ne_tr_clause?)]
                                      (resolution(car(x!1), car(cdr(x!1))),
                                       cdr(cdr(x!1))))))"
                                                                                                       "append(map(f_not)
                            (map(nclause2fmla)
                                (map(translate_clause)(cdr(cdr(x!1))))),
                         translate_clause(resolution_list(x!1)))"
                                                                                                       "f_not(nclause2fmla(translate_clause(car(cdr(x!1)))))")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         1
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (delete
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             resolution_list
                                                                                                             1
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (lift-if
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 3
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "car(x!1)")
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "car(cdr(x!1))")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -3
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -6
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -4
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             every_member_subset
                                                                                                                             (k
                                                                                                                              "append(map(f_not)
                       (map(nclause2fmla)
                           (map(translate_clause)(cdr(cdr(x!1))))),
                    translate_clause(resolution_list
                                     (cons[(ne_tr_clause?)]
                                      (resolution(car(x!1), car(cdr(x!1))),
                                       cdr(cdr(x!1))))))"
                                                                                                                              l
                                                                                                                              "append(map(f_not)
                       (map(nclause2fmla)
                           (map(translate_clause)(cdr(cdr(x!1))))),
                    translate_clause(resolution_list
                                     (cons[(ne_tr_clause?)]
                                      (resolution(car(x!1), car(cdr(x!1))),
                                       cdr(cdr(x!1))))))"))
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (skosimp)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (delete
                                                                       2)
                                                                      (("2"
                                                                        (typepred
                                                                         "x!1")
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             map
                                                                             1)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (replace
                                                                                 3
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   every)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "car(cdr[((ne_tr_clause?))](x!1))")
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (expand
                                                                                           translate_clause
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             nclause?
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               ne_tr_clause?)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (generalize
                                                                                           "cdr(cdr[((ne_tr_clause?))](x!1))"
                                                                                           l)
                                                                                          (("2"
                                                                                            (induct
                                                                                             l)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   map
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     every
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "cons1_var!1")
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           translate_clause
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             ne_tr_clause?)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               nclause?
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (skosimp)
                                                                                              (("3"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("4"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("5"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (delete
                                                                       2)
                                                                      (("3"
                                                                        (typepred
                                                                         "car[((ne_tr_clause?))](x!1)")
                                                                        (("3"
                                                                          (expand
                                                                           nclause?
                                                                           1)
                                                                          (("3"
                                                                            (hide
                                                                             -1
                                                                             -2)
                                                                            (("3"
                                                                              (expand
                                                                               translate_clause
                                                                               1)
                                                                              (("3"
                                                                                (expand
                                                                                 ne_tr_clause?
                                                                                 -1)
                                                                                (("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst
                                             -1
                                             "cons[(ne_tr_clause?)](resolution(car(x!1), car(cdr(x!1))), cdr(cdr(x!1)))")
                                            (("1"
                                              (replace 1 -1)
                                              (("1"
                                                (delete 1)
                                                (("1"
                                                  (expand length 3 1)
                                                  (("1"
                                                    (expand length 3 2)
                                                    (("1"
                                                      (expand
                                                       length
                                                       3
                                                       2)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (lemma lemma_subsetr)
                                  (("3"
                                    (inst
                                     -1
                                     "RR_lemma2(append(not_or_reduction(translate_clause(car(x!1))),
                                             not_or_reduction(translate_clause(car(cdr(x!1))))),
                                      translate_clause(resolution(car(x!1), car(cdr(x!1)))), proof_th(car(x!1), car(cdr(x!1))))"
                                     "append(append(not_or_reduction(translate_clause(car(x!1))),
                                          not_or_reduction(translate_clause(car(cdr(x!1))))),
                                   cons(nclause2fmla(translate_clause(resolution(car(x!1), car(cdr(x!1))))), null))"
                                     "cons(nclause2fmla(translate_clause(resolution(car(x!1), car(cdr(x!1))))),
                                 append(not_or_map(x!1), translate_clause(resolution_list(x!1))))")
                                    (("3"
                                      (replace 1 -1)
                                      (("3"
                                        (delete 2)
                                        (("3"
                                          (split 1 1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (expand
                                               not_or_reduction
                                               1)
                                              (("1"
                                                (expand append 1 2)
                                                (("1"
                                                  (expand append 1 2)
                                                  (("1"
                                                    (expand append 1 1)
                                                    (("1"
                                                      (expand
                                                       append
                                                       1
                                                       1)
                                                      (("1"
                                                        (expand
                                                         append
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           subset
                                                           1)
                                                          (("1"
                                                            (expand
                                                             subset
                                                             1)
                                                            (("1"
                                                              (expand
                                                               subset
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 subset
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   member
                                                                   1
                                                                   3)
                                                                  (("1"
                                                                    (expand
                                                                     member
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       not_or_map
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         map_trans_clause)
                                                                        (("1"
                                                                          (expand
                                                                           map)
                                                                          (("1"
                                                                            (expand
                                                                             map
                                                                             1
                                                                             2)
                                                                            (("1"
                                                                              (lift-if
                                                                               1)
                                                                              (("1"
                                                                                (replace
                                                                                 3
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   map_ncl2fmla)
                                                                                  (("1"
                                                                                    (expand
                                                                                     map
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       map_fnot
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         map
                                                                                         1
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           append
                                                                                           1
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             member
                                                                                             1
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               map
                                                                                               1
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 map
                                                                                                 1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (delete
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       append
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         member
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (delete
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               map
                                                                                                               1
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 map
                                                                                                                 1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   append
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     member
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma lemma2)
                                            (("2"
                                              (inst
                                               -1
                                               "proof_th(car(x!1), car(cdr(x!1)))"
                                               "translate_clause(resolution(car(x!1), car(cdr(x!1))))"
                                               "append(not_or_reduction(translate_clause(car(x!1))),
                                   not_or_reduction(translate_clause(car(cdr(x!1)))))")
                                              (("1"
                                                (expand
                                                 or_reduction
                                                 -1)
                                                (("1"
                                                  (expand
                                                   translate_clause
                                                   -1
                                                   9)
                                                  (("1"
                                                    (expand map -1)
                                                    (("1"
                                                      (lift-if -1)
                                                      (("1"
                                                        (replace 2 -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             1
                                                             -1)
                                                            (("1"
                                                              (delete
                                                               2)
                                                              (("1"
                                                                (lemma
                                                                 th)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "car(x!1)"
                                                                   "car(cdr(x!1))")
                                                                  (("1"
                                                                    (lemma
                                                                     append_assoc
                                                                     (l1
                                                                      "not_or_reduction(translate_clause(car(x!1)))"
                                                                      l2
                                                                      "not_or_reduction(translate_clause(car(cdr(x!1))))"
                                                                      l3
                                                                      "translate_clause(resolution(car(x!1), car(cdr(x!1))))"))
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (delete 2)
                                                (("2"
                                                  (expand
                                                   not_or_reduction
                                                   1)
                                                  (("2"
                                                    (expand append 1 1)
                                                    (("2"
                                                      (expand
                                                       append
                                                       1
                                                       1)
                                                      (("2"
                                                        (lemma
                                                         nclause2fmla_sentence)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (inst-cp
                                                             -1
                                                             "translate_clause[m, n, i](car[((ne_tr_clause?))](x!1))")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "translate_clause[m, n, i](car[((ne_tr_clause?))](cdr[((ne_tr_clause?))](x!1)))")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (delete 2)
                                                (("3"
                                                  (hide -1)
                                                  (("3"
                                                    (typepred
                                                     "car[((ne_tr_clause?))](cdr[((ne_tr_clause?))](x!1))")
                                                    (("3"
                                                      (hide -1 -2)
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (delete 2)
                                                (("4"
                                                  (hide -1)
                                                  (("4"
                                                    (typepred
                                                     "car[((ne_tr_clause?))](x!1)")
                                                    (("4"
                                                      (hide -1 -2)
                                                      (("4"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (lemma lemma_subsetr)
                                  (("4"
                                    (inst
                                     -1
                                     "proof_th_list(cons[(ne_tr_clause?)](resolution(car(x!1), car(cdr(x!1))), cdr(cdr(x!1))))"
                                     "append(not_or_map(cons[(ne_tr_clause?)](resolution(car(x!1), car(cdr(x!1))), cdr(cdr(x!1)))),
                                   translate_clause(resolution_list(cons[(ne_tr_clause?)]
                                                                        (resolution(car(x!1), car(cdr(x!1))), cdr(cdr(x!1))))))"
                                     "cons(f_not(nclause2fmla(translate_clause(resolution(car(x!1), car(cdr(x!1)))))),
                                 append(not_or_map(x!1), translate_clause(resolution_list(x!1))))")
                                    (("4"
                                      (replace 1 -1)
                                      (("4"
                                        (delete 2)
                                        (("4"
                                          (split 1 1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (expand not_or_map 1 1)
                                              (("1"
                                                (expand
                                                 map_trans_clause
                                                 1)
                                                (("1"
                                                  (expand map 1)
                                                  (("1"
                                                    (expand
                                                     map_ncl2fmla
                                                     1)
                                                    (("1"
                                                      (expand map 1 1)
                                                      (("1"
                                                        (expand
                                                         map_fnot
                                                         1)
                                                        (("1"
                                                          (expand
                                                           map
                                                           1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             append
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               subset)
                                                              (("1"
                                                                (expand
                                                                 member)
                                                                (("1"
                                                                  (expand
                                                                   resolution_list
                                                                   1
                                                                   2)
                                                                  (("1"
                                                                    (lift-if
                                                                     1)
                                                                    (("1"
                                                                      (replace
                                                                       3
                                                                       1)
                                                                      (("1"
                                                                        (typepred
                                                                         "car(x!1)")
                                                                        (("1"
                                                                          (typepred
                                                                           "car(cdr(x!1))")
                                                                          (("1"
                                                                            (hide
                                                                             -1
                                                                             -4)
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               1)
                                                                              (("1"
                                                                                (replace
                                                                                 -4
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   subset_cons)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "append(map(f_not)
                       (map(nclause2fmla)
                           (map(translate_clause)(cdr(cdr(x!1))))),
                    translate_clause(resolution_list
                                     (cons[(ne_tr_clause?)]
                                      (resolution(car(x!1), car(cdr(x!1))),
                                       cdr(cdr(x!1))))))"
                                                                                     "append(not_or_map(x!1),
                         translate_clause(resolution_list
                                          (cons
                                           (resolution
                                            (car(x!1), car(cdr(x!1))),
                                            cdr(cdr(x!1))))))"
                                                                                     "f_not(nclause2fmla(translate_clause
                                     (resolution
                                      (car(x!1), car(cdr(x!1))))))")
                                                                                    (("1"
                                                                                      (replace
                                                                                       1
                                                                                       -1)
                                                                                      (("1"
                                                                                        (delete
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           not_or_map
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             map_trans_clause
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               map
                                                                                               1
                                                                                               4)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 map
                                                                                                 1
                                                                                                 4)
                                                                                                (("1"
                                                                                                  (lift-if
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     3
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       map_ncl2fmla)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         map
                                                                                                         1
                                                                                                         4)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           map
                                                                                                           1
                                                                                                           4)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             map_fnot)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               map
                                                                                                               1
                                                                                                               4)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 map
                                                                                                                 1
                                                                                                                 4)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   append
                                                                                                                   1
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     append
                                                                                                                     1
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       subset_cons)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "append(map(f_not)
                       (map(nclause2fmla)
                           (map(translate_clause)(cdr(cdr(x!1))))),
                    translate_clause(resolution_list
                                     (cons[(ne_tr_clause?)]
                                      (resolution(car(x!1), car(cdr(x!1))),
                                       cdr(cdr(x!1))))))"
                                                                                                                         "cons(f_not(nclause2fmla(translate_clause
                                          (car(cdr(x!1))))),
                       append(map(f_not)
                                 (map(nclause2fmla)
                                     (map
                                      (translate_clause)(cdr(cdr(x!1))))),
                              translate_clause(resolution_list
                                               (cons
                                                (resolution
                                                 (car(x!1), car(cdr(x!1))),
                                                 cdr(cdr(x!1)))))))"
                                                                                                                         "f_not(nclause2fmla(translate_clause(car(x!1))))")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           1
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (delete
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               subset_cons)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "append(map(f_not)
                       (map(nclause2fmla)
                           (map(translate_clause)(cdr(cdr(x!1))))),
                    translate_clause(resolution_list
                                     (cons[(ne_tr_clause?)]
                                      (resolution(car(x!1), car(cdr(x!1))),
                                       cdr(cdr(x!1))))))"
                                                                                                                                 "append(map(f_not)
                            (map(nclause2fmla)
                                (map(translate_clause)(cdr(cdr(x!1))))),
                         translate_clause(resolution_list
                                          (cons
                                           (resolution
                                            (car(x!1), car(cdr(x!1))),
                                            cdr(cdr(x!1))))))"
                                                                                                                                 "f_not(nclause2fmla(translate_clause(car(cdr(x!1)))))")
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   1
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (delete
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       every_member_subset
                                                                                                                                       (k
                                                                                                                                        "append(map(f_not)
                       (map(nclause2fmla)
                           (map(translate_clause)(cdr(cdr(x!1))))),
                    translate_clause(resolution_list
                                     (cons[(ne_tr_clause?)]
                                      (resolution(car(x!1), car(cdr(x!1))),
                                       cdr(cdr(x!1))))))"
                                                                                                                                        l
                                                                                                                                        "append(map(f_not)
                       (map(nclause2fmla)
                           (map(translate_clause)(cdr(cdr(x!1))))),
                    translate_clause(resolution_list
                                     (cons
                                      (resolution(car(x!1), car(cdr(x!1))),
                                       cdr(cdr(x!1))))))"))
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (hide
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst
                                             -1
                                             "cons[(ne_tr_clause?)](resolution(car(x!1), car(cdr(x!1))), cdr(cdr(x!1)))")
                                            (("1"
                                              (replace 1 -1)
                                              (("1"
                                                (delete 1)
                                                (("1"
                                                  (expand length 3)
                                                  (("1"
                                                    (expand length 3 2)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (delete 3)
                            (("2" (hide -1)
                              (("2"
                                (lemma sentence_list_append)
                                (("2"
                                  (typepred "x!1")
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (expand resolution_list 1)
                                      (("2"
                                        (lift-if 1)
                                        (("2"
                                          (replace 3 1)
                                          (("2"
                                            (typepred "car(x!1)")
                                            (("2"
                                              (replace -3 1)
                                              (("2"
                                                (typepred
                                                 "car(cdr(x!1))")
                                                (("2"
                                                  (replace -3 1)
                                                  (("2"
                                                    (typepred
                                                     "resolution_list(cons
                                               (resolution
                                                (car(x!1), car(cdr(x!1))),
                                                cdr(cdr(x!1))))")
                                                    (("2"
                                                      (hide -1 -3)
                                                      (("2"
                                                        (lemma
                                                         clause_sentence_list)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "translate_clause[m, n, i]
                              (resolution_list(cons
                                               (resolution
                                                (car(x!1), car(cdr(x!1))),
                                                cdr(cdr(x!1)))))")
                                                          (("2"
                                                            (typepred
                                                             "not_or_map(x!1)")
                                                            (("2"
                                                              (lemma
                                                               sentence_list_append)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "not_or_map(x!1)"
                                                                 "translate_clause[m, n, i]
                              (resolution_list(cons
                                               (resolution
                                                (car(x!1), car(cdr(x!1))),
                                                cdr(cdr(x!1)))))")
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   1
                                                                   RL)
                                                                  (("2"
                                                                    (replace
                                                                     -2
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (delete 3)
                            (("3" (lemma nclause2fmla_sentence)
                              (("3"
                                (inst
                                 -1
                                 "translate_clause[m, n, i]
                                 (resolution[m, n, i]
                                      (car[((ne_tr_clause?))](x!1), car[((ne_tr_clause?))](cdr[((ne_tr_clause?))](x!1))))")
                                nil
                                nil))
                              nil))
                            nil)
                           ("4" (delete 3)
                            (("4" (lemma sentence_list_append)
                              (("4"
                                (expand resolution_list 1)
                                (("4"
                                  (lift-if 1)
                                  (("4"
                                    (replace 3 1)
                                    (("4"
                                      (typepred "car(x!1)")
                                      (("4"
                                        (hide -1 -2)
                                        (("4"
                                          (replace -1 1)
                                          (("4"
                                            (typepred "car(cdr(x!1))")
                                            (("4"
                                              (replace -3 1)
                                              (("4"
                                                (hide -1 -2)
                                                (("4"
                                                  (lemma
                                                   nclause2fmla_sentence)
                                                  (("4"
                                                    (inst
                                                     -1
                                                     "translate_clause[m, n, i]
                                             (resolution[m, n, i]
                                              (car[((ne_tr_clause?))](x!1),
                                               car[((ne_tr_clause?))]
                                               (cdr[((ne_tr_clause?))]
                                                (x!1))))")
                                                    (("4"
                                                      (expand
                                                       sentence_list?
                                                       1)
                                                      (("4"
                                                        (expand
                                                         freevars
                                                         1)
                                                        (("4"
                                                          (expand
                                                           freevars
                                                           1
                                                           1)
                                                          (("4"
                                                            (lemma
                                                             clause_sentence_list)
                                                            (("4"
                                                              (inst
                                                               -1
                                                               "translate_clause[m, n, i]
                                     (resolution_list
                                      (cons
                                       (resolution
                                        (car(x!1), car(cdr(x!1))),
                                        cdr(cdr(x!1)))))")
                                                              (("4"
                                                                (typepred
                                                                 "not_or_map(x!1)")
                                                                (("4"
                                                                  (lemma
                                                                   sentence_list_append)
                                                                  (("4"
                                                                    (inst
                                                                     -1
                                                                     "not_or_map(x!1)"
                                                                     "translate_clause[m, n, i]
                         (resolution_list(cons
                                          (resolution
                                           (car(x!1), car(cdr(x!1))),
                                           cdr(cdr(x!1)))))")
                                                                    (("4"
                                                                      (lemma
                                                                       sentence_list_cons)
                                                                      (("4"
                                                                        (inst
                                                                         -1
                                                                         "nclause2fmla(translate_clause[m, n, i]
                                 (resolution[m, n, i]
                                      (car[((ne_tr_clause?))](x!1),
                                       car[((ne_tr_clause?))]
                                       (cdr[((ne_tr_clause?))](x!1)))))"
                                                                         "append[fmla]
                                (not_or_map(x!1),
                                 translate_clause[m, n, i]
                                     (resolution_list
                                      (cons
                                       (resolution
                                        (car(x!1), car(cdr(x!1))),
                                        cdr(cdr(x!1))))))")
                                                                        (("4"
                                                                          (expand
                                                                           sentence_list?
                                                                           -1
                                                                           2)
                                                                          (("4"
                                                                            (expand
                                                                             freevars
                                                                             -1)
                                                                            (("4"
                                                                              (replace
                                                                               -1
                                                                               1
                                                                               RL)
                                                                              (("4"
                                                                                (replace
                                                                                 -5
                                                                                 1)
                                                                                (("4"
                                                                                  (replace
                                                                                   -2
                                                                                   1
                                                                                   RL)
                                                                                  (("4"
                                                                                    (replace
                                                                                     -3
                                                                                     1)
                                                                                    (("4"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (delete 3)
                            (("5" (hide -1)
                              (("5"
                                (typepred
                                 "not_or_map(cons[(ne_tr_clause?)]
                                     (resolution[m, n, i]
                                      (car[((ne_tr_clause?))](x!1),
                                       car[((ne_tr_clause?))]
                                       (cdr[((ne_tr_clause?))](x!1))),
                                      cdr[((ne_tr_clause?))]
                                      (cdr[((ne_tr_clause?))](x!1))))")
                                (("5"
                                  (lemma sentence_list_append)
                                  (("5"
                                    (expand resolution_list)
                                    (("5"
                                      (typepred
                                       "translate_clause[m, n, i]
                              (CASES cdr[((ne_tr_clause?))]
                                     (cdr[((ne_tr_clause?))](x!1))
                                 OF null:
                                    car
                                    (cons[(ne_tr_clause?)]
                                     (resolution[m, n, i]
                                      (car[((ne_tr_clause?))](x!1),
                                       car[((ne_tr_clause?))]
                                       (cdr[((ne_tr_clause?))](x!1))),
                                      cdr[((ne_tr_clause?))]
                                      (cdr[((ne_tr_clause?))](x!1)))),
                                    cons(ck, lcl):
                                    IF ne_tr_clause?
                                       (car
                                        (cons[(ne_tr_clause?)]
                                         (resolution[m, n, i]
                                          (car[((ne_tr_clause?))](x!1),
                                           car[((ne_tr_clause?))]
                                           (cdr[((ne_tr_clause?))](x!1))),
                                          cdr[((ne_tr_clause?))]
                                          (cdr[((ne_tr_clause?))](x!1)))))
                                       AND
                                       ne_tr_clause?(ck)
                                    THEN resolution_list
                                         (cons
                                          (resolution
                                           (car
                                            (cons[(ne_tr_clause?)]
                                             (resolution[m, n, i]
                                              (car[((ne_tr_clause?))](x!1),
                                               car[((ne_tr_clause?))]
                                               (cdr[((ne_tr_clause?))]
                                                (x!1))),
                                              cdr[((ne_tr_clause?))]
                                              (cdr[((ne_tr_clause?))]
                                               (x!1)))),
                                            ck),
                                           lcl))
                                    ELSE null
                                    ENDIF
                                 ENDCASES)")
                                      (("1"
                                        (inst
                                         -3
                                         "not_or_map(cons[(ne_tr_clause?)]
                                    (resolution[m, n, i]
                                     (car[((ne_tr_clause?))](x!1),
                                      car[((ne_tr_clause?))]
                                      (cdr[((ne_tr_clause?))](x!1))),
                                     cdr[((ne_tr_clause?))]
                                     (cdr[((ne_tr_clause?))](x!1))))"
                                         "translate_clause[m, n, i]
                              (CASES cdr[((ne_tr_clause?))]
                                     (cdr[((ne_tr_clause?))](x!1))
                                 OF null:
                                    car
                                    (cons[(ne_tr_clause?)]
                                     (resolution[m, n, i]
                                      (car[((ne_tr_clause?))](x!1),
                                       car[((ne_tr_clause?))]
                                       (cdr[((ne_tr_clause?))](x!1))),
                                      cdr[((ne_tr_clause?))]
                                      (cdr[((ne_tr_clause?))](x!1)))),
                                    cons(ck, lcl):
                                    IF ne_tr_clause?
                                       (car
                                        (cons[(ne_tr_clause?)]
                                         (resolution[m, n, i]
                                          (car[((ne_tr_clause?))](x!1),
                                           car[((ne_tr_clause?))]
                                           (cdr[((ne_tr_clause?))](x!1))),
                                          cdr[((ne_tr_clause?))]
                                          (cdr[((ne_tr_clause?))](x!1)))))
                                       AND
                                       ne_tr_clause?(ck)
                                    THEN resolution_list
                                         (cons
                                          (resolution
                                           (car
                                            (cons[(ne_tr_clause?)]
                                             (resolution[m, n, i]
                                              (car[((ne_tr_clause?))](x!1),
                                               car[((ne_tr_clause?))]
                                               (cdr[((ne_tr_clause?))]
                                                (x!1))),
                                              cdr[((ne_tr_clause?))]
                                              (cdr[((ne_tr_clause?))]
                                               (x!1)))),
                                            ck),
                                           lcl))
                                    ELSE null
                                    ENDIF
                                 ENDCASES)")
                                        (("1"
                                          (replace -4 -3)
                                          (("1"
                                            (hide -4)
                                            (("1"
                                              (lemma
                                               clause_sentence_list)
                                              (("1"
                                                (inst
                                                 -1
                                                 "translate_clause[m, n, i]
                  (CASES cdr[((ne_tr_clause?))]
                             (cdr[((ne_tr_clause?))](x!1))
                     OF null:
                          car(cons[(ne_tr_clause?)]
                                  (resolution[m, n, i]
                                       (car[((ne_tr_clause?))](x!1),
                                        car[((ne_tr_clause?))]
                                        (cdr[((ne_tr_clause?))](x!1))),
                                   cdr[((ne_tr_clause?))]
                                       (cdr[((ne_tr_clause?))](x!1)))),
                        cons(ck, lcl):
                          IF ne_tr_clause?(car
                                           (cons[(ne_tr_clause?)]
                                            (resolution[m, n, i]
                                             (car[((ne_tr_clause?))](x!1),
                                              car[((ne_tr_clause?))]
                                              (cdr[((ne_tr_clause?))]
                                               (x!1))),
                                             cdr[((ne_tr_clause?))]
                                             (cdr[((ne_tr_clause?))]
                                              (x!1)))))
                              AND ne_tr_clause?(ck)
                            THEN resolution_list(cons
                                                 (resolution
                                                  (car
                                                   (cons[(ne_tr_clause?)]
                                                    (resolution[m, n, i]
                                                     (car[((ne_tr_clause?))]
                                                      (x!1),
                                                      car[((ne_tr_clause?))]
                                                      (cdr
                                                       [((ne_tr_clause?))]
                                                       (x!1))),
                                                     cdr[((ne_tr_clause?))]
                                                     (cdr[((ne_tr_clause?))]
                                                      (x!1)))),
                                                   ck),
                                                  lcl))
                          ELSE null
                          ENDIF
                     ENDCASES)")
                                                (("1"
                                                  (replace -1 -4)
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (lift-if -4)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (flatten 1)
                                                          (("1"
                                                            (hide
                                                             -4
                                                             -3
                                                             -2)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 1
                                                                 RL)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           -3
                                                           -2
                                                           -1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (replace
                                                               1
                                                               -1)
                                                              (("2"
                                                                (split
                                                                 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -3)
                                                                    (("1"
                                                                      (replace
                                                                       -2
                                                                       -3)
                                                                      (("1"
                                                                        (replace
                                                                         -3
                                                                         1
                                                                         RL)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (replace
                                                                     1
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       2
                                                                       RL)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (delete 2)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (hide
                                                       -5
                                                       -4
                                                       -3
                                                       -2)
                                                      (("2"
                                                        (expand
                                                         tr_clause?
                                                         2)
                                                        (("2"
                                                          (expand
                                                           sorted?
                                                           2)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 -2)
                                          (("2"
                                            (delete 2)
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (expand tr_clause? 2)
                                                (("2"
                                                  (expand sorted? 2)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (delete 2)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (expand tr_clause? 2)
                                            (("2"
                                              (expand sorted? 2)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("6" (delete 3) (("6" (grind) nil nil)) nil)
                           ("7" (delete 3)
                            (("7" (expand not_or_reduction 1)
                              (("7"
                                (expand append 1)
                                (("7"
                                  (expand append 1)
                                  (("7"
                                    (lemma nclause2fmla_sentence)
                                    (("7"
                                      (inst-cp
                                       -1
                                       "translate_clause[m, n, i](car[((ne_tr_clause?))](x!1))")
                                      (("7"
                                        (inst-cp
                                         -1
                                         "translate_clause[m, n, i](car[((ne_tr_clause?))](cdr[((ne_tr_clause?))](x!1)))")
                                        (("7" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("8" (delete 3)
                            (("8" (expand resolution_list 1)
                              (("8"
                                (lift-if 1)
                                (("8"
                                  (replace 3 1)
                                  (("8"
                                    (typepred "car(x!1)")
                                    (("8"
                                      (replace -3 1)
                                      (("8"
                                        (typepred "car(cdr(x!1))")
                                        (("8"
                                          (replace -3 1)
                                          (("8"
                                            (hide -1 -4)
                                            (("8"
                                              (typepred
                                               "translate_clause[m, n, i]
                                   (resolution_list
                                    (cons
                                     (resolution(car(x!1), car(cdr(x!1))),
                                      cdr(cdr(x!1)))))")
                                              (("8"
                                                (lemma
                                                 clause_sentence_list)
                                                (("8"
                                                  (inst
                                                   -1
                                                   "translate_clause[m, n, i]
                  (resolution_list(cons(resolution
                                        (car(x!1), car(cdr(x!1))),
                                        cdr(cdr(x!1)))))")
                                                  (("8"
                                                    (hide -2 -3)
                                                    (("8"
                                                      (typepred
                                                       "not_or_map(x!1)")
                                                      (("8"
                                                        (lemma
                                                         nclause2fmla_sentence)
                                                        (("8"
                                                          (inst
                                                           -1
                                                           "translate_clause[m, n, i]
                                       (resolution[m, n, i]
                                        (car[((ne_tr_clause?))](x!1),
                                         car[((ne_tr_clause?))]
                                         (cdr[((ne_tr_clause?))](x!1))))")
                                                          (("8"
                                                            (lemma
                                                             sentence_list_cons)
                                                            (("8"
                                                              (inst
                                                               -1
                                                               "nclause2fmla(translate_clause[m, n, i]
                                 (resolution[m, n, i]
                                      (car[((ne_tr_clause?))](x!1),
                                       car[((ne_tr_clause?))]
                                       (cdr[((ne_tr_clause?))](x!1)))))"
                                                               "append[fmla]
                              (not_or_map(x!1),
                               translate_clause[m, n, i]
                                   (resolution_list
                                    (cons
                                     (resolution(car(x!1), car(cdr(x!1))),
                                      cdr(cdr(x!1))))))")
                                                              (("8"
                                                                (replace
                                                                 -1
                                                                 1
                                                                 RL)
                                                                (("8"
                                                                  (replace
                                                                   -2
                                                                   1)
                                                                  (("8"
                                                                    (lemma
                                                                     sentence_list_append)
                                                                    (("8"
                                                                      (inst
                                                                       -1
                                                                       "not_or_map(x!1)"
                                                                       "translate_clause[m, n, i]
                              (resolution_list(cons
                                               (resolution
                                                (car(x!1), car(cdr(x!1))),
                                                cdr(cdr(x!1)))))")
                                                                      (("8"
                                                                        (replace
                                                                         -1
                                                                         1
                                                                         RL)
                                                                        (("8"
                                                                          (replace
                                                                           -4
                                                                           1)
                                                                          (("8"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("9" (delete 3)
                            (("9" (expand not_or_reduction 1)
                              (("9"
                                (expand append 1 2)
                                (("9"
                                  (expand append 1 2)
                                  (("9"
                                    (expand append 1 1)
                                    (("9"
                                      (expand append 1 1)
                                      (("9"
                                        (expand append 1 1)
                                        (("9"
                                          (lemma nclause2fmla_sentence)
                                          (("9"
                                            (hide -2)
                                            (("9"
                                              (inst-cp
                                               -1
                                               "translate_clause[m, n, i]
                                             (car[((ne_tr_clause?))]
                                              (x!1))")
                                              (("9"
                                                (inst-cp
                                                 -1
                                                 "translate_clause[m, n, i]
                                      (car[((ne_tr_clause?))]
                                       (cdr[((ne_tr_clause?))](x!1)))")
                                                (("9"
                                                  (inst-cp
                                                   -1
                                                   "translate_clause[m, n, i]
                                     (resolution[m, n, i]
                                      (car[((ne_tr_clause?))](x!1),
                                       car[((ne_tr_clause?))]
                                       (cdr[((ne_tr_clause?))](x!1))))")
                                                  (("9"
                                                    (hide -1)
                                                    (("9"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("10" (delete 3) (("10" (grind) nil nil))
                            nil)
                           ("11" (delete 3)
                            (("11" (expand nclause?)
                              (("11"
                                (expand translate_clause 1)
                                (("11"
                                  (typepred
                                   "car[((ne_tr_clause?))](cdr[((ne_tr_clause?))](x!1))")
                                  (("11"
                                    (hide -1 -2 -4)
                                    (("11" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("12" (delete 3)
                            (("12"
                              (typepred "car[((ne_tr_clause?))](x!1)")
                              (("12"
                                (hide -1 -2 -4)
                                (("12" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace_checker nil)
    (n formal-const-decl "nat" trace_checker nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (fmla type-decl nil fmla nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (rule type-decl nil proof nil)
    (sequent type-eq-decl nil sequents nil)
    (proof_step type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (> const-decl "bool" reals nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (sentence_list? const-decl "bool" fmla nil)
    (conclusion const-decl "sequent" proof nil)
    (proof_th_list def-decl "ne_proof_seq" trace_checker nil)
    (append def-decl "list[T]" list_props nil)
    (not_or_map const-decl "sequent" trace_checker nil)
    (literal? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (resolution_list def-decl "(tr_clause?)" trace_resolution nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (checkProof const-decl "bool" proof nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (th1 formula-decl nil resolution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (clause_sentence_list formula-decl nil resolution nil)
    (not_or_reduction const-decl "sequent" resolution nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (map_ncl2fmla const-decl "(sentence_list?)" trace_checker nil)
    (every_member_subset formula-decl nil minlist nil)
    (subset_lit_subset_fmla formula-decl nil resolution nil)
    (map_fnot const-decl "(sentence_list?)" trace_checker nil)
    (map_trans_clause const-decl "(cons?[(nclause?)])" trace_checker
     nil)
    (x!1 skolem-const-decl "(cons?[(ne_tr_clause?)])" trace_checker
     nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nclause? const-decl "bool" resolution nil)
    (lemma_subsetr formula-decl nil resolution nil)
    (sentence_list_cons formula-decl nil fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (var? adt-recognizer-decl "[term -> boolean]" fmla nil)
    (term type-decl nil fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (sentence? const-decl "bool" fmla nil)
    (nclause2fmla_sentence formula-decl nil resolution nil)
    (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla nil)
    (nclause2fmla def-decl "fmla" resolution nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (th formula-decl nil trace_checker nil)
    (subset def-decl "bool" minlist nil)
    (member def-decl "bool" list_props nil)
    (append_null formula-decl nil list_props nil)
    (proof_th const-decl "ne_proof_seq" trace_checker nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (lemma_cutr formula-decl nil resolution nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (two_premise? adt-def-decl "boolean" proof nil)
    (one_premise? adt-def-decl "boolean" proof nil)
    (sorted? def-decl "bool" sortedlist nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sentence_list_append formula-decl nil fmla nil)
    (lemma2 formula-decl nil resolution nil)
    (or_reduction const-decl "sequent" resolution nil)
    (append_assoc formula-decl nil list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (delete_pivot const-decl "{cl |
         FORALL l:
           member(l, cl) <=>
            member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (list_induction formula-decl nil list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (subset_cons formula-decl nil trace_checker nil)
    (RR_lemma2 def-decl "ne_proof_seq" resolution nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   133509 45440 t shostak)
  (th_list-1 nil 3483452940 3483799296
   ("" (induct lntcA)
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert) nil nil)
     ("4" (assert)
      (("4" (skolem-typepred)
        (("4" (hide -1 -4)
          (("4" (flatten)
            (("4" (case "cons?[(ne_tr_clause?)](cons2_var!1)")
              (("1" (replace -1 -4)
                (("1" (flatten)
                  (("1" (split)
                    (("1" (expand proof_th_list 1)
                      (("1" (lift-if 1)
                        (("1" (split)
                          (("1" (flatten) (("1" (grind) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma lemma_subsetr)
                                  (("1"
                                    (inst
                                     -1
                                     "proof_th(cons1_var!1, car(cons2_var!1))"
                                     "append(not_or_reduction(translate_clause
                                                    (cons1_var!1)),
                                   not_or_reduction(translate_clause
                                                    (car(cons2_var!1))))"
                                     "not_or_map(cons(cons1_var!1, cons2_var!1))")
                                    (("1"
                                      (expand resolution_list 1)
                                      (("1"
                                        (lift-if 1)
                                        (("1"
                                          (split 1)
                                          (("1" (flatten) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand
                                                 resolution_list
                                                 2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case
                                                     "ne_tr_clause?
                                       (car
                                        (cons
                                         (resolution
                                          (cons1_var!1, car(cons2_var!1)),
                                          cdr(cons2_var!1))))")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (postpone) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (replace 1 -3)
                (("2" (split)
                  (("1" (expand proof_th_list)
                    (("1" (lift-if)
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (lemma th1)
                            (("1"
                              (inst -1 "translate_clause(cons1_var!1)"
                               "translate_clause(cons1_var!1)")
                              (("1"
                                (expand resolution_list 1)
                                (("1"
                                  (lift-if 1)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand not_or_map)
                                        (("1"
                                          (expand map_trans_clause)
                                          (("1"
                                            (expand map)
                                            (("1"
                                              (expand map)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (replace -3 1)
                                                  (("1"
                                                    (expand
                                                     map_ncl2fmla)
                                                    (("1"
                                                      (expand map)
                                                      (("1"
                                                        (expand map)
                                                        (("1"
                                                          (expand
                                                           map_fnot)
                                                          (("1"
                                                            (expand
                                                             map)
                                                            (("1"
                                                              (expand
                                                               map)
                                                              (("1"
                                                                (expand
                                                                 append
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   append
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     not_or_reduction)
                                                                    (("1"
                                                                      (expand
                                                                       append
                                                                       -2)
                                                                      (("1"
                                                                        (expand
                                                                         append
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (delete
                                                                             1)
                                                                            (("1"
                                                                              (lemma
                                                                               every_member_subset
                                                                               (k
                                                                                "translate_clause(cons1_var!1)"
                                                                                l
                                                                                "translate_clause(cons1_var!1)"))
                                                                              (("1"
                                                                                (lemma
                                                                                 subset_lit_subset_fmla)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "translate_clause(cons1_var!1)"
                                                                                   "translate_clause(cons1_var!1)")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (flatten) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (delete 2) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand proof_th_list)
                    (("2" (split 1)
                      (("1" (flatten)
                        (("1" (lemma th1)
                          (("1"
                            (inst -1 "translate_clause(cons1_var!1)"
                             "translate_clause(cons1_var!1)")
                            (("1" (assert)
                              (("1"
                                (delete 2)
                                (("1"
                                  (lemma
                                   every_member_subset
                                   (k
                                    "translate_clause(cons1_var!1)"
                                    l
                                    "translate_clause(cons1_var!1)"))
                                  (("1"
                                    (lemma subset_lit_subset_fmla)
                                    (("1"
                                      (inst
                                       -1
                                       "translate_clause(cons1_var!1)"
                                       "translate_clause(cons1_var!1)")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (delete 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 1205949 12490 t shostak)))

