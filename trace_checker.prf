(trace_checker
 (build_proof_th0_TCC1 0
  (build_proof_th0_TCC1-1 nil 3483114190 3483311280
   ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved
   ((sentence_list? const-decl "bool" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   141 90 t nil))
 (build_proof_th0_TCC2 0
  (build_proof_th0_TCC2-1 nil 3483114190 3483311281
   ("" (skolem-typepred) (("" (flatten) (("" (grind) nil nil)) nil))
    nil)
   proved
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   133 120 t nil))
 (build_proof_th0_TCC3 0
  (build_proof_th0_TCC3-1 nil 3483114190 3483311282
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sentence_list? const-decl "bool" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1035 670 t nil))
 (build_proof_th0_TCC4 0
  (build_proof_th0_TCC4-1 nil 3483114190 3483311282
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sentence_list? const-decl "bool" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   708 590 t nil))
 (build_proof_th0_TCC5 0
  (build_proof_th0_TCC5-1 nil 3483114190 3483311283
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (skolem-typepred)
                (("" (flatten) (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sentence_list? const-decl "bool" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (concl_subsetr const-decl "proof_step" resolution nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   760 670 t nil))
 (build_proof_th0_TCC6 0
  (build_proof_th0_TCC6-1 nil 3483114190 3483311284
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (skolem-typepred)
                (("" (flatten)
                  (("" (skolem-typepred)
                    (("" (flatten)
                      (("" (skolem-typepred)
                        (("" (flatten) (("" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sentence_list? const-decl "bool" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (concl_subsetr const-decl "proof_step" resolution nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1358 1020 t nil))
 (build_proof_th0_TCC7 0
  (build_proof_th0_TCC7-1 nil 3483114190 3483311286
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (skolem-typepred)
                (("" (flatten)
                  (("" (skolem-typepred)
                    (("" (flatten)
                      (("" (skolem-typepred)
                        (("" (flatten) (("" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sentence_list? const-decl "bool" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (concl_subsetr const-decl "proof_step" resolution nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1113 1000 t nil))
 (build_proof_th0_TCC8 0
  (build_proof_th0_TCC8-1 nil 3483114190 3483311287
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (skolem-typepred)
                (("" (flatten)
                  (("" (skolem-typepred)
                    (("" (flatten)
                      (("" (skolem-typepred)
                        (("" (flatten)
                          (("" (skolem-typepred)
                            (("" (flatten) (("" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sentence_list? const-decl "bool" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (concl_subsetr const-decl "proof_step" resolution nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1437 1090 t nil))
 (build_proof_th0_TCC9 0
  (build_proof_th0_TCC9-1 nil 3483114190 3483311288
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (skolem-typepred)
                (("" (flatten)
                  (("" (skolem-typepred)
                    (("" (flatten)
                      (("" (skolem-typepred)
                        (("" (flatten)
                          (("" (skolem-typepred)
                            (("" (flatten)
                              ((""
                                (skolem-typepred)
                                ((""
                                  (flatten)
                                  (("" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sentence_list? const-decl "bool" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (RR_orr const-decl "ne_proof_seq" resolution nil)
    (concl_orr const-decl "proof_step" resolution nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (concl_subsetr const-decl "proof_step" resolution nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1352 1150 t nil))
 (build_proof_th0_TCC10 0
  (build_proof_th0_TCC10-1 nil 3483114190 3483311289
   ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sentence_list? const-decl "bool" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (append def-decl "list[T]" list_props nil)
    (RR_orr const-decl "ne_proof_seq" resolution nil)
    (concl_orr const-decl "proof_step" resolution nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (concl_subsetr const-decl "proof_step" resolution nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (RR_ax const-decl "ne_proof_seq" resolution nil)
    (concl_ax const-decl "proof_step" resolution nil)
    (ax_proof_step const-decl "proof_step" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1024 790 t nil))
 (th0 0
  (th0-1 nil 3482703236 3482707989
   ("" (skolem-typepred)
    (("" (split)
      (("1" (grind) nil nil)
       ("2" (expand build_proof_th0)
        (("2" (lemma lemma_subsetr)
          (("2"
            (inst -1
             "cons(f_or(gamma!1, delta!1), cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), null)))"
             "cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), cons(f_or(gamma!1, delta!1), null)))"
             "RR_orr(gamma!1, delta!1, cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), null)),
                                   RR_subsetr(cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))),
                                              cons(gamma!1, cons(delta!1, cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), null)))),
                                              RR_norr(p!1, gamma!1, cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null))),
                                                      RR_subsetr(cons(f_not(f_or(f_not(p!1), delta!1)), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                                                 cons(f_not(p!1), cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))),
                                                                 RR_norr(f_not(p!1), delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))),
                                                                         RR_lemma1(f_not(p!1), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                                                         RR_lemma1(delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))))),
                                                      RR_lemma1(gamma!1, cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))))))")
            (("2" (assert)
              (("2" (delete 2)
                (("2" (split)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil)
                   ("5" (lemma lemma_orr)
                    (("5"
                      (inst -1 "gamma!1"
                       "cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), null))"
                       "delta!1"
                       "RR_subsetr(cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))),
                                   cons(gamma!1, cons(delta!1, cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), null)))),
                                   RR_norr(p!1, gamma!1, cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null))),
                                           RR_subsetr(cons(f_not(f_or(f_not(p!1), delta!1)), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                                      cons(f_not(p!1), cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))),
                                                      RR_norr(f_not(p!1), delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))),
                                                              RR_lemma1(f_not(p!1), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                                              RR_lemma1(delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))))),
                                           RR_lemma1(gamma!1, cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null))))))")
                      (("5" (assert)
                        (("5" (delete 2)
                          (("5" (split)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil)
                             ("3" (lemma lemma_subsetr)
                              (("3"
                                (inst
                                 -1
                                 "cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null))))"
                                 "cons(gamma!1, cons(delta!1, cons(f_not(f_or(p!1, gamma!1)), cons(f_not(f_or(f_not(p!1), delta!1)), null))))"
                                 "RR_norr(p!1, gamma!1, cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null))),
                                    RR_subsetr(cons(f_not(f_or(f_not(p!1), delta!1)), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                               cons(f_not(p!1), cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))),
                                               RR_norr(f_not(p!1), delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))),
                                                       RR_lemma1(f_not(p!1), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                                       RR_lemma1(delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))))),
                                    RR_lemma1(gamma!1, cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))))")
                                (("3"
                                  (assert)
                                  (("3"
                                    (delete 2)
                                    (("3"
                                      (split)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil)
                                       ("3" (grind) nil nil)
                                       ("4" (grind) nil nil)
                                       ("5"
                                        (lemma lemma_norr)
                                        (("5"
                                          (inst
                                           -1
                                           "p!1"
                                           "cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))"
                                           "gamma!1"
                                           "RR_subsetr(cons(f_not(f_or(f_not(p!1), delta!1)), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                    cons(f_not(p!1), cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))),
                                    RR_norr(f_not(p!1), delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))),
                                            RR_lemma1(f_not(p!1), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                            RR_lemma1(delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))))))"
                                           "RR_lemma1(gamma!1, cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null))))")
                                          (("5"
                                            (assert)
                                            (("5"
                                              (delete 2)
                                              (("5"
                                                (split)
                                                (("1" (grind) nil nil)
                                                 ("2" (grind) nil nil)
                                                 ("3" (grind) nil nil)
                                                 ("4"
                                                  (lemma lemma_subsetr)
                                                  (("4"
                                                    (inst
                                                     -1
                                                     "cons(f_not(f_or(f_not(p!1), delta!1)), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))))"
                                                     "cons(f_not(p!1), cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null))))"
                                                     "RR_norr(f_not(p!1), delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))),
                                    RR_lemma1(f_not(p!1), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))),
                                    RR_lemma1(delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))))")
                                                    (("4"
                                                      (assert)
                                                      (("4"
                                                        (delete 2)
                                                        (("4"
                                                          (split)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("5"
                                                            (lemma
                                                             lemma_norr)
                                                            (("5"
                                                              (inst
                                                               -1
                                                               "f_not(p!1)"
                                                               "cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))"
                                                               "delta!1"
                                                               "RR_lemma1(f_not(p!1), cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))))"
                                                               "RR_lemma1(delta!1, cons(f_not(p!1), cons(gamma!1, cons(delta!1, null))))")
                                                              (("5"
                                                                (assert)
                                                                (("5"
                                                                  (delete
                                                                   2)
                                                                  (("5"
                                                                    (split)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("4"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("5"
                                                                      (lemma
                                                                       lemma1)
                                                                      (("5"
                                                                        (inst
                                                                         -1
                                                                         "f_not(p!1)"
                                                                         "cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))")
                                                                        (("5"
                                                                          (assert)
                                                                          (("5"
                                                                            (delete
                                                                             2)
                                                                            (("5"
                                                                              (split)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("6"
                                                                      (lemma
                                                                       lemma1)
                                                                      (("6"
                                                                        (inst
                                                                         -1
                                                                         "delta!1"
                                                                         "cons(f_not(p!1), cons(gamma!1, cons(delta!1, null)))")
                                                                        (("6"
                                                                          (assert)
                                                                          (("6"
                                                                            (delete
                                                                             2)
                                                                            (("6"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (lemma lemma1)
                                                  (("5"
                                                    (inst
                                                     -1
                                                     "gamma!1"
                                                     "cons(f_not(f_or(f_not(p!1), delta!1)), cons(gamma!1, cons(delta!1, null)))")
                                                    (("5"
                                                      (assert)
                                                      (("5"
                                                        (delete 2)
                                                        (("5"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((RR_lemma1 const-decl "ne_proof_seq" resolution nil)
    (offset_proof_step const-decl "proof_step" resolution nil)
    (concl_norr const-decl "proof_step" resolution nil)
    (RR_norr const-decl "ne_proof_seq" resolution nil)
    (concl_subsetr const-decl "proof_step" resolution nil)
    (RR_subsetr const-decl "ne_proof_seq" resolution nil)
    (concl_orr const-decl "proof_step" resolution nil)
    (RR_orr const-decl "ne_proof_seq" resolution nil)
    (build_proof_th0 const-decl "ne_proof_seq" trace_checker nil)
    (conclusion const-decl "sequent" proof nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (lemma_subsetr formula-decl nil resolution nil)
    (append def-decl "list[T]" list_props nil)
    (sentence_list? const-decl "bool" fmla nil)
    (subset def-decl "bool" minlist nil)
    (member def-decl "bool" list_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (lemma1 formula-decl nil resolution nil)
    (lemma_norr formula-decl nil resolution nil)
    (lemma_orr formula-decl nil resolution nil)
    (PRED type-eq-decl nil defined_types nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (> const-decl "bool" reals nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sequent type-eq-decl nil sequents nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla nil)
    (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (f_or adt-constructor-decl "[[fmla, fmla] -> (f_or?)]" fmla nil)
    (f_or? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (sentence? const-decl "bool" fmla nil)
    (fmla type-decl nil fmla nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   788108 13850 t shostak))
 (proof_th_TCC1 0
  (proof_th_TCC1-1 nil 3482772790 3483311291
   ("" (skolem-typepred)
    (("" (hide -1 -4 -7) (("" (flatten) (("" (grind) nil nil)) nil))
      nil))
    nil)
   proved
   ((tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (member def-decl "bool" list_props nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (merge def-decl
           "{cla: (tr_clause?) | FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}"
           trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (index const-decl "posnat" trace_resolution nil)
    (delete_pivot const-decl
     "{cl | FORALL l: member(l, cl) <=> member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (nclause? const-decl "bool" resolution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1927 1610 t nil))
 (proof_th_TCC2 0
  (proof_th_TCC2-1 nil 3482800740 3483311293
   ("" (skosimp)
    (("" (typepred ntcB!1)
      (("" (expand nclause?)
        (("" (expand translate_clause)
          (("" (expand ne_tr_clause?) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (delete_pivot const-decl
     "{cl | FORALL l: member(l, cl) <=> member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nclause? const-decl "bool" resolution nil))
   1237 1100 t nil))
 (proof_th_TCC3 0
  (proof_th_TCC3-1 nil 3482800740 3483311293
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (typepred res!1)
        (("" (lemma clause_sentence_list)
          (("" (inst -1 "translate_clause[m, n, i](res!1)") nil nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((clause_sentence_list formula-decl nil resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (clause? const-decl "bool" resolution nil)
    (literal? const-decl "bool" resolution nil)
    (fmla type-decl nil fmla nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   83 50 t nil))
 (proof_th_TCC4 0
  (proof_th_TCC4-1 nil 3482800740 3483311295
   ("" (skolem-typepred) (("" (flatten) (("" (grind) nil nil)) nil))
    nil)
   proved
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nclause? const-decl "bool" resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (delete_pivot const-decl
     "{cl | FORALL l: member(l, cl) <=> member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (index const-decl "posnat" trace_resolution nil)
    (merge def-decl
           "{cla: (tr_clause?) | FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}"
           trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (member def-decl "bool" list_props nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   2072 1710 t nil))
 (proof_th_TCC5 0
  (proof_th_TCC5-1 nil 3483107273 3483311296
   ("" (skosimp) (("" (typepred ntcB!1) (("" (grind) nil nil)) nil))
    nil)
   proved
   ((ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nclause? const-decl "bool" resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   1165 1030 t nil))
 (proof_th_TCC6 0
  (proof_th_TCC6-1 nil 3483107273 3483311297
   ("" (skosimp)
    (("" (expand not_or_reduction)
      (("" (expand append)
        (("" (expand append)
          (("" (lemma nclause2fmla_sentence)
            (("" (inst -1 "translate_clause[m, n, i](ntcB!1)")
              (("" (lemma clause_sentence_list)
                (("" (inst -1 "translate_clause[m, n, i](res!1)")
                  (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((not_or_reduction const-decl "sequent" resolution nil)
    (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (literal? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (nclause? const-decl "bool" resolution nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace_checker nil)
    (n formal-const-decl "nat" trace_checker nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (sentence? const-decl "bool" fmla nil)
    (sentence_list? const-decl "bool" fmla nil)
    (clause_sentence_list formula-decl nil resolution nil)
    (nclause2fmla_sentence formula-decl nil resolution nil)
    (append def-decl "list[T]" list_props nil))
   1274 1040 t nil))
 (proof_th_TCC7 0
  (proof_th_TCC7-1 nil 3483107273 3483311446
   ("" (skosimp)
    (("" (typepred ntcB!1) (("" (hide -1) (("" (grind) nil nil)) nil))
      nil))
    nil)
   proved
   ((ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (nclause? const-decl "bool" resolution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   85960 980 t nil))
 (proof_th_TCC8 0
  (proof_th_TCC8-1 nil 3483107273 3483311493
   ("" (skosimp)
    (("" (grind) (("" (typepred ntcA!1) (("" (grind) nil nil)) nil))
      nil))
    nil)
   proved
   ((not_true_clauses const-decl "bool" trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (nclause? const-decl "bool" resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace_checker nil)
    (n formal-const-decl "nat" trace_checker nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil))
   24491 1060 t nil))
 (proof_th_TCC9 0
  (proof_th_TCC9-1 nil 3483114190 3483311625
   ("" (skosimp)
    (("" (expand not_or_reduction)
      (("" (expand append)
        (("" (expand append)
          (("" (lemma nclause2fmla_sentence)
            (("" (inst -1 "translate_clause[m, n, i](ntcA!1)")
              (("" (lemma clause_sentence_list)
                (("" (inst -1 "translate_clause[m, n, i](res!1)")
                  (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((not_or_reduction const-decl "sequent" resolution nil)
    (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (literal? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (nclause? const-decl "bool" resolution nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace_checker nil)
    (n formal-const-decl "nat" trace_checker nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (sentence? const-decl "bool" fmla nil)
    (sentence_list? const-decl "bool" fmla nil)
    (clause_sentence_list formula-decl nil resolution nil)
    (nclause2fmla_sentence formula-decl nil resolution nil)
    (append def-decl "list[T]" list_props nil))
   124095 1220 t nil))
 (proof_th_TCC10 0
  (proof_th_TCC10-1 nil 3483114190 3483311796
   ("" (skosimp)
    (("" (skosimp)
      (("" (expand not_or_reduction)
        (("" (expand append)
          (("" (expand append)
            (("" (lemma nclause2fmla_sentence)
              (("" (inst-cp -1 "translate_clause[m, n, i](ntcB!1)")
                (("" (inst -1 "translate_clause[m, n, i](ntcA!1)")
                  (("" (lemma clause_sentence_list)
                    (("" (inst -1 "translate_clause[m, n, i](res!1)")
                      (("" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((append def-decl "list[T]" list_props nil)
    (nclause2fmla_sentence formula-decl nil resolution nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (sentence? const-decl "bool" fmla nil)
    (sentence_list? const-decl "bool" fmla nil)
    (clause_sentence_list formula-decl nil resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nclause? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (literal? const-decl "bool" resolution nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil)
    (not_or_reduction const-decl "sequent" resolution nil))
   164389 1820 t nil))
 (proof_th_TCC11 0
  (proof_th_TCC11-1 nil 3483114190 3483312819
   ("" (skosimp)
    (("" (skosimp)
      (("" (expand not_or_reduction)
        (("" (expand append)
          (("" (expand append)
            (("" (lemma nclause2fmla_sentence)
              (("" (inst-cp -1 "translate_clause[m, n, i](ntcB!1)")
                (("" (inst -1 "translate_clause[m, n, i](ntcA!1)")
                  (("" (lemma clause_sentence_list)
                    (("" (inst -1 "translate_clause[m, n, i](res!1)")
                      (("" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((append def-decl "list[T]" list_props nil)
    (nclause2fmla_sentence formula-decl nil resolution nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (sentence? const-decl "bool" fmla nil)
    (sentence_list? const-decl "bool" fmla nil)
    (clause_sentence_list formula-decl nil resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nclause? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (literal? const-decl "bool" resolution nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil)
    (not_or_reduction const-decl "sequent" resolution nil))
   1018234 1820 t nil))
 (proof_th_TCC12 0
  (proof_th_TCC12-1 nil 3483114190 3483312858
   ("" (skosimp) (("" (typepred ntcA!1) (("" (grind) nil nil)) nil))
    nil)
   proved
   ((ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nclause? const-decl "bool" resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (delete_pivot const-decl
     "{cl | FORALL l: member(l, cl) <=> member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (merge def-decl
           "{cla: (tr_clause?) | FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}"
           trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   30830 1560 t nil))
 (proof_th_TCC13 0
  (proof_th_TCC13-1 nil 3483114190 3483312884
   ("" (skosimp) (("" (typepred ntcB!1) (("" (grind) nil nil)) nil))
    nil)
   proved
   ((ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nclause? const-decl "bool" resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (delete_pivot const-decl
     "{cl | FORALL l: member(l, cl) <=> member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (tr_clause_true? def-decl "bool" trace_resolution nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   17267 1110 t nil))
 (proof_th_TCC14 0
  (proof_th_TCC14-1 nil 3483114190 3483312950
   ("" (skosimp)
    (("" (expand not_or_reduction)
      (("" (expand append)
        (("" (expand append)
          (("" (lemma nclause2fmla_sentence)
            (("" (inst -1 "translate_clause[m, n, i](ntcB!1)")
              (("" (lemma clause_sentence_list)
                (("" (inst -1 "translate_clause[m, n, i](res!1)")
                  (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((not_or_reduction const-decl "sequent" resolution nil)
    (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (literal? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (nclause? const-decl "bool" resolution nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace_checker nil)
    (n formal-const-decl "nat" trace_checker nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (freevars def-decl "list[(var?)]" fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (sentence? const-decl "bool" fmla nil)
    (sentence_list? const-decl "bool" fmla nil)
    (clause_sentence_list formula-decl nil resolution nil)
    (nclause2fmla_sentence formula-decl nil resolution nil)
    (append def-decl "list[T]" list_props nil))
   57210 1450 t nil))
 (th_TCC1 0
  (th_TCC1-1 nil 3483107273 3483312965
   ("" (skosimp) (("" (typepred ntcA!1) (("" (grind) nil nil)) nil))
    nil)
   proved
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (nclause? const-decl "bool" resolution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m formal-const-decl "nat" trace_checker nil)
    (n formal-const-decl "nat" trace_checker nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil))
   433 230 t nil))
 (th 0
  (th-1 nil 3482775473 3483147456
   ("" (skosimp)
    (("" (expand proof_th)
      (("" (split)
        (("1" (lift-if)
          (("1" (split)
            (("1" (flatten)
              (("1" (split)
                (("1" (flatten)
                  (("1" (lemma th2)
                    (("1"
                      (inst -1
                       "translate_lit(find_pivot(ntcA!1, ntcB!1))"
                       "translate_clause(ntcA!1)"
                       "translate_clause(ntcB!1)"
                       "translate_clause(resolution(ntcA!1, ntcB!1))")
                      (("1" (assert)
                        (("1" (delete 2)
                          (("1" (split)
                            (("1"
                              (lemma translate_include_res
                               (nck "ntcA!1" ncl "ntcB!1"))
                              (("1" (assert) nil nil)) nil)
                             ("2"
                              (lemma translate_include_res2
                               (nck "ntcA!1" ncl "ntcB!1"))
                              (("2"
                                (lemma
                                 neg_translate
                                 (k "find_pivot(ntcA!1, ntcB!1)"))
                                (("2"
                                  (replace -1 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (lemma th1)
                    (("2"
                      (inst -1 "translate_clause(ntcA!1)"
                       "append(not_or_reduction(translate_clause(ntcB!1)),
                               translate_clause(resolution
                                                (ntcA!1, ntcB!1)))")
                      (("2" (assert)
                        (("2" (delete 3)
                          (("2" (expand resolution)
                            (("2" (assert)
                              (("2"
                                (expand not_true_clauses)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (replace 3 1)
                                    (("2"
                                      (replace 4 1)
                                      (("2"
                                        (lemma
                                         append_inclusion
                                         (cl
                                          "ntcA!1"
                                          cm
                                          "merge(ntcA!1, ntcB!1)"
                                          sq
                                          "not_or_reduction(translate_clause(ntcB!1))"))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma merge_includes1)
                                            (("2"
                                              (inst
                                               -1
                                               "ntcA!1"
                                               "ntcB!1")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (lemma
                                                   subset_include
                                                   (sAA
                                                    "ntcA!1"
                                                    sBB
                                                    "merge(ntcA!1, ntcB!1)"))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (flatten)
                  (("1" (lemma lemma_subsetr)
                    (("1"
                      (inst -1 "RR_th1(translate_clause(ntcB!1),
                                   append(not_or_reduction
                                          (translate_clause(ntcA!1)),
                                          translate_clause
                                          (resolution(ntcA!1, ntcB!1))))"
                       "append(not_or_reduction(translate_clause
                                                    (ntcB!1)),
                                   append(not_or_reduction
                                          (translate_clause(ntcA!1)),
                                          translate_clause
                                          (resolution(ntcA!1, ntcB!1))))"
                       "append(not_or_reduction(translate_clause
                                                    (ntcA!1)),
                                   append(not_or_reduction
                                          (translate_clause(ntcB!1)),
                                          translate_clause
                                          (resolution(ntcA!1, ntcB!1))))")
                      (("1" (assert)
                        (("1" (delete 2)
                          (("1" (expand not_or_reduction + 1)
                            (("1" (expand append + 1)
                              (("1"
                                (expand append + 1)
                                (("1"
                                  (expand not_or_reduction + 1)
                                  (("1"
                                    (expand append + 1)
                                    (("1"
                                      (expand append + 1)
                                      (("1"
                                        (expand not_or_reduction + 1)
                                        (("1"
                                          (expand append + 1)
                                          (("1"
                                            (expand append + 1)
                                            (("1"
                                              (expand
                                               not_or_reduction
                                               +
                                               1)
                                              (("1"
                                                (expand append + 1)
                                                (("1"
                                                  (expand append + 1)
                                                  (("1"
                                                    (expand subset + 1)
                                                    (("1"
                                                      (expand
                                                       member
                                                       +
                                                       1)
                                                      (("1"
                                                        (expand
                                                         member
                                                         +
                                                         1)
                                                        (("1"
                                                          (expand
                                                           subset
                                                           +
                                                           1)
                                                          (("1"
                                                            (expand
                                                             member
                                                             +
                                                             1)
                                                            (("1"
                                                              (expand
                                                               resolution)
                                                              (("1"
                                                                (expand
                                                                 not_or_reduction)
                                                                (("1"
                                                                  (expand
                                                                   append)
                                                                  (("1"
                                                                    (expand
                                                                     append)
                                                                    (("1"
                                                                      (use
                                                                       every_member_subset
                                                                       (k
                                                                        "translate_clause(ntcB!1)"
                                                                        l
                                                                        "cons(f_not(nclause2fmla(translate_clause(ntcA!1))),
                   cons(f_not(nclause2fmla(translate_clause(ntcB!1))),
                        translate_clause(ntcB!1)))"))
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           member
                                                                           +
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             member
                                                                             +
                                                                             2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     th1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       not_or_reduction)
                                                                                      (("2"
                                                                                        (expand
                                                                                         append)
                                                                                        (("2"
                                                                                          (expand
                                                                                           append)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "translate_clause(ntcB!1)"
                                                                                             "cons(f_not(nclause2fmla(translate_clause(ntcA!1))),
                             translate_clause(ntcB!1))")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (delete
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (use
                                                                                                   every_member_subset
                                                                                                   (k
                                                                                                    "translate_clause(ntcB!1)"
                                                                                                    l
                                                                                                    "cons(f_not(nclause2fmla(translate_clause(ntcA!1))),
                   translate_clause(ntcB!1))"))
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (skosimp)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           member
                                                                                                           +)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (lemma
                                                                                     th1)
                                                                                    (("3"
                                                                                      (inst
                                                                                       -1
                                                                                       "translate_clause(ntcB!1)"
                                                                                       "cons(f_not(nclause2fmla(translate_clause(ntcA!1))),
                             translate_clause(ntcB!1))")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (delete
                                                                                           2)
                                                                                          (("3"
                                                                                            (use
                                                                                             every_member_subset
                                                                                             (k
                                                                                              "translate_clause(ntcB!1)"
                                                                                              l
                                                                                              "cons(f_not(nclause2fmla(translate_clause(ntcA!1))),
                   translate_clause(ntcB!1))"))
                                                                                            (("3"
                                                                                              (replace
                                                                                               -1
                                                                                               1)
                                                                                              (("3"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (skosimp)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     member
                                                                                                     +)
                                                                                                    (("3"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("3"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (delete
                                                                         2)
                                                                        (("2"
                                                                          (typepred
                                                                           ntcB!1)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (delete
                                                                         2)
                                                                        (("3"
                                                                          (typepred
                                                                           ntcA!1)
                                                                          (("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (lemma th1)
                    (("2"
                      (inst -1 "translate_clause(ntcA!1)"
                       "append(not_or_reduction(translate_clause(ntcB!1)),
                               translate_clause(resolution
                                                (ntcA!1, ntcB!1)))")
                      (("2" (assert)
                        (("2" (delete 3)
                          (("2" (expand resolution)
                            (("2" (expand not_true_clauses)
                              (("2"
                                (replace -1 1)
                                (("2"
                                  (lemma
                                   append_inclusion
                                   (cl
                                    "ntcA!1"
                                    cm
                                    "ntcA!1"
                                    sq
                                    "not_or_reduction(translate_clause(ntcB!1))"))
                                  (("2"
                                    (assert)
                                    (("2"
                                      (delete 2)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (lemma
                                           every_member_subset
                                           (k "ntcA!1" l "ntcA!1"))
                                          (("2"
                                            (replace -1 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split)
            (("1" (flatten)
              (("1" (lemma th2)
                (("1"
                  (inst -1 "translate_lit(find_pivot(ntcA!1, ntcB!1))"
                   "translate_clause(ntcA!1)"
                   "translate_clause(ntcB!1)"
                   "translate_clause(resolution(ntcA!1, ntcB!1))")
                  (("1" (assert)
                    (("1" (delete 2)
                      (("1" (split)
                        (("1"
                          (lemma translate_include_res
                           (nck "ntcA!1" ncl "ntcB!1"))
                          (("1" (assert) nil nil)) nil)
                         ("2"
                          (lemma translate_include_res2
                           (nck "ntcA!1" ncl "ntcB!1"))
                          (("2" (assert)
                            (("2" (lemma subset_lit_subset_fmla)
                              (("2"
                                (inst
                                 -1
                                 "translate_clause(ntcB!1)"
                                 "cons(f_neg(translate_lit(find_pivot(ntcA!1, ntcB!1))),
                  translate_clause(resolution(ntcA!1, ntcB!1)))")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (delete 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (lemma th1)
                (("2"
                  (inst -1 "translate_clause(ntcA!1)"
                   "append(not_or_reduction(translate_clause(ntcB!1)),
                               translate_clause(resolution
                                                (ntcA!1, ntcB!1)))")
                  (("2" (assert)
                    (("2" (delete 3)
                      (("2" (expand resolution)
                        (("2" (expand not_true_clauses)
                          (("2" (flatten)
                            (("2" (replace 3 1)
                              (("2"
                                (replace 4 1)
                                (("2"
                                  (lemma
                                   append_inclusion
                                   (cl
                                    "ntcA!1"
                                    cm
                                    "merge(ntcA!1, ntcB!1)"
                                    sq
                                    "not_or_reduction(translate_clause(ntcB!1))"))
                                  (("2"
                                    (assert)
                                    (("2"
                                      (delete 2)
                                      (("2"
                                        (lemma merge_includes1)
                                        (("2"
                                          (inst -1 "ntcA!1" "ntcB!1")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (lemma
                                               subset_include
                                               (sAA
                                                "ntcA!1"
                                                sBB
                                                "merge(ntcA!1, ntcB!1)"))
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (flatten)
          (("3" (split)
            (("1" (flatten)
              (("1" (lemma lemma_subsetr)
                (("1"
                  (inst -1 "RR_th1(translate_clause(ntcB!1),
                                   append(not_or_reduction
                                          (translate_clause(ntcA!1)),
                                          translate_clause
                                          (resolution(ntcA!1, ntcB!1))))"
                   "append(not_or_reduction(translate_clause
                                                    (ntcB!1)),
                                   append(not_or_reduction
                                          (translate_clause(ntcA!1)),
                                          translate_clause
                                          (resolution(ntcA!1, ntcB!1))))"
                   "append(not_or_reduction(translate_clause
                                                    (ntcA!1)),
                                   append(not_or_reduction
                                          (translate_clause(ntcB!1)),
                                          translate_clause
                                          (resolution(ntcA!1, ntcB!1))))")
                  (("1" (assert)
                    (("1" (delete 2)
                      (("1" (split)
                        (("1" (expand not_or_reduction)
                          (("1" (expand append)
                            (("1" (expand append)
                              (("1"
                                (expand subset)
                                (("1"
                                  (expand member + 1)
                                  (("1"
                                    (expand member + 1)
                                    (("1"
                                      (expand subset)
                                      (("1"
                                        (expand member + 1)
                                        (("1"
                                          (expand resolution)
                                          (("1"
                                            (use
                                             every_member_subset
                                             (k
                                              "translate_clause(ntcB!1)"
                                              l
                                              "cons(f_not(nclause2fmla(translate_clause(ntcA!1))),
                   cons(f_not(nclause2fmla(translate_clause(ntcB!1))),
                        translate_clause(ntcB!1)))"))
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (expand member +)
                                                    (("1"
                                                      (expand member +)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma th1)
                          (("2"
                            (inst -1 "translate_clause(ntcB!1)"
                             "append(not_or_reduction(translate_clause(ntcA!1)),
                               translate_clause(resolution
                                                (ntcA!1, ntcB!1)))")
                            (("2" (assert)
                              (("2"
                                (delete 2)
                                (("2"
                                  (expand resolution)
                                  (("2"
                                    (expand not_or_reduction)
                                    (("2"
                                      (expand append)
                                      (("2"
                                        (expand append)
                                        (("2"
                                          (lemma
                                           cons_cdr_inclusion
                                           (f
                                            "f_not(nclause2fmla(translate_clause(ntcA!1)))"
                                            cl
                                            "ntcB!1"
                                            ck
                                            "ntcB!1"))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (delete 2)
                                              (("2"
                                                (use
                                                 every_member_subset
                                                 (k
                                                  "ntcB!1"
                                                  l
                                                  "ntcB!1"))
                                                (("2"
                                                  (replace -1 1)
                                                  (("2"
                                                    (skosimp)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (lemma th1)
                          (("3"
                            (inst -1 "translate_clause(ntcB!1)"
                             "append(not_or_reduction(translate_clause(ntcA!1)),
                               translate_clause(resolution
                                                (ntcA!1, ntcB!1)))")
                            (("3" (assert)
                              (("3"
                                (delete 2)
                                (("3"
                                  (expand resolution)
                                  (("3"
                                    (expand not_or_reduction)
                                    (("3"
                                      (expand append)
                                      (("3"
                                        (expand append)
                                        (("3"
                                          (lemma
                                           cons_cdr_inclusion
                                           (f
                                            "f_not(nclause2fmla(translate_clause(ntcA!1)))"
                                            cl
                                            "ntcB!1"
                                            ck
                                            "ntcB!1"))
                                          (("3"
                                            (assert)
                                            (("3"
                                              (delete 2)
                                              (("3"
                                                (use
                                                 every_member_subset
                                                 (k
                                                  "ntcB!1"
                                                  l
                                                  "ntcB!1"))
                                                (("3"
                                                  (replace -1 1)
                                                  (("3"
                                                    (skosimp)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (lemma th1)
                (("2"
                  (inst -1 "translate_clause(ntcA!1)"
                   "append(not_or_reduction(translate_clause(ntcB!1)),
                               translate_clause(resolution
                                                (ntcA!1, ntcB!1)))")
                  (("2" (assert)
                    (("2" (delete 3)
                      (("2" (expand not_or_reduction)
                        (("2" (expand append)
                          (("2" (expand append)
                            (("2" (expand resolution)
                              (("2"
                                (expand not_true_clauses)
                                (("2"
                                  (replace -1 1)
                                  (("2"
                                    (lemma
                                     cons_cdr_inclusion
                                     (f
                                      "f_not(nclause2fmla(translate_clause(ntcB!1)))"
                                      cl
                                      "ntcA!1"
                                      ck
                                      "ntcA!1"))
                                    (("2"
                                      (assert)
                                      (("2"
                                        (delete 2)
                                        (("2"
                                          (use
                                           every_member_subset
                                           (k "ntcB!1" l "ntcB!1"))
                                          (("2"
                                            (use
                                             every_member_subset
                                             (k "ntcA!1" l "ntcA!1"))
                                            (("2"
                                              (replace -1 1)
                                              (("2" (skosimp) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((th2 formula-decl nil resolution nil)
    (translate_include_res formula-decl nil trace2fmla nil)
    (neg_translate formula-decl nil trace2fmla nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (translate_include_res2 formula-decl nil trace2fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (sentence_list? const-decl "bool" fmla nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (nclause? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (find_pivot def-decl
     "{k | member(k, nck) AND member(tr_neg(k), ncl)}" trace_resolution
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (member def-decl "bool" list_props nil)
    (exist_pivot? def-decl "bool" trace_resolution nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (literal? const-decl "bool" resolution nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (fmla type-decl nil fmla nil) (th1 formula-decl nil resolution nil)
    (not_true_clauses const-decl "bool" trace_resolution nil)
    (merge def-decl
           "{cla: (tr_clause?) | FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}"
           trace_resolution nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (append_inclusion formula-decl nil trace2fmla nil)
    (merge_includes1 formula-decl nil trace_resolution nil)
    (index const-decl "posnat" trace_resolution nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (sorted? def-decl "bool" sortedlist nil)
    (subset_include formula-decl nil sortedlist nil)
    (not_or_reduction const-decl "sequent" resolution nil)
    (sequent type-eq-decl nil sequents nil)
    (append def-decl "list[T]" list_props nil)
    (lemma_subsetr formula-decl nil resolution nil)
    (subset def-decl "bool" minlist nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (every_member_subset formula-decl nil minlist nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil)
    (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla nil)
    (nclause2fmla def-decl "fmla" resolution nil)
    (RR_th1 def-decl "ne_proof_seq" resolution nil)
    (ne_proof_seq type-eq-decl nil proof nil)
    (proof_seq type-eq-decl nil proof nil)
    (proof_step type-eq-decl nil proof nil)
    (rule type-decl nil proof nil)
    (below type-eq-decl nil nat_types nil)
    (f_neg const-decl "fmla" fmla nil)
    (delete_pivot const-decl
     "{cl | FORALL l: member(l, cl) <=> member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (prop_atom? const-decl "bool" resolution nil)
    (subset_lit_subset_fmla formula-decl nil resolution nil)
    (cons_cdr_inclusion formula-decl nil trace2fmla nil)
    (proof_th const-decl "ne_proof_seq" trace_checker nil))
   538768 7520 t shostak))
 (not_or_map_TCC1 0
  (not_or_map_TCC1-1 nil 3483306244 3483313776
   ("" (skosimp)
    (("" (skosimp)
      (("" (grind)
        (("" (typepred x1!1)
          (("" (typepred x1!1) (("" (postpone) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unfinished nil 798238 350 t nil))
 (not_or_map_TCC2 0
  (not_or_map_TCC2-1 nil 3483306244 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (f_TCC1 0
  (f_TCC1-1 nil 3483306244 nil ("" (subtype-tcc) nil nil) unfinished
   nil nil nil nil nil))
 (f_TCC2 0
  (f_TCC2-1 nil 3483306244 nil ("" (termination-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (proof_th_list_TCC1 0
  (proof_th_list_TCC1-1 nil 3483306244 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (proof_th_list_TCC2 0
  (proof_th_list_TCC2-1 nil 3483306244 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (proof_th_list_TCC3 0
  (proof_th_list_TCC3-1 nil 3483306244 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (proof_th_list_TCC4 0
  (proof_th_list_TCC4-1 nil 3483306244 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (proof_th_list_TCC5 0
  (proof_th_list_TCC5-1 nil 3483306244 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (proof_th_list_TCC6 0
  (proof_th_list_TCC6-1 nil 3483306244 3483309347
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (expand not_or_reduction)
            (("" (expand append)
              (("" (expand append)
                (("" (lemma nclause2fmla_sentence)
                  (("" (hide -4)
                    ((""
                      (inst-cp -1
                       "translate_clause[m, n, i](car[((ne_tr_clause?))](lntcA!1))")
                      ((""
                        (inst-cp -1
                         "translate_clause[m, n, i](car[((ne_tr_clause?))](cdr[((ne_tr_clause?))](lntcA!1)))")
                        (("" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((append def-decl "list[T]" list_props nil)
    (nclause2fmla_sentence formula-decl nil resolution nil)
    (fmla type-decl nil fmla nil)
    (literal? const-decl "bool" resolution nil)
    (clause? const-decl "bool" resolution nil)
    (nclause? const-decl "bool" resolution nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (sentence? const-decl "bool" fmla nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (delete_pivot const-decl
     "{cl | FORALL l: member(l, cl) <=> member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil) nil nil
    (sentence_list? const-decl "bool" fmla nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (not_or_reduction const-decl "sequent" resolution nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   203122 1560 t nil))
 (proof_th_list_TCC7 0
  (proof_th_list_TCC7-1 nil 3483306244 3483309419
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (translate_clause const-decl "(clause?)" trace2fmla nil) nil
    (translate_lit const-decl "(literal?)" trace2fmla nil)
    (resolution const-decl "(tr_clause?)" trace_resolution nil)
    (delete_pivot const-decl
     "{cl | FORALL l: member(l, cl) <=> member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}"
     trace_resolution nil)
    (tr_neg const-decl "(tr_literal?)" trace_resolution nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ne_tr_clause? const-decl "bool" trace_resolution nil)
    (tr_clause? const-decl "bool" trace_resolution nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (i formal-const-decl "upto(n)" trace_checker nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (n formal-const-decl "nat" trace_checker nil)
    (m formal-const-decl "nat" trace_checker nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   62477 1360 t nil))
 (proof_th_list_TCC8 0
  (proof_th_list_TCC8-1 nil 3483306244 3483311255
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (typepred lntcA!1)
                (("" (expand every -1)
                  (("" (expand every -1)
                    (("" (flatten)
                      (("" (hide -1)
                        (("" (lift-if -3)
                          (("" (split -3)
                            (("1" (propax) nil nil)
                             ("2" (flatten)
                              (("2"
                                (hide 1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (assert)
                                    (("2" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 1154422 1490 t nil))
 (proof_th_list_TCC9 0
  (proof_th_list_TCC9-1 nil 3483306244 nil
   ("" (termination-tcc) nil nil) unfinished nil nil nil nil nil))
 (proof_th_list_TCC10 0
  (proof_th_list_TCC10-1 nil 3483306244 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (proof_th_list_TCC11 0
  (proof_th_list_TCC11-1 nil 3483306244 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (proof_th_list_TCC12 0
  (proof_th_list_TCC12-1 nil 3483306244 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (proof_th_list_TCC13 0
  (proof_th_list_TCC13-1 nil 3483306244 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil)))

