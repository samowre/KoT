(parse_cert
 (read_file_name_TCC1 0
  (read_file_name_TCC1-1 nil 3483989769 3485209313
   ("" (skosimp)
    (("" (skosimp) (("" (expand eot?) (("" (assert) nil nil)) nil))
      nil))
    nil)
   proved
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (eot? const-decl "bool" stdtokenizer "PVSio/"))
   294 90 t nil))
 (read_nat_until_zero_TCC1 0
  (read_nat_until_zero_TCC1-1 nil 3485204451 3485209314
   ("" (subtype-tcc) nil nil) proved
   ((IStream nonempty-type-from-decl nil stdio "PVSio/")
    (IStream_pred const-decl "[Stream -> boolean]" stdio "PVSio/")
    (Stream nonempty-type-decl nil stdio "PVSio/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (ClosedStream const-decl "ExceptionTag[string]" stdio "PVSio/")
    (make_exc const-decl "Exception" stdexc "PVSio/")
    (EndOfFile const-decl "ExceptionTag[string]" stdio "PVSio/")
    (fcheck const-decl "bool" stdio "PVSio/")
    (prog const-decl
          "T"
     stdprog "PVSio/")
    (fread_int const-decl "int" stdio "PVSio/")
    (/= const-decl "boolean" notequal nil))
   662 280 nil nil))
 (read_clause_TCC1 0
  (read_clause_TCC1-1 nil 3485180700 3485209315
   ("" (skosimp)
    (("" (skosimp)
      (("" (skosimp)
        (("" (skosimp)
          (("" (expand reverse -3)
            (("" (lift-if -3)
              (("" (split)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (flatten)
                  (("2"
                    (lemma length_append
                     (l1 "reverse(cdr(r!1))" l2
                      "cons(car(r!1), null)"))
                    (("2" (expand length -1 3)
                      (("2" (expand length -1 3)
                        (("2" (replace -2 -1 RL)
                          (("2" (lemma length_reverse (l "r!1"))
                            (("2" (expand reverse -1)
                              (("2"
                                (lift-if -1)
                                (("2"
                                  (replace 1 -1)
                                  (("2"
                                    (replace -3 -1 RL)
                                    (("2"
                                      (case
                                       "null?[int](rr!1)
")
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_reverse formula-decl nil list_props nil)
    (length_append formula-decl nil list_props nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (reverse def-decl "list[T]" list_props nil))
   789 300 t nil))
 (print_list_TCC1 0
  (print_list_TCC1-1 nil 3485180700 3485209315
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil))
   147 30 nil nil))
 (print_list_TCC2 0
  (print_list_TCC2-1 nil 3485180700 3485209315
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang "PVSio/")
    (printstr const-decl "void" stdio "PVSio/")
    (emptystr const-decl "string" stdstr "PVSio/"))
   481 220 nil nil))
 (read_rec_TCC1 0
  (read_rec_TCC1-1 nil 3485186359 3485209318 ("" (subtype-tcc) nil nil)
   proved
   ((IStream nonempty-type-from-decl nil stdio "PVSio/")
    (IStream_pred const-decl "[Stream -> boolean]" stdio "PVSio/")
    (Stream nonempty-type-decl nil stdio "PVSio/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (get_file_name const-decl "string" parse_cert nil)
    (fopenin const-decl "IStream" stdio "PVSio/")
    (integer? const-decl "bool" integers nil)
    (emptystr const-decl "string" stdstr "PVSio/")
    (ClosedStream const-decl "ExceptionTag[string]" stdio "PVSio/")
    (make_exc const-decl "Exception" stdexc "PVSio/")
    (EndOfFile const-decl "ExceptionTag[string]" stdio "PVSio/")
    (fcheck const-decl "bool" stdio "PVSio/")
    (prog const-decl
          "T"
     stdprog "PVSio/")
    (fread_token const-decl "string" stdio "PVSio/")
    (skip const-decl "void" stdlang "PVSio/")
    (set const-decl "void" stdprog "PVSio/")
    (fread_int const-decl "int" stdio "PVSio/")
    (/= const-decl "boolean" notequal nil)
    (fail const-decl "void" stdlang "PVSio/")
    (return const-decl "void" stdprog "PVSio/")
    (read_nat_until_zero const-decl "list[nat]" parse_cert nil)
    (printstr const-decl "void" stdio "PVSio/")
    (fclose const-decl "void" stdio "PVSio/"))
   3009 1400 nil nil))
 (read_rec_TCC2 0
  (read_rec_TCC2-1 nil 3485186359 3485209322 ("" (subtype-tcc) nil nil)
   proved
   ((IStream nonempty-type-from-decl nil stdio "PVSio/")
    (IStream_pred const-decl "[Stream -> boolean]" stdio "PVSio/")
    (Stream nonempty-type-decl nil stdio "PVSio/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (get_file_name const-decl "string" parse_cert nil)
    (fopenin const-decl "IStream" stdio "PVSio/")
    (emptystr const-decl "string" stdstr "PVSio/")
    (ClosedStream const-decl "ExceptionTag[string]" stdio "PVSio/")
    (make_exc const-decl "Exception" stdexc "PVSio/")
    (EndOfFile const-decl "ExceptionTag[string]" stdio "PVSio/")
    (fcheck const-decl "bool" stdio "PVSio/")
    (prog const-decl
          "T"
     stdprog "PVSio/")
    (fread_token const-decl "string" stdio "PVSio/")
    (skip const-decl "void" stdlang "PVSio/")
    (set const-decl "void" stdprog "PVSio/")
    (integer? const-decl "bool" integers nil)
    (fread_int const-decl "int" stdio "PVSio/")
    (/= const-decl "boolean" notequal nil)
    (fail const-decl "void" stdlang "PVSio/")
    (return const-decl "void" stdprog "PVSio/")
    (read_nat_until_zero const-decl "list[nat]" parse_cert nil)
    (printstr const-decl "void" stdio "PVSio/")
    (fclose const-decl "void" stdio "PVSio/"))
   3102 1460 nil nil))
 (IMP_trace_resolution_TCC1 0
  (IMP_trace_resolution_TCC1-1 nil 3485204451 3485209322
   ("" (subtype-tcc) nil nil) proved
   ((integer? const-decl "bool" integers nil)
    (read_rec const-decl "pico_data" parse_cert nil)
    (fdata const-decl "pico_data" parse_cert nil)
    (n const-decl "nat" parse_cert nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   291 110 nil nil))
 (lit_list?_TCC1 0
  (lit_list?_TCC1-1 nil 3485204451 3485209369
   ("" (termination-tcc) nil nil) proved
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (get_file_name const-decl "string" parse_cert nil)
    (fopenin const-decl "IStream" stdio "PVSio/")
    (ClosedStream const-decl "ExceptionTag[string]" stdio "PVSio/")
    (emptystr const-decl "string" stdstr "PVSio/")
    (fname const-decl "string" stdio "PVSio/")
    (make_exc const-decl "Exception" stdexc "PVSio/")
    (eof? const-decl "bool" stdio "PVSio/")
    (UndefinedMutableVariable const-decl "ExceptionTag[void]" stdprog
     "PVSio/")
    (fail const-decl "void" stdlang "PVSio/")
    (val const-decl "T" stdprog "PVSio/")
    (EndOfFile const-decl "ExceptionTag[string]" stdio "PVSio/")
    (fcheck const-decl "bool" stdio "PVSio/")
    (prog const-decl
          "T"
     stdprog "PVSio/")
    (fread_token const-decl "string" stdio "PVSio/")
    (def const-decl "T" stdprog "PVSio/")
    (skip const-decl "void" stdlang "PVSio/")
    (set const-decl "void" stdprog "PVSio/")
    (integer? const-decl "bool" integers nil)
    (fread_int const-decl "int" stdio "PVSio/")
    (return const-decl "void" stdprog "PVSio/")
    (read_until_zero const-decl "list[int]" parse_cert nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (read_clause const-decl "list[int]" parse_cert nil)
    (read_nat_until_zero const-decl "list[nat]" parse_cert nil)
    (printstr const-decl "void" stdio "PVSio/")
    (fclose const-decl "void" stdio "PVSio/")
    (read_rec const-decl "pico_data" parse_cert nil)
    (fdata const-decl "pico_data" parse_cert nil)
    (m const-decl "nat" parse_cert nil)
    (n const-decl "nat" parse_cert nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (/= const-decl "boolean" notequal nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   47536 23020 nil nil))
 (valid_clauses?_TCC1 0
  (valid_clauses?_TCC1-1 nil 3485204451 3485209369
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil))
   93 50 nil nil))
 (valid_clauses?_TCC2 0
  (valid_clauses?_TCC2-1 nil 3485204451 3485209371
   ("" (subtype-tcc) nil nil) unfinished nil 1303 560 nil nil))
 (valid_clauses?_TCC3 0
  (valid_clauses?_TCC3-1 nil 3485204451 3485209372
   ("" (skosimp)
    (("" (expand injective?)
      (("" (skosimp)
        (("" (expand index -2)
          (("" (lift-if -2)
            (("" (split -2)
              (("1" (flatten)
                (("1" (lift-if -2)
                  (("1" (split -2)
                    (("1" (flatten)
                      (("1" (expand abs -2)
                        (("1" (replace -1 -2)
                          (("1" (replace -3 -2) (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand abs -1)
                        (("2" (replace -2 -1)
                          (("2" (typepred x1!1)
                            (("2" (typepred x2!1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (lift-if -1)
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (expand abs -2)
                        (("1" (replace -1 -2) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((injective? const-decl "bool" functions nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (index const-decl "posnat" trace_resolution nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (m const-decl "nat" parse_cert nil)
    (n const-decl "nat" parse_cert nil)
    (tr_literal? const-decl "bool" trace_resolution nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   1158 530 t nil))
 (valid_clauses?_TCC4 0
  (valid_clauses?_TCC4-1 nil 3485204451 3485209373
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   529 220 nil nil))
 (chain?_TCC1 0
  (chain?_TCC1-1 nil 3485204451 3485209373 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   101 60 nil nil))
 (chain?_TCC2 0
  (chain?_TCC2-1 nil 3485204451 3485209373
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   368 150 nil nil))
 (valid_chains?_TCC1 0
  (valid_chains?_TCC1-1 nil 3485204451 3485209373
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   157 70 nil nil))
 (valid_chains?_TCC2 0
  (valid_chains?_TCC2-1 nil 3485204451 3485209373
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   189 100 nil nil))
 (valid_chains?_TCC3 0
  (valid_chains?_TCC3-1 nil 3485204451 3485209374
   ("" (termination-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   416 160 nil nil))
 (build_cert_TCC1 0
  (build_cert_TCC1-1 nil 3485209308 3485209374
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n const-decl "nat" parse_cert nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer? const-decl "bool" integers nil)
    (read_rec const-decl "pico_data" parse_cert nil)
    (fdata const-decl "pico_data" parse_cert nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   542 220 nil nil))
 (build_cert_TCC2 0
  (build_cert_TCC2-1 nil 3485209308 3485209747
   ("" (skosimp)
    (("" (generalize "car[list[nat]](pral!1)" l)
      (("1" (induct l)
        (("1" (flatten)
          (("1" (expand every) (("1" (propax) nil nil)) nil)) nil)
         ("2" (skosimp)
          (("2" (replace -2 -1)
            (("2" (replace -3 -1)
              (("2" (expand chain? -4)
                (("2" (flatten)
                  (("2" (replace -5 -1)
                    (("2" (expand every 4)
                      (("2" (replace -4 4) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (postpone) nil nil) ("4" (postpone) nil nil)
         ("5" (assert) nil nil) ("6" (assert) nil nil))
        nil)
       ("2" (assert) (("2" (flatten) (("2" (postpone) nil nil)) nil))
        nil)
       ("3" (flatten) (("3" (postpone) nil nil)) nil))
      nil))
    nil)
   unfinished nil 320884 540 t nil))
 (build_cert_TCC3 0
  (build_cert_TCC3-1 nil 3485209308 3485209377
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (m const-decl "nat" parse_cert nil)
    (chain type-eq-decl nil trace_resolution nil)
    (integer? const-decl "bool" integers nil)
    (read_rec const-decl "pico_data" parse_cert nil)
    (fdata const-decl "pico_data" parse_cert nil)
    (n const-decl "nat" parse_cert nil))
   1330 600 nil nil))
 (build_cert_TCC4 0
  (build_cert_TCC4-1 nil 3485209308 3485209381
   ("" (subtype-tcc) nil nil) unfinished nil 3802 1770 nil nil))
 (build_cert_TCC5 0
  (build_cert_TCC5-1 nil 3485209308 3485209381
   ("" (termination-tcc) nil nil) proved nil 234 120 nil nil)))

