("fmla" fmla termsize_apply 0 (termsize_apply-1 nil 3462853875 3462920892 ("" (skosimp*) (("" (rewrite "termsize") (("" (rewrite "termsize") (("" (rewrite "fmla.reduce_nat") (("" (postpone) nil nil)) nil)) nil)) nil)) nil) unfinished nil 67017141 480 t shostak))("fmla" fmla goodfmla?_TCC4 0 (goodfmla?_TCC4-1 nil 3462850563 3463061727 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (t_var? adt-recognizer-decl "[term -> boolean]" fmla nil) (<< adt-def-decl "(well_founded?[fmla])" fmla nil)) 36 20 nil nil))("fmla" fmla goodfmla?_TCC3 0 (goodfmla?_TCC3-1 nil 3462850563 3463061727 ("" (termination-tcc) nil nil) proved ((<< adt-def-decl "(well_founded?[fmla])" fmla nil)) 37 10 nil nil))("fmla" fmla goodfmla?_TCC2 0 (goodfmla?_TCC2-1 nil 3462850563 3463061727 ("" (termination-tcc) nil nil) proved ((<< adt-def-decl "(well_founded?[fmla])" fmla nil)) 36 20 nil nil))("fmla" fmla goodfmla?_TCC1 0 (goodfmla?_TCC1-1 nil 3462850563 3463061727 ("" (termination-tcc) nil nil) proved ((<< adt-def-decl "(well_founded?[fmla])" fmla nil)) 15 10 nil nil))("sequents" sequents forall_rule_TCC4 0 (forall_rule_TCC4-1 nil 3474915816 3474915817 ("" (subtype-tcc) nil nil) unfinished nil 327 280 nil nil))("sequents" sequents forall_rule_TCC3 0 (forall_rule_TCC3-1 nil 3474915816 3474915817 ("" (subtype-tcc) nil nil) unfinished nil 320 270 nil nil))("sequents" sequents forall_rule_TCC2 0 (forall_rule_TCC2-1 nil 3474915816 3474915871 ("" (grind) nil nil) proved ((fun? adt-def-decl "boolean" funpred_adt nil)) 10766 760 t nil))("sequents" sequents forall_rule_TCC1 0 (forall_rule_TCC1-1 nil 3474915816 3474915816 ("" (subtype-tcc) nil nil) unfinished nil 326 270 nil nil))("rule" rule trans_thm_TCC3 0 (trans_thm_TCC3-1 nil 3474925722 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("rule" rule trans_thm_TCC2 0 (trans_thm_TCC2-1 nil 3474925722 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("rule" rule f_eq_TCC2 0 (f_eq_TCC2-1 nil 3474924292 nil ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))("rule" rule f_eq_TCC1 0 (f_eq_TCC1-1 nil 3474924292 nil ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))("fmla" fmla reduce_step 0 (reduce_step-1 nil 3475788366 3475788452 ("" (grind) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil) unfinished nil 85366 470 t shostak))("fmla" fmla reduce_step_TCC5 0 (reduce_step_TCC5-1 nil 3475788365 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("fmla" fmla reduce_step_TCC4 0 (reduce_step_TCC4-1 nil 3475788365 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("fmla" fmla reduce_step_TCC3 0 (reduce_step_TCC3-1 nil 3475788365 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("fmla" fmla reduce_step_TCC2 0 (reduce_step_TCC2-1 nil 3475788365 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("fmla" fmla reduce_step_TCC1 0 (reduce_step_TCC1-1 nil 3475788365 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("fmla" fmla reduce_reduce_TCC2 0 (reduce_reduce_TCC2-1 nil 3475778550 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("fmla" fmla map_map_TCC2 0 (map_map_TCC2-1 nil 3479851074 3479852816 ("" (subtype-tcc) nil nil) unfinished nil 165 160 nil nil))("fmla" fmla map_map_TCC1 0 (map_map_TCC1-1 nil 3479851074 3479852816 ("" (subtype-tcc) nil nil) unfinished nil 112 70 nil nil))("fmla" fmla term_equal_TCC1 0 (term_equal_TCC1-1 nil 3475778550 3479853279 ("" (termination-tcc) nil nil) unfinished nil 443 400 nil nil))("fmla" fmla parsubstr_TCC4 0 (parsubstr_TCC4-1 nil 3475778550 3480276248 ("" (subtype-tcc) nil nil) unfinished nil 588 470 nil nil))("fmla" fmla parsubstr_TCC3 0 (parsubstr_TCC3-1 nil 3475778550 3480283408 ("" (subtype-tcc) nil nil) unfinished nil 192 150 t nil))("fmla" fmla aux 0 (aux-1 nil 3480283894 3480346196 ("" (skosimp) (("" (ground) (("" (generalize xx!1 l) (("" (induct "l") (("1" (grind) nil nil) ("2" (skosimp) (("2" (expand append +) (("2" (lemma pre_aux (x "cons1_var!1" xx "append(cons2_var!1, yy!1)")) (("2" (replace -1 * LR) (("2" (replace -2 * LR) (("2" (lemma pre_aux (x "cons1_var!1" xx "cons2_var!1")) (("2" (replace -1 * LR) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((term type-decl nil fmla nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (max_index const-decl "nat" fmla nil) (append def-decl "list[T]" list_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (pre_aux formula-decl nil fmla nil) (minlistx def-decl "{c |
         member(c, cons(a, l)) AND
          (FORALL b: member(b, cons(a, l)) IMPLIES key(c) <= key(b))}" minlist nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minlist const-decl "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES key(c) <= key(b))}" minlist nil) (maxlist const-decl "T" minlist nil) (minus_int_is_int application-judgement "int" integers nil) (list_induction formula-decl nil list_adt nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil)) 8211 6490 t shostak))("fmla" fmla pre_aux 0 (pre_aux-2 "22221" 3480359385 3480359385 ("" (induct "xx") (("1" (ground) (("1" (grind) nil nil)) nil) ("2" (skosimp) (("2" (instantiate -1 "cons1_var!1" T) (("2" (replace -2 * LR) (("2" (skosimp) (("2" (expand max_index + 1) (("2" (expand maxlist + 1) (("2" (expand minlist + 1) (("2" (expand minlistx) (("2" (lift-if) (("2" (split) (("1" (grind) nil nil) ("2" (flatten) (("2" (expand max +) (("2" (lift-if) (("2" (split) (("1" (lift-if) (("1" (split) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (split) (("1" (flatten) (("1" (grind) nil nil)) nil) ("2" (flatten) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 13173815 33400 t shostak) (pre_aux-1 nil 3480342356 3480346180 ("" (skosimp) (("" (lift-if) (("" (split) (("1" (flatten) (("1" (expand max_index + 1) (("1" (lift-if) (("1" (replace -1 * LR) (("1" (expand maxlist +) (("1" (expand minlist) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) unfinished nil 114445 150 t shostak))("minlist" minlist recursive_min 0 (recursive_min-2 "" 3480368689 3480372849 ("" (induct "l") (("1" (grind) nil nil) ("2" (skolem!) (("2" (flatten) (("2" (skolem!) (("2" (expand "minlistx" +) (("2" (case "func!1(b!1) < func!1(a!1)") (("1" (case "func!1(cons1_var!1) < func!1(b!1)") (("1" (replace -1) (("1" (replace -2) (("1" (inst -3 "b!1" "cons1_var!1" "func!1") (("1" (lemma minlistx_TCC3) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished ((minlist const-decl "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES key(c) <= key(b))}" minlist nil)) 2807988 8180 t shostak) (recursive_min-1 nil 3480361121 3480362340 ("" (skosimp) (("" (lift-if) (("" (split) (("1" (flatten) (("1" (grind) nil nil)) nil) ("2" (flatten) (("2" (grind) (("2" (grind) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 629289 1030 t shostak))("minlist" minlist equal_min 0 (equal_min-2 "" 3480364889 3480367539 ("" (lemma minlist_TCC1) (("" (skosimp) (("" (inst -1 "cons (a!1, l!1)" "func!1") (("" (flatten) (("" (inst -2 "c!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) unchecked ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minlist const-decl "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES key(c) <= key(b))}" minlist nil) (member def-decl "bool" list_props nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (T formal-type-decl nil minlist nil) (minlist_TCC1 subtype-tcc nil minlist nil)) 1061778 400 t shostak) (equal_min-1 nil 3480364419 3480364583 ("" (grind) (("" (expand minlistx) (("" (lift-if) (("" (split) (("1" (flatten) (("1" (beta) (("1" (lift-if) (("1" (split) (("1" (propax) nil nil) ("2" (flatten) (("2" (grind) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil) unfinished nil 163604 280 t shostak))("fmla" fmla max_index_cons 0 (max_index_cons-1 nil 3480360301 3480360322 ("" (postpone) nil nil) unfinished nil 20751 10 t shostak))("fmla" fmla termvars_TCC5 0 (termvars_TCC5-1 nil 3480276238 3480441117 ("" (termination-tcc) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil)) 160 100 nil nil))("fmla" fmla freefor_TCC1 0 (freefor_TCC1-1 nil 3475778550 3480441119 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (<< adt-def-decl "(well_founded?[fmla])" fmla nil)) 140 100 nil nil))("sequents" sequents forall_rule?_TCC4 0 (forall_rule?_TCC4-1 nil 3480966110 3480966110 ("" (subtype-tcc) nil nil) unfinished nil 172 160 nil nil))("resolution" resolution apply_resolution_TCC4 0 (apply_resolution_TCC4-1 nil 3481399109 3481399123 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (literal? const-decl "bool" resolution nil) (set type-eq-decl nil sets nil) (atom? const-decl "bool" resolution nil) (/= const-decl "boolean" notequal nil) (union const-decl "set" sets nil) (remove const-decl "set" sets nil) (arg adt-accessor-decl "[(f_not?) -> fmla]" fmla nil) (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil) (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla nil) (f_neg const-decl "fmla" fmla nil) (member const-decl "bool" sets nil) (clause_lit_list? const-decl "bool" resolution nil)) 5800 5030 nil nil))("resolution" resolution apply_resolution_TCC3 0 (apply_resolution_TCC3-1 nil 3481399109 3481399117 ("" (subtype-tcc) nil nil) proved ((member const-decl "bool" sets nil) (emptyset const-decl "set" sets nil) (clause_lit_list? const-decl "bool" resolution nil) (finite_emptyset name-judgement "finite_set" finite_sets nil)) 52 50 nil nil))("resolution" resolution apply_resolution_TCC2 0 (apply_resolution_TCC2-1 nil 3481399109 3481399117 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil) (clause_lit_list? const-decl "bool" resolution nil) (/= const-decl "boolean" notequal nil) (union const-decl "set" sets nil) (remove const-decl "set" sets nil) (f_neg const-decl "fmla" fmla nil) (member const-decl "bool" sets nil) (atom? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil)) 4238 3680 nil nil))("resolution" resolution check_certificate_TCC1 0 (check_certificate_TCC1-1 nil 3481399109 3481914596 ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved ((length def-decl "nat" list_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (resolution_step type-decl nil resolution nil) (list type-decl nil list_adt nil) (resolution_certificate type-eq-decl nil resolution nil) (good_indices_cert? const-decl "bool" resolution nil)) 137 90 t nil))("resolution" resolution remove_p_nonp_TCC1 0 (remove_p_nonp_TCC1-1 nil 3481914562 3481915163 ("" (skolem-typepred) (("" (split) (("1" (lemma "finite_subset" (s "{p: (literal?) | member[((literal?))](p, lAA!1) AND NOT member[((literal?))](f_neg(p), lAA!1)}" A "lAA!1")) (("1" (rewrite -1 1) (("1" (delete 2) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) proved ((atom? const-decl "bool" resolution nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (injective? const-decl "bool" functions nil) (subset? const-decl "bool" sets nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (finite_subset formula-decl nil finite_sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (member const-decl "bool" sets nil) (f_neg const-decl "fmla" fmla nil) (clause_lit_list? const-decl "bool" resolution nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (literal? const-decl "bool" resolution nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 442394 2400 t nil))("resolution" resolution clause_lit_list?_TCC1 0 (clause_lit_list?_TCC1-1 nil 3481399109 3481914564 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (injective? const-decl "bool" functions nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (f_neg const-decl "fmla" fmla nil) (member const-decl "bool" sets nil) (atom? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil)) 1180 790 nil nil))("resolution" resolution apply_resolution_TCC1 0 (apply_resolution_TCC1-1 nil 3481399109 3481914566 ("" (subtype-tcc) nil nil) proved ((emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil) (clause_lit_list? const-decl "bool" resolution nil) (finite_emptyset name-judgement "finite_set" finite_sets nil)) 91 50 nil nil))("resolution" resolution multiple_resolutions_TCC1 0 (multiple_resolutions_TCC1-1 nil 3481914562 3481914567 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (literal? const-decl "bool" resolution nil) (set type-eq-decl nil sets nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (clause_lit_list? const-decl "bool" resolution nil) (clauses_list type-eq-decl nil resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (f_neg const-decl "fmla" fmla nil) (member const-decl "bool" sets nil) (injective? const-decl "bool" functions nil)) 390 300 nil nil))("resolution" resolution create_clauses_TCC8 0 (create_clauses_TCC8-1 nil 3482010882 3482017665 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (literal? const-decl "bool" resolution nil) (clause_lit_list? def-decl "bool" resolution nil) (clauses_list type-eq-decl nil resolution nil) (resolution_step type-decl nil resolution nil) (resolution_certificate type-eq-decl nil resolution nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (good_indices def-decl "bool" resolution nil) (length def-decl "nat" list_props nil) (> const-decl "bool" reals nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (resolve const-decl "(clause_lit_list?)" resolution nil)) 224 170 nil nil))("resolution" resolution good_indices_TCC3 0 (good_indices_TCC3-1 nil 3481399109 3482017661 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (> const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil)) 64 50 nil nil))("resolution" resolution good_indices_TCC2 0 (good_indices_TCC2-1 nil 3481399109 3482017661 ("" (termination-tcc) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_lit_list? def-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 49 20 nil nil))("resolution" resolution good_indices_TCC1 0 (good_indices_TCC1-1 nil 3481399109 3482017661 ("" (subtype-tcc) nil nil) proved nil 9 10 nil nil))("resolution" resolution no_duplicates?_TCC1 0 (no_duplicates?_TCC1-1 nil 3482010882 3482017657 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (atom? const-decl "bool" resolution nil)) 60 40 nil nil))("resolution" resolution clause_lit_list?_TCC1 0 (clause_lit_list?_TCC1-1 nil 3481399109 3482017657 ("" (skolem!) (("" (flatten) (("" (skolem!) (("" (flatten) (("" (rewrite -1) (("" (expand "length" 1 2) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((length def-decl "nat" list_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (index const-decl "nat" resolution nil) (atom? const-decl "bool" resolution nil)) 84 60 t nil))("trace_resolution" trace_resolution resolve_TCC1 0 (resolve_TCC1-1 nil 3482107568 3482108596 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (n formal-const-decl "nat" trace_resolution nil) (below type-eq-decl nil naturalnumbers nil) (trace_entry type-decl nil trace_resolution nil) (good_trace? const-decl "bool" trace_resolution nil) (trace type-eq-decl nil trace_resolution nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 24 0 nil nil))("trace_resolution" trace_resolution r_init_TCC1 0 (r_init_TCC1-1 nil 3482107568 3482108596 ("" (subtype-tcc) nil nil) unfinished nil 30 10 nil nil))("trace_resolution" trace_resolution resolve_step_TCC7 0 (resolve_step_TCC7-1 nil 3482107568 3482108596 ("" (termination-tcc) nil nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) 12 20 nil nil))("trace_resolution" trace_resolution resolve_step_TCC6 0 (resolve_step_TCC6-1 nil 3482107568 3482108596 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (n formal-const-decl "nat" trace_resolution nil) (below type-eq-decl nil naturalnumbers nil) (trace_entry type-decl nil trace_resolution nil) (good_trace? const-decl "bool" trace_resolution nil) (trace type-eq-decl nil trace_resolution nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil)) 66 40 nil nil))("trace_resolution" trace_resolution resolve_step_TCC5 0 (resolve_step_TCC5-1 nil 3482107568 3482108596 ("" (subtype-tcc) nil nil) unfinished nil 84 40 nil nil))("trace_resolution" trace_resolution resolve_step_TCC4 0 (resolve_step_TCC4-1 nil 3482107568 3482108596 ("" (termination-tcc) nil nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) 14 10 nil nil))("trace_resolution" trace_resolution resolve_step_TCC3 0 (resolve_step_TCC3-1 nil 3482107568 3482108596 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (n formal-const-decl "nat" trace_resolution nil) (below type-eq-decl nil naturalnumbers nil) (trace_entry type-decl nil trace_resolution nil) (good_trace? const-decl "bool" trace_resolution nil) (trace type-eq-decl nil trace_resolution nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (literal? const-decl "bool" trace_resolution nil) (clause? const-decl "bool" trace_resolution nil)) 84 60 nil nil))("trace_resolution" trace_resolution resolve_step_TCC2 0 (resolve_step_TCC2-1 nil 3482107568 3482108596 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (n formal-const-decl "nat" trace_resolution nil) (below type-eq-decl nil naturalnumbers nil) (trace_entry type-decl nil trace_resolution nil) (good_trace? const-decl "bool" trace_resolution nil) (trace type-eq-decl nil trace_resolution nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 31 20 nil nil))("trace_resolution" trace_resolution resolve_step_TCC1 0 (resolve_step_TCC1-1 nil 3482107568 3482108596 ("" (subtype-tcc) nil nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil)) 40 0 nil nil))("trace_resolution" trace_resolution good_trace_1_TCC1 0 (good_trace_1_TCC1-1 nil 3482107568 3482108593 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (n formal-const-decl "nat" trace_resolution nil) (below type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil)) 80 60 nil nil))("trace_resolution" trace_resolution merge_rec_TCC13 0 (merge_rec_TCC13-1 nil 3482107568 3482108596 ("" (subtype-tcc) nil nil) unfinished nil 255 170 nil nil))("trace_resolution" trace_resolution merge_rec_TCC12 0 (merge_rec_TCC12-1 nil 3482107568 3482108595 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (literal? const-decl "bool" trace_resolution nil) (clause? const-decl "bool" trace_resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil)) 264 200 nil nil))("trace_resolution" trace_resolution merge_rec_TCC11 0 (merge_rec_TCC11-1 nil 3482107568 3482108595 ("" (subtype-tcc) nil nil) unfinished nil 225 160 nil nil))("trace_resolution" trace_resolution merge_rec_TCC10 0 (merge_rec_TCC10-1 nil 3482107568 3482108595 ("" (subtype-tcc) nil nil) unfinished nil 237 180 nil nil))("trace_resolution" trace_resolution merge_rec_TCC9 0 (merge_rec_TCC9-1 nil 3482107568 3482108595 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (literal? const-decl "bool" trace_resolution nil) (clause? const-decl "bool" trace_resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil)) 263 190 nil nil))("trace_resolution" trace_resolution merge_rec_TCC8 0 (merge_rec_TCC8-1 nil 3482107568 3482108594 ("" (subtype-tcc) nil nil) unfinished nil 224 170 nil nil))("trace_resolution" trace_resolution merge_rec_TCC7 0 (merge_rec_TCC7-1 nil 3482107568 3482108594 ("" (subtype-tcc) nil nil) unfinished nil 226 170 nil nil))("trace_resolution" trace_resolution merge_rec_TCC6 0 (merge_rec_TCC6-1 nil 3482107568 3482108594 ("" (subtype-tcc) nil nil) unfinished nil 206 140 nil nil))("trace_resolution" trace_resolution merge_rec_TCC5 0 (merge_rec_TCC5-1 nil 3482107568 3482108594 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (literal? const-decl "bool" trace_resolution nil) (clause? const-decl "bool" trace_resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil)) 220 170 nil nil))("trace_resolution" trace_resolution merge_rec_TCC4 0 (merge_rec_TCC4-1 nil 3482107568 3482108593 ("" (subtype-tcc) nil nil) unfinished nil 179 110 nil nil))("trace_resolution" trace_resolution merge_rec_TCC3 0 (merge_rec_TCC3-1 nil 3482107568 3482108593 ("" (subtype-tcc) nil nil) unfinished nil 201 130 nil nil))("trace_resolution" trace_resolution merge_rec_TCC2 0 (merge_rec_TCC2-1 nil 3482107568 3482108593 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (literal? const-decl "bool" trace_resolution nil) (clause? const-decl "bool" trace_resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil)) 216 160 nil nil))("trace_resolution" trace_resolution merge_rec_TCC1 0 (merge_rec_TCC1-1 nil 3482107568 3482108593 ("" (subtype-tcc) nil nil) unfinished nil 173 120 nil nil))("trace_resolution" trace_resolution merge_list_TCC1 0 (merge_list_TCC1-1 nil 3482107568 3482108596 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (literal? const-decl "bool" trace_resolution nil) (clause? const-decl "bool" trace_resolution nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (merge const-decl "(clause?)" trace_resolution nil) (length def-decl "nat" list_props nil)) 115 80 nil nil))("test_trace_entry" test tr_TCC1 0 (tr_TCC1-1 nil 3482106417 3482106450 ("" (cond-coverage-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 17 20 nil nil))("1" test1 th1 0 (th1-1 nil 3482175324 3482175328 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 4288 10 t shostak))("trace_resolution" trace_resolution cons_clause 0 (cons_clause-1 nil 3482107592 3482107990 ("" (induct ck) (("1" (grind) nil nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (hide -2) (("2" (grind) (("1" (grind) (("1" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 397590 110 t shostak))("trace_resolution" trace_resolution sorted_clause_rec 0 (sorted_clause_rec-1 nil 3482108315 3482109053 ("" (induct l) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skolem-typepred) (("3" (flatten) (("3" (skolem-typepred) (("3" (flatten) (("3" (skolem-typepred) (("3" (flatten) (("3" (expand "clause_rec?" -6) (("3" (flatten) (("3" (case "cons?(cons2_var!1)") (("1" (assert) (("1" (hide -5) (("1" (inst -5 "index(cons1_var!1)") (("1" (replace -7) (("1" (inst -5 e!1) (("1" (expand member -8) (("1" (split -8) (("1" (grind) nil nil) ("2" (replace -1) (("2" (expand clause_rec? -8) (("2" (flatten) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (list_induction formula-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (literal? const-decl "bool" trace_resolution nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (member def-decl "bool" list_props nil) (clause_rec? def-decl "bool" trace_resolution nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil)) 440710 550 t shostak))("trace_resolution" trace_resolution clause_rec?_TCC1 0 (clause_rec?_TCC1-1 nil 3482107568 3482108593 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (literal? const-decl "bool" trace_resolution nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil)) 114 50 nil nil))("resolution" resolution no_pairs 0 (no_pairs-1 nil 3482089228 3482094025 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (expand "f_neg") (("" (lift-if) (("" (split) (("1" (flatten) (("1" (lemma index_inj_clause_lit_list) (("1" (inst -1 lAA!1) (("1" (replace -6) (("1" (inst -1 "q!1" "arg(q!1)") (("1" (replace -7) (("1" (assert) (("1" (postpone) nil nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 382241 140 t shostak))("resolution" resolution index_inj_clause_lit_list 0 (index_inj_clause_lit_list-1 nil 3482092844 3482093630 ("" (induct lAA) (("1" (grind) nil nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (skolem-typepred) (("2" (flatten) (("2" (expand member -7) (("2" (split -7) (("1" (expand member -8) (("1" (split -8) (("1" (assert) nil nil) ("2" (lemma sorted_clause_lit_list) (("2" (inst -1 "cons(cons1_var!1, cons2_var!1)") (("2" (replace -9) (("2" (assert) (("2" (inst -1 lB!1) (("2" (replace -2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand member -8) (("2" (split -8) (("1" (lemma sorted_clause_lit_list) (("1" (inst -1 "cons(cons1_var!1, cons2_var!1)") (("1" (assert) (("1" (inst -1 lA!1) (("1" (replace -10) (("1" (replace -3) (("1" (replace -2) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand clause_lit_list? -8) (("2" (expand every_suffix? -8) (("2" (flatten) (("2" (expand clause_lit_list? -7) (("2" (replace -9) (("2" (inst -7 lA!1 lB!1) (("2" (replace -1) (("2" (replace -2) (("2" (delete -1 -2 -3 -4 -5 -6 -8 -9) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (sorted_clause_lit_list formula-decl nil resolution nil) (car_clause_lit_list? const-decl "bool" resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (prop_atom? const-decl "bool" resolution nil) (every_suffix? def-decl "bool" minlist nil) (list_induction formula-decl nil list_adt nil) (fmla type-decl nil fmla nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (literal? const-decl "bool" resolution nil) (index const-decl "nat" resolution nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (member def-decl "bool" list_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (clause_lit_list? const-decl "bool" resolution nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil)) 785604 1000 t shostak))("resolution" resolution clause_lit_list_implie_no_duplicate 0 (clause_lit_list_implie_no_duplicate-1 nil 3482089516 3482092788 ("" (induct lAA) (("1" (grind) nil nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (expand "clause_lit_list?" -4) (("2" (expand "every_suffix?" -4) (("2" (flatten) (("2" (expand "clause_lit_list?" -3) (("2" (replace -5) (("2" (expand no_duplicates? 1) (("2" (expand setlist? 1) (("2" (split) (("1" (expand car_clause_lit_list? -5) (("1" (split -5) (("1" (grind) nil nil) ("2" (lemma "sorted_clause_lit_list") (("2" (inst -1 cons2_var!1) (("2" (assert) (("2" (expand clause_lit_list? -1) (("2" (case "cons?(cons2_var!1)") (("1" (replace -1) (("1" (inst -2 cons1_var!1) (("1" (expand member -4) (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (clause_lit_list? const-decl "bool" resolution nil) (no_duplicates? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (fmla type-decl nil fmla nil) (list_induction formula-decl nil list_adt nil) (every_suffix? def-decl "bool" minlist nil) (setlist? def-decl "bool" minlist nil) (member def-decl "bool" list_props nil) (index const-decl "nat" resolution nil) (prop_atom? const-decl "bool" resolution nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (sorted_clause_lit_list formula-decl nil resolution nil) (car_clause_lit_list? const-decl "bool" resolution nil) (NOT const-decl "[bool -> bool]" booleans nil)) 319 90 t shostak))("resolution" resolution sorted_clause_lit_list 0 (sorted_clause_lit_list-1 nil 3482015112 3482092807 ("" (induct "lAA") (("1" (grind) nil nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (expand clause_lit_list? -4) (("2" (expand every_suffix? -4) (("2" (flatten) (("2" (expand clause_lit_list? -3) (("2" (replace -5) (("2" (case "null?(cons2_var!1)") (("1" (grind) nil nil) ("2" (assert) (("2" (skolem!) (("2" (flatten) (("2" (inst -3 e!1) (("2" (expand member -6) (("2" (split -6) (("1" (grind) nil nil) ("2" (replace -1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (clause_lit_list? const-decl "bool" resolution nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (member def-decl "bool" list_props nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (index const-decl "nat" resolution nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (literal? const-decl "bool" resolution nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (fmla type-decl nil fmla nil) (list_induction formula-decl nil list_adt nil) (every_suffix? def-decl "bool" minlist nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (prop_atom? const-decl "bool" resolution nil) (car_clause_lit_list? const-decl "bool" resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil)) 3996 2580 t shostak))("resolution" resolution car_clause_lit_list?_TCC1 0 (car_clause_lit_list?_TCC1-1 nil 3482089105 nil ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))("kot_resolve" kot_resolve or_sequent_TCC2 0 (or_sequent_TCC2-1 nil 3482188311 3482188317 ("" (subtype-tcc) nil nil) unfinished nil 247 120 nil nil))("trace2fmla" trace2fmla translate_lit_TCC8 0 (translate_lit_TCC8-1 nil 3482241771 3482241784 ("" (subtype-tcc) nil nil) proved ((prop_atom? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil)) 46 50 nil nil))("trace2fmla" trace2fmla translate_lit_TCC8 0 (translate_lit_TCC8-1 nil 3482187575 3482187702 ("" (subtype-tcc) nil nil) proved ((prop_atom? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil)) 10 10 nil nil))("resolution" resolution list_to_or_TCC3 0 (list_to_or_TCC3-1 nil 3482010882 3482191818 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (non_empty_clause_list? const-decl "bool" resolution nil) (index const-decl "posnat" resolution nil) (clause_rec? def-decl "bool" resolution nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (length def-decl "nat" list_props nil) (prop_atom? const-decl "bool" resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 254 230 nil nil))("resolution" resolution list_to_or_TCC2 0 (list_to_or_TCC2-1 nil 3482010882 3482191818 ("" (subtype-tcc) nil nil) unfinished nil 92 70 nil nil))("resolution" resolution list_to_or_TCC1 0 (list_to_or_TCC1-1 nil 3482010882 3482191818 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (non_empty_clause_list? const-decl "bool" resolution nil)) 12 20 nil nil))("resolution" resolution unsat?_TCC2 0 (unsat?_TCC2-1 nil 3482010882 3482191818 ("" (subtype-tcc) nil nil) unfinished nil 119 110 nil nil))("resolution" resolution unsat?_TCC1 0 (unsat?_TCC1-1 nil 3482010882 3482191818 ("" (subtype-tcc) nil nil) unfinished nil 42 20 nil nil))("resolution" resolution execute_certificate_TCC1 0 (execute_certificate_TCC1-1 nil 3482010882 3482191818 ("" (subtype-tcc) nil nil) unfinished nil 14 10 nil nil))("resolution" resolution create_clauses_TCC7 0 (create_clauses_TCC7-1 nil 3481914562 3482191818 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (clauses_list type-eq-decl nil resolution nil) (resolution_step type-decl nil resolution nil) (resolution_certificate type-eq-decl nil resolution nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (good_indices? def-decl "bool" resolution nil) (length def-decl "nat" list_props nil) (> const-decl "bool" reals nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 163 120 nil nil))("resolution" resolution create_clauses_TCC6 0 (create_clauses_TCC6-1 nil 3481399109 3482191817 ("" (termination-tcc) nil nil) unfinished ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (literal? const-decl "bool" resolution nil) (set type-eq-decl nil sets nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (clauses_list type-eq-decl nil resolution nil) (resolution_step type-decl nil resolution nil) (resolution_certificate type-eq-decl nil resolution nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 591 490 nil nil))("resolution" resolution create_clauses_TCC5 0 (create_clauses_TCC5-1 nil 3481399109 3482191817 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (lemma map_length (f "LAMBDA i: nth(context!1, i)" l "l!1")) (("1" (expand map -1) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (member def-decl "bool" list_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (map_length formula-decl nil more_map_props nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil) (> const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (resolution_certificate type-eq-decl nil resolution nil) (resolution_step type-decl nil resolution nil) (clauses_list type-eq-decl nil resolution nil) (literal? const-decl "bool" resolution nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 1133 950 t nil))("resolution" resolution create_clauses_TCC4 0 (create_clauses_TCC4-1 nil 3481399109 3482191816 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (lemma map_length (f "LAMBDA i: nth(context!1, i)" l "l!1")) (("1" (expand length -1) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (map_length formula-decl nil more_map_props nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil) (> const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (resolution_certificate type-eq-decl nil resolution nil) (resolution_step type-decl nil resolution nil) (clauses_list type-eq-decl nil resolution nil) (literal? const-decl "bool" resolution nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 529 430 t nil))("resolution" resolution create_clauses_TCC3 0 (create_clauses_TCC3-1 nil 3481399109 3482191815 ("" (subtype-tcc) (("1" (expand good_indices) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) unfinished ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (> const-decl "bool" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (literal? const-decl "bool" resolution nil) (clauses_list type-eq-decl nil resolution nil) (resolution_step type-decl nil resolution nil) (resolution_certificate type-eq-decl nil resolution nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil)) 172 140 t nil))("resolution" resolution create_clauses_TCC2 0 (create_clauses_TCC2-1 nil 3481399109 3482191815 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (clauses_list type-eq-decl nil resolution nil) (resolution_step type-decl nil resolution nil) (resolution_certificate type-eq-decl nil resolution nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (good_indices? def-decl "bool" resolution nil) (length def-decl "nat" list_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 81 40 nil nil))("resolution" resolution create_clauses_TCC1 0 (create_clauses_TCC1-1 nil 3481399109 3482191815 ("" (subtype-tcc) (("" (expand length +) (("" (assert) (("" (lift-if) (("" (split) (("1" (flatten) (("1" (assert) (("1" (expand append) (("1" (lift-if) (("1" (split) (("1" (assert) nil nil) ("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand good_indices -) (("2" (assert) (("2" (delete 1) (("2" (expand append) (("2" (lift-if) (("2" (split) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (assert) (("2" (lemma length_append (l1 "cdr(context!1)" l2 "cons(lst!1, null)")) (("2" (replace -1 2) (("2" (assert) (("2" (expand length + 2) (("2" (assert) (("2" (expand length + 2) (("2" (assert) (("2" (hide -1) (("2" (expand length -) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (length_append formula-decl nil list_props nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (append def-decl "list[T]" list_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (literal? const-decl "bool" resolution nil) (clauses_list type-eq-decl nil resolution nil) (resolution_step type-decl nil resolution nil) (resolution_certificate type-eq-decl nil resolution nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (append_clause const-decl "clauses_list" resolution nil)) 230 190 t nil))("resolution" resolution fold_resolutions_TCC2 0 (fold_resolutions_TCC2-1 nil 3482010882 3482191815 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (clauses_list type-eq-decl nil resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil)) 77 40 nil nil))("resolution" resolution fold_resolutions_TCC1 0 (fold_resolutions_TCC1-1 nil 3482010882 3482191815 ("" (subtype-tcc) nil nil) unfinished nil 130 120 nil nil))("resolution" resolution good_indices?_TCC3 0 (good_indices?_TCC3-1 nil 3482089105 3482191814 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (> const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil)) 62 50 nil nil))("resolution" resolution good_indices?_TCC2 0 (good_indices?_TCC2-1 nil 3482089105 3482191814 ("" (termination-tcc) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 48 40 nil nil))("resolution" resolution good_indices?_TCC1 0 (good_indices?_TCC1-1 nil 3482089105 3482191814 ("" (subtype-tcc) nil nil) proved nil 9 0 nil nil))("resolution" resolution strict_merge_TCC13 0 (strict_merge_TCC13-1 nil 3482010882 3482191814 ("" (subtype-tcc) nil nil) unfinished nil 363 290 nil nil))("resolution" resolution strict_merge_TCC12 0 (strict_merge_TCC12-1 nil 3482010882 3482191814 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" resolution nil) (f_neg const-decl "fmla" fmla nil) (prop_atom? const-decl "bool" resolution nil) (index const-decl "posnat" resolution nil)) 218 190 nil nil))("resolution" resolution strict_merge_TCC11 0 (strict_merge_TCC11-1 nil 3482010882 3482191814 ("" (subtype-tcc) nil nil) unfinished nil 353 290 nil nil))("resolution" resolution strict_merge_TCC10 0 (strict_merge_TCC10-1 nil 3482010882 3482191813 ("" (subtype-tcc) nil nil) unfinished nil 354 320 nil nil))("resolution" resolution strict_merge_TCC9 0 (strict_merge_TCC9-1 nil 3482010882 3482191813 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" resolution nil) (f_neg const-decl "fmla" fmla nil) (prop_atom? const-decl "bool" resolution nil) (index const-decl "posnat" resolution nil)) 218 170 nil nil))("resolution" resolution strict_merge_TCC8 0 (strict_merge_TCC8-1 nil 3482010882 3482191813 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (index const-decl "posnat" resolution nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (f_neg const-decl "fmla" fmla nil) (prop_atom? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil)) 251 230 nil nil))("resolution" resolution strict_merge_TCC7 0 (strict_merge_TCC7-1 nil 3482010882 3482191813 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (index const-decl "posnat" resolution nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (f_neg const-decl "fmla" fmla nil) (prop_atom? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil)) 252 190 nil nil))("resolution" resolution strict_merge_TCC6 0 (strict_merge_TCC6-1 nil 3482010882 3482191812 ("" (subtype-tcc) nil nil) unfinished nil 414 330 nil nil))("resolution" resolution strict_merge_TCC5 0 (strict_merge_TCC5-1 nil 3482010882 3482191812 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" resolution nil) (prop_atom? const-decl "bool" resolution nil) (index const-decl "posnat" resolution nil)) 203 180 nil nil))("resolution" resolution strict_merge_TCC4 0 (strict_merge_TCC4-1 nil 3482010882 3482191812 ("" (subtype-tcc) nil nil) unfinished nil 405 330 nil nil))("resolution" resolution strict_merge_TCC3 0 (strict_merge_TCC3-1 nil 3482010882 3482191811 ("" (subtype-tcc) nil nil) unfinished nil 383 310 nil nil))("resolution" resolution strict_merge_TCC2 0 (strict_merge_TCC2-1 nil 3482010882 3482191811 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" resolution nil) (prop_atom? const-decl "bool" resolution nil) (index const-decl "posnat" resolution nil)) 193 160 nil nil))("resolution" resolution strict_merge_TCC1 0 (strict_merge_TCC1-1 nil 3482010882 3482191811 ("" (subtype-tcc) nil nil) unfinished nil 363 290 nil nil))("resolution" resolution th1_TCC1 0 (th1_TCC1-1 nil 3482275916 3482275928 ("" (subtype-tcc) nil nil) unfinished nil 47 40 nil nil))("trace_resolution" trace_resolution resolution 0 (resolution-1 nil 3482268066 3482268452 ("" (skolem-typepred) (("" (expand resolution) (("" (postpone) nil nil)) nil)) nil) unfinished nil 385836 150 t shostak))("trace_resolution" trace_resolution resolution_TCC1 0 (resolution_TCC1-1 nil 3482268065 3482274658 ("" (skolem-typepred) (("" (hide -1 -3) (("" (hide -1 -3) (("" (postpone) nil nil)) nil)) nil)) nil) unfinished nil 287081 560 t nil))("trace_resolution" trace_resolution resolution_finite 0 (resolution_finite-1 nil 3482269296 3482270768 ("" (skolem-typepred) (("" (flatten) (("" (postpone) nil nil)) nil)) nil) unfinished nil 1222795 3410 t shostak))("trace_resolution" trace_resolution sorted_tr_clause_rec 0 (sorted_tr_clause_rec-1 nil 3482272052 3482272209 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (expand tr_clause_rec?) (("" (expand tr_clause_rec?) (("" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 156599 70 t shostak))("trace_resolution" trace_resolution tr_clause_rec?_TCC1 0 (tr_clause_rec?_TCC1-1 nil 3482268065 3482274272 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) 354 290 nil nil))("resolution" resolution remove_TCC6 0 (remove_TCC6-1 nil 3482089105 3482278108 ("" (subtype-tcc) nil nil) unchecked nil 1571 1340 nil nil))("resolution" resolution remove_TCC5 0 (remove_TCC5-1 nil 3482089105 3482278106 ("" (termination-tcc) nil nil) unchecked ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (literal? const-decl "bool" resolution nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) nil (clause? const-decl "bool" resolution nil) (clause_rec? def-decl "bool" resolution nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (prop_atom? const-decl "bool" resolution nil) (index const-decl "posnat" resolution nil)) 977 120 nil nil))("resolution" resolution remove_TCC4 0 (remove_TCC4-1 nil 3482010882 3482278105 ("" (skolem-typepred) (("" (case "clause_lit_list?(v!1(lA!1, r!1))") (("1" (flatten) (("1" (case "cons?(v!1(lA!1, r!1))") (("1" (postpone) nil nil) ("2" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil) untried nil 25 20 t nil))("resolution" resolution remove_TCC3 0 (remove_TCC3-1 nil 3482010882 3482278105 ("" (termination-tcc) nil nil) untried ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (literal? const-decl "bool" resolution nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (index const-decl "posnat" resolution nil)) 905 740 nil nil))("resolution" resolution remove_TCC2 0 (remove_TCC2-1 nil 3482010882 3482278104 ("" (skolem-typepred) (("" (flatten) (("" (replace -6 -3) (("" (expand "clause_lit_list?" -3) (("" (case "cons?(r!1)") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) untried ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (index const-decl "posnat" resolution nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (literal? const-decl "bool" resolution nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 3014 2560 t nil))("resolution" resolution remove_TCC1 0 (remove_TCC1-1 nil 3482010882 3482278101 ("" (skolem-typepred) (("" (flatten) (("" (replace -7 -3) (("" (expand "clause_lit_list?" -3) (("" (case "cons?(r!1)") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) untried ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (index const-decl "posnat" resolution nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (literal? const-decl "bool" resolution nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 5 0 t nil))("resolution" resolution clause_rec_red 0 (clause_rec_red-1 nil 3482191207 3482191444 ("" (grind) (("" (case "null?(lAA!1)") (("1" (grind) nil nil) ("2" (expand clause_rec?) (("2" (lift-if) (("2" (replace 1) (("2" (flatten) (("2" (split) (("1" (grind) nil nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) untried ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (clause_rec? def-decl "bool" resolution nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (index const-decl "posnat" resolution nil) (prop_atom? const-decl "bool" resolution nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (literal? const-decl "bool" resolution nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) 237382 390 t shostak))("resolution" resolution clause_rec?_TCC1 0 (clause_rec?_TCC1-1 nil 3482191174 3482278101 ("" (termination-tcc) nil nil) unchecked ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) nil (literal? const-decl "bool" resolution nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (prop_atom? const-decl "bool" resolution nil) (index const-decl "posnat" resolution nil)) 66 60 nil nil))("resolution" resolution include_clause_TCC7 0 (include_clause_TCC7-1 nil 3482270929 3482278110 ("" (cond-coverage-tcc) nil nil) unchecked ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) nil (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (prop_atom? const-decl "bool" resolution nil)) 79 60 nil nil))("resolution" resolution include_clause_TCC6 0 (include_clause_TCC6-1 nil 3482270929 3482278110 ("" (cond-disjoint-tcc) nil nil) unchecked ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) nil (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (index const-decl "posnat" resolution nil) (prop_atom? const-decl "bool" resolution nil)) 456 390 nil nil))("resolution" resolution include_clause_TCC5 0 (include_clause_TCC5-1 nil 3482270929 3482278109 ("" (termination-tcc) nil nil) unchecked ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) nil (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" resolution nil) (prop_atom? const-decl "bool" resolution nil) (index const-decl "posnat" resolution nil)) 159 120 nil nil))("resolution" resolution include_clause_TCC4 0 (include_clause_TCC4-1 nil 3482270929 3482278109 ("" (subtype-tcc) nil nil) unchecked nil 361 300 nil nil))("resolution" resolution include_clause_TCC3 0 (include_clause_TCC3-1 nil 3482270929 3482278109 ("" (termination-tcc) nil nil) unchecked ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) nil (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" resolution nil) (prop_atom? const-decl "bool" resolution nil) (index const-decl "posnat" resolution nil)) 159 130 nil nil))("resolution" resolution include_clause_TCC2 0 (include_clause_TCC2-1 nil 3482270929 3482278109 ("" (subtype-tcc) nil nil) unchecked nil 284 240 nil nil))("resolution" resolution include_clause_TCC1 0 (include_clause_TCC1-1 nil 3482270929 3482278108 ("" (subtype-tcc) nil nil) unchecked nil 302 220 nil nil))("resolution" resolution sdi_TCC1 0 (sdi_TCC1-1 nil 3482519649 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("resolution" resolution IMP_sortedlist_TCC2 0 (IMP_sortedlist_TCC2-1 nil 3482533503 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("resolution" resolution th1 0 (th1-1 nil 3482276728 3482619065 ("" (induct nclAA) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (skolem-typepred) (("4" (flatten) (("4" (skolem-typepred) (("4" (flatten) (("4" (expand not_or_reduction 1 1) (("4" (expand append 1 1) (("4" (expand append 1 1) (("4" (expand nclause2fmla 1) (("4" (lift-if) (("4" (split 1) (("1" (flatten) (("1" (expand include_clause -12) (("1" (use subset_include) (("1" (replace -13) (("1" (flatten) (("1" (expand subset -1) (("1" (flatten) (("1" (lemma lemma1) (("1" (inst -1 "cons1_var!1" "append(not_or_reduction(nclBB!1), clCC!1)") (("1" (inst 1 "RR_lemma1(cons1_var!1, append(not_or_reduction(nclBB!1), clCC!1))") (("1" (assert) (("1" (rewrite -1) (("1" (hide 2) (("1" (lemma member_append ("a" "cons1_var!1" "k" "not_or_reduction(nclBB!1)" "l" "clCC!1")) (("1" (hide -2 -4 -5 -7 -8 -9 -10 -12 -13 -14 -15 -16 -17) (("1" (lemma member_lit_member_fmla) (("1" (inst -1 "cons1_var!1" "clCC!1") (("1" (replace -3) (("1" (replace -1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma literal_sentence) (("2" (inst -1 cons1_var!1) nil nil)) nil) ("3" (hide 2) (("3" (expand not_or_reduction 1) (("3" (expand append 1) (("3" (expand append 1) (("3" (expand sentence_list? 1) (("3" (expand freevars 1) (("3" (hide -12) (("3" (lemma literal_sentence) (("3" (expand freevars 1 1) (("3" (hide -1) (("3" (lemma nclause2fmla_sentence) (("3" (inst -1 nclBB!1) (("3" (expand sentence? -1) (("3" (lemma literal_list_sentence_list) (("3" (inst -1 clCC!1) (("3" (expand sentence_list? -1) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lemma lemma2) (("2" (hide -1) (("2" (lemma lemma1) (("2" (inst -1 "cons1_var!1" "append(not_or_reduction(nclBB!1), clCC!1)") (("2" (lemma literal_sentence) (("2" (inst -1 cons1_var!1) (("2" (replace -1) (("2" (expand include_clause -13) (("2" (lemma subset_include) (("2" (inst -1 "cons(cons1_var!1, cons2_var!1)" "clCC!1") (("2" (flatten) (("2" (hide -2) (("2" (replace -14) (("2" (expand subset -1) (("2" (flatten) (("2" (lemma member_append ("a" "cons1_var!1" "k" "not_or_reduction(nclBB!1)" "l" "clCC!1")) (("2" (replace -1) (("2" (hide -1) (("2" (lemma member_lit_member_fmla) (("2" (inst -1 "cons1_var!1" "clCC!1") (("2" (replace -1) (("2" (replace -2) (("2" (lemma clause_sentence_list) (("2" (inst -1 clCC!1) (("2" (expand not_or_reduction -6 1) (("2" (expand append -6 1) (("2" (expand append -6 1) (("2" (lemma nclause2fmla_sentence) (("2" (inst -1 nclBB!1) (("2" (expand sentence_list? -7 1) (("2" (expand freevars -7 1) (("2" (expand sentence? -1) (("2" (expand sentence_list? -2) (("2" (assert) (("2" (case "null?(append(freevars(f_not(nclause2fmla(nclBB!1))),freevars(clCC!1)))") (("1" (replace -1) (("1" (flatten) (("1" (lemma clause_prop) (("1" (inst -1 "cons(cons1_var!1, cons2_var!1)") (("1" (flatten) (("1" (delete -2) (("1" (replace -19) (("1" (split -1) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (flatten) (("3" (hide -1) (("3" (assert) (("3" (expand nclause? -18 1) (("3" (inst -18 "clCC!1" "nclBB!1") (("3" (replace -22) (("3" (lemma subset_include) (("3" (inst -1 "cons2_var!1" "clCC!1") (("1" (flatten) (("1" (delete -1) (("1" (replace -8) (("1" (expand include_clause -19 1) (("1" (replace -1) (("1" (skolem-typepred) (("1" (flatten) (("1" (lemma lemma2) (("1" (inst -1 "cons1_var!1" "cons2_var!1" "append(not_or_reduction(nclBB!1), clCC!1)" "RR_lemma1(cons1_var!1, append(not_or_reduction(nclBB!1), clCC!1))" "RR!1") (("1" (inst 2 "RR_lemma2(cons1_var!1, cons2_var!1,
                             append(not_or_reduction(nclBB!1), clCC!1),
                             RR_lemma1(cons1_var!1,
                                       append
                                       (not_or_reduction(nclBB!1),
                                        clCC!1)),
                             RR!1)") (("1" (rewrite -1) (("1" (hide 3 -1) (("1" (use literal_list_sentence_list) nil nil)) nil) ("2" (hide -1 3) (("2" (expand sentence_list? 1) (("2" (expand not_or_reduction 1) (("2" (expand append 1 1) (("2" (expand append 1 1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand clause? -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (clause? const-decl "bool" resolution nil) (nclause? const-decl "bool" resolution nil) (include_clause const-decl "bool" resolution nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (> const-decl "bool" reals nil) (ne_proof_seq type-eq-decl nil proof nil) (= const-decl "[T, T -> boolean]" equalities nil) (sentence_list? const-decl "bool" fmla nil) (conclusion const-decl "sequent" proof nil) (append def-decl "list[T]" list_props nil) (not_or_reduction const-decl "sequent" resolution nil) (finseq type-eq-decl nil finite_sequences nil) (checkProof const-decl "bool" proof nil) (empty_seq const-decl "finseq" finite_sequences nil) (literal? const-decl "bool" resolution nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (fmla type-decl nil fmla nil) (list_induction formula-decl nil list_adt nil) (index const-decl "posnat" resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (sorted? def-decl "bool" sortedlist nil) (nclause2fmla def-decl "fmla" resolution nil) (subset def-decl "bool" minlist nil) (lemma1 formula-decl nil resolution nil) (RR_lemma1 const-decl "ne_proof_seq" resolution nil) (member_append formula-decl nil minlist nil) (member_lit_member_fmla formula-decl nil resolution nil) (literal_sentence formula-decl nil resolution nil) (freevars def-decl "list[(var?)]" fmla nil) (literal_list_sentence_list formula-decl nil resolution nil) (sentence? const-decl "bool" fmla nil) (nclause2fmla_sentence formula-decl nil resolution nil) (freevars def-decl "list[(var?)]" fmla nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (subset_include formula-decl nil sortedlist nil) (lemma2 formula-decl nil resolution nil) (clause_sentence_list formula-decl nil resolution nil) (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla nil) (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (term type-decl nil fmla nil) (cons2_var!1 skolem-const-decl "list[(literal?)]" resolution nil) (RR_lemma2 const-decl "ne_proof_seq" resolution nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (clause_prop formula-decl nil resolution nil) (NOT const-decl "[bool -> bool]" booleans nil)) 10263577 890 t shostak))("resolution" resolution th1_non_constr 0 (th1_non_constr-1 nil 3482685342 3482685360 ("" (postpone) nil nil) unfinished nil 17508 0 t shostak))("resolution" resolution offset_lemma2_TCC1 0 (offset_lemma2_TCC1-1 nil 3482603339 3482603346 ("" (subtype-tcc) nil nil) unfinished nil 42 40 nil nil))("resolution" resolution lemma2 0 (lemma2-1 nil 3482603378 3482608791 ("" (skolem-typepred) (("" (flatten) (("" (split) (("1" (grind) nil nil) ("2" (expand checkProof 1) (("2" (skolem-typepred) (("2" (expand RR_lemma2 1) (("2" (lift-if) (("2" (split 1) (("1" (expand checkProof -9) (("1" (inst -9 i!1) (("1" (grind) nil nil) ("2" (expand RR_lemma2 -1) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split 2) (("1" (flatten) (("1" (expand checkProof -11) (("1" (inst -11 "i!1 - RR1!1`length") (("1" (grind) nil nil) ("2" (expand RR_lemma2 -2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (split 2) (("1" (flatten) (("1" (expand concl_lemma2 -1) (("1" (assert) (("1" (expand concl_lemma2 1) (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (expand concl_lemma2) (("2" (flatten) (("2" (expand RR_lemma2 -2) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (expand concl_lemma2 1) (("3" (propax) nil nil)) nil) ("4" (flatten) (("4" (expand concl_lemma2 2) (("4" (expand RR_lemma2 -1) (("4" (case "i!1 = RR1!1`length + RR2!1`length") (("1" (replace -1) (("1" (lift-if) (("1" (split 2) (("1" (grind) nil nil) ("2" (flatten) (("2" (split 2) (("1" (grind) nil nil) ("2" (flatten) (("2" (delete 1 3 5 6) (("2" (lift-if) (("2" (split 1) (("1" (flatten) (("1" (lift-if) (("1" (split 1) (("1" (grind) nil nil) ("2" (flatten) (("2" (split 2) (("1" (flatten) (("1" (expand offset_lemma2) (("1" (delete -1 -2 -4) (("1" (expand nor_rule?) (("1" (split 1) (("1" (expand conclusion -7) (("1" (replace -7) (("1" (expand subset? 1) (("1" (skolem-typepred) (("1" (flatten) (("1" (expand member -1) (("1" (expand list2set -1) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (delete 3 5) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (list type-decl nil list_adt nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (ne_proof_seq type-eq-decl nil proof nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (conclusion const-decl "sequent" proof nil) (RR_lemma2 const-decl "ne_proof_seq" resolution nil) (concl_lemma2 const-decl "proof_step" resolution nil) (offset_lemma2 const-decl "proof_step" resolution nil) (< const-decl "bool" reals nil) (fmla type-decl nil fmla nil) (below type-eq-decl nil naturalnumbers nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (ax_rule? const-decl "bool" sequents nil) (list2set def-decl "set[T]" list2set nil) (member const-decl "bool" sets nil) (add const-decl "(nonempty?)" sets nil) (subset? const-decl "bool" sets nil) (or_rule? const-decl "bool" sequents nil) (nor_rule? const-decl "bool" sequents nil) (neg_rule? const-decl "bool" sequents nil) (cut_rule? const-decl "bool" sequents nil) (exists_rule? const-decl "bool" sequents nil) (f_neg const-decl "fmla" fmla nil) (forall_rule? const-decl "bool" sequents nil) (fschema_rule? const-decl "bool" sequents nil) (pschema_rule? const-decl "bool" sequents nil) (equality? const-decl "bool" sequents nil) (nth def-decl "T" list_props nil) (refl_equality? const-decl "bool" sequents nil) (reflex_rule? const-decl "bool" sequents nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (freesymbols def-decl "list[(usymb?)]" fmla nil) (freesymbols def-decl "list[(usymb?)]" fmla nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (map adt-def-decl "list[T1]" list_adt_map nil) (two_premise? adt-def-decl "boolean" proof nil) (one_premise? adt-def-decl "boolean" proof nil) (empty_seq const-decl "finseq" finite_sequences nil) (append def-decl "list[T]" list_props nil) (not_or_reduction const-decl "sequent" resolution nil) (sentence_list? const-decl "bool" fmla nil) (sentence? const-decl "bool" fmla nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (A!1 skolem-const-decl "fmla" resolution nil) (AA!1 skolem-const-decl "list[fmla]" resolution nil) (BB!1 skolem-const-decl "list[fmla]" resolution nil) (RR1!1 skolem-const-decl "ne_proof_seq" resolution nil) (RR2!1 skolem-const-decl "ne_proof_seq" resolution nil) (i!1 skolem-const-decl "below(RR_lemma2(A!1, AA!1, BB!1, RR1!1, RR2!1)`length)" resolution nil) (checkProof const-decl "bool" proof nil)) 249372 21890 t shostak))("resolution" resolution RR_lemma2_TCC9 0 (RR_lemma2_TCC9-1 nil 3482603339 3482603347 ("" (subtype-tcc) nil nil) unfinished ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 28 30 nil nil))("resolution" resolution RR_lemma2_TCC8 0 (RR_lemma2_TCC8-1 nil 3482603339 3482603347 ("" (cond-coverage-tcc) nil nil) unfinished nil 168 140 nil nil))("resolution" resolution RR_lemma2_TCC7 0 (RR_lemma2_TCC7-1 nil 3482603339 3482603346 ("" (cond-disjoint-tcc) nil nil) unfinished nil 185 140 nil nil))("resolution" resolution RR_lemma2_TCC6 0 (RR_lemma2_TCC6-1 nil 3482603339 3482603346 ("" (subtype-tcc) nil nil) unfinished ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (list type-decl nil list_adt nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (ne_proof_seq type-eq-decl nil proof nil) (below type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 78 60 nil nil))("resolution" resolution RR_lemma2_TCC5 0 (RR_lemma2_TCC5-1 nil 3482603339 3482603346 ("" (subtype-tcc) nil nil) unfinished ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (list type-decl nil list_adt nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (ne_proof_seq type-eq-decl nil proof nil) (below type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 76 60 nil nil))("resolution" resolution RR_lemma2_TCC4 0 (RR_lemma2_TCC4-1 nil 3482603339 3482603346 ("" (subtype-tcc) nil nil) unfinished ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (list type-decl nil list_adt nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (ne_proof_seq type-eq-decl nil proof nil) (below type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 91 70 nil nil))("resolution" resolution RR_lemma2_TCC3 0 (RR_lemma2_TCC3-1 nil 3482603339 3482603346 ("" (subtype-tcc) nil nil) unfinished ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (list type-decl nil list_adt nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (ne_proof_seq type-eq-decl nil proof nil) (below type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 77 60 nil nil))("resolution" resolution RR_lemma2_TCC2 0 (RR_lemma2_TCC2-1 nil 3482603339 3482603346 ("" (subtype-tcc) nil nil) unfinished ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (list type-decl nil list_adt nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (ne_proof_seq type-eq-decl nil proof nil) (below type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 121 80 nil nil))("resolution" resolution RR_lemma2_TCC1 0 (RR_lemma2_TCC1-1 nil 3482603339 3482603346 ("" (subtype-tcc) nil nil) unfinished ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (list type-decl nil list_adt nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (ne_proof_seq type-eq-decl nil proof nil) (below type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil)) 73 50 nil nil))("resolution" resolution concl_lemma2_TCC4 0 (concl_lemma2_TCC4-1 nil 3482603339 3482603346 ("" (subtype-tcc) nil nil) unfinished nil 84 60 nil nil))("resolution" resolution concl_lemma2_TCC3 0 (concl_lemma2_TCC3-1 nil 3482603339 3482603346 ("" (subtype-tcc) nil nil) unfinished nil 4 10 nil nil))("resolution" resolution concl_lemma2_TCC2 0 (concl_lemma2_TCC2-1 nil 3482603339 3482603346 ("" (subtype-tcc) nil nil) unfinished nil 35 20 nil nil))("resolution" resolution concl_lemma2_TCC1 0 (concl_lemma2_TCC1-1 nil 3482603339 3482603346 ("" (subtype-tcc) nil nil) unfinished nil 38 30 nil nil))("resolution" resolution cut2_lemma1_TCC1 0 (cut2_lemma1_TCC1-1 nil 3482523115 3482603345 ("" (subtype-tcc) nil nil) unchecked nil 19 20 nil nil))("resolution" resolution cut1_lemma1_TCC1 0 (cut1_lemma1_TCC1-1 nil 3482523115 3482603345 ("" (subtype-tcc) nil nil) unchecked nil 18 20 nil nil))("resolution" resolution concl_subsetr_TCC1 0 (concl_subsetr_TCC1-1 nil 3482700134 3482703328 ("" (subtype-tcc) nil nil) unchecked nil 26 20 nil nil))("resolution" resolution RR_lemma1_TCC1 0 (RR_lemma1_TCC1-1 nil 3482519649 3482703326 ("" (cond-coverage-tcc) nil nil) unchecked ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 11 10 nil nil))("resolution" resolution concl_lemma1_TCC2 0 (concl_lemma1_TCC2-1 nil 3482523115 3482703326 ("" (subtype-tcc) nil nil) unchecked nil 20 10 nil nil))("resolution" resolution lemma1_pf_TCC1 0 (lemma1_pf_TCC1-1 nil 3482703321 3482703326 ("" (subtype-tcc) nil nil) unchecked nil 30 20 nil nil))("resolution" resolution concl_lemma1_TCC1 0 (concl_lemma1_TCC1-1 nil 3482523115 3482703326 ("" (subtype-tcc) nil nil) unchecked nil 16 10 nil nil))("trace_resolution" trace_resolution exist_pivot_TCC2 0 (exist_pivot_TCC2-1 nil 3482760023 3482760033 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (sorted? def-decl "bool" sortedlist nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 370 310 nil nil))("trace_resolution" trace_resolution exist_pivot_TCC1 0 (exist_pivot_TCC1-1 nil 3482760023 3482760206 ("" (skolem-typepred) (("" (hide -1 -3 -7) (("" (flatten) (("" (expand tr_clause? -1) (("" (expand sorted? -1) (("" (lift-if) (("" (split) (("1" (assert) nil nil) ("2" (flatten) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((member def-decl "bool" list_props nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (sorted? def-decl "bool" sortedlist nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 108312 760 t nil))("trace_resolution" trace_resolution delete_pivot_TCC5 0 (delete_pivot_TCC5-1 nil 3482675376 3482760992 ("" (subtype-tcc) nil nil) unfinished nil 1224 1100 nil nil))("trace_resolution" trace_resolution delete_pivot_TCC4 0 (delete_pivot_TCC4-1 nil 3482675376 3482760991 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (sorted? def-decl "bool" sortedlist nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 318 280 nil nil))("trace_resolution" trace_resolution nne_tr_clause?_TCC2 0 (nne_tr_clause?_TCC2-1 nil 3482764464 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("trace_resolution" trace_resolution nne_tr_clause?_TCC1 0 (nne_tr_clause?_TCC1-1 nil 3482764464 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("trace_resolution" trace_resolution resolution_TCC3 0 (resolution_TCC3-1 nil 3482764464 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("trace_resolution" trace_resolution resolution_TCC2 0 (resolution_TCC2-1 nil 3482764464 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("resolution" resolution RR_th2_1_TCC4 0 (RR_th2_1_TCC4-1 nil 3482773560 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("resolution" resolution RR_th2_1_TCC3 0 (RR_th2_1_TCC3-1 nil 3482773560 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("resolution" resolution RR_th2_1_TCC2 0 (RR_th2_1_TCC2-1 nil 3482773560 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("resolution" resolution RR_th2_1_TCC1 0 (RR_th2_1_TCC1-1 nil 3482773560 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("resolution" resolution IMP_sortedlist_TCC2 0 (IMP_sortedlist_TCC2-1 nil 3482773560 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("trace_checker" trace_checker th_TCC1 0 (th_TCC1-1 nil 3482772790 3482772798 ("" (subtype-tcc) nil nil) unfinished nil 622 540 nil nil))("trace_checker" trace_checker proof_th_TCC2 0 (proof_th_TCC2-1 nil 3482772790 3482772797 ("" (subtype-tcc) nil nil) unfinished nil 818 720 nil nil))("trace2fmla" trace2fmla inclusion 0 (inclusion-1 nil 3482776343 3482776497 ("" (skolem-typepred) (("" (flatten) (("" (hide -1 -3) (("" (expand include_clause) (("" (generalize ck!1 ck) (("1" (skolem-typepred) (("1" (flatten) (("1" (hide -1) (("1" (grind) (("1" (grind) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 154422 420 t shostak))("trace2fmla" trace2fmla inclusion_TCC2 0 (inclusion_TCC2-1 nil 3482776332 3482776336 ("" (subtype-tcc) nil nil) unfinished nil 329 260 nil nil))("trace2fmla" trace2fmla inclusion_TCC1 0 (inclusion_TCC1-1 nil 3482776332 3482776336 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" trace2fmla nil) (n formal-const-decl "nat" trace2fmla nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (i formal-const-decl "upto(n)" trace2fmla nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil)) 166 110 nil nil))("sortedlist" sortedlist remove_TCC6 0 (remove_TCC6-1 nil 3482516874 3482518292 ("" (skolem-typepred) (("" (flatten) (("" (split) (("1" (typepred "v!1(e!1, r!1)") (("1" (expand sorted? +) (("1" (lift-if) (("1" (split) (("1" (propax) nil nil) ("2" (flatten) (("2" (replace -1 2) (("2" (expand sorted? -3) (("2" (lift-if) (("2" (split) (("1" (assert) nil nil) ("2" (flatten) (("2" (lift-if) (("2" (split) (("1" (assert) (("1" (delete 1) (("1" (postpone) nil nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil) unfinished nil 65243 320 t nil))("sortedlist" sortedlist remove_TCC5 0 (remove_TCC5-1 nil 3482515380 3482517432 ("" (skolem-typepred) (("" (flatten) (("" (replace -2 3) (("" (grind) nil nil)) nil)) nil)) nil) proved ((length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (sorted? def-decl "bool" sortedlist nil) (list type-decl nil list_adt nil) (T formal-type-decl nil sortedlist nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 98 80 t nil))("trace_resolution" trace_resolution clause_true_lemma_TCC1 0 (clause_true_lemma_TCC1-1 nil 3482788091 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("trace2fmla" trace2fmla translate_inclusion_TCC2 0 (translate_inclusion_TCC2-1 nil 3482804348 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("trace2fmla" trace2fmla append_inclusion_TCC1 0 (append_inclusion_TCC1-1 nil 3482848757 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("trace_resolution" trace_resolution include_res_TCC3 0 (include_res_TCC3-1 nil 3482776948 3482783522 ("" (subtype-tcc) nil nil) unfinished ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (member def-decl "bool" list_props nil)) 450 360 nil nil))("trace_resolution" trace_resolution include_res_TCC2 0 (include_res_TCC2-1 nil 3482776948 3482783522 ("" (subtype-tcc) nil nil) unfinished nil 558 490 nil nil))("trace_resolution" trace_resolution include_res_TCC1 0 (include_res_TCC1-1 nil 3482776948 3482783521 ("" (subtype-tcc) nil nil) unfinished ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (member def-decl "bool" list_props nil)) 401 320 nil nil))("trace2fmla" trace2fmla translate_inclusion 0 (translate_inclusion-1 nil 3482806421 3482806569 ("" (skosimp) (("" (generalize lk!1 "lk") (("1" (induct lk) (("1" (grind) nil nil) ("2" (skosimp) (("2" (expand subset + 1) (("2" (expand subset + 2) (("2" (postpone) nil nil)) nil)) nil)) nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil) unfinished nil 148719 870 t shostak))("trace2fmla" trace2fmla translate_inclusion_TCC1 0 (translate_inclusion_TCC1-1 nil 3482804348 nil ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))("trace2fmla" trace2fmla translate_include_res_TCC1 0 (translate_include_res_TCC1-1 nil 3482864270 3482865252 ("" (skosimp) (("" (skosimp) (("" (expand exist_pivot?) (("" (lift-if) (("" (split) (("1" (propax) nil nil) ("2" (split) (("1" (flatten) (("1" (split) (("1" (expand member -1) (("1" (lift-if) (("1" (replace -2 -1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (expand exist_pivot?) (("2" (lift-if) (("2" (split) (("1" (propax) nil nil) ("2" (flatten) (("2" (split) (("1" (expand member -1) (("1" (lift-if) (("1" (replace -2 -1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (expand exist_pivot?) (("2" (expand member -1) (("2" (lift-if) (("2" (replace -2 -1) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 332967 150 t nil))("resolution" resolution IMP_sortedlist_TCC2 0 (IMP_sortedlist_TCC2-1 nil 3482846332 3482847074 ("" (lemma IMP_sortedlist_TCC1) (("" (propax) nil nil)) nil) proved ((IMP_sortedlist_TCC1 subtype-tcc nil resolution nil)) 33789 0 t nil))("resolution" resolution RR_th2_TCC4 0 (RR_th2_TCC4-1 nil 3482803452 3482846340 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (lemma nclause2fmla_sentence) (("" (inst -1 nclBB!1) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (freevars def-decl "list[(var?)]" fmla nil) (freevars def-decl "list[(var?)]" fmla nil) (append def-decl "list[T]" list_props nil) (not_or_reduction const-decl "sequent" resolution nil) (prop_atom? const-decl "bool" resolution nil) (sentence? const-decl "bool" fmla nil) (nclause2fmla_sentence formula-decl nil resolution nil) (ne_proof_seq type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (proof_step type-eq-decl nil proof nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (sequent type-eq-decl nil sequents nil) (rule type-decl nil proof nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (> const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (sentence_list? const-decl "bool" fmla nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (literal? const-decl "bool" resolution nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 128 80 t nil))("resolution" resolution RR_th2_TCC3 0 (RR_th2_TCC3-1 nil 3482803452 3482846340 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (lemma nclause2fmla_sentence) (("" (inst -1 nclBB!1) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (freevars def-decl "list[(var?)]" fmla nil) (freevars def-decl "list[(var?)]" fmla nil) (append def-decl "list[T]" list_props nil) (not_or_reduction const-decl "sequent" resolution nil) (prop_atom? const-decl "bool" resolution nil) (sentence? const-decl "bool" fmla nil) (nclause2fmla_sentence formula-decl nil resolution nil) (sentence_list? const-decl "bool" fmla nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (literal? const-decl "bool" resolution nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 106 80 t nil))("resolution" resolution RR_th2_TCC2 0 (RR_th2_TCC2-1 nil 3482803452 3482846339 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (use literal_sentence) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((literal_sentence formula-decl nil resolution nil) (sentence_list? const-decl "bool" fmla nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (literal? const-decl "bool" resolution nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 90 60 t nil))("resolution" resolution RR_th2_1_TCC8 0 (RR_th2_1_TCC8-1 nil 3482804347 3482846339 ("" (skolem-typepred) (("" (flatten) (("" (use literal_sentence) (("" (grind) nil nil)) nil)) nil)) nil) proved ((sentence? const-decl "bool" fmla nil) (prop_atom? const-decl "bool" resolution nil) (freevars def-decl "list[(var?)]" fmla nil) (append def-decl "list[T]" list_props nil) (freevars def-decl "list[(var?)]" fmla nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (literal_sentence formula-decl nil resolution nil) (sentence_list? const-decl "bool" fmla nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (literal? const-decl "bool" resolution nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 96 80 t nil))("resolution" resolution RR_th2_1_TCC7 0 (RR_th2_1_TCC7-1 nil 3482804347 3482846339 ("" (skolem-typepred) (("" (flatten) (("" (use nclause2fmla_sentence) (("" (use literal_sentence) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((literal_sentence formula-decl nil resolution nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (freevars def-decl "list[(var?)]" fmla nil) (freevars def-decl "list[(var?)]" fmla nil) (append def-decl "list[T]" list_props nil) (not_or_reduction const-decl "sequent" resolution nil) (prop_atom? const-decl "bool" resolution nil) (sentence? const-decl "bool" fmla nil) (nclause2fmla_sentence formula-decl nil resolution nil) (sentence_list? const-decl "bool" fmla nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (literal? const-decl "bool" resolution nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 172 160 t nil))("resolution" resolution RR_th2_1_TCC6 0 (RR_th2_1_TCC6-1 nil 3482803452 3482846339 ("" (skolem-typepred) (("" (flatten) (("" (use nclause2fmla_sentence) (("" (use literal_sentence) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((literal_sentence formula-decl nil resolution nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (freevars def-decl "list[(var?)]" fmla nil) (freevars def-decl "list[(var?)]" fmla nil) (append def-decl "list[T]" list_props nil) (not_or_reduction const-decl "sequent" resolution nil) (prop_atom? const-decl "bool" resolution nil) (sentence? const-decl "bool" fmla nil) (nclause2fmla_sentence formula-decl nil resolution nil) (sentence_list? const-decl "bool" fmla nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (literal? const-decl "bool" resolution nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 156 130 t nil))("resolution" resolution RR_th2_1_TCC5 0 (RR_th2_1_TCC5-1 nil 3482803452 3482846339 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (use nclause2fmla_sentence) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((sentence? const-decl "bool" fmla nil) (prop_atom? const-decl "bool" resolution nil) (not_or_reduction const-decl "sequent" resolution nil) (append def-decl "list[T]" list_props nil) (concl_subsetr const-decl "proof_step" resolution nil) (RR_subsetr const-decl "ne_proof_seq" resolution nil) (freevars def-decl "list[(var?)]" fmla nil) (freevars def-decl "list[(var?)]" fmla nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nclause2fmla_sentence formula-decl nil resolution nil) (ne_proof_seq type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (proof_step type-eq-decl nil proof nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (sequent type-eq-decl nil sequents nil) (rule type-decl nil proof nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (> const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (sentence_list? const-decl "bool" fmla nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (literal? const-decl "bool" resolution nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 170 130 t nil))("resolution" resolution RR_th2_1_TCC4 0 (RR_th2_1_TCC4-1 nil 3482803452 3482846339 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (use literal_sentence) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (sentence? const-decl "bool" fmla nil) (prop_atom? const-decl "bool" resolution nil) (not_or_reduction const-decl "sequent" resolution nil) (append def-decl "list[T]" list_props nil) (concl_subsetr const-decl "proof_step" resolution nil) (RR_subsetr const-decl "ne_proof_seq" resolution nil) (freevars def-decl "list[(var?)]" fmla nil) (literal_sentence formula-decl nil resolution nil) (ne_proof_seq type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (proof_step type-eq-decl nil proof nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (sequent type-eq-decl nil sequents nil) (rule type-decl nil proof nil) (below type-eq-decl nil nat_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (> const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (sentence_list? const-decl "bool" fmla nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (literal? const-decl "bool" resolution nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 171 140 t nil))("resolution" resolution RR_th2_1_TCC3 0 (RR_th2_1_TCC3-1 nil 3482803452 3482846339 ("" (skolem-typepred) (("" (flatten) (("" (use literal_sentence) (("" (grind) nil nil)) nil)) nil)) nil) proved ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (sentence? const-decl "bool" fmla nil) (prop_atom? const-decl "bool" resolution nil) (freevars def-decl "list[(var?)]" fmla nil) (append def-decl "list[T]" list_props nil) (sorted? def-decl "bool" sortedlist nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" resolution nil) (freevars def-decl "list[(var?)]" fmla nil) (literal_sentence formula-decl nil resolution nil) (sentence_list? const-decl "bool" fmla nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (literal? const-decl "bool" resolution nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 140 110 t nil))("resolution" resolution RR_th2_1_TCC2 0 (RR_th2_1_TCC2-1 nil 3482803452 3482846338 ("" (skolem-typepred) (("" (flatten) (("" (use nclause2fmla_sentence) (("" (use literal_sentence) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((literal_sentence formula-decl nil resolution nil) (index const-decl "posnat" resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (sorted? def-decl "bool" sortedlist nil) (freevars def-decl "list[(var?)]" fmla nil) (freevars def-decl "list[(var?)]" fmla nil) (append def-decl "list[T]" list_props nil) (not_or_reduction const-decl "sequent" resolution nil) (prop_atom? const-decl "bool" resolution nil) (sentence? const-decl "bool" fmla nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nclause2fmla_sentence formula-decl nil resolution nil) (sentence_list? const-decl "bool" fmla nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (literal? const-decl "bool" resolution nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 188 180 t nil))("resolution" resolution RR_th2_1_TCC1 0 (RR_th2_1_TCC1-1 nil 3482803452 3482846338 ("" (skolem-typepred) (("" (flatten) (("" (use nclause2fmla_sentence) (("" (use literal_sentence) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((literal_sentence formula-decl nil resolution nil) (index const-decl "posnat" resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (sorted? def-decl "bool" sortedlist nil) (freevars def-decl "list[(var?)]" fmla nil) (freevars def-decl "list[(var?)]" fmla nil) (append def-decl "list[T]" list_props nil) (not_or_reduction const-decl "sequent" resolution nil) (prop_atom? const-decl "bool" resolution nil) (sentence? const-decl "bool" fmla nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nclause2fmla_sentence formula-decl nil resolution nil) (sentence_list? const-decl "bool" fmla nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (literal? const-decl "bool" resolution nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 203 170 t nil))("resolution" resolution RR_th1_TCC5 0 (RR_th1_TCC5-1 nil 3482803452 3482846338 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (grind) nil nil)) nil)) nil)) nil)) nil) proved ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (prop_atom? const-decl "bool" resolution nil) (sentence_list? const-decl "bool" fmla nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 83 50 t nil))("resolution" resolution RR_th1_TCC4 0 (RR_th1_TCC4-1 nil 3482803452 3482846338 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (use nclause2fmla_sentence) nil nil)) nil)) nil)) nil)) nil) proved ((nclause2fmla_sentence formula-decl nil resolution nil) (sentence_list? const-decl "bool" fmla nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 72 50 t nil))("resolution" resolution RR_th1_TCC3 0 (RR_th1_TCC3-1 nil 3482803452 3482846338 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (use clause_prop) (("" (replace -4) (("" (assert) (("" (split -1) (("1" (grind) nil nil) ("2" (flatten) (("2" (assert) (("2" (expand nclause? 2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((sorted? def-decl "bool" sortedlist nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (clause_prop formula-decl nil resolution nil) (sentence_list? const-decl "bool" fmla nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 111 90 t nil))("resolution" resolution RR_lemma1_TCC1 0 (RR_lemma1_TCC1-1 nil 3482803452 3482846338 ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved ((freevars def-decl "list[(var?)]" fmla nil) (append def-decl "list[T]" list_props nil) (freevars def-decl "list[(var?)]" fmla nil) (sentence_list? const-decl "bool" fmla nil) (list type-decl nil list_adt nil) (sentence? const-decl "bool" fmla nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 32 20 t nil))("resolution" resolution RR_negr_TCC6 0 (RR_negr_TCC6-1 nil 3482804991 3482846338 ("" (subtype-tcc) nil nil) proved nil 5 0 nil nil))("resolution" resolution RR_negr_TCC5 0 (RR_negr_TCC5-1 nil 3482804991 3482846338 ("" (cond-coverage-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (sentence? const-decl "bool" fmla nil) (list type-decl nil list_adt nil) (sentence_list? const-decl "bool" fmla nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (ne_proof_seq type-eq-decl nil proof nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil)) 83 70 nil nil))("resolution" resolution RR_negr_TCC4 0 (RR_negr_TCC4-1 nil 3482804991 3482846338 ("" (cond-disjoint-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (sentence? const-decl "bool" fmla nil) (list type-decl nil list_adt nil) (sentence_list? const-decl "bool" fmla nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (ne_proof_seq type-eq-decl nil proof nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil)) 68 40 nil nil))("resolution" resolution RR_negr_TCC3 0 (RR_negr_TCC3-1 nil 3482804991 3482846337 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (sentence? const-decl "bool" fmla nil) (list type-decl nil list_adt nil) (sentence_list? const-decl "bool" fmla nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (ne_proof_seq type-eq-decl nil proof nil) (int_minus_int_is_int application-judgement "int" integers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil)) 56 20 nil nil))("resolution" resolution RR_negr_TCC2 0 (RR_negr_TCC2-1 nil 3482804991 3482846337 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (sentence? const-decl "bool" fmla nil) (list type-decl nil list_adt nil) (sentence_list? const-decl "bool" fmla nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (ne_proof_seq type-eq-decl nil proof nil) (int_minus_int_is_int application-judgement "int" integers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil)) 41 20 nil nil))("resolution" resolution RR_negr_TCC1 0 (RR_negr_TCC1-1 nil 3482804991 3482846337 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (sentence? const-decl "bool" fmla nil) (list type-decl nil list_adt nil) (sentence_list? const-decl "bool" fmla nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (ne_proof_seq type-eq-decl nil proof nil) (int_minus_int_is_int application-judgement "int" integers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil)) 41 20 nil nil))("resolution" resolution RR_subsetr_TCC6 0 (RR_subsetr_TCC6-1 nil 3482804991 3482846337 ("" (subtype-tcc) nil nil) proved nil 5 10 nil nil))("resolution" resolution RR_subsetr_TCC5 0 (RR_subsetr_TCC5-1 nil 3482804991 3482846337 ("" (cond-coverage-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (sentence_list? const-decl "bool" fmla nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (ne_proof_seq type-eq-decl nil proof nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil)) 82 60 nil nil))("resolution" resolution RR_subsetr_TCC4 0 (RR_subsetr_TCC4-1 nil 3482804991 3482846337 ("" (cond-disjoint-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (sentence_list? const-decl "bool" fmla nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (ne_proof_seq type-eq-decl nil proof nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil)) 67 60 nil nil))("resolution" resolution RR_subsetr_TCC3 0 (RR_subsetr_TCC3-1 nil 3482804991 3482846337 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (sentence_list? const-decl "bool" fmla nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (ne_proof_seq type-eq-decl nil proof nil) (int_minus_int_is_int application-judgement "int" integers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil)) 56 40 nil nil))("resolution" resolution RR_subsetr_TCC2 0 (RR_subsetr_TCC2-1 nil 3482804991 3482846337 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (sentence_list? const-decl "bool" fmla nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (ne_proof_seq type-eq-decl nil proof nil) (int_minus_int_is_int application-judgement "int" integers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil)) 41 30 nil nil))("resolution" resolution RR_subsetr_TCC1 0 (RR_subsetr_TCC1-1 nil 3482804991 3482846337 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (sentence_list? const-decl "bool" fmla nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (rule type-decl nil proof nil) (sequent type-eq-decl nil sequents nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (proof_step type-eq-decl nil proof nil) (proof_seq type-eq-decl nil proof nil) (ne_proof_seq type-eq-decl nil proof nil) (int_minus_int_is_int application-judgement "int" integers nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil)) 56 30 nil nil))("resolution" resolution concl_subsetr_TCC2 0 (concl_subsetr_TCC2-1 nil 3482804991 3482846337 ("" (skolem-typepred) (("" (grind) nil nil)) nil) proved ((every adt-def-decl "boolean" list_adt nil) (sentence_list? const-decl "bool" fmla nil) (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 14 20 t nil))("resolution" resolution concl_subsetr_TCC1 0 (concl_subsetr_TCC1-1 nil 3482804991 3482846337 ("" (subtype-tcc) nil nil) proved nil 4 0 nil nil))("trace_checker" trace_checker not_clause_TCC1 0 (not_clause_TCC1-1 nil 3482702866 3483106583 ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (sorted? def-decl "bool" sortedlist nil) (translate_lit const-decl "(literal?)" trace2fmla nil) (map adt-def-decl "list[T1]" list_adt_map nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" trace_checker nil) (n formal-const-decl "nat" trace_checker nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (i formal-const-decl "upto(n)" trace_checker nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (nclause? const-decl "bool" resolution nil) (translate_clause const-decl "(clause?)" trace2fmla nil)) 449 360 t nil))("trace2fmla" trace2fmla cons_inclusion 0 (cons_inclusion-1 nil 3482846186 3483110572 ("" (skosimp) (("" (postpone) nil nil)) nil) unfinished nil 231782 20 t shostak))("proof" proof main_TCC1 0 (main_TCC1-1 nil 3480972004 3483143072 ("" (subtype-tcc) nil nil) unfinished nil 127 90 nil nil))("proof" proof compose?_TCC1 0 (compose?_TCC1-1 nil 3480972004 3483143071 ("" (subtype-tcc) nil nil) unfinished nil 112 80 nil nil))("trace2fmla" trace2fmla subset_numpred_nzint 0 (subset_numpred_nzint-1 nil 3483141381 3483142016 ("" (skosimp) (("" (grind) (("1" (generalize listA!1 listA) (("1" (induct listA) (("1" (grind) nil nil) ("2" (skosimp) (("2" (expand subset 1) (("2" (expand subset -2) (("2" (flatten) (("2" (replace -3 -1) (("2" (replace -1 1) (("2" (grind) (("2" (lemma member_numpred_nzint) (("2" (inst -1 "cons1_var!1" "listB!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (generalize listA!1 listA) (("2" (induct listA) (("1" (grind) nil nil) ("2" (skosimp) (("2" (expand subset -2) (("2" (flatten) (("2" (replace -3 -1) (("2" (expand subset 1) (("2" (replace -1 1) (("2" (lemma member_numpred_nzint) (("2" (inst -1 "cons1_var!1" "listB!1") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((tr_literal? const-decl "bool" trace_resolution nil) (i formal-const-decl "upto(n)" trace2fmla nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (n formal-const-decl "nat" trace2fmla nil) (m formal-const-decl "nat" trace2fmla nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (subset def-decl "bool" minlist nil) (numfield nonempty-type-eq-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (member_numpred_nzint formula-decl nil trace2fmla nil) (list_induction formula-decl nil list_adt nil)) 194311 510 t shostak))("trace2fmla" trace2fmla member_numpred_nzint 0 (member_numpred_nzint-1 nil 3483141541 3483141814 ("" (skosimp) (("" (generalize listB!1 listB) (("" (induct listB) (("1" (grind) nil nil) ("2" (skosimp) (("2" (expand member) (("2" (lift-if) (("2" (split) (("1" (expand member) (("1" (lift-if) (("1" (replace -1 1) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (case "k!1 = car(cons2_var!1)") (("1" (expand member +) (("1" (lift-if) (("1" (replace 1 2) (("1" (replace -1 2) (("1" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (replace 1 -1) (("2" (expand member +) (("2" (lift-if) (("2" (replace 2 3) (("2" (replace 1 3) (("2" (replace -1 3) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" trace2fmla nil) (n formal-const-decl "nat" trace2fmla nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (i formal-const-decl "upto(n)" trace2fmla nil) (tr_literal? const-decl "bool" trace_resolution nil) (= const-decl "[T, T -> boolean]" equalities nil) (numfield nonempty-type-eq-decl nil number_fields nil) (member def-decl "bool" list_props nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (list_induction formula-decl nil list_adt nil)) 273356 330 t shostak))("trace_resolution" trace_resolution tr_clause_true?_TCC4 0 (tr_clause_true?_TCC4-1 nil 3482783478 3483205511 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (sorted? def-decl "bool" sortedlist nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 101 70 nil nil))("trace_resolution" trace_resolution delete_pivot_TCC3 0 (delete_pivot_TCC3-1 nil 3482675376 3483208280 ("" (skolem-typepred) (("" (hide -1) (("" (split 1) (("1" (expand tr_clause? 1) (("1" (propax) nil nil)) nil) ("2" (skolem-typepred) (("2" (typepred "remove(-pivot!1, remove(pivot!1, ck!1))") (("1" (hide -1) (("1" (split 1) (("1" (flatten) (("1" (inst -3 l!1) (("1" (assert) (("1" (flatten) (("1" (typepred "remove(pivot!1, ck!1)") (("1" (hide -1) (("1" (inst -2 l!1) (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (inst -3 l!1) (("2" (flatten) (("2" (hide -3) (("2" (assert) (("2" (hide 3) (("2" (split 3) (("1" (lemma index_inj) (("1" (expand injective?) (("1" (inst -1 l!1 "-pivot!1") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (typepred "remove(pivot!1, ck!1)") (("2" (hide -1) (("2" (inst -2 l!1) (("2" (flatten) (("2" (delete -2) (("2" (assert) (("2" (lemma index_inj) (("2" (expand injective?) (("2" (inst -1 l!1 "pivot!1") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lemma index_inj) (("2" (assert) (("2" (hide -2 -3 -4 -5 -6 -7 -8 2) (("2" (expand injective?) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((index_inj formula-decl nil trace_resolution nil) (injective? const-decl "bool" functions nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index const-decl "posnat" trace_resolution nil) (sorted? def-decl "bool" sortedlist nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (remove def-decl "{sBB |
         FORALL f:
           member(f, sBB) <=> (NOT key(f) = key(e)) AND member(f, sAA)}" sortedlist nil) (- const-decl "[numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (member def-decl "bool" list_props nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 146 90 t nil))("resolution" resolution RR_lemma2_TCC7 0 (RR_lemma2_TCC7-1 nil 3483221655 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("trace_resolution" trace_resolution null_resolution?_TCC4 0 (null_resolution?_TCC4-1 nil 3483281409 3483282621 ("" (skosimp) (("" (typepred "v!1(j!1 + 1, cert!1)") (("1" (case "null?[((tr_literal?))](cert!1(j!1)`cl)") (("1" (replace -1 1) (("1" (inst 1 "j!1") (("1" (grind) nil nil)) nil)) nil) ("2" (replace 1 2) (("2" (replace -1 2) (("2" (typepred j!1) (("2" (case "j!1 /= n-1") (("1" (replace -1 2) (("1" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil) unfinished nil 309703 1380 t nil))("trace_resolution" trace_resolution correct_cert?_TCC1 0 (correct_cert?_TCC1-1 nil 3483282268 nil ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))("trace_resolution" trace_resolution exist_null_TCC1 0 (exist_null_TCC1-1 nil 3483283532 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("trace_resolution" trace_resolution correct_cert?_TCC1 0 (correct_cert?_TCC1-1 nil 3483295716 3483297769 ("" (typepred n) (("" (postpone) nil nil)) nil) unfinished nil 24649 0 t nil))("trace_resolution" trace_resolution exist_null 0 (exist_null-1 nil 3483282806 3483283579 ("" (skosimp) (("" (expand null_resolution?) (("" (postpone) nil nil)) nil)) nil) untried nil 40482 60 t shostak))("trace_resolution" trace_resolution null_resolution?_TCC3 0 (null_resolution?_TCC3-1 nil 3483280417 3483295726 ("" (termination-tcc) nil nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (/= const-decl "boolean" notequal nil)) 18 20 t nil))("trace_resolution" trace_resolution null_resolution?_TCC2 0 (null_resolution?_TCC2-1 nil 3483280417 3483295726 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (n formal-const-decl "nat" trace_resolution nil) (below type-eq-decl nil naturalnumbers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (/= const-decl "boolean" notequal nil)) 64 50 t nil))("trace_resolution" trace_resolution null_resolution?_TCC1 0 (null_resolution?_TCC1-1 nil 3483280417 3483295726 ("" (subtype-tcc) nil nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil)) 7 10 t nil))("trace_checker" trace_checker proof_th_list_TCC14 0 (proof_th_list_TCC14-1 nil 3483306244 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("trace_checker" trace_checker not_or_map_TCC2 0 (not_or_map_TCC2-1 nil 3483306244 3483313847 ("" (subtype-tcc) nil nil) unfinished nil 192 160 nil nil))("trace_checker" trace_checker not_or_map_TCC1 0 (not_or_map_TCC1-1 nil 3483306244 3483363049 ("" (skosimp) (("" (postpone) nil nil)) nil) unfinished nil 1492975 270 t nil))("fmla" fmla sentence_list_append 0 (sentence_list_append-1 nil 3483832392 3483832650 ("" (skolem-typepred) (("" (flatten) (("" (generalize AA!1 AA) (("" (induct AA) (("1" (grind) nil nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (expand append 1) (("2" (expand sentence_list? 1) (("2" (expand freevars 1) (("2" (replace -3 -1) (("2" (expand sentence_list? -2) (("2" (expand freevars -2) (("2" (case "null?(freevars(cons1_var!1))") (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 257845 190 t shostak))("trace2fmla" trace2fmla sentence_list_append 0 (sentence_list_append-1 nil 3483832917 3483884656 ("" (induct AA) (("1" (grind) nil nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (skolem-typepred) (("2" (expand append 1) (("2" (lemma sentence_list_cons) (("2" (inst -1 "cons1_var!1" "append(cons2_var!1, BB!1)") (("2" (replace -1 1 RL) (("2" (lemma sentence_list_cons) (("2" (inst -1 "cons1_var!1" "cons2_var!1") (("2" (replace -1 1 RL) (("2" (inst -3 "BB!1") (("2" (assert) (("2" (replace -3 1 RL) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((sentence_list_cons formula-decl nil trace2fmla nil) (freevars def-decl "list[(var?)]" fmla nil) (list_induction formula-decl nil list_adt nil) (fmla type-decl nil fmla nil) (append def-decl "list[T]" list_props nil) (sentence_list? const-decl "bool" fmla nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil)) 202095 860 t shostak))("trace2fmla" trace2fmla sentence_list_cons 0 (sentence_list_cons-1 nil 3483832875 3483884448 ("" (skolem-typepred) (("" (split) (("1" (grind) nil nil) ("2" (flatten) (("2" (expand sentence_list?) (("2" (expand sentence?) (("2" (expand freevars -1) (("2" (lemma length_append (l1 "freevars(A!1)" l2 "freevars(AA!1)")) (("2" (expand length -1) (("2" (lift-if -1) (("2" (replace -2 -1) (("2" (lift-if) (("2" (split) (("1" (flatten) (("1" (grind) nil nil)) nil) ("2" (flatten) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((var? adt-recognizer-decl "[term -> boolean]" fmla nil) (boolean nonempty-type-decl nil booleans nil) (term type-decl nil fmla nil) (freevars def-decl "list[(var?)]" fmla nil) (fmla type-decl nil fmla nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (list type-decl nil list_adt nil) (length_append formula-decl nil list_props nil) (length def-decl "nat" list_props nil) (sentence? const-decl "bool" fmla nil) (sentence_list? const-decl "bool" fmla nil) (append def-decl "list[T]" list_props nil) (freevars def-decl "list[(var?)]" fmla nil)) 7956 250 t shostak))("trace_checker" trace_checker proof_th_list_TCC36 0 (proof_th_list_TCC36-1 nil 3483887241 3483903441 ("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (lemma sentence_list_append) (("" (inst -1 "not_or_map(lntcA!1)" "translate_clause[m, n, i](res_list!1)") (("" (replace -1 3 RL) (("" (typepred "not_or_map(lntcA!1)") (("" (replace -1 3) (("" (lemma clause_sentence_list) (("" (inst -1 "translate_clause[m, n, i](res_list!1)") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" trace_checker nil) (n formal-const-decl "nat" trace_checker nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (i formal-const-decl "upto(n)" trace_checker nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (sentence_list? const-decl "bool" fmla nil) (sequent type-eq-decl nil sequents nil) (not_or_map const-decl "sequent" trace_checker nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (translate_clause const-decl "(clause?)" trace2fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (clause_sentence_list formula-decl nil resolution nil) (sentence_list_append formula-decl nil fmla nil)) 93037 340 t nil))("trace_checker" trace_checker proof_th_list_TCC35 0 (proof_th_list_TCC35-1 nil 3483887241 3483903326 ("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (replace -2 3) (("" (lemma nclause2fmla_sentence) (("" (inst -1 "translate_clause(res!1)") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nclause2fmla_sentence formula-decl nil resolution nil) (translate_clause const-decl "(clause?)" trace2fmla nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (i formal-const-decl "upto(n)" trace_checker nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (n formal-const-decl "nat" trace_checker nil) (m formal-const-decl "nat" trace_checker nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil)) 36753 260 t nil))("trace_checker" trace_checker proof_th_list_TCC34 0 (proof_th_list_TCC34-1 nil 3483887241 3483903280 ("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (typepred "not_or_reduction(l1!1)") (("" (typepred "not_or_reduction(l2!1)") (("" (lemma sentence_list_append) (("" (inst -1 "not_or_reduction(l1!1)" "not_or_reduction(l2!1)") (("" (replace -1 3 RL) (("" (replace -2 3) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((not_or_reduction const-decl "sequent" resolution nil) (sequent type-eq-decl nil sequents nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (sentence_list? const-decl "bool" fmla nil) (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (sentence_list_append formula-decl nil fmla nil)) 66688 3270 t nil))("trace_checker" trace_checker proof_th_list_TCC33 0 (proof_th_list_TCC33-1 nil 3483887241 3483903177 ("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (lemma sentence_list_append) (("" (inst -1 "not_or_map(lntcA!1)" "translate_clause[m, n, i](res_list!1)") (("" (lemma sentence_list_cons) (("" (inst -1 "cut_lit!1" "append[fmla](not_or_map(lntcA!1), translate_clause[m, n, i](res_list!1))") (("" (replace -1 3 RL) (("" (replace -2 3 RL) (("" (typepred "not_or_map(lntcA!1)") (("" (replace -1 3) (("" (lemma clause_sentence_list) (("" (inst -1 "translate_clause[m, n, i](res_list!1)") (("" (replace -1 3) (("" (replace -6 3) (("" (lemma nclause2fmla_sentence) (("" (inst -1 "translate_clause(res!1)") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((sentence_list_append formula-decl nil fmla nil) (sentence_list_cons formula-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (clause_sentence_list formula-decl nil resolution nil) (nclause2fmla_sentence formula-decl nil resolution nil) (nclause? const-decl "bool" resolution nil) (append def-decl "list[T]" list_props nil) (translate_clause const-decl "(clause?)" trace2fmla nil) (clause? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil) (not_or_map const-decl "sequent" trace_checker nil) (sequent type-eq-decl nil sequents nil) (sentence_list? const-decl "bool" fmla nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (i formal-const-decl "upto(n)" trace_checker nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (n formal-const-decl "nat" trace_checker nil) (m formal-const-decl "nat" trace_checker nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil)) 142314 380 t nil))("trace_checker" trace_checker proof_th_list_TCC32 0 (proof_th_list_TCC32-1 nil 3483887241 3483903023 ("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (lemma sentence_list_append) (("" (inst-cp -1 "not_or_reduction(l1!1)" "not_or_reduction(l2!1)") (("" (inst-cp -1 "append[fmla](not_or_reduction(l1!1), not_or_reduction(l2!1))" "cons[fmla](cut_lit!1, null[fmla])") (("" (replace -2 3 RL) (("" (replace -3 3 RL) (("" (typepred "not_or_reduction(l1!1)") (("" (typepred "not_or_reduction(l2!1)") (("" (replace -1 3) (("" (replace -2 3) (("" (expand sentence_list? 3) (("" (expand freevars 3) (("" (expand freevars 3 2) (("" (replace -7 3) (("" (lemma nclause2fmla_sentence) (("" (inst -1 "translate_clause(res!1)") (("" (expand sentence? -1) (("" (lemma append_null (l "freevars(nclause2fmla(translate_clause(res!1)))")) (("" (replace -1 3) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (nclause? const-decl "bool" resolution nil) (sentence_list? const-decl "bool" fmla nil) (sequent type-eq-decl nil sequents nil) (not_or_reduction const-decl "sequent" resolution nil) (NOT const-decl "[bool -> bool]" booleans nil) (nclause2fmla_sentence formula-decl nil resolution nil) (sentence? const-decl "bool" fmla nil) (append_null formula-decl nil list_props nil) (freevars def-decl "list[(var?)]" fmla nil) (nclause2fmla def-decl "fmla" resolution nil) (term type-decl nil fmla nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (translate_clause const-decl "(clause?)" trace2fmla nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (i formal-const-decl "upto(n)" trace_checker nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (n formal-const-decl "nat" trace_checker nil) (m formal-const-decl "nat" trace_checker nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (freevars def-decl "list[(var?)]" fmla nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (append def-decl "list[T]" list_props nil) (sentence_list_append formula-decl nil fmla nil)) 56294 530 t nil))("trace_checker" trace_checker proof_th_list_TCC31 0 (proof_th_list_TCC31-1 nil 3483887241 3483902723 ("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (replace -10 3) (("" (typepred "car(cdr(lntcA!1))") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (tr_clause_true? def-decl "bool" trace_resolution nil) (delete_pivot const-decl "{cl | FORALL l: member(l, cl) <=> member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}" trace_resolution nil) (resolution const-decl "(tr_clause?)" trace_resolution nil) (translate_lit const-decl "(literal?)" trace2fmla nil) (map adt-def-decl "list[T1]" list_adt_map nil) (translate_clause const-decl "(clause?)" trace2fmla nil) (resolution_list def-decl "(tr_clause?)" trace_resolution nil) (map_trans_clause const-decl "(cons?[(nclause?)])" trace_checker nil) (map_ncl2fmla const-decl "(sentence_list?)" trace_checker nil) (map_fnot const-decl "(sentence_list?)" trace_checker nil) (not_or_map const-decl "sequent" trace_checker nil) (append def-decl "list[T]" list_props nil) (concl_subsetr const-decl "proof_step" resolution nil) (RR_subsetr const-decl "ne_proof_seq" resolution nil) (nclause? const-decl "bool" resolution nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" trace_checker nil) (n formal-const-decl "nat" trace_checker nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (i formal-const-decl "upto(n)" trace_checker nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)) 129762 3170 t nil))("trace_checker" trace_checker proof_th_list_TCC30 0 (proof_th_list_TCC30-1 nil 3483887241 3483902584 ("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (typepred "car(lntcA!1)") (("" (expand nclause?) (("" (replace -12 3) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (i formal-const-decl "upto(n)" trace_checker nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (n formal-const-decl "nat" trace_checker nil) (m formal-const-decl "nat" trace_checker nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (RR_subsetr const-decl "ne_proof_seq" resolution nil) (concl_subsetr const-decl "proof_step" resolution nil) (append def-decl "list[T]" list_props nil) (not_or_map const-decl "sequent" trace_checker nil) (map_fnot const-decl "(sentence_list?)" trace_checker nil) (map_ncl2fmla const-decl "(sentence_list?)" trace_checker nil) (map_trans_clause const-decl "(cons?[(nclause?)])" trace_checker nil) (resolution_list def-decl "(tr_clause?)" trace_resolution nil) (translate_clause const-decl "(clause?)" trace2fmla nil) (map adt-def-decl "list[T1]" list_adt_map nil) (translate_lit const-decl "(literal?)" trace2fmla nil) (resolution const-decl "(tr_clause?)" trace_resolution nil) (delete_pivot const-decl "{cl | FORALL l: member(l, cl) <=> member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}" trace_resolution nil) (exist_pivot? def-decl "bool" trace_resolution nil) (merge def-decl "{cla: (tr_clause?) | FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}" trace_resolution nil) (tr_clause_true? def-decl "bool" trace_resolution nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (nclause? const-decl "bool" resolution nil)) 54285 2870 t nil))("trace_checker" trace_checker proof_th_list_TCC29 0 (proof_th_list_TCC29-1 nil 3483887241 3483888905 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" trace_checker nil) (n formal-const-decl "nat" trace_checker nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (i formal-const-decl "upto(n)" trace_checker nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (translate_lit const-decl "(literal?)" trace2fmla nil) (map adt-def-decl "list[T1]" list_adt_map nil) (resolution_list def-decl "(tr_clause?)" trace_resolution nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (delete_pivot const-decl "{cl | FORALL l: member(l, cl) <=> member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}" trace_resolution nil) (resolution const-decl "(tr_clause?)" trace_resolution nil) (translate_clause const-decl "(clause?)" trace2fmla nil) (length def-decl "nat" list_props nil)) 2137 2020 nil nil))("trace_checker" trace_checker proof_th_list_TCC28 0 (proof_th_list_TCC28-1 nil 3483887241 3483902521 ("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (lemma nclause2fmla_sentence) (("" (inst -1 "translate_clause[m, n, i](res!1)") (("" (typepred "not_or_map(lntcA!1)") (("" (lemma clause_sentence_list) (("" (inst -1 "translate_clause[m, n, i](res_all_list!1)") (("" (lemma sentence_list_cons) (("" (inst -1 "f_not(nclause2fmla(translate_clause[m, n, i](res!1)))" "append[fmla](not_or_map(lntcA!1), translate_clause[m, n, i](res_all_list!1))") (("" (replace -1 3 RL) (("" (expand sentence? 3) (("" (expand freevars 3) (("" (expand sentence? -4) (("" (replace -4 3) (("" (lemma sentence_list_append) (("" (inst -1 "not_or_map(lntcA!1)" "translate_clause[m, n, i](res_all_list!1)") (("" (replace -1 3 RL) (("" (replace -4 3) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((nclause2fmla_sentence formula-decl nil resolution nil) (not_or_map const-decl "sequent" trace_checker nil) (sequent type-eq-decl nil sequents nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (sentence_list? const-decl "bool" fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil) (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla nil) (nclause2fmla def-decl "fmla" resolution nil) (append def-decl "list[T]" list_props nil) (sentence? const-decl "bool" fmla nil) (sentence_list_append formula-decl nil fmla nil) (freevars def-decl "list[(var?)]" fmla nil) (sentence_list_cons formula-decl nil fmla nil) (clause_sentence_list formula-decl nil resolution nil) (translate_clause const-decl "(clause?)" trace2fmla nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (i formal-const-decl "upto(n)" trace_checker nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (n formal-const-decl "nat" trace_checker nil) (m formal-const-decl "nat" trace_checker nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil)) 5907574 380 t nil))("trace_checker" trace_checker proof_th_list_TCC27 0 (proof_th_list_TCC27-1 nil 3483887241 3483896606 ("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (typepred "not_or_map(rec_arg!1)") (("" (lemma clause_sentence_list) (("" (inst -1 "translate_clause[m, n, i](res_tail_list!1)") (("" (lemma sentence_list_append) (("" (inst -1 "not_or_map(rec_arg!1)" "translate_clause[m, n, i](res_tail_list!1)") (("" (replace -1 3 RL) (("" (replace -2 3) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((not_or_map const-decl "sequent" trace_checker nil) (sequent type-eq-decl nil sequents nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (i formal-const-decl "upto(n)" trace_checker nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (n formal-const-decl "nat" trace_checker nil) (m formal-const-decl "nat" trace_checker nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (sentence_list? const-decl "bool" fmla nil) (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (translate_clause const-decl "(clause?)" trace2fmla nil) (clause? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil) (sentence_list_append formula-decl nil fmla nil) (clause_sentence_list formula-decl nil resolution nil)) 141287 1730 t nil))("trace_checker" trace_checker proof_th_list_TCC26 0 (proof_th_list_TCC26-1 nil 3483887241 3483888900 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" trace_checker nil) (n formal-const-decl "nat" trace_checker nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (i formal-const-decl "upto(n)" trace_checker nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (translate_clause const-decl "(clause?)" trace2fmla nil) (ne_tr_clause? const-decl "bool" trace_resolution nil)) 560 500 nil nil))("trace_checker" trace_checker proof_th_list_TCC25 0 (proof_th_list_TCC25-1 nil 3483887241 3483896454 ("" (skosimp) (("" (skosimp) (("" (typepred "res!1") (("" (hide -1) (("" (expand nclause?) (("" (expand translate_clause) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((translate_clause const-decl "(clause?)" trace2fmla nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (map adt-def-decl "list[T1]" list_adt_map nil) (translate_lit const-decl "(literal?)" trace2fmla nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (resolution const-decl "(tr_clause?)" trace_resolution nil) (delete_pivot const-decl "{cl | FORALL l: member(l, cl) <=> member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}" trace_resolution nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (nclause? const-decl "bool" resolution nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" trace_checker nil) (n formal-const-decl "nat" trace_checker nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (i formal-const-decl "upto(n)" trace_checker nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil)) 252082 1210 t nil))("trace_checker" trace_checker proof_th_list_TCC24 0 (proof_th_list_TCC24-1 nil 3483887241 3483896195 ("" (skosimp) (("" (skosimp) (("" (expand not_or_reduction 2) (("" (expand append 2) (("" (expand append 2) (("" (typepred "f_not(nclause2fmla(translate_clause[m, n, i]
                                                      (car[((ne_tr_clause?))](cdr[((ne_tr_clause?))](lntcA!1)))))") (("" (lemma nclause2fmla_sentence) (("" (inst -1 "translate_clause[m, n, i]
                                                      (car[((ne_tr_clause?))](cdr[((ne_tr_clause?))](lntcA!1)))") (("" (lemma nclause2fmla_sentence) (("" (inst -1 "translate_clause[m, n, i](car[((ne_tr_clause?))](lntcA!1))") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((append def-decl "list[T]" list_props nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (translate_clause const-decl "(clause?)" trace2fmla nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (i formal-const-decl "upto(n)" trace_checker nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (n formal-const-decl "nat" trace_checker nil) (m formal-const-decl "nat" trace_checker nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (nclause2fmla def-decl "fmla" resolution nil) (nclause? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla nil) (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (sentence_list? const-decl "bool" fmla nil) (freevars def-decl "list[(var?)]" fmla nil) (freevars def-decl "list[(var?)]" fmla nil) (resolution const-decl "(tr_clause?)" trace_resolution nil) (delete_pivot const-decl "{cl | FORALL l: member(l, cl) <=> member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}" trace_resolution nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (sentence? const-decl "bool" fmla nil) (nclause2fmla_sentence formula-decl nil resolution nil) (not_or_reduction const-decl "sequent" resolution nil)) 1720102 1450 t nil))("trace_checker" trace_checker proof_th_list_TCC23 0 (proof_th_list_TCC23-1 nil 3483887241 3483889514 ("" (skolem-typepred) (("" (flatten) (("" (hide -1) (("" (skolem-typepred) (("" (flatten) (("" (typepred "car[((ne_tr_clause?))](cdr[((ne_tr_clause?))](lntcA!1))") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nclause? const-decl "bool" resolution nil) (translate_clause const-decl "(clause?)" trace2fmla nil) (map adt-def-decl "list[T1]" list_adt_map nil) (translate_lit const-decl "(literal?)" trace2fmla nil) (resolution const-decl "(tr_clause?)" trace_resolution nil) (delete_pivot const-decl "{cl | FORALL l: member(l, cl) <=> member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}" trace_resolution nil) (tr_clause_true? def-decl "bool" trace_resolution nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (i formal-const-decl "upto(n)" trace_checker nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (n formal-const-decl "nat" trace_checker nil) (m formal-const-decl "nat" trace_checker nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 41410 1340 t nil))("trace_checker" trace_checker proof_th_list_TCC22 0 (proof_th_list_TCC22-1 nil 3483887241 3483889466 ("" (skolem-typepred) (("" (hide -1) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (hide -1) (("" (typepred "car[((ne_tr_clause?))](lntcA!1)") (("" (hide -1) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nclause? const-decl "bool" resolution nil) (translate_clause const-decl "(clause?)" trace2fmla nil) (map adt-def-decl "list[T1]" list_adt_map nil) (translate_lit const-decl "(literal?)" trace2fmla nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (resolution const-decl "(tr_clause?)" trace_resolution nil) (delete_pivot const-decl "{cl | FORALL l: member(l, cl) <=> member(l, ck) AND (NOT l = pivot) AND (NOT l = tr_neg(pivot))}" trace_resolution nil) (exist_pivot? def-decl "bool" trace_resolution nil) (merge def-decl "{cla: (tr_clause?) | FORALL k: member(k, cla) IFF (member(k, ck) OR member(k, cl))}" trace_resolution nil) (tr_clause_true? def-decl "bool" trace_resolution nil) (tr_neg const-decl "(tr_literal?)" trace_resolution nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (i formal-const-decl "upto(n)" trace_checker nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (n formal-const-decl "nat" trace_checker nil) (m formal-const-decl "nat" trace_checker nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 114685 1370 t nil))("trace_checker" trace_checker proof_th_list_TCC21 0 (proof_th_list_TCC21-1 nil 3483887241 3483888897 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" trace_checker nil) (n formal-const-decl "nat" trace_checker nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (i formal-const-decl "upto(n)" trace_checker nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)) 154 140 nil nil))("trace_checker" trace_checker proof_th_list_TCC20 0 (proof_th_list_TCC20-1 nil 3483887241 3483889337 ("" (skolem-typepred) (("" (hide -1) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (use clause_sentence_list) nil nil)) nil)) nil)) nil)) nil)) nil) proved ((clause? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil) (fmla type-decl nil fmla nil) (clause_sentence_list formula-decl nil resolution nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (tr_literal? const-decl "bool" trace_resolution nil) (i formal-const-decl "upto(n)" trace_checker nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (n formal-const-decl "nat" trace_checker nil) (m formal-const-decl "nat" trace_checker nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (nzint nonempty-type-eq-decl nil integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 37323 280 t nil))("trace_checker" trace_checker proof_th_list_TCC19 0 (proof_th_list_TCC19-1 nil 3483887241 3483889291 ("" (skosimp) (("" (skosimp) (("" (typepred "lntcA!1") (("" (hide -1) (("" (replace -3 1) (("" (typepred "car(lntcA!1)") (("" (hide -1) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (translate_lit const-decl "(literal?)" trace2fmla nil) (map adt-def-decl "list[T1]" list_adt_map nil) (translate_clause const-decl "(clause?)" trace2fmla nil) (nclause? const-decl "bool" resolution nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (m formal-const-decl "nat" trace_checker nil) (n formal-const-decl "nat" trace_checker nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (i formal-const-decl "upto(n)" trace_checker nil) (tr_literal? const-decl "bool" trace_resolution nil) (tr_clause? const-decl "bool" trace_resolution nil) (ne_tr_clause? const-decl "bool" trace_resolution nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)) 332889 320 t nil))("parse_cert" parse_cert read_rec_TCC2 0 (read_rec_TCC2-1 nil 3485180700 3485180717 ("" (subtype-tcc) nil nil) unfinished nil 5155 2330 nil nil))("parse_cert" parse_cert read_rec_TCC1 0 (read_rec_TCC1-1 nil 3485180700 3485180922 ("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (hide -11) (("" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 119291 170 t nil))("parse_cert" parse_cert read_rec_TCC4 0 (read_rec_TCC4-1 nil 3485186359 3485186657 ("" (subtype-tcc) nil nil) unfinished nil 147418 68340 nil nil))("parse_cert" parse_cert read_rec_TCC3 0 (read_rec_TCC3-1 nil 3485186359 3485186884 ("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (skosimp) (("" (hide -8) (("" (typepred "val[list[list[int]]](clause!1)") (("" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 103410 210 t nil))("parse_cert" parse_cert print_cert_aux_TCC1 0 (print_cert_aux_TCC1-1 nil 3485180700 3485186364 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_int_is_int application-judgement "int" integers nil) (length def-decl "nat" list_props nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (skip const-decl "void" stdlang "PVSio/") (printstr const-decl "void" stdio "PVSio/") (emptystr const-decl "string" stdstr "PVSio/") (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) 734 320 nil nil))("parse_cert" parse_cert valid_chains?_TCC3 0 (valid_chains?_TCC3-1 nil 3485204451 3485209374 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 416 160 nil nil))("parse_cert" parse_cert valid_chains?_TCC2 0 (valid_chains?_TCC2-1 nil 3485204451 3485209373 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 189 100 nil nil))("parse_cert" parse_cert valid_chains?_TCC1 0 (valid_chains?_TCC1-1 nil 3485204451 3485209373 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 157 70 nil nil))("parse_cert" parse_cert valid_clauses?_TCC4 0 (valid_clauses?_TCC4-1 nil 3485204451 3485209373 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 529 220 nil nil))("parse_cert" parse_cert valid_clauses?_TCC3 0 (valid_clauses?_TCC3-1 nil 3485204451 3485209372 ("" (skosimp) (("" (expand injective?) (("" (skosimp) (("" (expand index -2) (("" (lift-if -2) (("" (split -2) (("1" (flatten) (("1" (lift-if -2) (("1" (split -2) (("1" (flatten) (("1" (expand abs -2) (("1" (replace -1 -2) (("1" (replace -3 -2) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand abs -1) (("2" (replace -2 -1) (("2" (typepred x1!1) (("2" (typepred x2!1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lift-if -1) (("2" (split -1) (("1" (flatten) (("1" (expand abs -2) (("1" (replace -1 -2) (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (flatten) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((injective? const-decl "bool" functions nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (m const-decl "nat" parse_cert nil) (n const-decl "nat" parse_cert nil) (tr_literal? const-decl "bool" trace_resolution nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)) 1158 530 t nil))("parse_cert" parse_cert valid_clauses?_TCC2 0 (valid_clauses?_TCC2-1 nil 3485204451 3485209371 ("" (subtype-tcc) nil nil) unfinished nil 1303 560 nil nil))("parse_cert" parse_cert valid_clauses?_TCC1 0 (valid_clauses?_TCC1-1 nil 3485204451 3485209369 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil)) 93 50 nil nil))("parse_cert" parse_cert empty_cert_TCC2 0 (empty_cert_TCC2-1 nil 3485266930 3485267218 ("" (skosimp) (("" (postpone) nil nil)) nil) unfinished nil 57454 250 t nil))("parse_cert" parse_cert verify_TCC1 0 (verify_TCC1-1 nil 3485281326 3485281482 ("" (subtype-tcc) nil nil) unfinished nil 171 80 nil nil))("parse_cert" parse_cert error_cert_TCC4 0 (error_cert_TCC4-1 nil 3485266930 3485281404 ("" (subtype-tcc) nil nil) unfinished nil 263 90 nil nil))("parse_cert" parse_cert error_cert_TCC3 0 (error_cert_TCC3-1 nil 3485266930 3485281404 ("" (subtype-tcc) nil nil) unfinished nil 199 90 nil nil))("parse_cert" parse_cert error_cert_TCC2 0 (error_cert_TCC2-1 nil 3485266930 3485281533 ("" (expand tr_literal?) (("" (postpone) nil nil)) nil) unfinished nil 23563 10 t nil))("parse_cert" parse_cert error_cert_TCC1 0 (error_cert_TCC1-1 nil 3485266930 3485281403 ("" (subtype-tcc) nil nil) unfinished nil 279 100 nil nil))("parse_cert" parse_cert read_nat_until_zero_TCC1 0 (read_nat_until_zero_TCC1-1 nil 3485204451 3485281334 ("" (subtype-tcc) nil nil) proved ((IStream nonempty-type-from-decl nil stdio "PVSio/") (IStream_pred const-decl "[Stream -> boolean]" stdio "PVSio/") (Stream nonempty-type-decl nil stdio "PVSio/") (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (ClosedStream const-decl "ExceptionTag[string]" stdio "PVSio/") (make_exc const-decl "Exception" stdexc "PVSio/") (EndOfFile const-decl "ExceptionTag[string]" stdio "PVSio/") (fcheck const-decl "bool" stdio "PVSio/") (prog const-decl "T" stdprog "PVSio/") (fread_int const-decl "int" stdio "PVSio/") (/= const-decl "boolean" notequal nil)) 831 330 nil nil))("parse_cert" parse_cert read_file_name_TCC1 0 (read_file_name_TCC1-1 nil 3483989769 3485281333 ("" (skosimp) (("" (skosimp) (("" (expand eot?) (("" (assert) nil nil)) nil)) nil)) nil) proved ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (eot? const-decl "bool" stdtokenizer "PVSio/")) 517 190 t nil))("parse_cert2" parse_cert2 read_rec_TCC1 0 (read_rec_TCC1-1 nil 3486309174 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("parse_cert2" parse_cert2 parse_line_TCC1 0 (parse_line_TCC1-1 nil 3486309174 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("parse_cert2" parse_cert2 IMP_trace_resolution_TCC1 0 (IMP_trace_resolution_TCC1-1 nil 3486309174 3486394449 ("" (subtype-tcc) nil nil) proved ((fdata const-decl "pico_data" parse_cert2 nil) (n const-decl "nat" parse_cert2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 88 80 nil nil))("parse_cert2" parse_cert2 parse_line_TCC1 0 (parse_line_TCC1-1 nil 3486309174 3486394449 ("" (subtype-tcc) nil nil) unfinished nil 1635 1490 nil nil))("parse_cert2" parse_cert2 read_clause_TCC2 0 (read_clause_TCC2-1 nil 3486393991 3486394447 ("" (subtype-tcc) nil nil) unfinished nil 3370 3090 nil nil))("parse_cert2" parse_cert2 read_clause_TCC1 0 (read_clause_TCC1-1 nil 3486309174 3486394443 ("" (subtype-tcc) nil nil) unfinished nil 463 320 nil nil))("parse_cert2" parse_cert2 read_until_stop_TCC3 0 (read_until_stop_TCC3-1 nil 3486309174 3486395069 ("" (skosimp) (("" (skosimp) (("" (expand consume 1) (("" (lift-if) (("" (split) (("1" (flatten) (("1" (postpone) nil nil)) nil) ("2" (flatten) (("2" (split) (("1" (flatten) (("1" (postpone) nil nil)) nil) ("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 543607 230 t nil))("parse_cert2" parse_cert2 read_until_stop_TCC2 0 (read_until_stop_TCC2-1 nil 3486309174 3486394442 ("" (subtype-tcc) nil nil) proved ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) 117 40 nil nil))("parse_cert2" parse_cert2 read_until_stop_TCC1 0 (read_until_stop_TCC1-1 nil 3486309174 3486394442 ("" (subtype-tcc) nil nil) proved ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_odd_is_odd application-judgement "odd_int" integers nil)) 186 140 nil nil))("parse_cert2" parse_cert2 print_list_TCC2 0 (print_list_TCC2-1 nil 3486309174 3486394447 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (length def-decl "nat" list_props nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (skip const-decl "void" stdlang "PVSio/") (printstr const-decl "void" stdio "PVSio/") (emptystr const-decl "string" stdstr "PVSio/")) 316 250 nil nil))("parse_cert2" parse_cert2 print_list_TCC1 0 (print_list_TCC1-1 nil 3486309174 3486394447 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil)) 58 40 nil nil))("parse_cert2" parse_cert2 empty_cert_TCC1 0 (empty_cert_TCC1-1 nil 3486309174 3486394450 ("" (subtype-tcc) nil nil) unfinished nil 224 170 nil nil))("parse_cert3" parse_cert3 IMP_trace_resolution3_TCC2 0 (IMP_trace_resolution3_TCC2-1 nil 3487018522 3487018535 ("" (subtype-tcc) nil nil) proved ((fdata const-decl "pico_data" parse_cert3 nil) (n const-decl "nat" parse_cert3 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 37 30 nil nil))("parse_cert3" parse_cert3 build_chain_TCC2 0 (build_chain_TCC2-1 nil 3487707640 3487707711 ("" (skosimp) (("" (expand list_of_chains_offset?) (("" (propax) nil nil)) nil)) nil) proved ((list_of_chains_offset? def-decl "boolean" trace_resolution3 nil)) 29611 30 t nil))("parse_cert3" parse_cert3 build_chain_TCC1 0 (build_chain_TCC1-1 nil 3487707640 3487707652 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (fdata const-decl "pico_data" parse_cert3 nil) (n const-decl "nat" parse_cert3 nil)) 86 80 nil nil))("parse_cert3" parse_cert3 b_c_length_TCC2 0 (b_c_length_TCC2-1 nil 3487712694 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("fmla" fmla termvars_TCC5 0 (termvars_TCC5-1 nil 3480276238 3483832375 ("" (termination-tcc) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil)) 139 100 nil nil))