("fmla" fmla termsize_apply 0 (termsize_apply-1 nil 3462853875 3462920892 ("" (skosimp*) (("" (rewrite "termsize") (("" (rewrite "termsize") (("" (rewrite "fmla.reduce_nat") (("" (postpone) nil nil)) nil)) nil)) nil)) nil) unfinished nil 67017141 480 t shostak))("fmla" fmla goodfmla?_TCC4 0 (goodfmla?_TCC4-1 nil 3462850563 3463061727 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (t_var? adt-recognizer-decl "[term -> boolean]" fmla nil) (<< adt-def-decl "(well_founded?[fmla])" fmla nil)) 36 20 nil nil))("fmla" fmla goodfmla?_TCC3 0 (goodfmla?_TCC3-1 nil 3462850563 3463061727 ("" (termination-tcc) nil nil) proved ((<< adt-def-decl "(well_founded?[fmla])" fmla nil)) 37 10 nil nil))("fmla" fmla goodfmla?_TCC2 0 (goodfmla?_TCC2-1 nil 3462850563 3463061727 ("" (termination-tcc) nil nil) proved ((<< adt-def-decl "(well_founded?[fmla])" fmla nil)) 36 20 nil nil))("fmla" fmla goodfmla?_TCC1 0 (goodfmla?_TCC1-1 nil 3462850563 3463061727 ("" (termination-tcc) nil nil) proved ((<< adt-def-decl "(well_founded?[fmla])" fmla nil)) 15 10 nil nil))("sequents" sequents forall_rule_TCC4 0 (forall_rule_TCC4-1 nil 3474915816 3474915817 ("" (subtype-tcc) nil nil) unfinished nil 327 280 nil nil))("sequents" sequents forall_rule_TCC3 0 (forall_rule_TCC3-1 nil 3474915816 3474915817 ("" (subtype-tcc) nil nil) unfinished nil 320 270 nil nil))("sequents" sequents forall_rule_TCC2 0 (forall_rule_TCC2-1 nil 3474915816 3474915871 ("" (grind) nil nil) proved ((fun? adt-def-decl "boolean" funpred_adt nil)) 10766 760 t nil))("sequents" sequents forall_rule_TCC1 0 (forall_rule_TCC1-1 nil 3474915816 3474915816 ("" (subtype-tcc) nil nil) unfinished nil 326 270 nil nil))("rule" rule trans_thm_TCC3 0 (trans_thm_TCC3-1 nil 3474925722 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("rule" rule trans_thm_TCC2 0 (trans_thm_TCC2-1 nil 3474925722 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("rule" rule f_eq_TCC2 0 (f_eq_TCC2-1 nil 3474924292 nil ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))("rule" rule f_eq_TCC1 0 (f_eq_TCC1-1 nil 3474924292 nil ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))("fmla" fmla reduce_step 0 (reduce_step-1 nil 3475788366 3475788452 ("" (grind) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil) unfinished nil 85366 470 t shostak))("fmla" fmla reduce_step_TCC5 0 (reduce_step_TCC5-1 nil 3475788365 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("fmla" fmla reduce_step_TCC4 0 (reduce_step_TCC4-1 nil 3475788365 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("fmla" fmla reduce_step_TCC3 0 (reduce_step_TCC3-1 nil 3475788365 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("fmla" fmla reduce_step_TCC2 0 (reduce_step_TCC2-1 nil 3475788365 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("fmla" fmla reduce_step_TCC1 0 (reduce_step_TCC1-1 nil 3475788365 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("fmla" fmla reduce_reduce_TCC2 0 (reduce_reduce_TCC2-1 nil 3475778550 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("fmla" fmla map_map_TCC2 0 (map_map_TCC2-1 nil 3479851074 3479852816 ("" (subtype-tcc) nil nil) unfinished nil 165 160 nil nil))("fmla" fmla map_map_TCC1 0 (map_map_TCC1-1 nil 3479851074 3479852816 ("" (subtype-tcc) nil nil) unfinished nil 112 70 nil nil))("fmla" fmla term_equal_TCC1 0 (term_equal_TCC1-1 nil 3475778550 3479853279 ("" (termination-tcc) nil nil) unfinished nil 443 400 nil nil))("fmla" fmla parsubstr_TCC4 0 (parsubstr_TCC4-1 nil 3475778550 3480276248 ("" (subtype-tcc) nil nil) unfinished nil 588 470 nil nil))("fmla" fmla parsubstr_TCC3 0 (parsubstr_TCC3-1 nil 3475778550 3480283408 ("" (subtype-tcc) nil nil) unfinished nil 192 150 t nil))("fmla" fmla aux 0 (aux-1 nil 3480283894 3480346196 ("" (skosimp) (("" (ground) (("" (generalize xx!1 l) (("" (induct "l") (("1" (grind) nil nil) ("2" (skosimp) (("2" (expand append +) (("2" (lemma pre_aux (x "cons1_var!1" xx "append(cons2_var!1, yy!1)")) (("2" (replace -1 * LR) (("2" (replace -2 * LR) (("2" (lemma pre_aux (x "cons1_var!1" xx "cons2_var!1")) (("2" (replace -1 * LR) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((term type-decl nil fmla nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (max_index const-decl "nat" fmla nil) (append def-decl "list[T]" list_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (pre_aux formula-decl nil fmla nil) (minlistx def-decl "{c |
         member(c, cons(a, l)) AND
          (FORALL b: member(b, cons(a, l)) IMPLIES key(c) <= key(b))}" minlist nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minlist const-decl "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES key(c) <= key(b))}" minlist nil) (maxlist const-decl "T" minlist nil) (minus_int_is_int application-judgement "int" integers nil) (list_induction formula-decl nil list_adt nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil)) 8211 6490 t shostak))("fmla" fmla pre_aux 0 (pre_aux-2 "22221" 3480359385 3480359385 ("" (induct "xx") (("1" (ground) (("1" (grind) nil nil)) nil) ("2" (skosimp) (("2" (instantiate -1 "cons1_var!1" T) (("2" (replace -2 * LR) (("2" (skosimp) (("2" (expand max_index + 1) (("2" (expand maxlist + 1) (("2" (expand minlist + 1) (("2" (expand minlistx) (("2" (lift-if) (("2" (split) (("1" (grind) nil nil) ("2" (flatten) (("2" (expand max +) (("2" (lift-if) (("2" (split) (("1" (lift-if) (("1" (split) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (split) (("1" (flatten) (("1" (grind) nil nil)) nil) ("2" (flatten) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 13173815 33400 t shostak) (pre_aux-1 nil 3480342356 3480346180 ("" (skosimp) (("" (lift-if) (("" (split) (("1" (flatten) (("1" (expand max_index + 1) (("1" (lift-if) (("1" (replace -1 * LR) (("1" (expand maxlist +) (("1" (expand minlist) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) unfinished nil 114445 150 t shostak))("minlist" minlist recursive_min 0 (recursive_min-2 "" 3480368689 3480372849 ("" (induct "l") (("1" (grind) nil nil) ("2" (skolem!) (("2" (flatten) (("2" (skolem!) (("2" (expand "minlistx" +) (("2" (case "func!1(b!1) < func!1(a!1)") (("1" (case "func!1(cons1_var!1) < func!1(b!1)") (("1" (replace -1) (("1" (replace -2) (("1" (inst -3 "b!1" "cons1_var!1" "func!1") (("1" (lemma minlistx_TCC3) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished ((minlist const-decl "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES key(c) <= key(b))}" minlist nil)) 2807988 8180 t shostak) (recursive_min-1 nil 3480361121 3480362340 ("" (skosimp) (("" (lift-if) (("" (split) (("1" (flatten) (("1" (grind) nil nil)) nil) ("2" (flatten) (("2" (grind) (("2" (grind) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 629289 1030 t shostak))("minlist" minlist equal_min 0 (equal_min-2 "" 3480364889 3480367539 ("" (lemma minlist_TCC1) (("" (skosimp) (("" (inst -1 "cons (a!1, l!1)" "func!1") (("" (flatten) (("" (inst -2 "c!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) unchecked ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minlist const-decl "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES key(c) <= key(b))}" minlist nil) (member def-decl "bool" list_props nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (T formal-type-decl nil minlist nil) (minlist_TCC1 subtype-tcc nil minlist nil)) 1061778 400 t shostak) (equal_min-1 nil 3480364419 3480364583 ("" (grind) (("" (expand minlistx) (("" (lift-if) (("" (split) (("1" (flatten) (("1" (beta) (("1" (lift-if) (("1" (split) (("1" (propax) nil nil) ("2" (flatten) (("2" (grind) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil) unfinished nil 163604 280 t shostak))("fmla" fmla max_index_cons 0 (max_index_cons-1 nil 3480360301 3480360322 ("" (postpone) nil nil) unfinished nil 20751 10 t shostak))