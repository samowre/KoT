("fmla" fmla termsize_apply 0 (termsize_apply-1 nil 3462853875 3462920892 ("" (skosimp*) (("" (rewrite "termsize") (("" (rewrite "termsize") (("" (rewrite "fmla.reduce_nat") (("" (postpone) nil nil)) nil)) nil)) nil)) nil) unfinished nil 67017141 480 t shostak))("fmla" fmla goodfmla?_TCC4 0 (goodfmla?_TCC4-1 nil 3462850563 3463061727 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (t_var? adt-recognizer-decl "[term -> boolean]" fmla nil) (<< adt-def-decl "(well_founded?[fmla])" fmla nil)) 36 20 nil nil))("fmla" fmla goodfmla?_TCC3 0 (goodfmla?_TCC3-1 nil 3462850563 3463061727 ("" (termination-tcc) nil nil) proved ((<< adt-def-decl "(well_founded?[fmla])" fmla nil)) 37 10 nil nil))("fmla" fmla goodfmla?_TCC2 0 (goodfmla?_TCC2-1 nil 3462850563 3463061727 ("" (termination-tcc) nil nil) proved ((<< adt-def-decl "(well_founded?[fmla])" fmla nil)) 36 20 nil nil))("fmla" fmla goodfmla?_TCC1 0 (goodfmla?_TCC1-1 nil 3462850563 3463061727 ("" (termination-tcc) nil nil) proved ((<< adt-def-decl "(well_founded?[fmla])" fmla nil)) 15 10 nil nil))("sequents" sequents forall_rule_TCC4 0 (forall_rule_TCC4-1 nil 3474915816 3474915817 ("" (subtype-tcc) nil nil) unfinished nil 327 280 nil nil))("sequents" sequents forall_rule_TCC3 0 (forall_rule_TCC3-1 nil 3474915816 3474915817 ("" (subtype-tcc) nil nil) unfinished nil 320 270 nil nil))("sequents" sequents forall_rule_TCC2 0 (forall_rule_TCC2-1 nil 3474915816 3474915871 ("" (grind) nil nil) proved ((fun? adt-def-decl "boolean" funpred_adt nil)) 10766 760 t nil))("sequents" sequents forall_rule_TCC1 0 (forall_rule_TCC1-1 nil 3474915816 3474915816 ("" (subtype-tcc) nil nil) unfinished nil 326 270 nil nil))("rule" rule trans_thm_TCC3 0 (trans_thm_TCC3-1 nil 3474925722 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("rule" rule trans_thm_TCC2 0 (trans_thm_TCC2-1 nil 3474925722 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("rule" rule f_eq_TCC2 0 (f_eq_TCC2-1 nil 3474924292 nil ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))("rule" rule f_eq_TCC1 0 (f_eq_TCC1-1 nil 3474924292 nil ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))("fmla" fmla reduce_step 0 (reduce_step-1 nil 3475788366 3475788452 ("" (grind) (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil) unfinished nil 85366 470 t shostak))("fmla" fmla reduce_step_TCC5 0 (reduce_step_TCC5-1 nil 3475788365 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("fmla" fmla reduce_step_TCC4 0 (reduce_step_TCC4-1 nil 3475788365 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("fmla" fmla reduce_step_TCC3 0 (reduce_step_TCC3-1 nil 3475788365 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("fmla" fmla reduce_step_TCC2 0 (reduce_step_TCC2-1 nil 3475788365 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("fmla" fmla reduce_step_TCC1 0 (reduce_step_TCC1-1 nil 3475788365 nil ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))("fmla" fmla reduce_reduce_TCC2 0 (reduce_reduce_TCC2-1 nil 3475778550 nil ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))("fmla" fmla map_map_TCC2 0 (map_map_TCC2-1 nil 3479851074 3479852816 ("" (subtype-tcc) nil nil) unfinished nil 165 160 nil nil))("fmla" fmla map_map_TCC1 0 (map_map_TCC1-1 nil 3479851074 3479852816 ("" (subtype-tcc) nil nil) unfinished nil 112 70 nil nil))("fmla" fmla term_equal_TCC1 0 (term_equal_TCC1-1 nil 3475778550 3479853279 ("" (termination-tcc) nil nil) unfinished nil 443 400 nil nil))("fmla" fmla parsubstr_TCC4 0 (parsubstr_TCC4-1 nil 3475778550 3480276248 ("" (subtype-tcc) nil nil) unfinished nil 588 470 nil nil))("fmla" fmla parsubstr_TCC3 0 (parsubstr_TCC3-1 nil 3475778550 3480283408 ("" (subtype-tcc) nil nil) unfinished nil 192 150 t nil))("fmla" fmla aux 0 (aux-1 nil 3480283894 3480346196 ("" (skosimp) (("" (ground) (("" (generalize xx!1 l) (("" (induct "l") (("1" (grind) nil nil) ("2" (skosimp) (("2" (expand append +) (("2" (lemma pre_aux (x "cons1_var!1" xx "append(cons2_var!1, yy!1)")) (("2" (replace -1 * LR) (("2" (replace -2 * LR) (("2" (lemma pre_aux (x "cons1_var!1" xx "cons2_var!1")) (("2" (replace -1 * LR) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((term type-decl nil fmla nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (max_index const-decl "nat" fmla nil) (append def-decl "list[T]" list_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (pre_aux formula-decl nil fmla nil) (minlistx def-decl "{c |
         member(c, cons(a, l)) AND
          (FORALL b: member(b, cons(a, l)) IMPLIES key(c) <= key(b))}" minlist nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minlist const-decl "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES key(c) <= key(b))}" minlist nil) (maxlist const-decl "T" minlist nil) (minus_int_is_int application-judgement "int" integers nil) (list_induction formula-decl nil list_adt nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil)) 8211 6490 t shostak))("fmla" fmla pre_aux 0 (pre_aux-2 "22221" 3480359385 3480359385 ("" (induct "xx") (("1" (ground) (("1" (grind) nil nil)) nil) ("2" (skosimp) (("2" (instantiate -1 "cons1_var!1" T) (("2" (replace -2 * LR) (("2" (skosimp) (("2" (expand max_index + 1) (("2" (expand maxlist + 1) (("2" (expand minlist + 1) (("2" (expand minlistx) (("2" (lift-if) (("2" (split) (("1" (grind) nil nil) ("2" (flatten) (("2" (expand max +) (("2" (lift-if) (("2" (split) (("1" (lift-if) (("1" (split) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ("2" (flatten) (("2" (lift-if) (("2" (split) (("1" (flatten) (("1" (grind) nil nil)) nil) ("2" (flatten) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 13173815 33400 t shostak) (pre_aux-1 nil 3480342356 3480346180 ("" (skosimp) (("" (lift-if) (("" (split) (("1" (flatten) (("1" (expand max_index + 1) (("1" (lift-if) (("1" (replace -1 * LR) (("1" (expand maxlist +) (("1" (expand minlist) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil) unfinished nil 114445 150 t shostak))("minlist" minlist recursive_min 0 (recursive_min-2 "" 3480368689 3480372849 ("" (induct "l") (("1" (grind) nil nil) ("2" (skolem!) (("2" (flatten) (("2" (skolem!) (("2" (expand "minlistx" +) (("2" (case "func!1(b!1) < func!1(a!1)") (("1" (case "func!1(cons1_var!1) < func!1(b!1)") (("1" (replace -1) (("1" (replace -2) (("1" (inst -3 "b!1" "cons1_var!1" "func!1") (("1" (lemma minlistx_TCC3) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished ((minlist const-decl "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES key(c) <= key(b))}" minlist nil)) 2807988 8180 t shostak) (recursive_min-1 nil 3480361121 3480362340 ("" (skosimp) (("" (lift-if) (("" (split) (("1" (flatten) (("1" (grind) nil nil)) nil) ("2" (flatten) (("2" (grind) (("2" (grind) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 629289 1030 t shostak))("minlist" minlist equal_min 0 (equal_min-2 "" 3480364889 3480367539 ("" (lemma minlist_TCC1) (("" (skosimp) (("" (inst -1 "cons (a!1, l!1)" "func!1") (("" (flatten) (("" (inst -2 "c!1") (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) unchecked ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minlist const-decl "{c | member(c, l) AND (FORALL b: member(b, l) IMPLIES key(c) <= key(b))}" minlist nil) (member def-decl "bool" list_props nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (boolean nonempty-type-decl nil booleans nil) (list type-decl nil list_adt nil) (T formal-type-decl nil minlist nil) (minlist_TCC1 subtype-tcc nil minlist nil)) 1061778 400 t shostak) (equal_min-1 nil 3480364419 3480364583 ("" (grind) (("" (expand minlistx) (("" (lift-if) (("" (split) (("1" (flatten) (("1" (beta) (("1" (lift-if) (("1" (split) (("1" (propax) nil nil) ("2" (flatten) (("2" (grind) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil) unfinished nil 163604 280 t shostak))("fmla" fmla max_index_cons 0 (max_index_cons-1 nil 3480360301 3480360322 ("" (postpone) nil nil) unfinished nil 20751 10 t shostak))("fmla" fmla termvars_TCC5 0 (termvars_TCC5-1 nil 3480276238 3480441117 ("" (termination-tcc) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil)) 160 100 nil nil))("fmla" fmla freefor_TCC1 0 (freefor_TCC1-1 nil 3475778550 3480441119 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (term type-decl nil fmla nil) (var? adt-recognizer-decl "[term -> boolean]" fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (<< adt-def-decl "(well_founded?[fmla])" fmla nil)) 140 100 nil nil))("sequents" sequents forall_rule?_TCC4 0 (forall_rule?_TCC4-1 nil 3480966110 3480966110 ("" (subtype-tcc) nil nil) unfinished nil 172 160 nil nil))("resolution" resolution apply_resolution_TCC4 0 (apply_resolution_TCC4-1 nil 3481399109 3481399123 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (literal? const-decl "bool" resolution nil) (set type-eq-decl nil sets nil) (atom? const-decl "bool" resolution nil) (/= const-decl "boolean" notequal nil) (union const-decl "set" sets nil) (remove const-decl "set" sets nil) (arg adt-accessor-decl "[(f_not?) -> fmla]" fmla nil) (f_not? adt-recognizer-decl "[fmla -> boolean]" fmla nil) (f_not adt-constructor-decl "[fmla -> (f_not?)]" fmla nil) (f_neg const-decl "fmla" fmla nil) (member const-decl "bool" sets nil) (clause_lit_list? const-decl "bool" resolution nil)) 5800 5030 nil nil))("resolution" resolution apply_resolution_TCC3 0 (apply_resolution_TCC3-1 nil 3481399109 3481399117 ("" (subtype-tcc) nil nil) proved ((member const-decl "bool" sets nil) (emptyset const-decl "set" sets nil) (clause_lit_list? const-decl "bool" resolution nil) (finite_emptyset name-judgement "finite_set" finite_sets nil)) 52 50 nil nil))("resolution" resolution apply_resolution_TCC2 0 (apply_resolution_TCC2-1 nil 3481399109 3481399117 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil) (clause_lit_list? const-decl "bool" resolution nil) (/= const-decl "boolean" notequal nil) (union const-decl "set" sets nil) (remove const-decl "set" sets nil) (f_neg const-decl "fmla" fmla nil) (member const-decl "bool" sets nil) (atom? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil)) 4238 3680 nil nil))("resolution" resolution check_certificate_TCC1 0 (check_certificate_TCC1-1 nil 3481399109 3481914596 ("" (subtype-tcc) (("" (grind) nil nil)) nil) proved ((length def-decl "nat" list_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (resolution_step type-decl nil resolution nil) (list type-decl nil list_adt nil) (resolution_certificate type-eq-decl nil resolution nil) (good_indices_cert? const-decl "bool" resolution nil)) 137 90 t nil))("resolution" resolution remove_p_nonp_TCC1 0 (remove_p_nonp_TCC1-1 nil 3481914562 3481915163 ("" (skolem-typepred) (("" (split) (("1" (lemma "finite_subset" (s "{p: (literal?) | member[((literal?))](p, lAA!1) AND NOT member[((literal?))](f_neg(p), lAA!1)}" A "lAA!1")) (("1" (rewrite -1 1) (("1" (delete 2) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) proved ((atom? const-decl "bool" resolution nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (injective? const-decl "bool" functions nil) (subset? const-decl "bool" sets nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (finite_subset formula-decl nil finite_sets nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (member const-decl "bool" sets nil) (f_neg const-decl "fmla" fmla nil) (clause_lit_list? const-decl "bool" resolution nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (literal? const-decl "bool" resolution nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 442394 2400 t nil))("resolution" resolution clause_lit_list?_TCC1 0 (clause_lit_list?_TCC1-1 nil 3481399109 3481914564 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (set type-eq-decl nil sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (injective? const-decl "bool" functions nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (f_neg const-decl "fmla" fmla nil) (member const-decl "bool" sets nil) (atom? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil)) 1180 790 nil nil))("resolution" resolution apply_resolution_TCC1 0 (apply_resolution_TCC1-1 nil 3481399109 3481914566 ("" (subtype-tcc) nil nil) proved ((emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil) (clause_lit_list? const-decl "bool" resolution nil) (finite_emptyset name-judgement "finite_set" finite_sets nil)) 91 50 nil nil))("resolution" resolution multiple_resolutions_TCC1 0 (multiple_resolutions_TCC1-1 nil 3481914562 3481914567 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (literal? const-decl "bool" resolution nil) (set type-eq-decl nil sets nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (clause_lit_list? const-decl "bool" resolution nil) (clauses_list type-eq-decl nil resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (f_neg const-decl "fmla" fmla nil) (member const-decl "bool" sets nil) (injective? const-decl "bool" functions nil)) 390 300 nil nil))("resolution" resolution create_clauses_TCC8 0 (create_clauses_TCC8-1 nil 3482010882 3482017665 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (literal? const-decl "bool" resolution nil) (clause_lit_list? def-decl "bool" resolution nil) (clauses_list type-eq-decl nil resolution nil) (resolution_step type-decl nil resolution nil) (resolution_certificate type-eq-decl nil resolution nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (good_indices def-decl "bool" resolution nil) (length def-decl "nat" list_props nil) (> const-decl "bool" reals nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (resolve const-decl "(clause_lit_list?)" resolution nil)) 224 170 nil nil))("resolution" resolution good_indices_TCC3 0 (good_indices_TCC3-1 nil 3481399109 3482017661 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (> const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil)) 64 50 nil nil))("resolution" resolution good_indices_TCC2 0 (good_indices_TCC2-1 nil 3481399109 3482017661 ("" (termination-tcc) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_lit_list? def-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 49 20 nil nil))("resolution" resolution good_indices_TCC1 0 (good_indices_TCC1-1 nil 3481399109 3482017661 ("" (subtype-tcc) nil nil) proved nil 9 10 nil nil))("resolution" resolution no_duplicates?_TCC1 0 (no_duplicates?_TCC1-1 nil 3482010882 3482017657 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (atom? const-decl "bool" resolution nil)) 60 40 nil nil))("resolution" resolution clause_lit_list?_TCC1 0 (clause_lit_list?_TCC1-1 nil 3481399109 3482017657 ("" (skolem!) (("" (flatten) (("" (skolem!) (("" (flatten) (("" (rewrite -1) (("" (expand "length" 1 2) (("" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((length def-decl "nat" list_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (index const-decl "nat" resolution nil) (atom? const-decl "bool" resolution nil)) 84 60 t nil))("trace_resolution" trace_resolution resolve_TCC1 0 (resolve_TCC1-1 nil 3482107568 3482108596 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (n formal-const-decl "nat" trace_resolution nil) (below type-eq-decl nil naturalnumbers nil) (trace_entry type-decl nil trace_resolution nil) (good_trace? const-decl "bool" trace_resolution nil) (trace type-eq-decl nil trace_resolution nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 24 0 nil nil))("trace_resolution" trace_resolution r_init_TCC1 0 (r_init_TCC1-1 nil 3482107568 3482108596 ("" (subtype-tcc) nil nil) unfinished nil 30 10 nil nil))("trace_resolution" trace_resolution resolve_step_TCC7 0 (resolve_step_TCC7-1 nil 3482107568 3482108596 ("" (termination-tcc) nil nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) 12 20 nil nil))("trace_resolution" trace_resolution resolve_step_TCC6 0 (resolve_step_TCC6-1 nil 3482107568 3482108596 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (n formal-const-decl "nat" trace_resolution nil) (below type-eq-decl nil naturalnumbers nil) (trace_entry type-decl nil trace_resolution nil) (good_trace? const-decl "bool" trace_resolution nil) (trace type-eq-decl nil trace_resolution nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil)) 66 40 nil nil))("trace_resolution" trace_resolution resolve_step_TCC5 0 (resolve_step_TCC5-1 nil 3482107568 3482108596 ("" (subtype-tcc) nil nil) unfinished nil 84 40 nil nil))("trace_resolution" trace_resolution resolve_step_TCC4 0 (resolve_step_TCC4-1 nil 3482107568 3482108596 ("" (termination-tcc) nil nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) 14 10 nil nil))("trace_resolution" trace_resolution resolve_step_TCC3 0 (resolve_step_TCC3-1 nil 3482107568 3482108596 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (n formal-const-decl "nat" trace_resolution nil) (below type-eq-decl nil naturalnumbers nil) (trace_entry type-decl nil trace_resolution nil) (good_trace? const-decl "bool" trace_resolution nil) (trace type-eq-decl nil trace_resolution nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (literal? const-decl "bool" trace_resolution nil) (clause? const-decl "bool" trace_resolution nil)) 84 60 nil nil))("trace_resolution" trace_resolution resolve_step_TCC2 0 (resolve_step_TCC2-1 nil 3482107568 3482108596 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (n formal-const-decl "nat" trace_resolution nil) (below type-eq-decl nil naturalnumbers nil) (trace_entry type-decl nil trace_resolution nil) (good_trace? const-decl "bool" trace_resolution nil) (trace type-eq-decl nil trace_resolution nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 31 20 nil nil))("trace_resolution" trace_resolution resolve_step_TCC1 0 (resolve_step_TCC1-1 nil 3482107568 3482108596 ("" (subtype-tcc) nil nil) proved ((minus_odd_is_odd application-judgement "odd_int" integers nil)) 40 0 nil nil))("trace_resolution" trace_resolution good_trace_1_TCC1 0 (good_trace_1_TCC1-1 nil 3482107568 3482108593 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (n formal-const-decl "nat" trace_resolution nil) (below type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil)) 80 60 nil nil))("trace_resolution" trace_resolution merge_rec_TCC13 0 (merge_rec_TCC13-1 nil 3482107568 3482108596 ("" (subtype-tcc) nil nil) unfinished nil 255 170 nil nil))("trace_resolution" trace_resolution merge_rec_TCC12 0 (merge_rec_TCC12-1 nil 3482107568 3482108595 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (literal? const-decl "bool" trace_resolution nil) (clause? const-decl "bool" trace_resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil)) 264 200 nil nil))("trace_resolution" trace_resolution merge_rec_TCC11 0 (merge_rec_TCC11-1 nil 3482107568 3482108595 ("" (subtype-tcc) nil nil) unfinished nil 225 160 nil nil))("trace_resolution" trace_resolution merge_rec_TCC10 0 (merge_rec_TCC10-1 nil 3482107568 3482108595 ("" (subtype-tcc) nil nil) unfinished nil 237 180 nil nil))("trace_resolution" trace_resolution merge_rec_TCC9 0 (merge_rec_TCC9-1 nil 3482107568 3482108595 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (literal? const-decl "bool" trace_resolution nil) (clause? const-decl "bool" trace_resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil)) 263 190 nil nil))("trace_resolution" trace_resolution merge_rec_TCC8 0 (merge_rec_TCC8-1 nil 3482107568 3482108594 ("" (subtype-tcc) nil nil) unfinished nil 224 170 nil nil))("trace_resolution" trace_resolution merge_rec_TCC7 0 (merge_rec_TCC7-1 nil 3482107568 3482108594 ("" (subtype-tcc) nil nil) unfinished nil 226 170 nil nil))("trace_resolution" trace_resolution merge_rec_TCC6 0 (merge_rec_TCC6-1 nil 3482107568 3482108594 ("" (subtype-tcc) nil nil) unfinished nil 206 140 nil nil))("trace_resolution" trace_resolution merge_rec_TCC5 0 (merge_rec_TCC5-1 nil 3482107568 3482108594 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (literal? const-decl "bool" trace_resolution nil) (clause? const-decl "bool" trace_resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil)) 220 170 nil nil))("trace_resolution" trace_resolution merge_rec_TCC4 0 (merge_rec_TCC4-1 nil 3482107568 3482108593 ("" (subtype-tcc) nil nil) unfinished nil 179 110 nil nil))("trace_resolution" trace_resolution merge_rec_TCC3 0 (merge_rec_TCC3-1 nil 3482107568 3482108593 ("" (subtype-tcc) nil nil) unfinished nil 201 130 nil nil))("trace_resolution" trace_resolution merge_rec_TCC2 0 (merge_rec_TCC2-1 nil 3482107568 3482108593 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (literal? const-decl "bool" trace_resolution nil) (clause? const-decl "bool" trace_resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" trace_resolution nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil)) 216 160 nil nil))("trace_resolution" trace_resolution merge_rec_TCC1 0 (merge_rec_TCC1-1 nil 3482107568 3482108593 ("" (subtype-tcc) nil nil) unfinished nil 173 120 nil nil))("trace_resolution" trace_resolution merge_list_TCC1 0 (merge_list_TCC1-1 nil 3482107568 3482108596 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (literal? const-decl "bool" trace_resolution nil) (clause? const-decl "bool" trace_resolution nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (merge const-decl "(clause?)" trace_resolution nil) (length def-decl "nat" list_props nil)) 115 80 nil nil))("test_trace_entry" test tr_TCC1 0 (tr_TCC1-1 nil 3482106417 3482106450 ("" (cond-coverage-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 17 20 nil nil))("1" test1 th1 0 (th1-1 nil 3482175324 3482175328 ("" (grind) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) 4288 10 t shostak))("trace_resolution" trace_resolution cons_clause 0 (cons_clause-1 nil 3482107592 3482107990 ("" (induct ck) (("1" (grind) nil nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (hide -2) (("2" (grind) (("1" (grind) (("1" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 397590 110 t shostak))("trace_resolution" trace_resolution sorted_clause_rec 0 (sorted_clause_rec-1 nil 3482108315 3482109053 ("" (induct l) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (skolem-typepred) (("3" (flatten) (("3" (skolem-typepred) (("3" (flatten) (("3" (skolem-typepred) (("3" (flatten) (("3" (expand "clause_rec?" -6) (("3" (flatten) (("3" (case "cons?(cons2_var!1)") (("1" (assert) (("1" (hide -5) (("1" (inst -5 "index(cons1_var!1)") (("1" (replace -7) (("1" (inst -5 e!1) (("1" (expand member -8) (("1" (split -8) (("1" (grind) nil nil) ("2" (replace -1) (("2" (expand clause_rec? -8) (("2" (flatten) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (list_induction formula-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (/= const-decl "boolean" notequal nil) (nzint nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (literal? const-decl "bool" trace_resolution nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (index const-decl "posnat" trace_resolution nil) (posnat nonempty-type-eq-decl nil integers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (member def-decl "bool" list_props nil) (clause_rec? def-decl "bool" trace_resolution nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil)) 440710 550 t shostak))("trace_resolution" trace_resolution clause_rec?_TCC1 0 (clause_rec?_TCC1-1 nil 3482107568 3482108593 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (literal? const-decl "bool" trace_resolution nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil)) 114 50 nil nil))("resolution" resolution no_pairs 0 (no_pairs-1 nil 3482089228 3482094025 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (expand "f_neg") (("" (lift-if) (("" (split) (("1" (flatten) (("1" (lemma index_inj_clause_lit_list) (("1" (inst -1 lAA!1) (("1" (replace -6) (("1" (inst -1 "q!1" "arg(q!1)") (("1" (replace -7) (("1" (assert) (("1" (postpone) nil nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 382241 140 t shostak))("resolution" resolution index_inj_clause_lit_list 0 (index_inj_clause_lit_list-1 nil 3482092844 3482093630 ("" (induct lAA) (("1" (grind) nil nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (skolem-typepred) (("2" (flatten) (("2" (expand member -7) (("2" (split -7) (("1" (expand member -8) (("1" (split -8) (("1" (assert) nil nil) ("2" (lemma sorted_clause_lit_list) (("2" (inst -1 "cons(cons1_var!1, cons2_var!1)") (("2" (replace -9) (("2" (assert) (("2" (inst -1 lB!1) (("2" (replace -2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand member -8) (("2" (split -8) (("1" (lemma sorted_clause_lit_list) (("1" (inst -1 "cons(cons1_var!1, cons2_var!1)") (("1" (assert) (("1" (inst -1 lA!1) (("1" (replace -10) (("1" (replace -3) (("1" (replace -2) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand clause_lit_list? -8) (("2" (expand every_suffix? -8) (("2" (flatten) (("2" (expand clause_lit_list? -7) (("2" (replace -9) (("2" (inst -7 lA!1 lB!1) (("2" (replace -1) (("2" (replace -2) (("2" (delete -1 -2 -3 -4 -5 -6 -8 -9) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((NOT const-decl "[bool -> bool]" booleans nil) (sorted_clause_lit_list formula-decl nil resolution nil) (car_clause_lit_list? const-decl "bool" resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (prop_atom? const-decl "bool" resolution nil) (every_suffix? def-decl "bool" minlist nil) (list_induction formula-decl nil list_adt nil) (fmla type-decl nil fmla nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (literal? const-decl "bool" resolution nil) (index const-decl "nat" resolution nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (/= const-decl "boolean" notequal nil) (member def-decl "bool" list_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (clause_lit_list? const-decl "bool" resolution nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil)) 785604 1000 t shostak))("resolution" resolution clause_lit_list_implie_no_duplicate 0 (clause_lit_list_implie_no_duplicate-1 nil 3482089516 3482092788 ("" (induct lAA) (("1" (grind) nil nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (expand "clause_lit_list?" -4) (("2" (expand "every_suffix?" -4) (("2" (flatten) (("2" (expand "clause_lit_list?" -3) (("2" (replace -5) (("2" (expand no_duplicates? 1) (("2" (expand setlist? 1) (("2" (split) (("1" (expand car_clause_lit_list? -5) (("1" (split -5) (("1" (grind) nil nil) ("2" (lemma "sorted_clause_lit_list") (("2" (inst -1 cons2_var!1) (("2" (assert) (("2" (expand clause_lit_list? -1) (("2" (case "cons?(cons2_var!1)") (("1" (replace -1) (("1" (inst -2 cons1_var!1) (("1" (expand member -4) (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (clause_lit_list? const-decl "bool" resolution nil) (no_duplicates? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (fmla type-decl nil fmla nil) (list_induction formula-decl nil list_adt nil) (every_suffix? def-decl "bool" minlist nil) (setlist? def-decl "bool" minlist nil) (member def-decl "bool" list_props nil) (index const-decl "nat" resolution nil) (prop_atom? const-decl "bool" resolution nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (sorted_clause_lit_list formula-decl nil resolution nil) (car_clause_lit_list? const-decl "bool" resolution nil) (NOT const-decl "[bool -> bool]" booleans nil)) 319 90 t shostak))("resolution" resolution sorted_clause_lit_list 0 (sorted_clause_lit_list-1 nil 3482015112 3482092807 ("" (induct "lAA") (("1" (grind) nil nil) ("2" (skolem-typepred) (("2" (flatten) (("2" (expand clause_lit_list? -4) (("2" (expand every_suffix? -4) (("2" (flatten) (("2" (expand clause_lit_list? -3) (("2" (replace -5) (("2" (case "null?(cons2_var!1)") (("1" (grind) nil nil) ("2" (assert) (("2" (skolem!) (("2" (flatten) (("2" (inst -3 e!1) (("2" (expand member -6) (("2" (split -6) (("1" (grind) nil nil) ("2" (replace -1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) proved ((list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (clause_lit_list? const-decl "bool" resolution nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (member def-decl "bool" list_props nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (index const-decl "nat" resolution nil) (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) (literal? const-decl "bool" resolution nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (fmla type-decl nil fmla nil) (list_induction formula-decl nil list_adt nil) (every_suffix? def-decl "bool" minlist nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (prop_atom? const-decl "bool" resolution nil) (car_clause_lit_list? const-decl "bool" resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil)) 3996 2580 t shostak))("resolution" resolution car_clause_lit_list?_TCC1 0 (car_clause_lit_list?_TCC1-1 nil 3482089105 nil ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))("kot_resolve" kot_resolve or_sequent_TCC2 0 (or_sequent_TCC2-1 nil 3482188311 3482188317 ("" (subtype-tcc) nil nil) unfinished nil 247 120 nil nil))("trace2fmla" trace2fmla translate_lit_TCC8 0 (translate_lit_TCC8-1 nil 3482241771 3482241784 ("" (subtype-tcc) nil nil) proved ((prop_atom? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil)) 46 50 nil nil))("trace2fmla" trace2fmla translate_lit_TCC8 0 (translate_lit_TCC8-1 nil 3482187575 3482187702 ("" (subtype-tcc) nil nil) proved ((prop_atom? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil)) 10 10 nil nil))("resolution" resolution list_to_or_TCC3 0 (list_to_or_TCC3-1 nil 3482010882 3482191818 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (non_empty_clause_list? const-decl "bool" resolution nil) (index const-decl "posnat" resolution nil) (clause_rec? def-decl "bool" resolution nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (length def-decl "nat" list_props nil) (prop_atom? const-decl "bool" resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 254 230 nil nil))("resolution" resolution list_to_or_TCC2 0 (list_to_or_TCC2-1 nil 3482010882 3482191818 ("" (subtype-tcc) nil nil) unfinished nil 92 70 nil nil))("resolution" resolution list_to_or_TCC1 0 (list_to_or_TCC1-1 nil 3482010882 3482191818 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (non_empty_clause_list? const-decl "bool" resolution nil)) 12 20 nil nil))("resolution" resolution unsat?_TCC2 0 (unsat?_TCC2-1 nil 3482010882 3482191818 ("" (subtype-tcc) nil nil) unfinished nil 119 110 nil nil))("resolution" resolution unsat?_TCC1 0 (unsat?_TCC1-1 nil 3482010882 3482191818 ("" (subtype-tcc) nil nil) unfinished nil 42 20 nil nil))("resolution" resolution execute_certificate_TCC1 0 (execute_certificate_TCC1-1 nil 3482010882 3482191818 ("" (subtype-tcc) nil nil) unfinished nil 14 10 nil nil))("resolution" resolution create_clauses_TCC7 0 (create_clauses_TCC7-1 nil 3481914562 3482191818 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (clauses_list type-eq-decl nil resolution nil) (resolution_step type-decl nil resolution nil) (resolution_certificate type-eq-decl nil resolution nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (good_indices? def-decl "bool" resolution nil) (length def-decl "nat" list_props nil) (> const-decl "bool" reals nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) 163 120 nil nil))("resolution" resolution create_clauses_TCC6 0 (create_clauses_TCC6-1 nil 3481399109 3482191817 ("" (termination-tcc) nil nil) unfinished ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (literal? const-decl "bool" resolution nil) (set type-eq-decl nil sets nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (clauses_list type-eq-decl nil resolution nil) (resolution_step type-decl nil resolution nil) (resolution_certificate type-eq-decl nil resolution nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 591 490 nil nil))("resolution" resolution create_clauses_TCC5 0 (create_clauses_TCC5-1 nil 3481399109 3482191817 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (lemma map_length (f "LAMBDA i: nth(context!1, i)" l "l!1")) (("1" (expand map -1) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (member def-decl "bool" list_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (map_length formula-decl nil more_map_props nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil) (> const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (resolution_certificate type-eq-decl nil resolution nil) (resolution_step type-decl nil resolution nil) (clauses_list type-eq-decl nil resolution nil) (literal? const-decl "bool" resolution nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 1133 950 t nil))("resolution" resolution create_clauses_TCC4 0 (create_clauses_TCC4-1 nil 3481399109 3482191816 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (lemma map_length (f "LAMBDA i: nth(context!1, i)" l "l!1")) (("1" (expand length -1) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (map_length formula-decl nil more_map_props nil) (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil) (> const-decl "bool" reals nil) (length def-decl "nat" list_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (resolution_certificate type-eq-decl nil resolution nil) (resolution_step type-decl nil resolution nil) (clauses_list type-eq-decl nil resolution nil) (literal? const-decl "bool" resolution nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 529 430 t nil))("resolution" resolution create_clauses_TCC3 0 (create_clauses_TCC3-1 nil 3481399109 3482191815 ("" (subtype-tcc) (("1" (expand good_indices) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) unfinished ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (> const-decl "bool" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (literal? const-decl "bool" resolution nil) (clauses_list type-eq-decl nil resolution nil) (resolution_step type-decl nil resolution nil) (resolution_certificate type-eq-decl nil resolution nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil)) 172 140 t nil))("resolution" resolution create_clauses_TCC2 0 (create_clauses_TCC2-1 nil 3481399109 3482191815 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (clauses_list type-eq-decl nil resolution nil) (resolution_step type-decl nil resolution nil) (resolution_certificate type-eq-decl nil resolution nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (good_indices? def-decl "bool" resolution nil) (length def-decl "nat" list_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) 81 40 nil nil))("resolution" resolution create_clauses_TCC1 0 (create_clauses_TCC1-1 nil 3481399109 3482191815 ("" (subtype-tcc) (("" (expand length +) (("" (assert) (("" (lift-if) (("" (split) (("1" (flatten) (("1" (assert) (("1" (expand append) (("1" (lift-if) (("1" (split) (("1" (assert) nil nil) ("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (expand good_indices -) (("2" (assert) (("2" (delete 1) (("2" (expand append) (("2" (lift-if) (("2" (split) (("1" (flatten) (("1" (assert) nil nil)) nil) ("2" (flatten) (("2" (assert) (("2" (lemma length_append (l1 "cdr(context!1)" l2 "cons(lst!1, null)")) (("2" (replace -1 2) (("2" (assert) (("2" (expand length + 2) (("2" (assert) (("2" (expand length + 2) (("2" (assert) (("2" (hide -1) (("2" (expand length -) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (length_append formula-decl nil list_props nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (append def-decl "list[T]" list_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (literal? const-decl "bool" resolution nil) (clauses_list type-eq-decl nil resolution nil) (resolution_step type-decl nil resolution nil) (resolution_certificate type-eq-decl nil resolution nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (append_clause const-decl "clauses_list" resolution nil)) 230 190 t nil))("resolution" resolution fold_resolutions_TCC2 0 (fold_resolutions_TCC2-1 nil 3482010882 3482191815 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (clauses_list type-eq-decl nil resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil)) 77 40 nil nil))("resolution" resolution fold_resolutions_TCC1 0 (fold_resolutions_TCC1-1 nil 3482010882 3482191815 ("" (subtype-tcc) nil nil) unfinished nil 130 120 nil nil))("resolution" resolution good_indices?_TCC3 0 (good_indices?_TCC3-1 nil 3482089105 3482191814 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (> const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil)) 62 50 nil nil))("resolution" resolution good_indices?_TCC2 0 (good_indices?_TCC2-1 nil 3482089105 3482191814 ("" (termination-tcc) nil nil) proved ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause? const-decl "bool" resolution nil) (literal? const-decl "bool" resolution nil) (every adt-def-decl "boolean" list_adt nil) (list type-decl nil list_adt nil) (PRED type-eq-decl nil defined_types nil) (fmla type-decl nil fmla nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) 48 40 nil nil))("resolution" resolution good_indices?_TCC1 0 (good_indices?_TCC1-1 nil 3482089105 3482191814 ("" (subtype-tcc) nil nil) proved nil 9 0 nil nil))("resolution" resolution strict_merge_TCC13 0 (strict_merge_TCC13-1 nil 3482010882 3482191814 ("" (subtype-tcc) nil nil) unfinished nil 363 290 nil nil))("resolution" resolution strict_merge_TCC12 0 (strict_merge_TCC12-1 nil 3482010882 3482191814 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" resolution nil) (f_neg const-decl "fmla" fmla nil) (prop_atom? const-decl "bool" resolution nil) (index const-decl "posnat" resolution nil)) 218 190 nil nil))("resolution" resolution strict_merge_TCC11 0 (strict_merge_TCC11-1 nil 3482010882 3482191814 ("" (subtype-tcc) nil nil) unfinished nil 353 290 nil nil))("resolution" resolution strict_merge_TCC10 0 (strict_merge_TCC10-1 nil 3482010882 3482191813 ("" (subtype-tcc) nil nil) unfinished nil 354 320 nil nil))("resolution" resolution strict_merge_TCC9 0 (strict_merge_TCC9-1 nil 3482010882 3482191813 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" resolution nil) (f_neg const-decl "fmla" fmla nil) (prop_atom? const-decl "bool" resolution nil) (index const-decl "posnat" resolution nil)) 218 170 nil nil))("resolution" resolution strict_merge_TCC8 0 (strict_merge_TCC8-1 nil 3482010882 3482191813 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (index const-decl "posnat" resolution nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (f_neg const-decl "fmla" fmla nil) (prop_atom? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil)) 251 230 nil nil))("resolution" resolution strict_merge_TCC7 0 (strict_merge_TCC7-1 nil 3482010882 3482191813 ("" (subtype-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (index const-decl "posnat" resolution nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (f_neg const-decl "fmla" fmla nil) (prop_atom? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil)) 252 190 nil nil))("resolution" resolution strict_merge_TCC6 0 (strict_merge_TCC6-1 nil 3482010882 3482191812 ("" (subtype-tcc) nil nil) unfinished nil 414 330 nil nil))("resolution" resolution strict_merge_TCC5 0 (strict_merge_TCC5-1 nil 3482010882 3482191812 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" resolution nil) (prop_atom? const-decl "bool" resolution nil) (index const-decl "posnat" resolution nil)) 203 180 nil nil))("resolution" resolution strict_merge_TCC4 0 (strict_merge_TCC4-1 nil 3482010882 3482191812 ("" (subtype-tcc) nil nil) unfinished nil 405 330 nil nil))("resolution" resolution strict_merge_TCC3 0 (strict_merge_TCC3-1 nil 3482010882 3482191811 ("" (subtype-tcc) nil nil) unfinished nil 383 310 nil nil))("resolution" resolution strict_merge_TCC2 0 (strict_merge_TCC2-1 nil 3482010882 3482191811 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (fmla type-decl nil fmla nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (literal? const-decl "bool" resolution nil) (clause? const-decl "bool" resolution nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (length def-decl "nat" list_props nil) (clause_rec? def-decl "bool" resolution nil) (prop_atom? const-decl "bool" resolution nil) (index const-decl "posnat" resolution nil)) 193 160 nil nil))("resolution" resolution strict_merge_TCC1 0 (strict_merge_TCC1-1 nil 3482010882 3482191811 ("" (subtype-tcc) nil nil) unfinished nil 363 290 nil nil))("resolution" resolution th1_TCC1 0 (th1_TCC1-1 nil 3482275916 3482275928 ("" (subtype-tcc) nil nil) unfinished nil 47 40 nil nil))("trace_resolution" trace_resolution resolution 0 (resolution-1 nil 3482268066 3482268452 ("" (skolem-typepred) (("" (expand resolution) (("" (postpone) nil nil)) nil)) nil) unfinished nil 385836 150 t shostak))("trace_resolution" trace_resolution resolution_TCC1 0 (resolution_TCC1-1 nil 3482268065 3482274658 ("" (skolem-typepred) (("" (hide -1 -3) (("" (hide -1 -3) (("" (postpone) nil nil)) nil)) nil)) nil) unfinished nil 287081 560 t nil))("trace_resolution" trace_resolution resolution_finite 0 (resolution_finite-1 nil 3482269296 3482270768 ("" (skolem-typepred) (("" (flatten) (("" (postpone) nil nil)) nil)) nil) unfinished nil 1222795 3410 t shostak))("trace_resolution" trace_resolution sorted_tr_clause_rec 0 (sorted_tr_clause_rec-1 nil 3482272052 3482272209 ("" (skolem-typepred) (("" (flatten) (("" (skolem-typepred) (("" (flatten) (("" (expand tr_clause_rec?) (("" (expand tr_clause_rec?) (("" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 156599 70 t shostak))("trace_resolution" trace_resolution tr_clause_rec?_TCC1 0 (tr_clause_rec?_TCC1-1 nil 3482268065 3482274272 ("" (termination-tcc) nil nil) proved ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (/= const-decl "boolean" notequal nil) (int nonempty-type-eq-decl nil integers nil) (nzint nonempty-type-eq-decl nil integers nil) (tr_literal? const-decl "bool" trace_resolution nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil) (index const-decl "posnat" trace_resolution nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) 354 290 nil nil))