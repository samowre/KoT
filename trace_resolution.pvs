trace_resolution[m, n: nat, i : upto(n)]: THEORY
BEGIN

  IMPORTING minlist

  tr_literal?(k: nzint): bool = (abs(k) < m)

  k, l: VAR (tr_literal?)
  ll: VAR list[(tr_literal?)]

  % (-1) -> 1, (1) -> 2, (-2) -> 3, (2) -> 4 ...
  index(k): posnat = IF (k<0) THEN 2*abs(k)-1 ELSE 2*k ENDIF

  %index must be injective?
  IMPORTING sortedlist[(tr_literal?), index]

  % A trace clause is a list of trace literals sorted by index
  tr_clause?(ll): bool = sorted?(ll)

  tr_clause_prop: LEMMA tr_clause?(ll) IFF 
    		       (null?(ll) 
		        OR null?(cdr(ll)) 
			OR (index(car(ll))<index(car(cdr(ll))) AND tr_clause?(cdr(ll))))

  ck, cl: VAR (tr_clause?)

  %not empty trace clause
  ne_tr_clause?(cl): bool = NOT null?(cl)

  cons_tr_clause: LEMMA (tr_clause?(ck) AND cons?(ck)) IMPLIES tr_clause?(cdr(ck))

%  trace_entry: DATATYPE
%    BEGIN
%     tr_clause(clause:(clause?)): tr_clause?
%     tr_merg(merg_list: (cons?[below(n)])) : tr_merg?
%    END trace_entry


  %list of integers smaller than i
  chain(index : below(n)) : TYPE = list[below(index)]
  
  %record with fields clause and chain(i)
  clause_chain(j : below(n)) : TYPE = [# cl: (tr_clause?), chn: chain(j) #]

  %array of records
  certificate: TYPE = ARRAY[index: below(n) -> clause_chain(index)]

  cert : VAR certificate

  % tr_clause is sorted by index => ~p, p are on consecutive positions.
  % deletes the first pair (~p, p) encountered    
  delete_pivot(ck) : RECURSIVE {cl | subset(cl, ck)} = 
    CASES ck OF
      null: ck,
      cons(k, ckk): IF k<0 AND cons?(ckk) AND (car(ckk) + k = 0) 
      	      	    THEN cdr(ckk)
      	      	    ELSE cons(k, delete_pivot(ckk))
		    ENDIF
    ENDCASES
  MEASURE length(ck)
      
  %eliminates duplicates
  merge(ck, cl) : RECURSIVE 
       {cla: (tr_clause?) | FORALL k: 
       	     	 member(k,cla)  
		 IFF (member(k,ck) OR member(k,cl))} = 
       	     CASES ck OF
   	         null : cl,
		 cons(k, ckk) : 
	  	  CASES cl OF
	    	  	null : ck,
	    		cons(l, cll) : IF k = l
				        THEN cons(k, merge(ckk, cll))
					ELSIF index(k) < index(l) 
	          	   	        THEN cons(k, merge(ckk, cl))
			    		ELSE cons(l, merge(ck, cll))
			  	       ENDIF
	         ENDCASES
             ENDCASES
      	     MEASURE length(ck) + length(cl)

  merge_includes1: LEMMA
    sorted_include(ck, merge(ck, cl)) AND sorted_include(cl, merge(ck, cl))
    

  resolution(ck, cl) : (tr_clause?) = delete_pivot(merge(ck, cl))
      
  %applies merge on a non-empty list of clauses
  resolution_list(lck: (cons?[(tr_clause?)])): RECURSIVE (tr_clause?) =
     CASES cdr(lck) OF
       null : car(lck),
       cons(ck, lcl) : resolution_list(cons(resolution(car(lck), ck), lcl))
     ENDCASES
     MEASURE length(lck)

  % creates the list of clauses corresponding to the chain values
  build_chain_list(j: below(n), cert : {c : certificate|cons?(c(j)`chn)}): (cons?[(tr_clause?)]) = 
      map(LAMBDA (a : below(j)) : cert(a)`cl)(cert(j)`chn)
  		    
  % applies resolution_list on all chains starting from j  
  resolve_rec ( j: upto(n), cert ): RECURSIVE certificate = 
    IF j=n 
    THEN cert
    ELSIF null?( cert(j)`chn )
    THEN resolve_rec(j+1, cert)
    ELSE resolve_rec(j+1, cert WITH [(j)`cl := resolution_list(build_chain_list(j, cert))])
    ENDIF 
  MEASURE n-j

  resolve(cert): certificate = resolve_rec(0, cert) 
 
END trace_resolution




