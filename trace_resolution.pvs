trace_resolution[m, n: nat, i : upto(n)]: THEORY
BEGIN

  IMPORTING minlist

  literal?(k: nzint): bool = (abs(k) < m)

  k, l: VAR (literal?)

  index(k): posnat = abs(k)

  clause_rec?(ll: list[(literal?)], (j: nat)): RECURSIVE bool =
    CASES ll OF
     null: TRUE,
     cons(k, jj): index(k)> j AND clause_rec?(jj, index(k))
     ENDCASES
     MEASURE length(ll)

  sorted_clause_rec: LEMMA 
  	FORALL (l: (cons?[(literal?)]), j: nat): clause_rec?(l,j) IMPLIES 
	  (FORALL (e:(literal?)): member(e,cdr(l)) IMPLIES (index(e)>index(car(l))))  

  clause?(ll: list[(literal?)]): bool = clause_rec?(ll, 0)

  ck, cl: VAR (clause?)

  cons_clause: LEMMA (clause?(ck) AND cons?(ck)) IMPLIES (clause?(cdr(ck)))

  trace_entry: DATATYPE
    BEGIN
     tr_clause(clause:(clause?)): tr_clause?
     tr_merg(merg_list: (cons?[below(n)])) : tr_merg?
    END trace_entry


  %list of integers smaller than i
  chain(index : below(n)) : TYPE = list[below(index)]
  
  %record with fields clause and chain(i)
  clause_chain(index : below(n)) : TYPE = [# cl: (clause?), chn: chain(index) #]

  %array of records
  certificate: TYPE = ARRAY[index: below(n) -> clause_chain(index)]

  cert : VAR certificate

  good_trace_1(s: list[below(n)], j: below(n)): RECURSIVE bool = 
     CASES s OF
      null: TRUE,
      cons(u, s1): ((u < j) AND good_trace_1(s1, j))
     ENDCASES  
     MEASURE length(s)

  %check that each chain element is smaller than the index of the chain
  good_certificate : LEMMA
    FORALL (index : below(n)) : good_trace_1(cert(index)`chn, index)


  good_trace?(tr: [below(n) -> trace_entry]): bool = 
     (FORALL (j: below(n)): 
         ((j < i) IMPLIES tr_clause?(tr(j))) 
	 AND (j >= i IMPLIES ((tr_merg?(tr(j))) AND good_trace_1(merg_list(tr(j)),j))))

  % accumulator useless?
  merge_rec(ck, cl, (acc : nat)) : RECURSIVE (clause?) = 
     CASES ck OF
       null : cl,
       cons(k, ckk) : 
	  CASES cl OF
	    null : ck,
	    cons(l, cll) : IF index(k) < index(l) 
	          	   THEN cons(k, merge_rec(ckk, cl, acc))
			   ELSIF index(k) > index(l) 
			   THEN cons(l, merge_rec(ck, cll, acc))
			   ELSIF k + l = 0
			   % a = ~b
			   THEN merge_rec(ckk, cll, acc+1)
			   % a = b
			   ELSE cons(k, merge_rec(ckk, cll, acc))
			  ENDIF
	   ENDCASES
      ENDCASES
      MEASURE length(ck) + length(cl)
      
  merge(ck, cl) : (clause?) = merge_rec(ck, cl, 0)

  %applies merge on a non-empty list of clauses
  merge_list(lck: (cons?[(clause?)])): RECURSIVE (clause?) =
     CASES cdr(lck) OF
       null : car(lck),
       cons(ck, lcl) : merge_list(cons(merge(car(lck), ck), lcl))
     ENDCASES
     MEASURE length(lck)

  emptychain(cert) : bool = null?(cert(0)`chn)
  
  resolve_rec ( j: upto(n), cert ): RECURSIVE certificate = 
    IF j=n OR null?( cert(j)`chn )
    THEN cert
    ELSE resolve_rec(j+1, cert WITH [(j)`cl := merge_list(map(LAMBDA (a : below(j)) : cert(a)`cl)(cert(j)`chn))])
    ENDIF 
  MEASURE n-j

  resolve(cert): certificate = resolve_rec(0, cert) 
 
END trace_resolution
