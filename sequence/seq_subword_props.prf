(seq_subword_props
 (st_incr_is_injective 0
  (st_incr_is_injective-1 nil 3580662719
   ("" (grind :if-match nil)
    (("" (copy -5)
      (("" (inst - x1!1 x2!1)
        (("" (inst - x2!1 x1!1) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (preserves const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil)
    (injective? const-decl "bool" functions nil))
   shostak))
 (st_incr_ge_id 0
  (st_incr_ge_id-1 nil 3580662852
   ("" (skeep)
    (("" (induct-and-simplify i :if-match nil)
      (("" (inst - jb!1 "jb!1+1") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((below_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (preserves const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (incr_bij_is_id 0
  (incr_bij_is_id-1 nil 3580057841
   ("" (skeep)
    (("" (lemma st_incr_ge_id)
      (("" (lemma st_incr_ge_id)
        (("" (inst - n n f)
          (("" (inst - n n "LAMBDA (i:below(n)): n - 1 - f(n - 1 - i)")
            (("1" (prop)
              (("1" (skeep)
                (("1" (inst - "n - 1 -i")
                  (("1" (inst - i) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (grind :if-match nil)
                (("2" (inst -6 "n - 1 - x2!1" "n - 1 - x1!1")
                  (("2" (grind) nil nil)) nil))
                nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((st_incr_ge_id formula-decl nil seq_subword_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (restrict const-decl "R" restrict nil)
    (preserves const-decl "bool" functions nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (n skolem-const-decl "nat" seq_subword_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (f skolem-const-decl "[below(n) -> below(n)]" seq_subword_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (member_subword 0
  (member_subword-1 nil 3580041512
   ("" (grind :rewrites (member_as_nth subword_as_nth)) nil nil)
   ((s1!1 skolem-const-decl "seq[T]" seq_subword_props nil)
    (s2!1 skolem-const-decl "seq[T]" seq_subword_props nil)
    (f!1 skolem-const-decl "[bl[T](s1!1) -> bl[T](s2!1)]"
     seq_subword_props nil)
    (i!1 skolem-const-decl "bl[T](s1!1)" seq_subword_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil seq_subword_props nil)
    (member const-decl "bool" seq_basic_props nil)
    (restrict const-decl "R" restrict nil)
    (preserves const-decl "bool" functions nil)
    (subword? const-decl "bool" seq_subword_props nil))
   shostak))
 (subword_append 0
  (subword_append-1 nil 3580663685
   ("" (skeep)
    (("" (expand subword?)
      (("" (skeep)
        (("" (split 1)
          (("1" (inst + "LAMBDA (i: bl(s1)): f(i)")
            (("1" (grind :rewrites (nth_append length_append)) nil nil)
             ("2" (grind :rewrites (nth_append length_append)) nil
              nil))
            nil)
           ("2" (inst + "LAMBDA (i: bl(s2)): f(i + length(s1))")
            (("1"
              (grind :rewrites (nth_append length_append) :if-match
               nil)
              (("1" (inst -3 "i!1 + length(s1)")
                (("1"
                  (grind :rewrites (nth_append length_append) :if-match
                   nil)
                  nil nil))
                nil)
               ("2" (grind) nil nil))
              nil)
             ("2"
              (grind :rewrites (nth_append length_append) :if-match
               nil)
              nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subword? const-decl "bool" seq_subword_props nil)
    (length_append formula-decl nil seq_basic_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (preserves const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil)
    (nth_append formula-decl nil seq_basic_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-type-decl nil seq_subword_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (s1 skolem-const-decl "seq[T]" seq_subword_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (append const-decl "seq" seq_basic_props nil)
    (s2 skolem-const-decl "seq[T]" seq_subword_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (subword__append_l 0
  (subword__append_l-1 nil 3580664028
   ("" (skeep)
    (("" (expand subword?)
      (("" (inst + "LAMBDA (i: bl(s1)): i")
        (("1" (grind :rewrites (nth_append length_append)) nil nil)
         ("2" (grind :rewrites (nth_append length_append)) nil nil))
        nil))
      nil))
    nil)
   ((subword? const-decl "bool" seq_subword_props nil)
    (length_append formula-decl nil seq_basic_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (restrict const-decl "R" restrict nil)
    (preserves const-decl "bool" functions nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_append formula-decl nil seq_basic_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-type-decl nil seq_subword_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (s1 skolem-const-decl "seq[T]" seq_subword_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (append const-decl "seq" seq_basic_props nil)
    (s2 skolem-const-decl "seq[T]" seq_subword_props nil))
   shostak))
 (subword__append_r 0
  (subword__append_r-1 nil 3580664129
   ("" (skeep)
    (("" (expand subword?)
      (("" (inst + "LAMBDA (i: bl(s2)): i + length(s1)")
        (("1" (grind :rewrites (nth_append length_append)) nil nil)
         ("2" (grind :rewrites (nth_append length_append)) nil nil))
        nil))
      nil))
    nil)
   ((subword? const-decl "bool" seq_subword_props nil)
    (length_append formula-decl nil seq_basic_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (restrict const-decl "R" restrict nil)
    (preserves const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth_append formula-decl nil seq_basic_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-type-decl nil seq_subword_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (s2 skolem-const-decl "seq[T]" seq_subword_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (s1 skolem-const-decl "seq[T]" seq_subword_props nil)
    (append const-decl "seq" seq_basic_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (subword_reverse2 0
  (subword_reverse2-1 nil 3580041664
   ("" (skeep)
    (("" (expand subword?)
      (("" (prop)
        (("1" (skeep)
          (("1"
            (inst +
             "LAMBDA (i: bl(s1)): length(s2) - 1 - f(length(s1) - 1 -i)")
            (("1"
              (grind :rewrites (nth_reverse length_reverse) :if-match
               nil)
              (("1" (inst -3 "length(s1) - 1 -i!1")
                (("1" (grind :rewrites (nth_reverse length_reverse))
                  (("1" (rewrite nth_reverse)
                    (("1" (typepred "f(length(s1)-1-i!1)")
                      (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2"
                (inst - "length(s1) - 1 - x2!1"
                 "length(s1) - 1 - x1!1")
                (("2" (grind :rewrites (nth_reverse length_reverse))
                  nil nil))
                nil))
              nil)
             ("2" (typepred f)
              (("2" (skeep)
                (("2" (inst - "length(s1) - 1 - i")
                  (("1" (grind :rewrites length_reverse) nil nil)
                   ("2" (grind :rewrites length_reverse) nil nil))
                  nil))
                nil))
              nil)
             ("3" (grind :rewrites length_reverse) nil nil))
            nil))
          nil)
         ("2" (skeep)
          (("2"
            (inst +
             "LAMBDA (i: bl(s1)): length(s2) - 1 - f(length(s1) - 1 -i)")
            (("1"
              (grind :rewrites (nth_reverse length_reverse) :if-match
               nil)
              (("1"
                (grind :if-match all :rewrites
                 (nth_reverse length_reverse))
                nil nil)
               ("2"
                (inst - "length(s1) - 1 - x2!1"
                 "length(s1) - 1 - x1!1")
                (("2" (grind :rewrites (nth_reverse length_reverse))
                  nil nil))
                nil))
              nil)
             ("2" (grind :rewrites (nth_reverse length_reverse)) nil
              nil)
             ("3" (grind :rewrites (nth_reverse length_reverse)) nil
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subword? const-decl "bool" seq_subword_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (f skolem-const-decl "[bl[T](s1) -> bl[T](s2)]" seq_subword_props
     nil)
    (i skolem-const-decl "bl[T](s1)" seq_subword_props nil)
    (preserves const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_reverse formula-decl nil seq_basic_props nil)
    (nth_reverse formula-decl nil seq_basic_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (s2 skolem-const-decl "seq[T]" seq_subword_props nil)
    (f skolem-const-decl "[bl[T](reverse(s1)) -> bl[T](reverse(s2))]"
     seq_subword_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-type-decl nil seq_subword_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (s1 skolem-const-decl "seq[T]" seq_subword_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (subword_reverse 0
  (subword_reverse-1 nil 3580042823
   ("" (use subword_reverse2)
    (("" (skeep)
      (("" (inst - "s1" "reverse(s2)")
        (("" (grind :rewrites (reverse_reverse)) nil nil)) nil))
      nil))
    nil)
   ((subword? const-decl "bool" seq_subword_props nil)
    (preserves const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil)
    (reverse_reverse formula-decl nil seq_basic_props nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_subword_props nil)
    (subword_reverse2 formula-decl nil seq_subword_props nil))
   shostak))
 (subword__reverse 0
  (subword__reverse-1 nil 3580043027
   ("" (use subword_reverse2)
    (("" (skeep)
      (("" (inst - "reverse(s1)" "s2")
        (("" (grind :rewrites (reverse_reverse)) nil nil)) nil))
      nil))
    nil)
   ((subword? const-decl "bool" seq_subword_props nil)
    (preserves const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil)
    (reverse_reverse formula-decl nil seq_basic_props nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_subword_props nil)
    (subword_reverse2 formula-decl nil seq_subword_props nil))
   shostak))
 (every_subword 0
  (every_subword-1 nil 3580043283
   (""
    (grind-with-lemmas :rewrites (every_as_forall) :exclude subword?
     :lemmas member_subword)
    nil nil)
   ((member_subword formula-decl nil seq_subword_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_subword_props nil)
    (s2!1 skolem-const-decl "seq[T]" seq_subword_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth const-decl "[s: seq, bl(s) -> T]" seq_defs nil)
    (s1!1 skolem-const-decl "seq[T]" seq_subword_props nil)
    (x!1 skolem-const-decl "{x | member(x, s1!1)}" seq_subword_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" seq_basic_props nil)
    (every_as_forall formula-decl nil seq_basic_props nil))
   shostak))
 (some_subword 0
  (some_subword-1 nil 3580043404
   (""
    (grind-with-lemmas :rewrites (some_as_exists) :exclude subword?
     :lemmas member_subword)
    nil nil)
   ((member_subword formula-decl nil seq_subword_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_subword_props nil)
    (s2!1 skolem-const-decl "seq[T]" seq_subword_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth const-decl "[s: seq, bl(s) -> T]" seq_defs nil)
    (s1!1 skolem-const-decl "seq[T]" seq_subword_props nil)
    (x!1 skolem-const-decl "{x | member(x, s1!1)}" seq_subword_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" seq_basic_props nil)
    (some_as_exists formula-decl nil seq_basic_props nil))
   shostak))
 (length_subword 0
  (length_subword-1 nil 3580009901
   ("" (skeep)
    (("" (expand subword?)
      (("" (use injection_n_to_m)
        (("" (use st_incr_is_injective)
          (("" (skeep)
            (("" (inst - f)
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subword? const-decl "bool" seq_subword_props nil)
    (st_incr_is_injective formula-decl nil seq_subword_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (restrict const-decl "R" restrict nil)
    (preserves const-decl "bool" functions nil)
    (PRED type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (f skolem-const-decl "[bl[T](s1) -> bl[T](s2)]" seq_subword_props
     nil)
    (s2 skolem-const-decl "seq[T]" seq_subword_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (s1 skolem-const-decl "seq[T]" seq_subword_props nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil seq_subword_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (injection_n_to_m formula-decl nil nat_fun_props nil))
   shostak))
 (length_st_subword 0
  (length_st_subword-1 nil 3580061323
   ("" (skeep)
    (("" (expand <<)
      (("" (prop)
        (("" (use length_subword)
          (("" (prop)
            (("" (expand subword?)
              (("" (skeep)
                (("" (use incr_bij_is_id)
                  (("1" (prop)
                    (("1" (rewrite nth_equal)
                      (("1" (prop)
                        (("1" (grind) nil nil)
                         ("2" (skeep)
                          (("2" (inst - i)
                            (("2" (inst - i) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< const-decl "bool" seq_subword_props nil)
    (length_subword formula-decl nil seq_subword_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_subword_props nil)
    (subword? const-decl "bool" seq_subword_props nil)
    (incr_bij_is_id formula-decl nil seq_subword_props nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (s1 skolem-const-decl "seq[T]" seq_subword_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (s2 skolem-const-decl "seq[T]" seq_subword_props nil)
    (f skolem-const-decl "[bl[T](s1) -> bl[T](s2)]" seq_subword_props
     nil)
    (nth_equal formula-decl nil seq_defs nil)
    (restrict const-decl "R" restrict nil)
    (preserves const-decl "bool" functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (subword_empty 0
  (subword_empty-1 nil 3580010052
   ("" (grind :theories seq_defs :rewrites subword_as_nth)
    (("" (inst + "LAMBDA (x:bl(empty)): 0")
      (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (preserves const-decl "bool" functions nil)
    (subword? const-decl "bool" seq_subword_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-type-decl nil seq_subword_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (empty const-decl "{s | length(s) = 0}" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (s!1 skolem-const-decl "seq[T]" seq_subword_props nil))
   shostak))
 (subword__empty 0
  (subword__empty-1 nil 3580067394
   ("" (skeep)
    (("" (use subword_empty) (("" (grind :theories seq_defs) nil nil))
      nil))
    nil)
   ((FALSE const-decl "bool" booleans nil)
    (s skolem-const-decl "seq[T]" seq_subword_props nil)
    (empty_as_empty formula-decl nil seq_defs nil)
    (nth_equal formula-decl nil seq_defs nil)
    (subword? const-decl "bool" seq_subword_props nil)
    (preserves const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (empty const-decl "{s | length(s) = 0}" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil seq_subword_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (subword_empty formula-decl nil seq_subword_props nil))
   shostak))
 (subword_is_reflexive 0
  (subword_is_reflexive-1 nil 3580010309
   ("" (grind :rewrites subword_as_nth)
    (("" (inst + "LAMBDA (i:bl(x!1)): i") (("" (grind) nil nil)) nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (preserves const-decl "bool" functions nil)
    (subword? const-decl "bool" seq_subword_props nil)
    (reflexive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bl type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_subword_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subword_is_transitive 0
  (subword_is_transitive-1 nil 3580010359
   ("" (grind :rewrites subword_as_nth :if-match nil)
    (("" (inst + "LAMBDA (i:bl(x!1)): f!2(f!1(i))")
      (("" (prop)
        (("1" (skeep)
          (("1" (inst -4 x1 x2) (("1" (grind) nil nil)) nil)) nil)
         ("2" (skeep) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (preserves const-decl "bool" functions nil)
    (subword? const-decl "bool" seq_subword_props nil)
    (transitive? const-decl "bool" relations nil)
    (subword_is_reflexive name-judgement "(reflexive?[seq])"
     seq_subword_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_subword_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i_1 skolem-const-decl "bl[T](x!1)" seq_subword_props nil)
    (f!1 skolem-const-decl "[bl[T](x!1) -> bl[T](y!1)]"
     seq_subword_props nil)
    (x!1 skolem-const-decl "seq[T]" seq_subword_props nil)
    (f!2 skolem-const-decl "[bl[T](y!1) -> bl[T](z!1)]"
     seq_subword_props nil)
    (z!1 skolem-const-decl "seq[T]" seq_subword_props nil)
    (y!1 skolem-const-decl "seq[T]" seq_subword_props nil))
   shostak))
 (subword_is_antisymmetric 0
  (subword_is_antisymmetric-2 nil 3580067296
   ("" (expand (antisymmetric? subword?))
    (("" (skeep)
      (("" (rewrite nth_equal)
        (("" (case "length(x) = length(y)")
          (("1" (prop)
            (("1" (skeep)
              (("1" (skeep)
                (("1" (skeep)
                  (("1" (use incr_bij_is_id)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (lemma injection_n_to_m)
                (("2" (lemma injection_n_to_m)
                  (("2" (inst - "length(x)" "length(y)")
                    (("2" (inst - "length(y)" "length(x)")
                      (("2" (hide 2)
                        (("2" (prop)
                          (("1" (grind) nil nil)
                           ("2" (inst + f)
                            (("2" (use st_incr_is_injective) nil nil))
                            nil)
                           ("3" (inst + f!1)
                            (("3" (use st_incr_is_injective) nil nil))
                            nil)
                           ("4" (inst + f)
                            (("4" (use st_incr_is_injective) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "[seq -> nat]" seq_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (preserves const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (f skolem-const-decl "[bl[T](x) -> bl[T](y)]" seq_subword_props
     nil)
    (y skolem-const-decl "seq[T]" seq_subword_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (x skolem-const-decl "seq[T]" seq_subword_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (incr_bij_is_id formula-decl nil seq_subword_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (f skolem-const-decl "[bl[T](x) -> bl[T](y)]" seq_subword_props
     nil)
    (PRED type-eq-decl nil defined_types nil)
    (st_incr_is_injective formula-decl nil seq_subword_props nil)
    (f!1 skolem-const-decl "[bl[T](y) -> bl[T](x)]" seq_subword_props
     nil)
    (injection_n_to_m formula-decl nil nat_fun_props nil)
    (T formal-type-decl nil seq_subword_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (nth_equal formula-decl nil seq_defs nil)
    (antisymmetric? const-decl "bool" relations nil)
    (subword? const-decl "bool" seq_subword_props nil))
   nil)
  (subword_is_antisymmetric-1 nil 3580055273
   ("" (expand antisymmetric?)
    (("" (skolem!)
      (("" (prop)
        (("" (rewrite nth_equal)
          (("" (use length_subword)
            (("" (use length_subword (s1 y!1))
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (rewrite subword_as_nth)
                  (("2" (skeep)
                    (("2" (skeep)
                      (("2" (use incr_bij_is_id)
                        (("1" (prop)
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth_equal formula-decl nil seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_subword_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bl type-eq-decl nil seq_defs nil) (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (incr_bij_is_id formula-decl nil seq_subword_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_subword formula-decl nil seq_subword_props nil)
    (antisymmetric? const-decl "bool" relations nil))
   shostak))
 (subword_is_partial_order 0
  (subword_is_partial_order-1 nil 3580060394
   ("" (use subword_is_reflexive)
    (("" (use subword_is_transitive)
      (("" (use subword_is_antisymmetric) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((partial_order? const-decl "bool" orders nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (antisymmetric? const-decl "bool" relations nil))
   shostak))
 (subword_is_well_founded 0
  (subword_is_well_founded-1 nil 3580060865
   ("" (case "well_founded?(LAMBDA s1,s2: length(s1) < length(s2))")
    (("1" (expand well_founded?)
      (("1" (skeep)
        (("1" (inst - p)
          (("1" (prop)
            (("1" (skeep)
              (("1" (inst + y)
                (("1" (skeep)
                  (("1" (inst - x)
                    (("1" (use length_st_subword)
                      (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (use wf_nat)
        (("2" (expand well_founded?)
          (("2" (skeep)
            (("2"
              (inst -
               "LAMBDA (n:nat): EXISTS s: length(s) = n AND p(s)")
              (("2" (prop)
                (("1" (skeep)
                  (("1" (typepred "y::nat")
                    (("1" (skeep)
                      (("1" (inst + s)
                        (("1" (skeep)
                          (("1" (inst - "length(x)")
                            (("1" (grind) nil nil)
                             ("2" (inst + x) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst + "length(y)") (("2" (inst + y) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (length_st_subword formula-decl nil seq_subword_props nil)
    (T formal-type-decl nil seq_subword_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "[seq -> nat]" seq_defs nil))
   shostak)))

