(seq_basic_props
 (nth_append_TCC1 0
  (nth_append_TCC1-1 nil 3579987245
   ("" (grind :rewrites length_append) nil nil)
   ((length_append formula-decl nil seq_basic_props nil)) nil))
 (nth_append_TCC2 0
  (nth_append_TCC2-1 nil 3579987245 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (nth_reverse_TCC1 0
  (nth_reverse_TCC1-1 nil 3579987245
   ("" (grind :rewrites length_reverse) nil nil)
   ((length_reverse formula-decl nil seq_basic_props nil)) nil))
 (nth_reverse_TCC2 0
  (nth_reverse_TCC2-1 nil 3579987245 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (member_append 0
  (member_append-1 nil 3579965719
   (""
    (grind :theories seq_defs :rewrites (nth_append length_append)
     :if-match nil)
    (("1" (inst 2 "i!1 - length(s1!1)")
      (("1" (rewrite nth_append) (("1" (grind) nil nil)) nil)
       ("2" (grind) nil nil))
      nil)
     ("2" (grind) nil nil)
     ("3" (inst + "i!1 + length(s1!1)") (("3" (grind) nil nil)) nil))
    nil)
   ((i!1 skolem-const-decl "bl[T](s1!1)" seq_basic_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (s1!1 skolem-const-decl "seq[T]" seq_basic_props nil)
    (s2!1 skolem-const-decl "seq[T]" seq_basic_props nil)
    (i!1 skolem-const-decl "bl[T](append(s1!1, s2!1))" seq_basic_props
     nil)
    (nth_append formula-decl nil seq_basic_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil seq_basic_props nil)
    (append const-decl "seq" seq_basic_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (member const-decl "bool" seq_basic_props nil))
   shostak))
 (member_reverse 0
  (member_reverse-1 nil 3579966000
   (""
    (grind :theories seq_defs :rewrites (length_reverse nth_reverse)
     :if-match nil)
    (("1" (grind) nil nil)
     ("2" (inst + "length(s!1) - 1 -i!1 ") (("2" (grind) nil nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_reverse formula-decl nil seq_basic_props nil)
    (nth_reverse formula-decl nil seq_basic_props nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (member const-decl "bool" seq_basic_props nil))
   shostak))
 (every_as_forall 0
  (every_as_forall-1 nil 3579985231
   ("" (lazy-grind :theories seq_defs) nil nil)
   ((nth const-decl "[s: seq, bl(s) -> T]" seq_defs nil)
    (i!1 skolem-const-decl "bl[T](s!1)" seq_basic_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (s!1 skolem-const-decl "seq[T]" seq_basic_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (every const-decl "bool" seq_basic_props nil)
    (member const-decl "bool" seq_basic_props nil))
   shostak))
 (some_as_exists 0
  (some_as_exists-1 nil 3579985241
   ("" (lazy-grind :theories seq_defs) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (nth const-decl "[s: seq, bl(s) -> T]" seq_defs nil)
    (i!1 skolem-const-decl "bl[T](s!1)" seq_basic_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (s!1 skolem-const-decl "seq[T]" seq_basic_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (some const-decl "bool" seq_basic_props nil)
    (member const-decl "bool" seq_basic_props nil))
   shostak))
 (append_assoc 0
  (append_assoc-1 nil 3579966282
   ("" (grind :rewrites (nth_equal length_append nth_append))
    (("" (rewrite* nth_append) (("" (grind) nil nil)) nil)) nil)
   ((nth_append formula-decl nil seq_basic_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (append const-decl "seq" seq_basic_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_equal formula-decl nil seq_defs nil)
    (T formal-type-decl nil seq_basic_props nil)
    (length_append formula-decl nil seq_basic_props nil))
   shostak))
 (append_append 0
  (append_append-1 nil 3579966377 ("" (use append_assoc) nil nil)
   ((append_assoc formula-decl nil seq_basic_props nil)) shostak))
 (append_reverse2 0
  (append_reverse2-1 nil 3579966385
   (""
    (grind :theories seq_defs :rewrites
     (length_append length_reverse nth_append nth_reverse))
    (("" (rewrite* nth_append)
      (("" (grind :rewrites nth_reverse) nil nil)) nil))
    nil)
   ((nth_append formula-decl nil seq_basic_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_reverse formula-decl nil seq_basic_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (append const-decl "seq" seq_basic_props nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (nth_equal formula-decl nil seq_defs nil)
    (T formal-type-decl nil seq_basic_props nil)
    (length_append formula-decl nil seq_basic_props nil)
    (length_reverse formula-decl nil seq_basic_props nil))
   shostak))
 (append_reverse 0
  (append_reverse-1 nil 3579966448
   (""
    (grind :rewrites
     (nth_equal nth_append nth_reverse length_reverse length_append))
    (("" (rewrite* nth_append) (("" (grind) nil nil)) nil)) nil)
   ((nth_append formula-decl nil seq_basic_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_reverse formula-decl nil seq_basic_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (append const-decl "seq" seq_basic_props nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (nth_equal formula-decl nil seq_defs nil)
    (T formal-type-decl nil seq_basic_props nil)
    (length_append formula-decl nil seq_basic_props nil)
    (length_reverse formula-decl nil seq_basic_props nil))
   shostak))
 (append__reverse 0
  (append__reverse-1 nil 3579966767
   (""
    (grind :rewrites
     (nth_equal nth_append nth_reverse length_reverse length_append))
    (("" (rewrite* nth_append) (("" (grind) nil nil)) nil)) nil)
   ((nth_append formula-decl nil seq_basic_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_reverse formula-decl nil seq_basic_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (append const-decl "seq" seq_basic_props nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (nth_equal formula-decl nil seq_defs nil)
    (T formal-type-decl nil seq_basic_props nil)
    (length_append formula-decl nil seq_basic_props nil)
    (length_reverse formula-decl nil seq_basic_props nil))
   shostak))
 (every_append 0
  (every_append-1 nil 3579966807
   ("" (grind :rewrites (every_as_forall member_append)) nil nil)
   ((every_as_forall formula-decl nil seq_basic_props nil)
    (append const-decl "seq" seq_basic_props nil)
    (member const-decl "bool" seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_basic_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (s1!1 skolem-const-decl "seq[T]" seq_basic_props nil)
    (s2!1 skolem-const-decl "seq[T]" seq_basic_props nil)
    (x!1 skolem-const-decl "{x | member(x, append(s1!1, s2!1))}"
     seq_basic_props nil)
    (member_append formula-decl nil seq_basic_props nil))
   shostak))
 (some_append 0
  (some_append-1 nil 3579967159
   ("" (grind :rewrites (some_as_exists member_append)) nil nil)
   ((some_as_exists formula-decl nil seq_basic_props nil)
    (s1!1 skolem-const-decl "seq[T]" seq_basic_props nil)
    (s2!1 skolem-const-decl "seq[T]" seq_basic_props nil)
    (x!1 skolem-const-decl "{x | member(x, append(s1!1, s2!1))}"
     seq_basic_props nil)
    (append const-decl "seq" seq_basic_props nil)
    (member const-decl "bool" seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_basic_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member_append formula-decl nil seq_basic_props nil))
   shostak))
 (reverse_append 0
  (reverse_append-1 nil 3579967172
   ("" (use append_reverse2) (("" (grind :if-match all) nil nil)) nil)
   ((reverse const-decl "seq" seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_basic_props nil)
    (append_reverse2 formula-decl nil seq_basic_props nil))
   shostak))
 (reverse_reverse 0
  (reverse_reverse-1 nil 3579967184
   ("" (grind :rewrites (nth_reverse length_reverse nth_equal)) nil
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth_reverse formula-decl nil seq_basic_props nil)
    (length_reverse formula-decl nil seq_basic_props nil)
    (T formal-type-decl nil seq_basic_props nil)
    (nth_equal formula-decl nil seq_defs nil))
   shostak))
 (every_reverse 0
  (every_reverse-1 nil 3579967203
   (""
    (grind :rewrites (every_as_forall member_reverse length_reverse))
    nil nil)
   ((every_as_forall formula-decl nil seq_basic_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (member const-decl "bool" seq_basic_props nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (member_reverse formula-decl nil seq_basic_props nil))
   shostak))
 (some_reverse 0
  (some_reverse-1 nil 3579967219
   ("" (grind :rewrites (some_as_exists member_reverse length_reverse))
    nil nil)
   ((some_as_exists formula-decl nil seq_basic_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (member const-decl "bool" seq_basic_props nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (member_reverse formula-decl nil seq_basic_props nil))
   shostak))
 (every_neg 0
  (every_neg-1 nil 3579967233
   ("" (grind :rewrites (every_forall some_exists)) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (every const-decl "bool" seq_basic_props nil)
    (some const-decl "bool" seq_basic_props nil))
   shostak))
 (every_conjunct 0
  (every_conjunct-1 nil 3579967275
   ("" (grind :rewrites every_forall) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (every const-decl "bool" seq_basic_props nil))
   shostak))
 (every_disjunct 0
  (every_disjunct-1 nil 3579967286
   ("" (grind :rewrites every_forall) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_basic_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (every const-decl "bool" seq_basic_props nil))
   shostak))
 (every_imp 0
  (every_imp-1 nil 3579967290
   ("" (grind :rewrites every_forall) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth const-decl "[s: seq, bl(s) -> T]" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_basic_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (every const-decl "bool" seq_basic_props nil))
   shostak))
 (some_neg 0
  (some_neg-1 nil 3579967294
   ("" (grind :rewrites (some_exists every_forall)) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (some const-decl "bool" seq_basic_props nil)
    (every const-decl "bool" seq_basic_props nil))
   shostak))
 (some_conjunct 0
  (some_conjunct-1 nil 3579967329
   ("" (grind :rewrites some_exists) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_basic_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (some const-decl "bool" seq_basic_props nil))
   shostak))
 (some_disjunct 0
  (some_disjunct-1 nil 3579967338
   ("" (grind :rewrites some_exists) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (some const-decl "bool" seq_basic_props nil))
   shostak))
 (some_imp 0
  (some_imp-1 nil 3579967341 ("" (grind :rewrites some_exists) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth const-decl "[s: seq, bl(s) -> T]" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_basic_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (some const-decl "bool" seq_basic_props nil))
   shostak))
 (empty_as_member 0
  (empty_as_member-1 nil 3581913131
   ("" (skeep)
    (("" (prop)
      (("1" (expand empty?)
        (("1" (skeep)
          (("1" (rewrite member) (("1" (grind) nil nil)) nil)) nil))
        nil)
       ("2" (rewrite empty_as_empty)
        (("2" (rewrite nth_equal)
          (("2" (split)
            (("1" (grind)
              (("1" (typepred empty)
                (("1" (grind)
                  (("1" (inst - "nth(s, 0)") (("1" (inst + 0) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_basic_props nil)
    (member const-decl "bool" seq_basic_props nil)
    (empty? const-decl "bool" seq_defs nil)
    (nth_equal formula-decl nil seq_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (empty const-decl "{s | length(s) = 0}" seq_defs nil)
    (< const-decl "bool" reals nil) (bl type-eq-decl nil seq_defs nil)
    (nth const-decl "[s: seq, bl(s) -> T]" seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty_as_empty formula-decl nil seq_defs nil))
   shostak))
 (member_empty 0
  (member_empty-1 nil 3579964860 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (empty const-decl "{s | length(s) = 0}" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" seq_basic_props nil))
   shostak))
 (append_empty 0
  (append_empty-1 nil 3579964889
   ("" (grind :theories seq_defs :rewrites (length_append nth_append))
    nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (bl type-eq-decl nil seq_defs nil)
    (append const-decl "seq" seq_basic_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (s1!1 skolem-const-decl "seq[T]" seq_basic_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (s2!1 skolem-const-decl "seq[T]" seq_basic_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_append formula-decl nil seq_basic_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (T formal-type-decl nil seq_basic_props nil)
    (nth_equal formula-decl nil seq_defs nil)
    (length_empty formula-decl nil seq_defs nil)
    (empty_as_empty formula-decl nil seq_defs nil)
    (length_append formula-decl nil seq_basic_props nil))
   shostak))
 (append__empty 0
  (append__empty-1 nil 3579965115
   ("" (grind :theories seq_defs :rewrites (length_append nth_append))
    nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (bl type-eq-decl nil seq_defs nil)
    (append const-decl "seq" seq_basic_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (s2!1 skolem-const-decl "seq[T]" seq_basic_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (s1!1 skolem-const-decl "seq[T]" seq_basic_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_append formula-decl nil seq_basic_props nil)
    (T formal-type-decl nil seq_basic_props nil)
    (nth_equal formula-decl nil seq_defs nil)
    (length_empty formula-decl nil seq_defs nil)
    (empty_as_empty formula-decl nil seq_defs nil)
    (length_append formula-decl nil seq_basic_props nil))
   shostak))
 (append_empty2 0
  (append_empty2-1 nil 3579965205
   ("" (grind :theories seq_defs :rewrites (length_append nth_append))
    nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (bl type-eq-decl nil seq_defs nil)
    (append const-decl "seq" seq_basic_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (s1!1 skolem-const-decl "seq[T]" seq_basic_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (s2!1 skolem-const-decl "seq[T]" seq_basic_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (T formal-type-decl nil seq_basic_props nil)
    (length_empty formula-decl nil seq_defs nil)
    (nth_equal formula-decl nil seq_defs nil)
    (empty_as_empty formula-decl nil seq_defs nil)
    (length_append formula-decl nil seq_basic_props nil))
   shostak))
 (reverse_empty 0
  (reverse_empty-1 nil 3579965636
   (""
    (grind :theories seq_defs :rewrites (length_reverse nth_reverse))
    nil nil)
   ((bl type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (T formal-type-decl nil seq_basic_props nil)
    (length_empty formula-decl nil seq_defs nil)
    (nth_equal formula-decl nil seq_defs nil)
    (empty_as_empty formula-decl nil seq_defs nil)
    (length_reverse formula-decl nil seq_basic_props nil))
   shostak)))

