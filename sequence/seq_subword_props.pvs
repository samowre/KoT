seq_subword_props[T: TYPE]: THEORY
BEGIN
  IMPORTING seq_basic_props[T]

  % This theory defines the predicate subword on sequences {lists,finseq, ...} :


  % The properties are written in a systematically way :
  % if f and g are to functions defined in this theory or the ones before,
  %   f_g is a rewrite of the form : f(g(),...) = ...
  %   f__g is a rewrite of the form : f(_,g(),...) = ...
  %   f_g2 is a rewrite of the form : f(g(), g()) = ...
  %   f_as_g is a rewrite of the form : f() = F(g())
  %   f_is_p is a judgement of the form : f HAS_TYPE (p?)


  s, t, s1, s2: VAR seq
  x, y, z: VAR T
  p, q: VAR PRED[T]
  b: VAR bool



  % I - Definitions
  subword?(s1, s2): bool = EXISTS (f: [bl(s1) -> bl(s2)]): injective?(f) AND
 		  	       preserves(f,<,<) AND
		  	       FORALL (i: bl(s1)): nth(s1, i) = nth(s2, f(i))
  subword?(s1)(s2): MACRO bool = subword?(s1, s2)
  ;<<(s1,s2): bool = s1 /= s2 AND subword?(s1,s2)
  		  	


  % II - Properties

    % Some lemmas about injective and increasing functions
  incr_inj_ge_id: LEMMA FORALL (n, m: nat, f: (injective?[below(n), below(m)])): 
  		  preserves(f,<,<) IMPLIES FORALL (i: below(n)): i <= f(i)
  incr_bij_is_id: LEMMA FORALL (n: nat, f: (injective?[below(n), below(n)])):
  		  preserves(f,<,<) IMPLIES FORALL (i: below(n)): i = f(i)

    % 2 - With sets


    % 1 - With basics
  member_subword: LEMMA member(x, s1) AND subword?(s1, s2) IMPLIES member(x, s2)

  subword_append: LEMMA subword?(s1, append(s1, s2))  % TODO !!! Name
  subword__append: LEMMA subword?(s2, append(s1, s2))

  subword_reverse2: LEMMA subword?(reverse(s1), reverse(s2)) IFF subword?(s1, s2)
  subword_reverse: LEMMA subword?(reverse(s1), s2) IFF subword?(s1, reverse(s2))
  subword__reverse: LEMMA subword?(s1, reverse(s2)) IFF subword?(reverse(s1), s2)

  every_subword: LEMMA every(p)(s2) AND subword?(s1,s2) IMPLIES every(p)(s1)
  some_subword: LEMMA some(p)(s1) AND subword?(s1,s2) IMPLIES some(p)(s2)
 

    % 0 - With length and empty
  length_subword: LEMMA subword?(s1, s2) IMPLIES length(s1) <= length(s2)
  length_st_subword: LEMMA s1 << s2 IMPLIES length(s1) < length(s2)

  subword_empty: LEMMA subword?(empty, s)
  subword__empty: LEMMA subword?(s, empty) = empty?(s)

    % 3 - Interactions and other properties

    % Order properties
  subword_is_reflexive: JUDGEMENT subword? HAS_TYPE (reflexive?)
  subword_is_transitive: JUDGEMENT transitive?(subword?)
  subword_is_antisymmetric: JUDGEMENT antisymmetric?(subword?)
  subword_is_partial_order: JUDGEMENT partial_order?(subword?)
  subword_is_well_founded: JUDGEMENT well_founded?(<<)




  % III - Auto rewrites : if the properties above are needed as rewrites, do "grind :theories seq_subword"
  % The following assertions are only to avoid loops with this prover command
  AUTO_REWRITE- subword__reverse

  
END seq_subword_props


% Theories :
  %  0 - seq_defs
  %  1 - seq_basic
  %  2 - seq_as_sets
  %  3 - seq_subword
  %  4 - seq_suffix_prefix
  %  5 - seq_filter
  %  6 - seq_find
  %  7 - seq_flatten
  %  8 - seq_min_max
  %  9 - seq_orders
  % 10 - seq_sorted
  % 11 - seq_map
  % 12 - seq2
