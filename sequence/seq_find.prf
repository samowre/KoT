(seq_find
 (find_pos_TCC1 0
  (find_pos_TCC1-1 nil 3582030677
   ("" (grind :theories seq_defs) nil nil)
   ((nth_equal formula-decl nil seq_defs nil)
    (length_empty formula-decl nil seq_defs nil)
    (T formal-type-decl nil seq_find nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (find_TCC1 0
  (find_TCC1-1 nil 3582030677 ("" (grind :theories seq_defs) nil nil)
   ((nth_equal formula-decl nil seq_defs nil)
    (length_empty formula-decl nil seq_defs nil)
    (T formal-type-decl nil seq_find nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (find_as_find_pos 0
  (find_as_find_pos-1 nil 3582030727
   ("" (skeep)
    (("" (expand (find find_pos))
      (("" (rewrite* filter_as_filter_pos)
        (("" (expand C1) (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((find_pos const-decl "lift[T]" seq_find nil)
    (find const-decl "lift[T]" seq_find nil)
    (C1 const-decl "PRED[[nat, T]]" seq_filter_props nil)
    (filter_as_filter_pos formula-decl nil seq_filter_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_find nil))
   shostak))
 (find_pos_as_first_TCC1 0
  (find_pos_as_first_TCC1-1 nil 3582030677 ("" (subtype-tcc) nil nil)
   nil nil))
 (find_pos_as_first 0
  (find_pos_as_first-1 nil 3582030835
   ("" (skeep)
    (("" (expand find_pos)
      (("" (prop)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (grind) nil nil)
             ("2" (typepred "filter_pos(s, pi)")
              (("2" (expand filter_pos?)
                (("2" (skeep)
                  (("2" (inst + "f(0)")
                    (("2" (inst -3 0)
                      (("2" (inst -2 "f(0)")
                        (("2" (split 2)
                          (("1" (decompose-equality -4)
                            (("1" (grind) nil nil)) nil)
                           ("2" (decompose-equality -4)
                            (("2" (grind) nil nil)) nil)
                           ("3" (skeep)
                            (("3" (expand preserves)
                              (("3"
                                (reveal -1)
                                (("3"
                                  (inst - j)
                                  (("3"
                                    (bddsimp -1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst - 0 j_1)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lift-if)
          (("2" (prop)
            (("1" (rewrite empty_as_empty :dir rl)
              (("1" (skeep)
                (("1" (rewrite empty_as_member)
                  (("1" (inst - x)
                    (("1" (rewrite member_filter_pos)
                      (("1" (split)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (use nth_filter_pos)
                (("2" (skeep)
                  (("2" (expand nth_filter_pos?)
                    (("2" (inst - i!1)
                      (("1" (grind) nil nil)
                       ("2" (flatten)
                        (("2" (rewrite empty_card :dir rl)
                          (("1" (expand empty?)
                            (("1" (inst - i) (("1" (grind) nil nil))
                              nil))
                            nil)
                           ("2"
                            (invoke
                             (use below_is_finite
                                  (n
                                   "%1"
                                   p
                                   "LAMBDA (j: below(%1)): %2"))
                             (~ "is_finite[%]({% | j < %1 AND %2 })"))
                            nil nil)
                           ("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((find_pos const-decl "lift[T]" seq_find nil)
    (member const-decl "bool" seq_basic_props nil)
    (member_filter_pos formula-decl nil seq_filter_props nil)
    (empty_as_member formula-decl nil seq_basic_props nil)
    (empty_as_empty formula-decl nil seq_defs nil)
    (nth_filter_pos formula-decl nil seq_filter_props nil)
    (nth_filter_pos? const-decl "bool" seq_filter_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below_is_finite formula-decl nil seq_filter_props nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (empty_card formula-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil nil
    nil
    (filter_pos const-decl "(filter_pos?(s, pi))" seq_filter_props nil)
    (filter_pos? const-decl "bool" seq_filter_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_find nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (restrict const-decl "R" restrict nil)
    (nth const-decl "[s: seq, bl(s) -> T]" seq_defs nil)
    (up adt-constructor-decl "[T -> (up?)]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (lift type-decl nil lift_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bl type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (< const-decl "bool" reals nil))
   shostak))
 (find_as_first_TCC1 0
  (find_as_first_TCC1-1 nil 3582030677 ("" (subtype-tcc) nil nil) nil
   nil))
 (find_as_first 0
  (find_as_first-1 nil 3582160339
   ("" (skeep)
    (("" (rewrite find_as_find_pos)
      (("" (rewrite find_pos_as_first)
        (("" (expand C1) (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((find_as_find_pos formula-decl nil seq_find nil)
    (T formal-type-decl nil seq_find nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (C1 const-decl "PRED[[nat, T]]" seq_filter_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (find_pos_as_first formula-decl nil seq_find nil))
   shostak))
 (find_pos_true_TCC1 0
  (find_pos_true_TCC1-1 nil 3582030677 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil seq_find nil)
    (empty? const-decl "bool" seq_defs nil))
   nil))
 (find_pos_true 0
  (find_pos_true-1 nil 3582160386
   (""
    (grind :rewrites (find_pos filter_pos_true empty_as_empty) :exclude
     empty?)
    nil nil)
   ((find_pos const-decl "lift[T]" seq_find nil)
    (T formal-type-decl nil seq_find nil)
    (filter_pos_true formula-decl nil seq_filter_props nil)
    (empty_as_empty formula-decl nil seq_defs nil))
   shostak))
 (find_true 0
  (find_true-1 nil 3582160675
   (""
    (grind :rewrites (find filter_true empty_as_empty) :exclude empty?)
    nil nil)
   ((find const-decl "lift[T]" seq_find nil)
    (T formal-type-decl nil seq_find nil)
    (filter_true formula-decl nil seq_filter_props nil)
    (empty_as_empty formula-decl nil seq_defs nil))
   shostak))
 (find_filter 0
  (find_filter-1 nil 3582160712
   ("" (grind :rewrites (filter_filter)) nil nil)
   ((find const-decl "lift[T]" seq_find nil)
    (filter_filter formula-decl nil seq_filter_props nil)
    (T formal-type-decl nil seq_find nil))
   shostak))
 (member_filter_pos_TCC1 0
  (member_filter_pos_TCC1-1 nil 3582030677 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil seq_find nil)
    (lift type-decl nil lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (good_find_pos type-eq-decl nil seq_find nil)
    (find_pos const-decl "lift[T]" seq_find nil))
   nil))
 (member_filter_pos 0
  (member_filter_pos-1 nil 3582160738
   ("" (skolem-typepred)
    (("" (expand member)
      (("" (inst + 0)
        (("1" (expand find_pos)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (grind) nil nil)
               ("2" (case "argi!1 = (argi!1`1, argi!1`2)")
                (("1" (grind) nil nil) ("2" (grind-with-ext) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand find_pos)
          (("2" (lift-if)
            (("2" (prop)
              (("1" (grind) nil nil)
               ("2" (rewrite empty_as_empty :dir rl)
                (("2" (expand empty?)
                  (("2" (grind)
                    (("2" (case "argi!1 = (argi!1`1, argi!1`2)")
                      (("1" (grind) nil nil)
                       ("2" (grind-with-ext) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" seq_basic_props nil)
    (empty? const-decl "bool" seq_defs nil)
    (empty_as_empty formula-decl nil seq_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bl type-eq-decl nil seq_defs nil) (< const-decl "bool" reals nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (filter_pos? const-decl "bool" seq_filter_props nil)
    (filter_pos const-decl "(filter_pos?(s, pi))" seq_filter_props nil)
    (argi!1 skolem-const-decl "good_find_pos" seq_find nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_find_pos type-eq-decl nil seq_find nil)
    (find_pos const-decl "lift[T]" seq_find nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (lift type-decl nil lift_adt nil)
    (T formal-type-decl nil seq_find nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (member_filter_TCC1 0
  (member_filter_TCC1-1 nil 3582030677 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil seq_find nil)
    (lift type-decl nil lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (PRED type-eq-decl nil defined_types nil)
    (good_find type-eq-decl nil seq_find nil)
    (find const-decl "lift[T]" seq_find nil))
   nil))
 (member_filter 0
  (member_filter-1 nil 3582161207
   ("" (grind :rewrites (find_as_find_pos member_filter_pos))
    (("1" (postpone) nil nil) ("2" (postpone) nil nil)
     ("3" (postpone) nil nil))
    nil)
   nil shostak))
 (find_when_every_TCC1 0
  (find_when_every_TCC1-1 nil 3582030677 ("" (subtype-tcc) nil nil) nil
   nil)))

