(seq_suffix_prefix_props
 (suffix?_TCC1 0
  (suffix?_TCC1-1 nil 3580673737 ("" (grind) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (prefix?_TCC1 0
  (prefix?_TCC1-1 nil 3580673737 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (nth_suffix_TCC1 0
  (nth_suffix_TCC1-1 nil 3580673737
   ("" (grind)
    (("" (inst + "LAMBDA (s:seq, n: ul(s)): empty")
      (("" (grind) nil nil)) nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (ul type-eq-decl nil seq_defs nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (empty const-decl "{s | length(s) = 0}" seq_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth const-decl "[s: seq, bl(s) -> T]" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil) (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (nth_nth_suffix_TCC1 0
  (nth_nth_suffix_TCC1-1 nil 3580673737
   ("" (use length_nth_suffix) (("" (grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (ul type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length_nth_suffix formula-decl nil seq_suffix_prefix_props nil))
   nil))
 (nth_nth_suffix_TCC2 0
  (nth_nth_suffix_TCC2-1 nil 3580673737 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (nth_prefix_TCC1 0
  (nth_prefix_TCC1-1 nil 3580673737
   ("" (inst + "LAMBDA (s:seq, n: ul(s)): empty")
    (("" (grind) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty const-decl "{s | length(s) = 0}" seq_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (ul type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil))
   nil))
 (nth_nth_prefix_TCC1 0
  (nth_nth_prefix_TCC1-1 nil 3580673737
   ("" (grind :rewrites length_nth_prefix) nil nil)
   ((length_nth_prefix formula-decl nil seq_suffix_prefix_props nil))
   nil))
 (nth_nth_prefix_TCC2 0
  (nth_nth_prefix_TCC2-1 nil 3580673737 ("" (grind) nil nil) nil nil))
 (suffix_as_nth_suffix 0
  (suffix_as_nth_suffix-1 nil 3580676518
   (""
    (lazy-grind :rewrites (nth_nth_suffix length_nth_suffix nth_equal))
    nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (nth_suffix const-decl "(LAMBDA (s1): suffix?(s1, s))"
     seq_suffix_prefix_props nil)
    (ul type-eq-decl nil seq_defs nil) (<= const-decl "bool" reals nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (nth_equal formula-decl nil seq_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_nth_suffix formula-decl nil seq_suffix_prefix_props nil))
   shostak))
 (prefix_as_nth_prefix 0
  (prefix_as_nth_prefix-1 nil 3580676581
   (""
    (lazy-grind :rewrites (nth_nth_prefix length_nth_prefix nth_equal))
    nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (nth_prefix const-decl "(LAMBDA (s1): prefix?(s1, s))"
     seq_suffix_prefix_props nil)
    (ul type-eq-decl nil seq_defs nil) (<= const-decl "bool" reals nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (nth_equal formula-decl nil seq_defs nil)
    (length_nth_prefix formula-decl nil seq_suffix_prefix_props nil))
   shostak))
 (suffix_as_prefix 0
  (suffix_as_prefix-1 nil 3581105541
   ("" (grind :rewrites (length_reverse nth_reverse) :if-match nil)
    (("1" (grind :rewrites (length_reverse nth_reverse)) nil nil)
     ("2" (inst - "length(s1!1) - 1 - i!1")
      (("2" (grind :rewrites (length_reverse nth_reverse)) nil nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth_reverse formula-decl nil seq_basic_props nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (length_reverse formula-decl nil seq_basic_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil))
   shostak))
 (prefix_as_suffix 0
  (prefix_as_suffix-1 nil 3581105982
   ("" (grind :rewrites (suffix_as_prefix reverse_reverse)) nil nil)
   ((suffix_as_prefix formula-decl nil seq_suffix_prefix_props nil)
    (reverse_reverse formula-decl nil seq_basic_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil))
   shostak))
 (suffix_is_subword 0
  (suffix_is_subword-1 nil 3580676594
   ("" (skeep)
    (("" (expand subword?)
      (("" (inst + "LAMBDA (i: bl(s1)): i + length(s2) - length(s1)")
        (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((subword? const-decl "bool" seq_subword_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (preserves const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (s1 skolem-const-decl "seq[T]" seq_suffix_prefix_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (s2 skolem-const-decl "seq[T]" seq_suffix_prefix_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (prefix_is_subword 0
  (prefix_is_subword-1 nil 3580676680
   ("" (skeep)
    (("" (expand subword?)
      (("" (inst + "LAMBDA (i: bl(s1)): i")
        (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((subword? const-decl "bool" seq_subword_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (preserves const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil)
    (strict_total_order_restrict application-judgement
     "(strict_total_order?[S])" restrict_order_props nil)
    (trichotomous_restrict application-judgement "(trichotomous?[S])"
     restrict_order_props nil)
    (strict_order_restrict application-judgement "(strict_order?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (irreflexive_restrict application-judgement "(irreflexive?[S])"
     restrict_order_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (s1 skolem-const-decl "seq[T]" seq_suffix_prefix_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (s2 skolem-const-decl "seq[T]" seq_suffix_prefix_props nil))
   shostak))
 (append_nth_suffix_TCC1 0
  (append_nth_suffix_TCC1-1 nil 3580673737
   ("" (grind :rewrites length_append) nil nil)
   ((T formal-type-decl nil seq_suffix_prefix_props nil)
    (length_append formula-decl nil seq_basic_props nil))
   nil))
 (append_nth_suffix 0
  (append_nth_suffix-1 nil 3580676724
   (""
    (grind :rewrites
     (nth_equal nth_append nth_nth_suffix length_append
      length_nth_suffix))
    (("" (rewrite* nth_append) (("" (grind) nil nil)) nil)) nil)
   ((nth_append formula-decl nil seq_basic_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (< const-decl "bool" reals nil)
    (append const-decl "seq" seq_basic_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (nth_suffix const-decl "(LAMBDA (s1): suffix?(s1, s))"
     seq_suffix_prefix_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (ul type-eq-decl nil seq_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_equal formula-decl nil seq_defs nil)
    (length_append formula-decl nil seq_basic_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (length_nth_suffix formula-decl nil seq_suffix_prefix_props nil))
   shostak))
 (nth_suffix_append_TCC1 0
  (nth_suffix_append_TCC1-1 nil 3580673737
   ("" (grind :rewrites length_append) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (append const-decl "seq" seq_basic_props nil)
    (ul type-eq-decl nil seq_defs nil)
    (length_append formula-decl nil seq_basic_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (nth_suffix_append 0
  (nth_suffix_append-2 "alt" 3580677192
   (""
    (grind :rewrites
     (nth_equal nth_append nth_nth_suffix length_append
      length_nth_suffix append_nth_suffix))
    nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nth_equal formula-decl nil seq_defs nil)
    (length_append formula-decl nil seq_basic_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (length_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (append const-decl "seq" seq_basic_props nil)
    (ul type-eq-decl nil seq_defs nil)
    (nth_append formula-decl nil seq_basic_props nil)
    (nth_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (nth_suffix const-decl "(LAMBDA (s1): suffix?(s1, s))"
     seq_suffix_prefix_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (append_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak)
  (nth_suffix_append-1 nil 3580677043
   ("" (skeep)
    (("" (lift-if)
      (("" (prop)
        (("1"
          (grind :rewrites
           (nth_equal nth_append nth_nth_suffix length_append
            length_nth_suffix))
          nil nil)
         ("2" (rewrite append_nth_suffix) nil nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bl type-eq-decl nil seq_defs nil)
    (nth_suffix const-decl "(LAMBDA (s1): suffix?(s1, s))"
     seq_suffix_prefix_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (nth_append formula-decl nil seq_basic_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (append const-decl "seq" seq_basic_props nil)
    (ul type-eq-decl nil seq_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth_equal formula-decl nil seq_defs nil)
    (length_append formula-decl nil seq_basic_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (length_nth_suffix formula-decl nil seq_suffix_prefix_props nil))
   shostak))
 (append_nth__prefix_TCC1 0
  (append_nth__prefix_TCC1-1 nil 3580673737
   ("" (grind :rewrites (length_append)) nil nil)
   ((T formal-type-decl nil seq_suffix_prefix_props nil)
    (length_append formula-decl nil seq_basic_props nil))
   nil))
 (append_nth__prefix 0
  (append_nth__prefix-1 nil 3580677321
   (""
    (grind :rewrites
     (nth_equal nth_append nth_nth_prefix length_append
      length_nth_prefix))
    (("" (rewrite* nth_append) nil nil)) nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth_append formula-decl nil seq_basic_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (< const-decl "bool" reals nil)
    (append const-decl "seq" seq_basic_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (nth_prefix const-decl "(LAMBDA (s1): prefix?(s1, s))"
     seq_suffix_prefix_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (ul type-eq-decl nil seq_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_equal formula-decl nil seq_defs nil)
    (length_append formula-decl nil seq_basic_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (length_nth_prefix formula-decl nil seq_suffix_prefix_props nil))
   shostak))
 (nth_prefix_append_TCC1 0
  (nth_prefix_append_TCC1-1 nil 3580673737
   ("" (grind :rewrites (length_append)) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (append const-decl "seq" seq_basic_props nil)
    (ul type-eq-decl nil seq_defs nil)
    (length_append formula-decl nil seq_basic_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (nth_prefix_append 0
  (nth_prefix_append-1 nil 3580677385
   (""
    (grind :rewrites
     (nth_equal nth_append nth_nth_prefix length_append
      length_nth_prefix appen_nth_prefix))
    (("" (rewrite* nth_append) nil nil)) nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (nth_prefix const-decl "(LAMBDA (s1): prefix?(s1, s))"
     seq_suffix_prefix_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (nth_append formula-decl nil seq_basic_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (append const-decl "seq" seq_basic_props nil)
    (ul type-eq-decl nil seq_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth_equal formula-decl nil seq_defs nil)
    (length_append formula-decl nil seq_basic_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (length_nth_prefix formula-decl nil seq_suffix_prefix_props nil))
   shostak))
 (reverse_nth_suffix_TCC1 0
  (reverse_nth_suffix_TCC1-1 nil 3580673737
   ("" (grind :rewrites length_reverse) nil nil)
   ((T formal-type-decl nil seq_suffix_prefix_props nil)
    (length_reverse formula-decl nil seq_basic_props nil))
   nil))
 (reverse_nth_suffix 0
  (reverse_nth_suffix-1 nil 3580677444
   (""
    (grind :rewrites
     (nth_equal nth_nth_suffix nth_nth_prefix nth_reverse
      length_reverse length_nth_suffix length_nth_prefix))
    nil nil)
   ((nth_equal formula-decl nil seq_defs nil)
    (length_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (length_reverse formula-decl nil seq_basic_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (length_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (nth_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (nth_reverse formula-decl nil seq_basic_props nil)
    (nth_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (nth_suffix const-decl "(LAMBDA (s1): suffix?(s1, s))"
     seq_suffix_prefix_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (< const-decl "bool" reals nil) (ul type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (nth_suffix_reverse 0
  (nth_suffix_reverse-1 nil 3580677591
   (""
    (grind :rewrites
     (nth_equal nth_nth_suffix nth_nth_prefix nth_reverse
      length_reverse length_nth_suffix length_nth_prefix))
    nil nil)
   ((nth_equal formula-decl nil seq_defs nil)
    (length_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (length_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (length_reverse formula-decl nil seq_basic_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (nth_reverse formula-decl nil seq_basic_props nil)
    (nth_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (nth_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (nth_suffix const-decl "(LAMBDA (s1): suffix?(s1, s))"
     seq_suffix_prefix_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (< const-decl "bool" reals nil) (ul type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (reverse_nth_prefix 0
  (reverse_nth_prefix-1 nil 3580677596
   (""
    (grind :rewrites
     (nth_equal nth_nth_suffix nth_nth_prefix nth_reverse
      length_reverse length_nth_suffix length_nth_prefix))
    nil nil)
   ((nth_equal formula-decl nil seq_defs nil)
    (length_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (length_reverse formula-decl nil seq_basic_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (length_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (nth_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (nth_reverse formula-decl nil seq_basic_props nil)
    (nth_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (nth_prefix const-decl "(LAMBDA (s1): prefix?(s1, s))"
     seq_suffix_prefix_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (< const-decl "bool" reals nil) (ul type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (nth_prefix_reverse 0
  (nth_prefix_reverse-1 nil 3580677601
   (""
    (grind :rewrites
     (nth_equal nth_nth_suffix nth_nth_prefix nth_reverse
      length_reverse length_nth_suffix length_nth_prefix))
    nil nil)
   ((nth_equal formula-decl nil seq_defs nil)
    (length_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (length_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (length_reverse formula-decl nil seq_basic_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (nth_reverse formula-decl nil seq_basic_props nil)
    (nth_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (nth_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (nth_prefix const-decl "(LAMBDA (s1): prefix?(s1, s))"
     seq_suffix_prefix_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (< const-decl "bool" reals nil) (ul type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (suffix_append_TCC1 0
  (suffix_append_TCC1-1 nil 3580673737 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (suffix_append 0
  (suffix_append-1 nil 3580751734
   ("" (skeep)
    (("" (prop)
      (("1" (expand suffix?)
        (("1" (prop)
          (("1" (grind :rewrites length_append) nil nil)
           ("2" (skeep)
            (("2" (inst - "i+length(s1)")
              (("1" (grind :rewrites (nth_append length_append)) nil
                nil)
               ("2" (grind :rewrites (nth_append length_append)) nil
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand suffix?)
        (("2" (prop)
          (("1"
            (grind :rewrites
             (nth_append length_append length_nth_prefix))
            nil nil)
           ("2" (skeep)
            (("2" (inst - i)
              (("1"
                (grind :rewrites
                 (nth_append length_append length_nth_prefix
                  nth_nth_prefix))
                nil nil)
               ("2"
                (grind :rewrites
                 (nth_append length_append length_nth_prefix
                  nth_nth_prefix))
                nil nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand suffix?)
        (("3" (prop)
          (("1"
            (grind :rewrites
             (nth_append length_append length_nth_prefix
              nth_nth_prefix))
            nil nil)
           ("2" (skeep)
            (("2" (inst - "i - length(s1)")
              (("1" (inst - i)
                (("1"
                  (grind :rewrites
                   (nth_append length_append length_nth_prefix
                    nth_nth_prefix))
                  (("1" (rewrite* nth_append)
                    (("1"
                      (grind :rewrites
                       (nth_append length_append length_nth_prefix
                        nth_nth_prefix))
                      nil nil)
                     ("2" (typepred i) (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (rewrite* nth_append)
                  (("1"
                    (grind :rewrites
                     (nth_append length_append length_nth_prefix
                      nth_nth_prefix))
                    nil nil)
                   ("2" (typepred i)
                    (("2" (grind :rewrites length_append) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred i)
                (("2"
                  (grind :rewrites
                   (nth_append length_append length_nth_prefix
                    nth_nth_prefix))
                  nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil seq_suffix_prefix_props nil)
    (length_append formula-decl nil seq_basic_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append const-decl "seq" seq_basic_props nil)
    (i skolem-const-decl "bl[T](s2)" seq_suffix_prefix_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (s2 skolem-const-decl "seq[T]" seq_suffix_prefix_props nil)
    (s1 skolem-const-decl "seq[T]" seq_suffix_prefix_props nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nth_append formula-decl nil seq_basic_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (i skolem-const-decl "bl[T](s1)" seq_suffix_prefix_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nth_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (i skolem-const-decl "bl[T](append(s1, s2))"
     seq_suffix_prefix_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (suffix__append 0
  (suffix__append-1 nil 3580758018
   ("" (skeep)
    (("" (rewrite* suffix_as_nth_suffix)
      (("1" (split 1)
        (("1" (flatten 1)
          (("1" (rewrite nth_suffix_append)
            (("1" (lift-if)
              (("1" (split -2)
                (("1" (propax) nil nil)
                 ("2" (delete 1)
                  (("2" (prop)
                    (("1" (grind) nil nil)
                     ("2" (rewrite -1 :target-fnums 1 :dir rl)
                      (("2" (rewrite nth_suffix_append)
                        (("2"
                          (grind :rewrites
                           (length_append nth_append length_nth_suffix
                            nth_nth_suffix nth_equal))
                          nil nil))
                        nil))
                      nil)
                     ("3"
                      (grind :rewrites
                       (length_append length_nth_suffix
                        length_nth_prefix))
                      nil nil)
                     ("4" (rewrite length_nth_prefix)
                      (("4" (rewrite -1 :dir rl)
                        (("4"
                          (grind :rewrites
                           (length_append length_nth_prefix
                            length_nth_suffix))
                          (("4" (rewrite length_nth_suffix)
                            (("1"
                              (grind :rewrites
                               (length_append
                                nth_append
                                length_nth_prefix
                                nth_nth_prefix
                                length_nth_suffix
                                nth_nth_suffix
                                nth_equal))
                              nil nil)
                             ("2"
                              (typepred! "length(s) - length(s2)"
                               :implicit? t)
                              (("2"
                                (typepred!
                                 "length(s) - length(s2)"
                                 :all?
                                 t
                                 :implicit?
                                 t)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten 1)
          (("2" (split 1)
            (("1"
              (grind :rewrites
               (length_append length_nth_suffix length_nth_prefix))
              nil nil)
             ("2" (prop)
              (("1" (grind :rewrites nth_suffix_append) nil nil)
               ("2" (rewrite nth_suffix_append)
                (("2" (lift-if)
                  (("2" (split 1)
                    (("1" (hide -3 -4)
                      (("1" (prop)
                        (("1"
                          (grind :rewrites
                           (nth_equal nth_nth_suffix
                            length_nth_suffix))
                          nil nil))
                        nil))
                      nil)
                     ("2" (rewrite length_nth_prefix)
                      (("2" (rewrite -4)
                        (("2" (rewrite -2 :dir rl)
                          (("2" (rewrite* length_nth_suffix)
                            (("2"
                              (grind :rewrites
                               (length_append
                                nth_append
                                length_nth_prefix
                                nth_nth_prefix
                                length_nth_suffix
                                nth_nth_suffix
                                nth_equal))
                              (("2" (rewrite* nth_append) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (prop)
        (("1" (rewrite nth_suffix_append) nil nil)
         ("2"
          (grind :rewrites
           (length_append nth_append length_nth_suffix nth_nth_suffix))
          nil nil)
         ("3" (rewrite nth_suffix_append) nil nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (append const-decl "seq" seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (suffix_as_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth_prefix const-decl "(LAMBDA (s1): prefix?(s1, s))"
     seq_suffix_prefix_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (ul type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth_append formula-decl nil seq_basic_props nil)
    (nth_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (length_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (length_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (length_append formula-decl nil seq_basic_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil seq_defs nil) (< const-decl "bool" reals nil)
    (nth_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth_equal formula-decl nil seq_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (nth_suffix const-decl "(LAMBDA (s1): suffix?(s1, s))"
     seq_suffix_prefix_props nil)
    (nth_suffix_append formula-decl nil seq_suffix_prefix_props nil))
   shostak))
 (suffix__append_r 0
  (suffix__append_r-1 nil 3580837444
   (""
    (grind :rewrites
     (suffix_as_nth_suffix nth_suffix_append nth_equal
      length_nth_suffix nth_nth_suffix length_append))
    nil nil)
   ((suffix_as_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (nth_equal formula-decl nil seq_defs nil)
    (length_append formula-decl nil seq_basic_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (<= const-decl "bool" reals nil) (ul type-eq-decl nil seq_defs nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (nth_suffix const-decl "(LAMBDA (s1): suffix?(s1, s))"
     seq_suffix_prefix_props nil)
    (append const-decl "seq" seq_basic_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (length_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (nth_suffix_append formula-decl nil seq_suffix_prefix_props nil))
   shostak))
 (prefix_append_TCC1 0
  (prefix_append_TCC1-1 nil 3580751575 ("" (grind) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil))
   nil))
 (prefix_append 0
  (prefix_append-1 nil 3580837565
   ("" (skeep)
    (("" (rewrite* prefix_as_nth_prefix)
      (("1" (prop)
        (("1" (grind :rewrites length_append) nil nil)
         ("2"
          (lazy-grind :rewrites
           (nth_equal nth_nth_prefix nth_append length_append
            length_nth_prefix))
          nil nil)
         ("3" (grind :rewrites (length_append length_nth_suffix)) nil
          nil)
         ("4"
          (grind :rewrites
           (nth_equal nth_nth_prefix nth_append length_append
            length_nth_prefix nth_nth_suffix length_nth_suffix)
           :if-match nil)
          (("4" (inst - "length(s1) + i!1")
            (("4"
              (grind :rewrites
               (nth_equal nth_nth_prefix nth_append length_append
                length_nth_prefix nth_nth_suffix length_nth_suffix))
              nil nil))
            nil))
          nil)
         ("5" (grind :rewrites (length_append length_nth_suffix)) nil
          nil)
         ("6"
          (lazy-grind :rewrites
           (nth_equal nth_nth_prefix nth_append length_append
            length_nth_prefix nth_nth_suffix length_nth_suffix)
           :if-match nil)
          (("6" (inst - i!1)
            (("1" (inst - "i!1 - length(s1)")
              (("1"
                (grind :rewrites
                 (nth_equal nth_nth_prefix nth_append length_append
                  length_nth_prefix nth_nth_suffix length_nth_suffix))
                (("1" (rewrite* nth_append)
                  (("1"
                    (grind :rewrites
                     (nth_equal nth_nth_prefix nth_append length_append
                      length_nth_prefix nth_nth_suffix
                      length_nth_suffix))
                    nil nil))
                  nil))
                nil)
               ("2"
                (grind :rewrites
                 (nth_equal nth_nth_prefix nth_append length_append
                  length_nth_prefix nth_nth_suffix length_nth_suffix))
                nil nil))
              nil)
             ("2"
              (grind :rewrites
               (nth_equal nth_nth_prefix nth_append length_append
                length_nth_prefix nth_nth_suffix length_nth_suffix))
              nil nil))
            nil))
          nil))
        nil)
       ("2"
        (grind :rewrites
         (nth_equal nth_nth_prefix nth_append length_append
          length_nth_prefix nth_nth_suffix length_nth_suffix))
        nil nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (append const-decl "seq" seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (prefix_as_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth_suffix const-decl "(LAMBDA (s1): suffix?(s1, s))"
     seq_suffix_prefix_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (ul type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i!1 skolem-const-decl
     "bl[T](nth_prefix(s, length(s1) + length(s2)))"
     seq_suffix_prefix_props nil)
    (s2 skolem-const-decl "seq[T]" seq_suffix_prefix_props nil)
    (s1 skolem-const-decl "seq[T]" seq_suffix_prefix_props nil)
    (s skolem-const-decl "seq[T]" seq_suffix_prefix_props nil)
    (nth_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (length_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (length_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (nth_equal formula-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (nth_append formula-decl nil seq_basic_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (nth_prefix const-decl "(LAMBDA (s1): prefix?(s1, s))"
     seq_suffix_prefix_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil seq_basic_props nil))
   shostak))
 (prefix__append 0
  (prefix__append-1 nil 3580838207
   ("" (skeep)
    (("" (rewrite* prefix_as_suffix)
      (("1" (rewrite reverse_append)
        (("1" (rewrite suffix__append)
          (("1" (rewrite* length_reverse)
            (("1" (rewrite nth_prefix_reverse)
              (("1" (grind) nil nil)
               ("2" (split 2)
                (("1" (flatten 1)
                  (("1" (split -1)
                    (("1" (propax) nil nil)
                     ("2"
                      (typepred! "length(s) - length(s1)" :implicit? t
                       :all? t)
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (flatten 1)
                  (("2" (split -1)
                    (("1" (propax) nil nil)
                     ("2"
                      (typepred! "length(s) - length(s1)" :implicit? t
                       :all? t)
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (split 1)
        (("1" (split 2)
          (("1" (flatten 1)
            (("1" (rewrite reverse_append)
              (("1" (rewrite suffix__append)
                (("1" (split -1)
                  (("1" (propax) nil nil)
                   ("2" (rewrite* length_reverse)
                    (("2"
                      (typepred! "length(s) - length(s1)" :implicit? t
                       :all? t)
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten 1)
            (("2" (rewrite reverse_append)
              (("2" (rewrite suffix__append)
                (("2" (split -1)
                  (("1" (grind) nil nil)
                   ("2"
                    (typepred! "length(s) - length(s1)" :implicit? t
                     :all? t)
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "length(s1)") (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((append const-decl "seq" seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (prefix_as_suffix formula-decl nil seq_suffix_prefix_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth_suffix const-decl "(LAMBDA (s1): suffix?(s1, s))"
     seq_suffix_prefix_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (ul type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (suffix__append formula-decl nil seq_suffix_prefix_props nil)
    (nth_prefix_reverse formula-decl nil seq_suffix_prefix_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_reverse formula-decl nil seq_basic_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (reverse_append formula-decl nil seq_basic_props nil))
   shostak))
 (prefix__append_l 0
  (prefix__append_l-1 nil 3580838316
   ("" (grind :rewrites (nth_append length_append)) nil nil)
   ((prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (length_append formula-decl nil seq_basic_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_append formula-decl nil seq_basic_props nil))
   shostak))
 (suffix_as_append 0
  (suffix_as_append-1 nil 3580674429
   ("" (skeep)
    (("" (prop)
      (("1" (inst + "nth_prefix(s, length(s) - length(s2))")
        (("1"
          (grind :rewrites
           (nth_equal nth_append length_append nth_nth_prefix
            length_nth_prefix)
           :if-match nil)
          (("1" (inst - "i!1 - length(s) + length(s2)")
            (("1" (rewrite* nth_append)
              (("1"
                (grind :rewrites
                 (nth_equal nth_append length_append nth_nth_prefix
                  length_nth_prefix)
                 :if-match nil)
                nil nil))
              nil)
             ("2"
              (grind :rewrites
               (nth_equal nth_append length_append nth_nth_prefix
                length_nth_prefix)
               :if-match nil)
              nil nil))
            nil))
          nil)
         ("2"
          (grind :rewrites
           (nth_equal nth_append length_append nth_nth_prefix
            length_nth_prefix)
           :if-match nil)
          nil nil))
        nil)
       ("2"
        (grind :rewrites
         (nth_equal nth_append length_append nth_nth_prefix
          length_nth_prefix))
        nil nil))
      nil))
    nil)
   ((nth_equal formula-decl nil seq_defs nil)
    (length_append formula-decl nil seq_basic_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (bl type-eq-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (nth_append formula-decl nil seq_basic_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (i!1 skolem-const-decl "bl[T](s)" seq_suffix_prefix_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nth_prefix const-decl "(LAMBDA (s1): prefix?(s1, s))"
     seq_suffix_prefix_props nil)
    (ul type-eq-decl nil seq_defs nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (s skolem-const-decl "seq[T]" seq_suffix_prefix_props nil)
    (s2 skolem-const-decl "seq[T]" seq_suffix_prefix_props nil)
    (<= const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (suffix_as_append_alt 0
  (suffix_as_append_alt-1 nil 3580838616
   ("" (use suffix_as_append)
    (("" (skeep)
      (("" (inst - s s2)
        (("" (prop)
          (("1" (skeep) (("1" (inst + s1) nil nil)) nil)
           ("2" (skeep)
            (("2" (inst + s1)
              (("2" (use prefix__append_l) (("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (s skolem-const-decl "seq[T]" seq_suffix_prefix_props nil)
    (s1 skolem-const-decl "seq[T]" seq_suffix_prefix_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (prefix__append_l formula-decl nil seq_suffix_prefix_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (suffix_as_append formula-decl nil seq_suffix_prefix_props nil))
   shostak))
 (prefix_as_append 0
  (prefix_as_append-1 nil 3580838726
   ("" (skeep)
    (("" (prop)
      (("1" (inst + "nth_suffix(s, length(s) - length(s1))")
        (("1"
          (lazy-grind :rewrites
           (nth_equal nth_append length_append nth_nth_suffix
            length_nth_suffix))
          (("1" (rewrite* nth_append)
            (("1"
              (lazy-grind :rewrites
               (nth_equal nth_append length_append nth_nth_suffix
                length_nth_suffix))
              nil nil))
            nil))
          nil)
         ("2"
          (lazy-grind :rewrites
           (nth_equal nth_append length_append nth_nth_suffix
            length_nth_suffix))
          nil nil))
        nil)
       ("2"
        (lazy-grind :rewrites
         (nth_equal nth_append length_append nth_nth_suffix
          length_nth_suffix)
         :if-match nil)
        (("2" (inst -5 i!1)
          (("2"
            (grind :rewrites
             (nth_equal nth_append length_append nth_nth_prefix
              length_nth_prefix))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nth_equal formula-decl nil seq_defs nil)
    (length_append formula-decl nil seq_basic_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (bl type-eq-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i!1 skolem-const-decl "bl[T](s)" seq_suffix_prefix_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nth_append formula-decl nil seq_basic_props nil)
    (nth_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth_suffix const-decl "(LAMBDA (s1): suffix?(s1, s))"
     seq_suffix_prefix_props nil)
    (ul type-eq-decl nil seq_defs nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (s skolem-const-decl "seq[T]" seq_suffix_prefix_props nil)
    (s1 skolem-const-decl "seq[T]" seq_suffix_prefix_props nil)
    (<= const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (prefix_as_append_alt 0
  (prefix_as_append_alt-1 nil 3580838912
   ("" (skeep)
    (("" (use prefix_as_append)
      (("" (prop)
        (("1" (skeep) (("1" (grind) nil nil)) nil)
         ("2" (skeep)
          (("2" (inst + s2)
            (("2" (use suffix__append_r) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prefix_as_append formula-decl nil seq_suffix_prefix_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (suffix__append_r formula-decl nil seq_suffix_prefix_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (s2 skolem-const-decl "seq[T]" seq_suffix_prefix_props nil)
    (s skolem-const-decl "seq[T]" seq_suffix_prefix_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (suffix_reverse2 0
  (suffix_reverse2-1 nil 3580838966
   ("" (skeep)
    (("" (rewrite* suffix_as_nth_suffix)
      (("" (rewrite* prefix_as_nth_prefix)
        (("" (prop)
          (("1" (grind :rewrites length_reverse) nil nil)
           ("2" (rewrite nth_suffix_reverse)
            (("1" (rewrite* length_reverse)
              (("1" (lemma reverse_reverse)
                (("1" (copy -1)
                  (("1" (inst - s1)
                    (("1" (inst - "nth_prefix(s2, length(s1))")
                      (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite* length_reverse) nil nil))
            nil)
           ("3" (rewrite* length_reverse) nil nil)
           ("4" (grind :rewrites (nth_suffix_reverse length_reverse))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (suffix_as_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (length_reverse formula-decl nil seq_basic_props nil)
    (nth_prefix const-decl "(LAMBDA (s1): prefix?(s1, s))"
     seq_suffix_prefix_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (reverse_reverse formula-decl nil seq_basic_props nil)
    (ul type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nth_suffix_reverse formula-decl nil seq_suffix_prefix_props nil)
    (prefix_as_nth_prefix formula-decl nil seq_suffix_prefix_props
     nil))
   shostak))
 (suffix_reverse 0
  (suffix_reverse-1 nil 3580839403
   ("" (skeep)
    (("" (use suffix_reverse2)
      (("" (grind :rewrites reverse_reverse) nil nil)) nil))
    nil)
   ((suffix_reverse2 formula-decl nil seq_suffix_prefix_props nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (reverse_reverse formula-decl nil seq_basic_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil))
   shostak))
 (suffix__reverse 0
  (suffix__reverse-1 nil 3580839449
   ("" (skeep)
    (("" (use suffix_reverse2)
      (("" (grind :rewrites reverse_reverse) nil nil)) nil))
    nil)
   ((suffix_reverse2 formula-decl nil seq_suffix_prefix_props nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (reverse_reverse formula-decl nil seq_basic_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil))
   shostak))
 (prefix_reverse2 0
  (prefix_reverse2-1 nil 3580839459
   (""
    (grind :rewrites
     (prefix_as_nth_prefix suffix_as_nth_suffix length_reverse
      nth_prefix_reverse nth_suffix_reverse reverse_reverse))
    (("" (lemma reverse_reverse)
      (("" (lemma reverse_reverse)
        (("" (inst - s1!1)
          (("" (inst - "nth_suffix(s2!1, length(s1!1))")
            (("" (stop-rewrite reverse_reverse) (("" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reverse_reverse formula-decl nil seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (nth_suffix const-decl "(LAMBDA (s1): suffix?(s1, s))"
     seq_suffix_prefix_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (ul type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nth_prefix_reverse formula-decl nil seq_suffix_prefix_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (suffix_as_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (prefix_as_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (length_reverse formula-decl nil seq_basic_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil))
   shostak))
 (prefix_reverse 0
  (prefix_reverse-1 nil 3580839646
   ("" (skeep)
    (("" (use prefix_reverse2)
      (("" (grind :rewrites (reverse_reverse length_reverse)) nil nil))
      nil))
    nil)
   ((prefix_reverse2 formula-decl nil seq_suffix_prefix_props nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (reverse_reverse formula-decl nil seq_basic_props nil)
    (length_reverse formula-decl nil seq_basic_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil))
   shostak))
 (prefix__reverse 0
  (prefix__reverse-1 nil 3580839662
   ("" (skeep)
    (("" (use prefix_reverse2)
      (("" (grind :rewrites (reverse_reverse length_reverse)) nil nil))
      nil))
    nil)
   ((prefix_reverse2 formula-decl nil seq_suffix_prefix_props nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (reverse_reverse formula-decl nil seq_basic_props nil)
    (length_reverse formula-decl nil seq_basic_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil))
   shostak))
 (suffix_same_length 0
  (suffix_same_length-1 nil 3580839858
   ("" (grind :rewrites suffix_as_nth_suffix) nil nil)
   ((suffix_as_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (prefix_same_length 0
  (prefix_same_length-1 nil 3580839927
   ("" (grind :rewrites prefix_as_nth_prefix) nil nil)
   ((prefix_as_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (nth_suffix__zero_TCC1 0
  (nth_suffix__zero_TCC1-1 nil 3580673737 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (nth_suffix__zero 0
  (nth_suffix__zero-1 nil 3580674236
   (""
    (grind :rewrites (nth_nth_suffix length_nth_suffix) :theories
     seq_defs)
    nil nil)
   ((length_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (nth_suffix const-decl "(LAMBDA (s1): suffix?(s1, s))"
     seq_suffix_prefix_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (ul type-eq-decl nil seq_defs nil) (<= const-decl "bool" reals nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (nth_equal formula-decl nil seq_defs nil))
   shostak))
 (nth_prefix__zero 0
  (nth_prefix__zero-1 nil 3580674280
   (""
    (grind :rewrites (nth_nth_prefix length_nth_prefix) :theories
     seq_defs)
    nil nil)
   ((length_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (nth_prefix const-decl "(LAMBDA (s1): prefix?(s1, s))"
     seq_suffix_prefix_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (ul type-eq-decl nil seq_defs nil) (<= const-decl "bool" reals nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (nth_equal formula-decl nil seq_defs nil))
   shostak))
 (nth_suffix__length_TCC1 0
  (nth_suffix__length_TCC1-1 nil 3580673737 ("" (subtype-tcc) nil nil)
   nil nil))
 (nth_suffix__length 0
  (nth_suffix__length-1 nil 3580674371
   ("" (grind :rewrites (nth_nth_suffix length_nth_suffix nth_equal))
    nil nil)
   ((nth_equal formula-decl nil seq_defs nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (length_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (nth_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (nth_suffix const-decl "(LAMBDA (s1): suffix?(s1, s))"
     seq_suffix_prefix_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (ul type-eq-decl nil seq_defs nil) (<= const-decl "bool" reals nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (nth_prefix__length 0
  (nth_prefix__length-1 nil 3580674416
   ("" (grind :rewrites (nth_nth_prefix length_nth_prefix nth_equal))
    nil nil)
   ((nth_equal formula-decl nil seq_defs nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (length_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (nth_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (nth_prefix const-decl "(LAMBDA (s1): prefix?(s1, s))"
     seq_suffix_prefix_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (ul type-eq-decl nil seq_defs nil) (<= const-decl "bool" reals nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (nth_suffix_empty 0
  (nth_suffix_empty-1 nil 3580839972
   (""
    (grind :rewrites (nth_nth_suffix length_nth_suffix) :theories
     seq_defs)
    nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (empty const-decl "{s | length(s) = 0}" seq_defs nil)
    (ul type-eq-decl nil seq_defs nil) (< const-decl "bool" reals nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (nth_suffix const-decl "(LAMBDA (s1): suffix?(s1, s))"
     seq_suffix_prefix_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_nth_suffix formula-decl nil seq_suffix_prefix_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (nth_equal formula-decl nil seq_defs nil))
   shostak))
 (nth_suffix__empty 0
  (nth_suffix__empty-1 nil 3580840066
   (""
    (grind :rewrites (nth_nth_suffix length_nth_suffix) :theories
     seq_defs)
    nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (ul type-eq-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (nth_suffix const-decl "(LAMBDA (s1): suffix?(s1, s))"
     seq_suffix_prefix_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (nth_equal formula-decl nil seq_defs nil)
    (length_nth_suffix formula-decl nil seq_suffix_prefix_props nil))
   shostak))
 (nth_prefix_empty 0
  (nth_prefix_empty-1 nil 3580840071
   (""
    (grind :rewrites (nth_nth_prefix length_nth_prefix) :theories
     seq_defs)
    nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (empty const-decl "{s | length(s) = 0}" seq_defs nil)
    (ul type-eq-decl nil seq_defs nil) (< const-decl "bool" reals nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (nth_prefix const-decl "(LAMBDA (s1): prefix?(s1, s))"
     seq_suffix_prefix_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_nth_prefix formula-decl nil seq_suffix_prefix_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (nth_equal formula-decl nil seq_defs nil))
   shostak))
 (nth_prefix__empty 0
  (nth_prefix__empty-1 nil 3580840082
   (""
    (grind :rewrites (nth_nth_prefix length_nth_prefix) :theories
     seq_defs)
    nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (ul type-eq-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (nth_prefix const-decl "(LAMBDA (s1): prefix?(s1, s))"
     seq_suffix_prefix_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (nth_equal formula-decl nil seq_defs nil)
    (length_nth_prefix formula-decl nil seq_suffix_prefix_props nil))
   shostak))
 (suffix_empty 0
  (suffix_empty-1 nil 3580840086 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (suffix__empty 0
  (suffix__empty-1 nil 3580840089 ("" (grind) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (bl type-eq-decl nil seq_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (s!1 skolem-const-decl "seq[T]" seq_suffix_prefix_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (empty? const-decl "bool" seq_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (prefix_empty 0
  (prefix_empty-1 nil 3580840106 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil))
   shostak))
 (prefix__empty 0
  (prefix__empty-1 nil 3580840110 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bl type-eq-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (empty? const-decl "bool" seq_defs nil))
   shostak))
 (suffix_is_reflexive 0
  (suffix_is_reflexive-1 nil 3580840113 ("" (grind) nil nil)
   ((suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (reflexive? const-decl "bool" relations nil))
   shostak))
 (suffix_is_transitive 0
  (suffix_is_transitive-1 nil 3580840117 ("" (lazy-grind) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (transitive? const-decl "bool" relations nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (suffix_is_antisymmetric 0
  (suffix_is_antisymmetric-1 nil 3580840217
   ("" (lazy-grind :rewrites nth_equal) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (nth_equal formula-decl nil seq_defs nil)
    (antisymmetric? const-decl "bool" relations nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (suffix_is_partial_order 0
  (suffix_is_partial_order-1 nil 3580840256
   (""
    (grind :rewrites
     (suffix_is_reflexive suffix_is_transitive
      suffix_is_antisymmetric))
    nil nil)
   ((partial_order? const-decl "bool" orders nil)
    (suffix_is_antisymmetric formula-decl nil seq_suffix_prefix_props
     nil)
    (preorder? const-decl "bool" orders nil)
    (suffix_is_transitive formula-decl nil seq_suffix_prefix_props nil)
    (suffix_is_reflexive formula-decl nil seq_suffix_prefix_props nil))
   shostak))
 (st_suffix_is_well_founded 0
  (st_suffix_is_well_founded-1 nil 3580840284
   ("" (use length_is_well_founded)
    (("" (expand well_founded?)
      (("" (skeep)
        (("" (inst - p)
          (("" (prop)
            (("" (skeep)
              (("" (inst + y)
                (("" (skeep)
                  (("" (inst - x)
                    (("" (expand st_suffix?)
                      (("" (expand suffix?)
                        (("" (grind :rewrites nth_equal) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (st_suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_equal formula-decl nil seq_defs nil)
    (suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (length_is_well_founded formula-decl nil seq_defs nil))
   shostak))
 (prefix_is_reflexive 0
  (prefix_is_reflexive-1 nil 3580841842 ("" (grind) nil nil)
   ((prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (reflexive? const-decl "bool" relations nil))
   shostak))
 (prefix_is_transitive 0
  (prefix_is_transitive-1 nil 3580841846 ("" (lazy-grind) nil nil)
   ((transitive? const-decl "bool" relations nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (length const-decl "[seq -> nat]" seq_defs nil)
    (bl type-eq-decl nil seq_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (prefix_is_antisymmetric 0
  (prefix_is_antisymmetric-1 nil 3580842052
   ("" (lazy-grind :rewrites nth_equal) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (nth_equal formula-decl nil seq_defs nil)
    (antisymmetric? const-decl "bool" relations nil))
   shostak))
 (prefix_is_partial_order 0
  (prefix_is_partial_order-1 nil 3581103516
   (""
    (grind :rewrites
     (prefix_is_reflexive prefix_is_transitive
      prefix_is_antisymmetric))
    nil nil)
   ((partial_order? const-decl "bool" orders nil)
    (prefix_is_antisymmetric formula-decl nil seq_suffix_prefix_props
     nil)
    (preorder? const-decl "bool" orders nil)
    (prefix_is_transitive formula-decl nil seq_suffix_prefix_props nil)
    (prefix_is_reflexive formula-decl nil seq_suffix_prefix_props nil))
   shostak))
 (st_prefix_is_well_founded 0
  (st_prefix_is_well_founded-1 nil 3580842075
   ("" (use st_suffix_is_well_founded)
    (("" (expand well_founded?)
      (("" (skeep)
        (("" (inst - "LAMBDA s: p(reverse(s))")
          (("" (prop)
            (("1" (skeep)
              (("1" (inst + "reverse(y)")
                (("1" (skeep)
                  (("1" (inst - "reverse(x)")
                    (("1" (expand (st_prefix? st_suffix?))
                      (("1" (rewrite prefix__reverse)
                        (("1" (prop)
                          (("1" (rewrite -1 :dir rl)
                            (("1" (rewrite reverse_reverse) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite reverse_reverse)
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (inst + "reverse(y)")
                (("2" (rewrite reverse_reverse) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (T formal-type-decl nil seq_suffix_prefix_props nil)
    (seq nonempty-type-decl nil seq_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (reverse const-decl "seq" seq_basic_props nil)
    (st_prefix? const-decl "bool" seq_suffix_prefix_props nil)
    (st_suffix? const-decl "bool" seq_suffix_prefix_props nil)
    (reverse_reverse formula-decl nil seq_basic_props nil)
    (prefix__reverse formula-decl nil seq_suffix_prefix_props nil)
    (p skolem-const-decl "pred[seq[T]]" seq_suffix_prefix_props nil)
    (x skolem-const-decl "(p)" seq_suffix_prefix_props nil)
    (st_suffix_is_well_founded formula-decl nil seq_suffix_prefix_props
     nil))
   shostak)))

