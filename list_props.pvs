more_list_props[T: TYPE]: THEORY
BEGIN
  IMPORTING adt_props
  
  l, m, l1, l2: VAR list[T]
  ll: VAR list[list[T]]
  p: VAR pred[T]
  P: VAR pred[list[T]]
  a, b, c: VAR T
  x, y, z: VAR T

  %% Characterization of lists as the set of its elements
  % Currified version of member
  member(l)(x): MACRO bool = member(x, l)

  % Filter a list, more properties
  filter_member: JUDGEMENT
    filter(l, p) HAS_TYPE { m | FORALL x: member(x, m) IFF p(x) AND member(x, l) }

  filter_cons: THEOREM filter(cons(x, l), p) =
    IF p(x) THEN cons(x, filter(l, p)) 
  	    ELSE filter(l, p) ENDIF
  filter_null: THEOREM filter(null,p) = null 

  filter_append: LEMMA
    filter(append(l, m), p) = append(filter(l, p), filter(m, p))

  % Remove (all instances of) an element from a list
  remove(a, l): MACRO { m | FORALL x: member(x, m) IFF (x /= a AND member(x, l)) } =
    filter(l, LAMBDA x: x /= a)

  % Useful conversion between every/some and forall/exists
  % The same conversion with nth instead of member is already
  % in the prelude for every, and a some is a negation of a
  % every with the theorems in the adt_props theory.
  every_forall: THEOREM
    every(p)(l) IFF (FORALL x: member(x, l) IMPLIES p(x))

  some_exists: THEOREM
    some(p)(l) IFF (EXISTS x: member(x, l) AND p(x))

  % subset relation
  subset?(l, m): bool = every(member(m))(l)
  member_subset: THEOREM subset?(l, m) IFF (FORALL x: member(x, l) IMPLIES member(x, m))
  subset_order: THEOREM preorder?(subset?)

  subset_null: THEOREM subset?(null,m)
  subset_cons: THEOREM subset?(cons(x,l),m) IFF member(x,m) AND subset?(l,m)

  % set equality
  equal?(l, m): bool = subset?(l, m) AND subset?(m, l)
  member_equal: THEOREM equal?(l, m) IFF (FORALL x: member(x, l) IFF member(x, m))
  equal_equiv: THEOREM equivalence?(equal?)
  equal_reflexive: THEOREM equal?(l, l)
  equal_transitive: THEOREM
    equal?(l, l1) AND equal?(l1, l2) IMPLIES equal?(l, l2)
  equal_symmetric: THEOREM
    equal?(l1, l2) IMPLIES equal?(l2, l1)
  cons_equal: THEOREM member(x, l) IMPLIES equal?(l, cons(x, l))

  % Specification of comon list functions with cons
  append_cons: THEOREM append(cons(x,l),m) = cons(x,append(l,m))
  reverse_null: THEOREM reverse(null) = null[T]
  reverse_cons: THEOREM reverse(cons(x,l))= append(reverse(l),cons(x,null))  


  % Specification of common list functions with member
  member_append: THEOREM
    member(x, append(l, m)) IFF member(x, l) OR member(x, m)
  member_reverse: THEOREM
    member(x, reverse(l)) IFF member(x, l)
  member_nth: THEOREM
    member(x, l) IFF (EXISTS (i: below(length(l))): nth(l, i) = x)

 

  % More precise specifications with nth
 nth_cons: LEMMA
    FORALL (i: below(1 + length(l))):
      nth(cons(x, l), i) = IF i = 0 THEN x ELSE nth(l, i - 1) ENDIF

  nth_append: THEOREM
    FORALL (i: below(length(l) + length(m))):
      nth(append(l, m), i) = IF i < length(l)
                               THEN nth(l, i)
			       ELSE nth(m, i - length(l))
			     ENDIF
  nth_reverse: THEOREM
    FORALL (i: below(length(l))):
      nth(reverse(l), i) = nth(l, length(l) - i - 1)

  % Flattens a list of lists
  flatten(ll: list[list[T]]): list[T] = reduce(null, (LAMBDA l, m: append(l, m)))(ll)
  flatten_null: THEOREM flatten(null) = null
  flatten_cons: THEOREM flatten(cons(l, ll)) = append(l, flatten(ll))
  flatten_member: THEOREM
      member(x, flatten(ll)) IFF (EXISTS l: member(x, l) AND member(l, ll))
      
  % Lists without duplication
  uniques?(l): RECURSIVE bool =
    CASES l OF
      null: TRUE,
      cons(h, t): NOT member(h, t) AND uniques?(t)
    ENDCASES
  MEASURE length(l)

  uniques(l): RECURSIVE { m | uniques?(m) AND equal?(m, l) } =
    CASES l OF
      null: null,
      cons(h, t):
        IF member(h, t)
	  THEN uniques(t)
	  ELSE cons(h, uniques(t))
	ENDIF
    ENDCASES
  MEASURE length(l)

  % Find an element satisfying a predicate
  find(p, l): RECURSIVE lift[T]=
    CASES l OF
      null: bottom,
      cons(h, t): IF p(h) THEN up(h) ELSE find(p, t) ENDIF
    ENDCASES
  MEASURE length(l)

  find_char: THEOREM
    CASES find(p, l) OF
      bottom: NOT some(p)(l),
      up(r): p(r) AND member(r, l)
    ENDCASES

  
  %% Less usual functions
  % More efficient way to compute append(reverse(l1), l2)
  rev_append(l1, l2): RECURSIVE list[T] =
    CASES l1 OF
      null: l2,
      cons(x, t1): rev_append(t1, cons(x, l2))
    ENDCASES
  MEASURE length(l1)

  % Characterisation of rev_append
  rev_append_char: THEOREM
    rev_append(l1, l2) = append(reverse(l1), l2)
  AUTO_REWRITE rev_append_char

  %% Properties on the subterm order
  subterm_char: THEOREM
    subterm(l, m) IFF CASES m OF
      null: null?(l),
      cons(h, t): l = m OR subterm(l, t)
    ENDCASES

  % Used as a rewrite rule in proof of subterm_append
  subterm_cons: LEMMA
    subterm(l, cons(x, m)) = (l = cons(x, m) OR subterm(l, m))

  % subterm actually is suffix
  subterm_append: THEOREM
    subterm(l2, l) IMPLIES EXISTS l1: l = append(l1, l2)
  append_subterm: THEOREM
    subterm(l2, append(l1, l2))

  % Subterm properties
  subterm_length: LEMMA subterm(l, m) IMPLIES length(l) <= length(m)
  subterm_null: LEMMA subterm(null, l)
  subterm_cons1: LEMMA subterm(l, cons(x, l))
  subterm_cons2: LEMMA subterm(cons(x, l), m) IMPLIES subterm(l, m)
  subterm_subset: LEMMA subterm(l, m) IMPLIES subset?(l, m)
END more_list_props

list2_props[K: TYPE, V: TYPE]: THEORY
BEGIN
  IMPORTING adt_props[list[[K, V]]]
  IMPORTING more_list_props[[K, V]]
  
  k, x: VAR K
  ks, xs: VAR list[K]
  v, y: VAR V
  vs, ys: VAR list[V]
  p: VAR [K, V]
  l: VAR list[[K, V]]

  zip(ks, (vs | length(vs) = length(ks))):
    RECURSIVE { l | length(l) = length(ks) AND FORALL (i: below(length(ks))): nth(l, i) = (nth(ks, i), nth(vs, i)) } =
    CASES ks OF
      null: null,
      cons(h, t): cons((h, car(vs)), zip(t, cdr(vs)))
    ENDCASES
  MEASURE length(ks)

  has_key(k, l): bool = some(LAMBDA (x: K, y: V): x = k)(l)

  assoc(k, l): { r: lift[V] | IF has_key(k, l) THEN up?(r) AND member((k, down(r)), l) ELSE bottom?(r) ENDIF } =
    CASES find(LAMBDA (x: K, y: V): x = k, l) OF
      bottom: bottom,
      up(lift): up(lift`2)
    ENDCASES

  assoc_bottom: THEOREM
    bottom?(assoc(k, l)) IMPLIES NOT has_key(k, l)
  assoc_up: THEOREM
    up?(assoc(k, l)) IMPLIES member((k, down(assoc(k, l))), l)

  assoc(k, l, v): { r: V | IF has_key(k, l) THEN member((k, r), l) ELSE r = v ENDIF } =
    CASES assoc(k, l) OF
      bottom: v,
      up(res): res
    ENDCASES

  remove_assoc(k, l): list[[K, V]] =
    filter(l, LAMBDA (x: K, y: V): x /= k)

  remove_assoc_cons: THEOREM
    remove_assoc(k, cons(p, l)) =
      IF k = p`1
        THEN remove_assoc(k, l)
	ELSE cons(p, remove_assoc(k, l))
      ENDIF

  remove_assoc_assoc: THEOREM
    assoc(x, remove_assoc(k, l)) = IF x = k THEN bottom ELSE assoc(x, l) ENDIF
END list2_props

list_map_props[S: TYPE, T: TYPE]: THEORY
BEGIN
  IMPORTING more_list_props
  
  f: VAR [T -> S]
  F: VAR [T -> list[S]]
  l: VAR list[T]
  m: VAR list[S]
  x: VAR T
  s: VAR S

  member_map: THEOREM
    member(x, l) IMPLIES member(f(x), map(f, l))
  
  map_member: THEOREM
    member(s, map(f, l)) IMPLIES (EXISTS x: f(x) = s AND member(x, l))

  mymap(l: list[T], f: [{ x | member(x, l) } -> S]): RECURSIVE list[S] =
    CASES l OF
      null: null,
      cons(h, t): cons(f(h), mymap(t, restrict(f)))
    ENDCASES
  MEASURE l BY <<
END list_map_props
