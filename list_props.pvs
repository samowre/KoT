more_list_props[T: TYPE]: THEORY
BEGIN
  IMPORTING adt_props
  
  l, m, l1, l2: VAR list[T]
  p: VAR pred[T]
  P: VAR pred[list[T]]
  a, b, c: VAR T
  x, y, z: VAR T

  of_length(n: nat): TYPE = { l | length(l) = n }

  %% Characterization of lists as the set of its elements
  % Currified version of member
  member(l)(x): bool = member(x, l)

  % Remove (all instances of) an element from a list
  delete(a, l): { m | FORALL x: member(x, m) IFF (x /= a AND member(x, l)) } =
    filter(l, LAMBDA x: x /= a)

  % Flattens a list of lists
  flatten(ll: list[list[T]]): list[T] =
    reduce(null, (LAMBDA l, m: append(l, m)))(ll)

  % Useful conversion between every/some and forall/exists
  every_forall: THEOREM
    every(p)(l) IFF (FORALL x: member(x, l) IMPLIES p(x))

  some_exists: THEOREM
    some(p)(l) IFF (EXISTS x: member(x, l) AND p(x))

  % subset relation
  subset?(l, m): bool = every(member(m))(l)
  member_subset: THEOREM subset?(l, m) IFF (FORALL x: member(x, l) IMPLIES member(x, m))
  subset_order: THEOREM preorder?(subset?)

  % set equality
  equal?(l, m): bool = subset?(l, m) AND subset?(m, l)
  member_equal: THEOREM equal?(l, m) IFF (FORALL x: member(x, l) IFF member(x, m))
  equal_equiv: THEOREM equivalence?(equal?)
  equal_reflexive: THEOREM equal?(l, l)
  equal_transitive: THEOREM
    equal?(l, l1) AND equal?(l1, l2) IMPLIES equal?(l, l2)
  equal_symmetric: THEOREM
    equal?(l1, l2) IMPLIES equal?(l2, l1)
  cons_equal: THEOREM member(x, l) IMPLIES equal?(l, cons(x, l))
  
  % Specification of common list functions with member
  member_append: THEOREM
    member(x, append(l, m)) IFF member(x, l) OR member(x, m)
  member_reverse: THEOREM
    member(x, reverse(l)) IFF member(x, l)
  member_nth: THEOREM
    member(x, l) IFF (EXISTS (i: below(length(l))): nth(l, i) = x)

  % Lists without duplication
  uniques?(l): RECURSIVE bool =
    CASES l OF
      null: TRUE,
      cons(h, t): NOT member(h, t) AND uniques?(t)
    ENDCASES
  MEASURE length(l)

  uniques(l): RECURSIVE { m | uniques?(m) AND equal?(m, l) } =
    CASES l OF
      null: null,
      cons(h, t):
        IF member(h, t)
	  THEN uniques(t)
	  ELSE cons(h, uniques(t))
	ENDIF
    ENDCASES
  MEASURE length(l)

  % Find an element satisfying a predicate
  find(p, l): RECURSIVE lift[T]=
    CASES l OF
      null: bottom,
      cons(h, t): IF p(h) THEN up(h) ELSE find(p, t) ENDIF
    ENDCASES
  MEASURE length(l)

  find_char: THEOREM
    CASES find(p, l) OF
      bottom: NOT some(p, l),
      up(r): p(r) AND member(r, l)
    ENDCASES

  %% Less usual functions
  % More efficient way to compute append(reverse(l1), l2)
  rev_append(l1, l2): RECURSIVE list[T] =
    CASES l1 OF
      null: l2,
      cons(x, t1): rev_append(t1, cons(x, l2))
    ENDCASES
  MEASURE length(l1)

  % Characterisation of rev_append
  rev_append_char: THEOREM
    rev_append(l1, l2) = append(reverse(l1), l2)
END more_list_props










list_suffixes[T: TYPE]: THEORY
BEGIN
  IMPORTING more_list_props
  x: VAR T
  P: VAR pred[list[T]]
  l, m, l1, l2: VAR list[T]
  
  % Recursively computes the suffixes of a list
  suffixes(l): RECURSIVE list[list[T]] =
    CASES l OF
      null: (: null :),
      cons(h, t): cons(l, suffixes(t))
    ENDCASES
  MEASURE length(l)

  % Checks that some suffix satisfy a property
  some_suffix(P, l): bool = some(P)(suffixes(l))
  some_suffix(P)(l): bool = some(P)(suffixes(l))

  % Checks that every suffix satisfy a property
  every_suffix(P, l): bool = every(P)(suffixes(l))
  every_suffix(P)(l): bool = every(P)(suffixes(l))
  
  % suffix?(m, l) is TRUE if m is a suffix of l
  suffix?(m, l): RECURSIVE bool =
    CASES l OF
      null: null?(m),
      cons(h, t): l = m OR suffix?(m, t)
    ENDCASES
  MEASURE length(l)

  % Currified version
  % WARNING: Arguments order is reverted w.r.t suffix?/2
  suffix?(l)(m): bool = suffix?(m, l)
  AUTO_REWRITE suffix?

  % Properties on suffixes
  suffix_length: LEMMA suffix?(m, l) IMPLIES length(m) <= length(l)
  suffix_reflexive: LEMMA suffix?(l, l)
  suffix_null: LEMMA suffix?(null, l)
  suffix_cons1: LEMMA suffix?(l, cons(x, l))
  suffix_cons2: LEMMA suffix?(cons(x, l), m) IMPLIES suffix?(l, m)
  suffix_transitive: LEMMA
    suffix?(l, l1) AND suffix?(l1, l2) IMPLIES suffix?(l, l2)
  suffix_antisymmetric: LEMMA
    suffix?(l1, l2) AND suffix?(l2, l1) IMPLIES l1 = l2
  suffix_partial_order: THEOREM partial_order?(suffix?)
  suffix_subset: LEMMA suffix?(m, l) IMPLIES subset?(m, l)

  % Suffixes is really the list of suffixes
  suffix?_suffixes: THEOREM suffix?(m, l) => member(m, suffixes(l))
  suffixes_suffix?: THEOREM member(m, suffixes(l)) => suffix?(m, l)
END list_suffixes

list_filter_props[T: TYPE]: THEORY
BEGIN
  x: VAR T
  p: VAR pred[T]
  l, m: VAR list[T]
  
  filter_member: JUDGEMENT
    filter(l, p) HAS_TYPE { m | FORALL x: member(x, m) IFF p(x) AND member(x, l) }

  filter_append: LEMMA
    filter(append(l, m), p) = append(filter(l, p), filter(m, p))
END list_filter_props

list_map_props[S: TYPE, T: TYPE]: THEORY
BEGIN
  IMPORTING more_list_props
  
  f: VAR [T -> S]
  l: VAR list[T]
  x, y: VAR T

  map(l)(f: [{x | member(x, l)} -> S]): list[S] = map(f, l)

  member_map: THEOREM
    member(x, l) IMPLIES member(f(x), map(f)(l))

  map_member: THEOREM
    member(f(x), map(f)(l)) IMPLIES (EXISTS y: f(x) = f(y) AND member(y, l))
END list_map_props
