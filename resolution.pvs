resolution : THEORY

  BEGIN

  IMPORTING minlist
  IMPORTING sequents
  IMPORTING proof

    r, s, t: VAR term
    rr, ss, tt: VAR list[term]
    i, j, k: VAR nat
    ii, jj, kk: VAR list[nat]
    f, g, h: VAR (fun?)
    p, q: VAR (pred?)
    A, B, C: VAR fmla
    AA, BB, CC: VAR list[fmla]
    x, y, z: VAR (var?)
    xx, yy, zz: VAR list[(var?)]
    RR1, RR2: VAR ne_proof_seq

    prop_atom?(A): bool = (atom?(A) AND 
    	      	           upred?(pred(A)) AND 
		           arity(pred(A)) = 0 AND
			   index(pred(A)) > 0)

    pA, pB, pC: VAR (prop_atom?)

    literal?(A): bool = (prop_atom?(A) OR 
    		         (f_not?(A) AND prop_atom?(arg(A))))

    lA, lB, lC: VAR (literal?)

    literal_sentence: LEMMA sentence?(lA)

    lAA, lBB, lCC: VAR list[(literal?)]

    literal_list_sentence_list: LEMMA sentence_list?(lAA) 

    member_lit_member_fmla: LEMMA member[fmla](lA, lAA) = member[(literal?)](lA, lAA)

    subset_lit_subset_fmla: LEMMA subset[fmla](lAA, lBB) = subset[(literal?)](lAA, lBB)

    % (not 1) -> 1, (1) -> 2, (not 2) -> 3, (2) -> 4...
    index(lA) : posnat = 
    	  IF prop_atom?(lA) 
	  THEN 2*index(pred(lA))
	  ELSE 2*index(pred(arg(lA)))-1
	  ENDIF
 
    index_inj: LEMMA 
      index(lA) = index(lB) 
      => 
      lA = lB

    IMPORTING sortedlist[(literal?), index]
	
    %list[literal?] sorted by index
    clause?(lAA) : bool = sorted?(lAA)

    clause_prop: LEMMA 
      clause?(lAA) 
      <=> 
      (null?(lAA) 
	OR null?(cdr(lAA)) 
	OR (index(car(lAA)) < index(car(cdr(lAA))) AND 
	    clause?(cdr(lAA))))

    sorted_clause: LEMMA
      clause?(lAA) AND cons?(lAA)
      =>
      (FORALL (e: (literal?)) : 
        member(e, cdr(lAA))
	=> 
	index(car(lAA)) < index(e))	
  
    % obs: setlist? is O(n^2). 
    no_duplicates?(lAA) : bool = setlist?(lAA)  

    clause_implies_no_duplicates: LEMMA
      clause?(lAA) IMPLIES no_duplicates?(lAA)

    clAA, clBB, clCC : VAR (clause?)

    clauses_list: TYPE = list[(clause?)]

    %non empty clause
    nclause?(clAA): bool = cons?(clAA)

    nclAA, nclBB : VAR (nclause?)

    include_clause(clAA, clBB): bool = sorted_include(clAA, clBB)

    % transform p1::p2::...pn into p1 or (p2 or ...(pn-1 or pn))...)
    nclause2fmla(nclAA): RECURSIVE fmla= 
      IF null?(cdr(nclAA)) 
      THEN car(nclAA)
      ELSE f_or(car(nclAA), nclause2fmla(cdr(nclAA)))
      ENDIF
    MEASURE length(nclAA)

    nclause2fmla_sentence: LEMMA sentence?(nclause2fmla(nclAA))

    clause_sentence_list: LEMMA sentence_list?(clAA)

    % transform p1::p2::..pn into |- p1 or (p2 or ...pn))   and null into |- null (i.e |- false)
    or_reduction(clAA): sequent = 
      IF null?(clAA) 
      THEN null 
      ELSE cons(nclause2fmla(clAA), null) 
      ENDIF

    % transform p1::p2::..pn into |- not[p1 or (p2 or ...pn))]  
    not_or_reduction(nclAA): sequent = 
      cons(f_not(nclause2fmla(nclAA)), null) 

    offset_proof_step(ps: proof_step, n: nat): proof_step = 
     	  ps WITH [ subs:= map(LAMBDA(j: nat):j + n)(ps`subs)]

    sA, sB, sC: VAR (sentence?)
    sAA, sBB, sCC: VAR (sentence_list?)

    %===================================================================================		  
    % lemma axiom rule |- l if both A and ~A belong to l

    ax_proof_step(sA): proof_step = (# sequent:= cons(sA, cons(f_not(sA), null)),
    	      		     	      	      	 rule:= ax,
			    	      		 subs:= null #)

    concl_ax(sAA): proof_step = (# sequent:= sAA, 
    	     	      	       	   rule:= subset,
	     			   subs:= cons(0, null) #)

    RR_ax(sA, sAA): ne_proof_seq = 
    (# length := 2,
       seq := LAMBDA(j: below(2)):
       	      	 COND
		  j = 0 -> ax_proof_step(sA), 
		  j = 1 -> concl_ax(sAA)
		 ENDCOND #)   

    lemma_ax: LEMMA (member(sA, sAA) AND
    	    	     member(f_not(sA), sAA))
	   	    =>
		    (conclusion(RR_ax(sA, sAA)) = sAA AND
	      	     checkProof(empty_seq)(RR_ax(sA, sAA)))


    % end lemma axiom rule
    %===================================================================================
    % lemma nor rule  |- ~(a \/ b)::k  if |- ~a::k and |- ~b::k

    concl_norr(sA, sB, sAA, (n, m: posnat)): proof_step = 
          (# sequent:= cons(f_not(f_or(sA, sB)), sAA) , 
    	     rule:= norr,
	     subs:= cons(n - 1, cons(n + m - 1,null)) #)

    RR_norr(sA, sB, sAA, RR1, RR2): ne_proof_seq = 
    LET n = RR1`length IN
    LET m = RR2`length IN
    (# length := n + m + 1,
       seq := LAMBDA(j: below(n + m + 1)):
       	      	 COND
		  j < n -> RR1`seq(j),
		  j >=n AND j < n + m -> offset_proof_step(RR2`seq(j - n), n), 
		  j = n + m -> concl_norr(sA, sB, sAA, n, m)
		 ENDCOND #)   

    lemma_norr: LEMMA (conclusion(RR1) = cons(f_not(sA), sAA) AND
		       conclusion(RR2) = cons(f_not(sB), sAA) AND
		       checkProof(empty_seq)(RR1) AND
		       checkProof(empty_seq)(RR2))
		      =>
		      (conclusion(RR_norr(sA, sB, sAA, RR1, RR2)) = cons(f_not(f_or(sA, sB)), sAA) AND
		       checkProof(empty_seq)(RR_norr(sA, sB, sAA, RR1, RR2)))
		     

    % end lemma nor rule
    %===================================================================================
    % lemma or rule  |- (a \/ b)::k  if |- a::b::k

    concl_orr(sA, sB, sAA, (n : posnat)): proof_step = 
          (# sequent:= cons(f_or(sA, sB), sAA) , 
    	     rule:= orr,
	     subs:= cons(n - 1, null) #)

    RR_orr(sA, sB, sAA, RR1): ne_proof_seq = 
    LET n = RR1`length IN
    (# length := n + 1,
       seq := LAMBDA(j: below(n + 1)):
       	      	 COND
		  j < n -> RR1`seq(j), 
		  j = n -> concl_orr(sA, sB, sAA, n)
		 ENDCOND #)   

    lemma_orr: LEMMA (conclusion(RR1) = cons(sA, cons(sB, sAA)) AND
		      checkProof(empty_seq)(RR1))
		     =>
		     (conclusion(RR_orr(sA, sB, sAA, RR1)) = cons(f_or(sA, sB), sAA) AND
		      checkProof(empty_seq)(RR_orr(sA, sB, sAA, RR1)))
		     

    % end lemma or rule
    %===================================================================================
    % lemma subset rule  |- k  if |- l and l include in k

    concl_subsetr(sAA, (n : posnat)): proof_step = 
          (# sequent:= sAA, 
    	     rule:= subset,
	     subs:= cons(n - 1, null) #)

    RR_subsetr(sAA, sBB, RR1): ne_proof_seq = 
    LET n = RR1`length IN
    (# length := n + 1,
       seq := LAMBDA(j: below(n + 1)):
       	      	 COND
		  j < n -> RR1`seq(j), 
		  j = n -> concl_subsetr(sBB, n)
		 ENDCOND #)   

    lemma_subsetr: LEMMA (subset(sAA, sBB) AND
    	    	          conclusion(RR1) = sAA AND
		      	  checkProof(empty_seq)(RR1))
		     	 =>
		     	 (conclusion(RR_subsetr(sAA, sBB, RR1)) = sBB AND
		      	  checkProof(empty_seq)(RR_subsetr(sAA, sBB, RR1)))
		     

    % end lemma subset rule
    %===================================================================================
    % lemma neg rule  |- ~~k, l  if |- k, l

    concl_negr(sA, sAA, (n : posnat)): proof_step = 
          (# sequent:= cons(f_not(f_not(sA)), sAA), 
    	     rule:= neg,
	     subs:= cons(n - 1, null) #)

    RR_negr(sA, sAA, RR1): ne_proof_seq = 
    LET n = RR1`length IN
    (# length := n + 1,
       seq := LAMBDA(j: below(n + 1)):
       	      	 COND
		  j < n -> RR1`seq(j), 
		  j = n -> concl_negr(sA, sAA, n)
		 ENDCOND #)   

    lemma_negr: LEMMA (conclusion(RR1) = cons(sA, sAA) AND
		       checkProof(empty_seq)(RR1))
		      =>
		      (conclusion(RR_negr(sA, sAA, RR1)) = cons(f_not(f_not(sA)), sAA) AND
		       checkProof(empty_seq)(RR_negr(sA, sAA, RR1)))
		     

    % end lemma neg rule
    %===================================================================================
    % lemma cut rule  |- l  if |- k, l and |- ~k, l

    concl_cutr(sA, sAA, (n, m: posnat)): proof_step = 
          (# sequent:= sAA, 
    	     rule:= cut(sA),
	     subs:= cons(n - 1, cons(n + m - 1,null)) #)

    RR_cutr(sA, sAA, RR1, RR2): ne_proof_seq = 
    LET n = RR1`length IN
    LET m = RR2`length IN
    (# length := n + m + 1,
       seq := LAMBDA(j: below(n + m + 1)):
       	      	 COND
		  j < n -> RR1`seq(j),
		  j >=n AND j < n + m -> offset_proof_step(RR2`seq(j - n), n), 
		  j = n + m -> concl_cutr(sA, sAA, n, m)
		 ENDCOND #)   

    lemma_cutr: LEMMA (conclusion(RR1) = cons(sA, sAA) AND
		       conclusion(RR2) = cons(f_not(sA), sAA) AND
		       checkProof(empty_seq)(RR1) AND
		       checkProof(empty_seq)(RR2))
		      =>
		      (conclusion(RR_cutr(sA, sAA, RR1, RR2)) = sAA AND
		       checkProof(empty_seq)(RR_cutr(sA, sAA, RR1, RR2)))	     

    % end lemma cut rule
    %===================================================================================
    %===================================================================================
    % lemma 1 : |- ~p::l if p belongs l 
    
    RR_lemma1(sA, sAA): ne_proof_seq = RR_ax(sA, cons(f_not(sA), sAA))
 
    lemma1: LEMMA member(sA, sAA)
    	    	  => 
      		  (conclusion(RR_lemma1(sA, sAA))= cons(f_not(sA), sAA) AND 
		   checkProof(empty_seq)(RR_lemma1(sA, sAA)))

    % end lemma 1
    %===================================================================================	
    % lemma 2 : |- k::or_reduction(l) if |- k::l
    
    RR_lemma2(sAA, clBB, RR1): RECURSIVE ne_proof_seq = 
    	  IF null?(clBB) OR null?(cdr(clBB))
	   THEN RR1
	   ELSE
	    LET RR2 = RR_lemma2(append(sAA, cons(car(clBB), null)), cdr(clBB), RR1) IN
	    LET RR3 = RR_subsetr(append(append(sAA, cons(car(clBB), null)), or_reduction(cdr(clBB))), 
				 cons(car(clBB), cons(nclause2fmla(cdr(clBB)), sAA)),
		        	 RR2) IN
	    LET RR4 = RR_orr(car(clBB), nclause2fmla(cdr(clBB)), sAA, RR3) IN
	    RR_subsetr(cons(nclause2fmla(clBB), sAA),append(sAA, or_reduction(clBB)),  RR4)    
	  ENDIF
	  MEASURE length(clBB)    		    
 
    lemma2: LEMMA (conclusion(RR1) =  append(sAA, clBB) AND
    	    	   checkProof(empty_seq)(RR1))
    	    	  => 
      		  (conclusion(RR_lemma2(sAA, clBB, RR1))= append(sAA, or_reduction(clBB)) AND 
		   checkProof(empty_seq)(RR_lemma2(sAA, clBB, RR1)))

    % end lemma 2
    %===================================================================================	
    % th1 the sequent |- ~(p1 or p2 or...pn) , p1, ..., pn, ... is provable in KoT

    RR_th1(nclAA, sBB): RECURSIVE ne_proof_seq =
          LET lA = car(nclAA) IN
	  LET clAA = cdr(nclAA) IN 
          IF null?(clAA) THEN RR_lemma1(lA, sBB)
	     		 ELSE RR_norr(lA, nclause2fmla(clAA), sBB, RR_lemma1(lA, sBB), RR_th1(clAA, sBB))
	  ENDIF
	  MEASURE length(nclAA)
 
    th1: THEOREM 
      (subset(nclAA, sBB))
      => 
      (conclusion(RR_th1(nclAA, sBB))= append(not_or_reduction(nclAA), sBB) AND 
       checkProof(empty_seq)(RR_th1(nclAA, sBB)))
       
    %===================================================================================
    % th2 the sequent |- ~(p1 or ... pk or pivot or pk+1 ... or pn), ~(q1 or ...or f_neg(pivot) or ...qm), p1, ...pn, q1, ...qm

    lpivot: VAR (literal?)

    RR_th2_1(lpivot, nclBB, sCC): ne_proof_seq =
          IF f_not?(lpivot)
	  THEN 
	    LET RR1 = RR_subsetr(append(not_or_reduction(nclBB), cons(arg(lpivot), sCC)),
	       	       	 	 cons(arg(lpivot), append(not_or_reduction(nclBB), sCC)),
				 RR_th1(nclBB, cons(arg(lpivot), sCC))) IN		
	    RR_negr(arg(lpivot), append(not_or_reduction(nclBB), sCC), RR1)
	  ELSE
	    RR_subsetr(append(not_or_reduction(nclBB), cons(f_not(lpivot), sCC)),
	       	       cons(f_not(lpivot), append(not_or_reduction(nclBB), sCC)),
		       RR_th1(nclBB, cons(f_not(lpivot), sCC))) 
	  ENDIF	    
	    
	 
    RR_th2(lpivot, nclAA, nclBB, sCC): RECURSIVE ne_proof_seq = 
          LET lA = car(nclAA) IN
	  LET clAA = cdr(nclAA) IN
	  LET lB = car(nclBB) IN
	  LET clBB = cdr(nclBB) IN
	  LET RR1 = IF member(lA, sCC) % RR1 is a proof of |- ~lA, ~nclBB, sCC 
	      	     THEN RR_lemma1(lA, append(not_or_reduction(nclBB), sCC))
	     	     ELSE RR_th2_1(lA, nclBB, sCC)
	      	     ENDIF IN 
          IF null?(clAA) 
	  THEN 
	    RR1
	  ELSE
	    RR_norr(lA, nclause2fmla(clAA), append(not_or_reduction(nclBB), sCC), RR1, RR_th2(lpivot, clAA, nclBB, sCC))
	  ENDIF
	  MEASURE length(nclAA)

    th2_1_1: LEMMA FORALL(f: (f_not?)): f = f_not(arg(f))

    th2_1: THEOREM 
      subset(nclBB, cons(f_neg(lpivot), sCC))
      => 
      (conclusion(RR_th2_1(lpivot, nclBB, sCC))= cons(f_not(lpivot), append(not_or_reduction(nclBB), sCC)) AND 
       checkProof(empty_seq)(RR_th2_1(lpivot, nclBB, sCC)))

    th2: THEOREM 
      (subset(nclAA, cons(lpivot, sCC)) AND
       subset(nclBB, cons(f_neg(lpivot), sCC)))
      => 
      (conclusion(RR_th2(lpivot, nclAA, nclBB, sCC))= append(not_or_reduction(nclAA), append(not_or_reduction(nclBB), sCC)) AND 
       checkProof(empty_seq)(RR_th2(lpivot, nclAA, nclBB, sCC)))
 		
  END resolution
 
