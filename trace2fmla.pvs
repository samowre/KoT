trace2fmla[m, n: nat, i : upto(n)]: THEORY
BEGIN

  IMPORTING trace_resolution[m, n, i]
  IMPORTING resolution

  k: VAR (tr_literal?)
  cl: VAR (tr_clause?)

  % transforms ( n:nzint ) -> fmla = (f_not)? (atom(upred...))
  translate_lit(k): (literal?) = IF k > 0 
  		    	       	 THEN atom(upred(k, 0), null)
				 ELSE f_not(atom(upred(abs(k), 0), null))
				 ENDIF

  index_index: LEMMA 
    index(translate_lit(k)) = index(k)

  % maps list(nzint) -> list(fmla)-
  translate_clause(cl): (clause?) = map(translate_lit)(cl)

  clause_clause: LEMMA
    member(k, cl) IFF member(translate_lit(k), translate_clause(cl))

  translate_cons: LEMMA
    cons?(cl) IMPLIES
     translate_clause(cl) = cons(translate_lit(car(cl)), translate_clause(cdr(cl)))


END trace2fmla

