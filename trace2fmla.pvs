trace2fmla[m, n: nat, i : upto(n)]: THEORY
BEGIN

  IMPORTING trace_resolution[m,n,i]
  IMPORTING resolution
 
  k, l: VAR (tr_literal?)
  cl, ck, cm: VAR (tr_clause?)

  listA, listB: VAR list[(tr_literal?)]

  % transforms ( n:nzint ) -> fmla = (f_not)? (atom(upred...))
  translate_lit(k): (literal?) = IF k > 0 
  		    	       	 THEN atom(upred(k, 0), null)
				 ELSE f_not(atom(upred(abs(k), 0), null))
				 ENDIF

  %equivalence of indexes
  index_index: LEMMA 
    index(translate_lit(k)) = index(k)

  %translate_lit equivalence
  translate_lit_equiv:  LEMMA
    translate_lit(k) = translate_lit(l) <=> k = l

  % maps list(nzint) -> list(fmla)-
  translate_clause(cl): (clause?) = map(translate_lit)(cl)

  % member equivalence
  clause_clause: LEMMA
    member(k, cl) IFF member(translate_lit(k), translate_clause(cl))
  
  % translation preserves order
  translate_cons: LEMMA
     cons?(ck) =>
     translate_clause(cons(car(ck), cdr(ck))) = cons(translate_lit(car(ck)), translate_clause(cdr(ck)))



  % translation for all tr_literal lists
   translate_list: LEMMA
     cons?(listA) =>
     map(translate_lit)((cons(car(listA), cdr(listA)))) = cons(translate_lit(car(listA)), map(translate_lit)(cdr(listA)))

  % member equivalence for lists
  member_list: LEMMA
    member(k, listA) IFF member(translate_lit(k), map(translate_lit)(listA))

  % subset equivalence for all tr_literal lists
  translate_cons_list: LEMMA
     subset(listA, listB) = subset(map(translate_lit)(listA), map(translate_lit)(listB))


  % translation of f_neg
  neg_translate:  LEMMA
     f_neg(translate_lit(k)) = translate_lit(-k)

  % it is possible to add an element to the greater list
  cons_cdr_inclusion:  LEMMA
    FORALL (f: fmla, cl, ck):
    subset(cl,  ck) =>
    subset[fmla](translate_clause(cl), cons[fmla](f, translate_clause(ck)))

  sq: VAR sequent

  % it is possible to add a list to the greater list
  append_inclusion:  LEMMA
    FORALL (cl, cm, sq):
    subset(cl, cm) => 
    subset[fmla](translate_clause(cl), append(sq, translate_clause(cm)))
  
  slA, slB: VAR (sentence_list?)

  ncl, nck, ncm : VAR (ne_tr_clause?)

  % nck included in cons(pivot, resolution(nck, ncl)
  translate_include_res :  LEMMA
    not_true_clauses(nck, ncl) AND exist_pivot?(nck, ncl) => 
    LET res = resolution(nck, ncl) IN 
    subset[fmla](translate_clause(nck),
             cons(translate_lit(find_pivot(nck, ncl)),
                  translate_clause(resolution(nck, ncl))))


  
  % ncl included in cons(pivot, resolution(nck, ncl)
  translate_include_res2 :  LEMMA
    not_true_clauses(nck, ncl) AND exist_pivot?(nck, ncl) => 
    LET res = resolution(nck, ncl) IN 
    subset[fmla](translate_clause(ncl),
             cons[fmla](translate_lit(-find_pivot(nck, ncl)),
                  translate_clause(resolution(nck, ncl))))

END trace2fmla

